<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Object-oriented Programming]]></title>
    <url>%2F2019%2F10%2F21%2FObject-oriented-Programming%2F</url>
    <content type="text"><![CDATA[虽然一直再写面向对象编程的语言，但是压根没有对象可以面对，希望写完这篇能有对象可以让我面对！！！ 简介 面向对象编程(Object-oriented Programming,缩写：OOP)是软件工程中一种具有对象概念的编程范式(Programming Paradigm)，同时也是一种程序开发的抽象方针，与之对应的编程范式还有：函数式编程(Functional Programming)、过程式编程(Procedural Programming)、响应式编程(Reactive Programming)等。 面向对象的程序设计（OOP）是面向过程程序设计的继承和发展，它不仅汲取了后者的精华，而且以一种更加接近人类思维的方式来分析和解决问题：程序是对现实世界的抽象和描述，现实世界的基本单元是物体，与之对应的，程序中的基本单元是对象。 面向对象思想认为：现实世界是由对象组成的，无论大到一个国家还是小到一个原子，都是如此。并且对象都由两部分组成： 描述对象状态或属性的数据（变量）以及描述对象行为或者功能的方法（函数）。并且与面向过程不同，面向对象是将数据和操作数据的函数紧密结合，共同构成对象来更加精确地描述现实世界，这是面向过程和面向对象两者最本质的区别。 对象与类在面向对象编程中，最常见的表现就是基于类(Class)来表现的，每一个对象实例都有具体的类，即对象的类型。使用类的面向对象编程也称为基于类的编程(Class-based programming)，如常见的Java，C++；而与之类似的有基于原型的编程(Prototype-based programming)，如JavaScript。 类：定义对象的数据格式(属性类型)和可用过程(方法)，同时也可能包含类成员的数据(如，常量)和过程(如，静态方法)，类其实就是对象的类型/原型(prototype)。 对象：类的实例，通过类实例化出来的具体实例。 面向对象的三大特征 面向对象的三大特征分别是：封装、继承、多态 。 封装(Encapsulation) 通过对象隐藏程序的具体实现细节，将数据与操作包装在一起，对象与对象之间通过消息传递机制实现互相通信（方法调用），具体的表现就是通过提供访问接口实现消息的传入传出。 封装常常会通过控制访问权限来控制对象之间的互访权限，常见的访问权限：公有(public)，私有(private)，保护(protected)。某些语言可能还会提供更加具体的访问控制，如，Java的package。 封装的意义：由于封装隐藏了具体的实现，如果实现的改变或升级对于使用方而言是无感知的，提高程序的可维护性；而且封装鼓励程序员把特定数据与对数据操作的功能打包在一起，有利于应用程序的去耦。 继承(Inheritance) 支持类的语言基本都支持继承，继承即类之间可以继承，通过继承得到的类称为子类，被继承的类为父类，子类相对于父类更加具体化。 子类具有自己特有的属性和方法，并且子类使用父类的方法也可以覆盖(重写)父类方法，在某些语言中还支持多继承，但是也带来了覆盖的复杂性。 继承的意义：继承是代码复用的基础机制 多态(Polymorphism) 多态发生在运行期间，即子类型多态，指的是子类型是一种多态的形式，不同类型的对象实体有统一接口，相同的消息给予不同的对象会引发不同的动作。 多态的意义：提供了编程的灵活性，简化了类层次结构外部的代码，使编程更加注重关注点分离(Separation of concerns，SoC) 关于面向对象编程的设计模式，可以参考谈谈面向对象编程 Python3面向对象编程 参考： 一文看懂Python面向对象编程核心思想(Python学习与Django入门必看) Python3 面向对象 Python面向对象编程 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#!/usr/bin/python3class people: #默认为公有变量 name = "" age = 0 #定义私有变量，即在变量前加入 __ __weight = 0 num = 0 #类专有方法，可重写 def __init__(self,n,a,w): self.name = n self.age = a self.__weight = w self.num += 1 #类方法一般第一个参数为self def speak(self): print('I am %s,and I am %d years old' % (self.name,self.age)) @classmethod def tol(cls): print("total numble of people is &#123;&#125;".format(self.num)) #这个为类方法，可直接使用people.tol() #student 继承people类class student(people): grade = "" def __init__(self,n,a,w,g): people.__init__(self,n,a,w) self.grade = g #方法重写 def speak(self): print("I am a %s student.\nMy name is %s" % (self.grade,self.name)) #类的私有方法 def __show_detail(self): print(self.name+"\t"+self.age+"\t"+self.__weight+"\n"+self.grade) #封装 def getWeight(self): return self.weight #python有多重继承class sample(people, student): tag = "" def __init__(self,n,a,w,g,t): people.__init__(self,n,a,w) student.__init__(self,g=g) tag = t s1 = student("Alice",16,47,"7th grades") python提供类的转有方法，可进行方法重写 1234567891011121314151617181920212223242526272829303132__init__ : 构造函数，在生成对象时调用__del__ : 析构函数，释放对象时使用__repr__ : 打印，转换__setitem__ : 按照索引赋值__getitem__: 按照索引获取值__len__: 获得长度__cmp__: 比较运算__call__: 函数调用__add__: 加运算__sub__: 减运算__mul__: 乘运算__truediv__: 除运算__mod__: 求余运算__pow__: 乘方反向运算符重载： __radd__: 加运算__rsub__: 减运算__rmul__: 乘运算__rdiv__: 除运算__rmod__: 求余运算__rpow__: 乘方 复合重载运算符__iadd__: 加运算__isub__: 减运算__imul__: 乘运算__idiv__: 除运算__imod__: 求余运算__ipow__: 乘方 注：__new__()方法python中定义的类在创建实例对象的时候，会自动执行init()方法，但是在执行init()方法之前，会执行new()方法。 new()的作用主要有两个。 1.在内存中为对象分配空间2.返回对象的引用。（即对象的内存地址） python解释器在获得引用的时候会将其传递给init()方法中的self。 12345678class A: def __new__(cls,*args,**kwargs): print('__new__') return super().__new__(cls)#这里一定要返回，否则__init__()方法不会被执行 def __init__(self):#这里的self就是new方法中的return返回值 print('__init__')a = A() 输出结果 12__new____init__ 我们一定要在new方法中最后调用 1return super().__new__(cls) 否则init方法不会被调用 123456789class A: def __new__(cls,*args,**kwargs): print('__new__') # return super().__new__(cls)#这里一定要返回，否则__init__()方法不会被执行 def __init__(self):#这里的self就是new方法中的return返回值 print('__init__')a = A() 输出 1__new__ 像以前一样，我们不写new方法试试 123456789class A: # def __new__(cls,*args,**kwargs): # print('__new__') # return super().__new__(cls)#这里一定要返回，否则__init__()方法不会被执行 def __init__(self):#这里的self就是new方法中的return返回值 print('__init__')a = A() 输出 1__init__ 私有属性-封装在实际开发中，对象 的 某些属性或方法 可能只希望 在对象的内部被使用，而 不希望在外部被访问到 定义方式 在 定义属性或方法时，在 属性名或者方法名前 增加 两个下划线__ 实际开发中私有属性也不是一层不变的。所以要给私有属性提供外部能够操作的方法。 7.1) 通过自定义get set方法提供私有属性的访问 12345678910111213141516class Person: def __init__(self, name, age): self.name = name self.__age = age #定义对私有属性的get方法，获取私有属性 def getAge(self): return self.__age #定义对私有属性的重新赋值的set方法，重置私有属性 def setAge(self,age): self.__age = ageperson1 = Person("tom",19)person1.setAge(20)print(person1.name,person1.getAge()) #tom 20 7.2) 调用property方法提供私有属性的访问 12345678910111213141516171819class Student: def __init__(self, name, age): self.name = name self.__age = age #定义对私有属性的get方法，获取私有属性 def getAge(self): return self.__age #定义对私有属性的重新赋值的set方法，重置私有属性 def setAge(self,age): self.__age = age p = property(getAge,setAge) #注意里面getAge,setAge不能带()s1 = Student("jack",22)s1.p = 23 #如果使用=,则会判断为赋值，调用setAge方法。print(s1.name,s1.p) #jack 23 ，直接使用s1.p会自动判断会取值，调用getAgeprint(s1.name,s1.getAge()) #jack 23,这个时候set,get方法可以单独使用。 7.3) 使用property标注提供私有属性的访问 注意： 一旦给函数加上一个装饰器@property,调用函数的时候不用加括号就可以直接调用函数了 12345678910111213141516171819202122232425262728293031class Teacher: def __init__(self, name, age,speak): self.name = name self.__age = age self.__speak = speak @property #注意1.@proterty下面默认跟的是get方法，如果设置成set会报错。 def age(self): return self.__age @age.setter #注意2.这里是使用的上面函数名.setter，不是property.setter. def age(self,age): if age &gt; 150 and age &lt;=0: #还可以在setter方法里增加判断条件 print("年龄输入有误") else: self.__age = age @property def for_speak(self): #注意2.这个同名函数名可以自定义名称，一般都是默认使用属性名。 return self.__speak @for_speak.setter def for_speak(self, speak): self.__speak = speakt1 = Teacher("herry",45,"Chinese")t1.age = 38 #注意4.有了property后，直接使用t1.age,而不是t1.age()方法了。t1.for_speak = "English" print(t1.name,t1.age,t1.for_speak) #herry 38 English C++面向对象编程 引用： c++面向对象程序设计总结(类的使用) C++ 类 &amp; 对象 C++面向对象基础 析构函数析构函是类的一个成员函数，名字由波浪号接类名构成。它没有返回值，也不接受参数： 12345class Foo&#123; public: ~Foo(); //析构函数 //... &#125;; 由于析构函数不接受参数，因此它不能被重载。对于一个给定类，只会由唯一一个析构函数。 在一个构造函数中，成员的初始化时在函数体执行之前完成的，且按照它们在类中出现的顺序进行初始化。在一个析构函数中，首先执行函数体，然后销毁成员。成员按初始化顺序的逆序进行销毁。 无论何时一个对象被销毁，就会自动调用其析构函数： ​ 1.变量在离开其作用域时被销毁​ 2.当一个对象被销毁时，其成员被销毁​ 3.容器(无论是标准容器还是数组)被销毁时，其元素被销毁​ 4.对于动态分配的对象，当对指向它的指针应用delete运算符时被销毁​ 5.对于临时对象，当创建它的完整表达式结束时被销毁 未完待续]]></content>
  </entry>
  <entry>
    <title><![CDATA[CVE-2019-14287]]></title>
    <url>%2F2019%2F10%2F18%2FCVE-2019-14287%2F</url>
    <content type="text"><![CDATA[引用： Potential bypass of Runas user restrictions (sudo official page) CVE-2019-14287：sudo权限绕过漏洞分析与复现 Linux Sudo暴userID提权漏洞CVE-2019-14287 sudo 用法简介 第一次复现CVE漏洞，十分滴激动 概述Sudo 的全称是“superuserdo”，它是Linux系统管理指令，允许用户在不需要切换环境的前提下以其它用户的权限运行应用程序或命令。通常以 root 用户身份运行命令，是为了减少 root 用户的登录和管理时间，同时提高安全性。 2019年10月14日，Sudo官方发布了Sudo 1.8.28版本，其中包含sudo root权限绕过漏洞（CVE-2019-14287）的补丁修复。 利用前提 sudo -v &lt; 1.8.28 知道当前用户的密码 当前用户存在于sudo权限列表 漏洞复现复现是在sudo 1.8.16的版本下进行的，对于低于1.8.28的版本都起作用 1test ALL=(ALL,!root) /usr/bin/id 其中，在sudoers配置中，以上语句代表着test用户，ALL=(ALL,!root)代表指定用户，即所有除root以外的用户都可运行命令/usr/bin/id 一般情况下，大多数Linux发行版的Runas规范（/etc /sudoers）都如下图（第三张图）所示，其中定义的ALL关键字将允许admin或sudo组中的用户以目标系统中的任意用户身份来运行命令 如果想利用该漏洞来实施攻击，用户需要拥有sudo权限，并允许用户使用任意用户ID来运行命令（如下图中定义了test用户可用id命令，但不能以root用户执行命令id（test ALL=(ALL,!root) /usr/bin/id））。通常来说，这意味着用户的sudoer项在Runas规范中定义了特殊的ALL值。如果sudoer策略允许的话，sudo支持由用户指定的用户名或用户ID来运行命令。 如果sudoer条目允许用户以任意用户身份运行命令（非root），那么攻击者就可以利用该漏洞来绕过这种限制了。 12sudo -u#-1 idsudo -u#4294967295 id 上述命令运行之后，将返回“0”。这是因为sudo命令本身已经在以用户ID“0”运行了，所以当sudo尝试将用户ID修改为“-1”时，不会发生任何变化。 但是，sudo日志条目中记录下的命令运行用户的ID为“4294967295”，而并非root用户（或用户ID为“0”），除此之外，因为用户ID是通过-u选项指定的，并且不会在密码数据库中存储，所以PAM会话模块也不会运行。 漏洞片段 漏洞CVE-2019-14287的源于sudo调用的系统函数setresuid()和setreuid()在参数处理中会将 -1（或其等效的无符号整数4294967295）误认为是 0，而这正好是 root 用户的UserID 。 实际上，只要用户的权限足够高，即拥有最高sudo权限的用户，并且在Runas规范中定义了ALL关键字的话，他们就可以运行Runas规范中明确禁止使用的那些root命令，而且以这种方式运行的命令其日志项所显示的目标用户为4294967295，而不是root。与此同时，在执行相应命令的过程中，PAM会话模块将不会运行。]]></content>
      <categories>
        <category>CVE</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>CVE</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pacman]]></title>
    <url>%2F2019%2F10%2F11%2Fpacman%2F</url>
    <content type="text"><![CDATA[包管理工具 Pacman 参考： Pacman Home Page pacman wiki](https://wiki.archlinux.org/index.php/Pacman_(简体中文)) ArchLinux 的 pacman 命令详解 警告: 在Arch下安装软件包时，未更新#升级软件包)系统前，不要更新软件包数据库（例如，可能出现某软件包不再出现在官方库）。操作时，应使用pacman -Syu *package_name*, 而不要使用（pacman -Sy *package_name*），否则可能会有依赖问题。参见 System maintenance (简体中文)#不支持部分升级#不支持部分升级) 和 BBS#89328. 安装指定的包安装或者升级单个软件包，或者一列软件包（包含依赖包），使用如下命令： 1$ pacman -S package_name1 package_name2 ... 用正则表达式安装多个软件包（参见 pacman 小贴士#巧用Bash语法): invalid section]和这个帖子）： 1$ pacman -S $(pacman -Ssq package_regex) 有时候在不同的软件仓库中，一个软件包有多个版本（比如[extra]和[testing]）。可以选择一个来安装： 1$ pacman -S extra/package_name 安装多个含有相似名称的软件包，而并非整个包组或全部匹配的软件包； 例如，plasma: 1$ pacman -S plasma-&#123;desktop,mediacenter,nm&#125; 当然，可以多层扩展，并不作限制： 1$ pacman -S plasma-&#123;workspace&#123;,-wallpapers&#125;,pa&#125; 安装包组一些包属于一个可以同时安装的软件包组。例如，运行下面的命令 1$ pacman -S gnome 会提醒用户选择 gnome 内需要安装的包。 有的包组包含大量的软件包，有时用户只需其中几个。除了逐一键入序号外，pacman 还支持选择或排除某个区间内的的软件包： 1Enter a selection (default=all): 1-10 15 这将选中序号 1 至 10 和 15 的软件包。而 1Enter a selection (default=all): ^5-8 ^2 将会选中除了序号 5 至 8 和 2 之外的所有软件包。 想要查看哪些包属于 gnome 组，运行： 1$ pacman -Sg gnome 也可以访问 https://www.archlinux.org/groups/ 查看可用的包组。 注意: 如果列表中的包已经安装在系统中，它会被重新安装，即使它已经是最新的。可以用 --needed 选项覆盖这种行为。 删除软件包删除单个软件包，保留其全部已经安装的依赖关系 1$ pacman -R package_name 删除指定软件包，及其所有没有被其他已安装软件包使用的依赖关系： 1$ pacman -Rs package_name 要删除软件包和所有依赖这个软件包的程序: 警告: 此操作是递归的，请小心检查，可能会一次删除大量的软件包。 1$ pacman -Rsc package_name 要删除软件包，但是不删除依赖这个软件包的其他程序： 1$ pacman -Rdd package_name pacman 删除某些程序时会备份重要配置文件，在其后面加上*.pacsave扩展名。-n 选项可以避免备份这些文件： 1$ pacman -Rn package_name 注意: pacman 不会删除软件自己创建的文件(例如主目录中的 .dot 文件不会被删除。 升级软件包 警告: * 建议所有用户都经常性的更新系统 Arch 只支持系统完整升级，详细参见不支持部分升级和#安装软件包#安装软件包)。 一个 pacman 命令就可以升级整个系统。花费的时间取决于系统有多老。这个命令会同步非本地(local)软件仓库并升级系统的软件包： 1$ pacman -Syu 查询包数据库pacman 使用 -Q 参数查询本地软件包数据库。参见： 1$ pacman -Q --help 使用 -S 参数来查询远程同步的数据库。参见： 1$ pacman -S --help pacman 可以在包数据库中查询软件包，查询位置包含了软件包的名字和描述： 1$ pacman -Ss string1 string2 ... 有时，-s的内置正则会匹配很多不需要的结果，所以应当指定仅搜索包名，而非描述或其他子段，下面的命令就会返回很多不必要结果: 1$ pacman -Ss '^vim-' 要查询已安装的软件包： 1$ pacman -Qs string1 string2 ... 按文件名查找软件库： 1$ pacman -Fs string1 string2 ... 显示软件包的详尽的信息： 1$ pacman -Si package_name 查询本地安装包的详细信息： 1$ pacman -Qi package_name 使用两个 -i 将同时显示备份文件和修改状态： 1$ pacman -Qii package_name 要获取已安装软件包所包含文件的列表： 1$ pacman -Ql package_name 查询远程库中软件包包含的文件： 1$ pacman -Fl package_name 检查软件包安装的文件是否都存在： 1$ pacman -Qk package_name 两个参数k将会执行一次更彻底的检查。 查询数据库获取某个文件属于哪个软件包： 1$ pacman -Qo /path/to/file_name 查询文件属于远程数据库中的哪个软件包： 1$ pacman -Fo /path/to/file_name 要罗列所有不再作为依赖的软件包(孤立orphans)： 1$ pacman -Qdt 要罗列所有明确安装而且不被其它包依赖的软件包： 1$ pacman -Qet 要显示软件包的依赖树： 1$ pactree package_name 检查一个安装的软件包被那些包依赖，可以使用 pkgtoolsAUR中的whoneeds: 1$ whoneeds package_name 或者pactree中使用-r: 1$ pactree -r package_name 数据库结构pacman数据库通常位于 /var/lib/pacman/sync. 对于每一个在/etc/pacman.conf中指定的软件仓库， 这里都有一个一致的数据库。数据库文件夹里每个tar.gz文件都包含着一个仓库的软件包信息。例如which 包: 1234% tree which-2.20-6 which-2.20-6|-- depends`-- desc 这个 depends 项列出了该软件的依赖包， 而desc有该包的介绍，例如文件大小和MD5值 。 清理软件包缓存pacman 将下载的软件包保存在 /var/cache/pacman/pkg/ 并且不会自动移除旧的和未安装版本的软件包，因此需要手动清理，以免该文件夹过于庞大。 使用内建选项即可清除未安装软件包的缓存： 1$ pacman -Sc 警告: 仅在确定当前安装的软件包足够稳定且不需要降级)时才执行清理。pacman -Sc仅会保留软件包的当前有效版本，旧版本的软件包被清理后，只能从其他地方如 Arch Linux Archive (简体中文))中获取了。 pacman -Scc 可以清理所有缓存，但这样 pacman 在重装软件包时就只能重新下载了。除非空间不足，否则不应这么做。 由于以上种种局限，建议使用专门的脚本去处理清理哪些、清理多少缓存： pacman-contrib 提供的 paccache 命令默认会删除近3个版本前的软件包 1# paccache -r Tip: 可以使用 pacman hooks 自动执行清理，这里是参考示例。 也可以自己设置保留最近几个版本： 1# paccache -rk 1 清理所有未安装包的缓存文件，再此运行paccache: 1# paccache -ruk0 更多功能参见paccache -h。 paccache，还可以使用 Arch User Repository) 中的 pkgcachecleanAUR： 1# pkgcacheclean ，以及pacleanerAUR，这两个是未来的替代工具. 其它命令升级系统时安装其他软件包： 1$ pacman -Syu package_name1 package_name2 ... 下载包而不安装它： 1$ pacman -Sw package_name 安装一个本地包(不从源里下载）： 1$ pacman -U /path/to/package/package_name-version.pkg.tar.xz 要将本地包保存至缓存，可执行： 1$ pacman -U file://path/to/package/package_name-version.pkg.tar.xz 安装一个远程包（不在 pacman 配置的源里面）： 1$ pacman -U http://www.example.com/repo/example.pkg.tar.xz 要禁用 -S, -U 和 -R 动作，可以使用 -p 选项. pacman 会列出需要安装和删除的软件，并在执行动作前要求需要的权限。 安装原因pacman数据库按照软件包被安装的原因，将其分为两类： 指定安装包：通过pacman-S或者-U指令安装的软件包。 依赖包：指定安装包所依赖的软件包，尽管命令中未传入，但仍然会被安装。 当安装软件包时，可以把安装原因指定设为依赖: 1# pacman -S --asdeps package_name 但是当重新安装该软件包时，安装原因将会被设为软件包所默认的。 指定安装的软件包列表可用pacman -Qe, 已安装的依赖包可用pacman -Qd获取。 改变某个已安装软件包的安装原因，可以执行： 1# pacman -D --asdeps package_name 使用--asexplicit改为指定安装。 查询一个包含具体文件的包名同步文件数据库: 1# pacman -Fy 查询包含某个文件的包名，比如: 123456# pacman -Fs pacmancore/pacman 5.0.1-4 usr/bin/pacman usr/share/bash-completion/completions/pacmanextra/xscreensaver 5.36-1 usr/lib/xscreensaver/pacman 提示： 可以设置一个 crontab 或者 systemd timer 来定期同步文件信息数据库。 如果需要高级功能请安装 pkgfile，它使用一个单独的数据库来保存文件和它们所关联的软件包的信息。 ArchLinux的版本库里面包括： core-核心软件包 extra-其他常用软件 community-社区软件包，譬如Mysql等。 testing-正在测试阶段，还没有正式加入源的软件包。通常软件版本比较新，但是不是非常稳定 release-已经发布的软件包 unstable-非正式的软件包，可能包括以前版本的软件或者测试软件 因为Pacman的软件都是从源里面更新，因此在/etc/pacman.d里面配置这些软件源的地址。在/etc/pacman.d目录里面分别有上面几种软件类型对应的文件名，可以自己手工配置这些软件源的地址。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ArchLinux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js_banned]]></title>
    <url>%2F2019%2F10%2F09%2Fjs-banned%2F</url>
    <content type="text"><![CDATA[序：原本想从网页上搞些网课答案下来，懒得用爬虫，便想直接复制粘贴更方便，结果遭遇了网页的复制和控制台禁用，本着求知的精神，就有了这篇文章。 网页中部分禁用及破解 利用js实现 禁用F12 12345678910&lt;script&gt;document.οnkeydοwn=function (e)&#123; var currKey=0,evt=e||window.event; currKey=evt.keyCode||evt.which||evt.charCode; if (currKey == 123) &#123; window.event.cancelBubble = true; window.event.returnValue = false; &#125; &#125;&lt;/script&gt; 123456789101112131415161718&lt;script&gt;var h = window.innerHeight,w=window.innerWidth;//禁用右键 （防止右键查看源代码）window.oncontextmenu=function()&#123;&lt;br&gt; return false;&lt;br&gt;&#125;//在本网页的任何键盘敲击事件都是无效操作 （防止F12和shift+ctrl+i调起开发者工具）window.onkeydown = window.onkeyup = window.onkeypress = function () &#123; window.event.returnValue = false; return false;&#125;//如果用户在工具栏调起开发者工具，那么判断浏览器的可视高度和可视宽度是否有改变，如有改变则关闭本页面window.onresize = function () &#123; if (h != window.innerHeight||w!=window.innerWidth)&#123; window.close(); window.location = "about:blank"; &#125;&#125;; &lt;/script&gt; 1234567891011121314151617181920212223242526272829&lt;script&gt;(document).keydown(function() &#123; return key(arguments[0])&#125;);function key(e) &#123; //f12 var keynum; if (window.event) &#123; keynum = e.keyCode; &#125; else if (e.which) &#123; keynum = e.which; &#125; if (keynum == 123) &#123; window.close(); return false; &#125; //ctrl+shift if (event.shiftKey&amp;&amp;event.ctrlKey) &#123; window.close(); return false; &#125;&#125;function Click() &#123; window.event.returnValue = false;&#125;document.oncontextmenu = Click;// 右击&lt;/script&gt; 禁用右键菜单 123&lt;script&gt;document.oncontextmenu = function()&#123;return false;&#125;&lt;/script&gt; 禁用文本选择 123&lt;script&gt;document.onselectstart = function()&#123;return true;&#125;&lt;/script&gt; 一个网页：当禁用js时无法打开，不禁用js，禁止复制、看源码、右键菜单、F12、文本选择 适合学习 原网页：http://www.gebidemengmianren.com/eryadaanfufei/198.html?btwaf=99961145 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta http-equiv="Cache-Control" content="no-transform" /&gt; &lt;meta http-equiv="Cache-Control" content="no-siteapp" /&gt; &lt;meta name="applicable-device" content="pc,mobile"&gt; &lt;meta name="MobileOptimized" content="width" /&gt; &lt;meta name="HandheldFriendly" content="true" /&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt; &lt;noscript&gt; &lt;meta http-equiv="refresh" content="0; url=http://www.gebidemengmianren.com/my-plugins/no-js.html" /&gt;&lt;/noscript&gt; &lt;link type="text/css" media="all" href="http://www.gebidemengmianren.com/wp-content/cache/autoptimize/css/autoptimize_fbc8fb4f52ab77546156f37a7cb23309.css" rel="stylesheet" /&gt; &lt;title&gt;当代中国政府与政治2019 &amp;#8211; 隔壁的萌面人&lt;/title&gt; &lt;link rel='stylesheet' id='dashicons-css' href='http://www.gebidemengmianren.com/wp-includes/css/dashicons.min.css?ver=6f0a90e1258fc95d5c87f731d5ec4784' type='text/css' media='all' /&gt; &lt;script type='text/javascript' src='http://www.gebidemengmianren.com/wp-includes/js/jquery/jquery.js?ver=1.12.4'&gt;&lt;/script&gt; &lt;script type='text/javascript' src='http://www.gebidemengmianren.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.4.1'&gt;&lt;/script&gt; &lt;!--[if lt IE 9]&gt; &lt;script type='text/javascript' src='http://www.gebidemengmianren.com/wp-content/themes/wellington/js/html5shiv.min.js?ver=3.7.3'&gt;&lt;/script&gt; &lt;![endif]--&gt; &lt;script type='text/javascript'&gt; var wellington_menu_title = "\u83dc\u5355"; &lt;/script&gt; &lt;script type='text/javascript' src='http://www.gebidemengmianren.com/wp-content/themes/wellington/js/navigation.js?ver=20160719'&gt;&lt;/script&gt; &lt;link rel='prev' title='密码保护：当代中国经济2019修正版' href='http://www.gebidemengmianren.com/eryadaanfufei/196.html' /&gt; &lt;link rel='next' title='密码保护：当政府遇上互联网2019' href='http://www.gebidemengmianren.com/eryadaanfufei/200.html' /&gt; &lt;link rel="canonical" href="http://www.gebidemengmianren.com/eryadaanfufei/198.html" /&gt; &lt;script type="text/javascript"&gt; document.ondragstart = function() &#123; return false &#125;; //for image document.oncontextmenu = function(e) &#123; return false &#125;; //for right click disable document.onkeydown = function(e) &#123; if (e.ctrlKey &amp;&amp; (e.keyCode === 65 || e.keyCode === 67 || e.keyCode === 73 || e.keyCode === 74 || e.keyCode === 80 || e.keyCode === 83 || e.keyCode === 85 || e.keyCode === 86 || e.keyCode === 117 )) &#123; return false; &#125; if (e.keyCode == 18 || e.keyCode == 123) &#123; return false &#125; &#125;; &lt;/script&gt; &lt;link rel="icon" href="http://www.gebidemengmianren.com/wp-content/uploads/2019/08/g-150x150.jpg" sizes="32x32" /&gt; &lt;link rel="icon" href="http://www.gebidemengmianren.com/wp-content/uploads/2019/08/g.jpg" sizes="192x192" /&gt; &lt;link rel="apple-touch-icon-precomposed" href="http://www.gebidemengmianren.com/wp-content/uploads/2019/08/g.jpg" /&gt; &lt;meta name="msapplication-TileImage" content="http://www.gebidemengmianren.com/wp-content/uploads/2019/08/g.jpg" /&gt;&lt;/head&gt;&lt;body class="post-template-default single single-post postid-198 single-format-standard post-layout-one-column" id='body'&gt; &lt;script type="text/javascript"&gt; ! function(t, e) &#123; "object" == typeof exports &amp;&amp; "object" == typeof module ? module.exports = e() : "function" == typeof define &amp;&amp; define.amd ? define([], e) : "object" == typeof exports ? exports.ClipboardJS = e() : t.ClipboardJS = e() &#125;(this, function() &#123; return function(t) &#123; function e(o) &#123; if (n[o]) return n[o].exports; var r = n[o] = &#123; i: o, l: !1, exports: &#123;&#125; &#125;; return t[o].call(r.exports, r, r.exports, e), r.l = !0, r.exports &#125; var n = &#123;&#125;; return e.m = t, e.c = n, e.i = function(t) &#123; return t &#125;, e.d = function(t, n, o) &#123; e.o(t, n) || Object.defineProperty(t, n, &#123; configurable: !1, enumerable: !0, get: o &#125;) &#125;, e.n = function(t) &#123; var n = t &amp;&amp; t.__esModule ? function() &#123; return t.default &#125; : function() &#123; return t &#125;; return e.d(n, "a", n), n &#125;, e.o = function(t, e) &#123; return Object.prototype.hasOwnProperty.call(t, e) &#125;, e.p = "", e(e.s = 3) &#125;([function(t, e, n) &#123; var o, r, i; ! function(a, c) &#123; r = [t, n(7)], o = c, void 0 !== (i = "function" == typeof o ? o.apply(e, r) : o) &amp;&amp; (t.exports = i) &#125;(0, function(t, e) &#123; "use strict"; function n(t, e) &#123; if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function") &#125; var o = function(t) &#123; return t &amp;&amp; t.__esModule ? t : &#123; default: t &#125; &#125;(e), r = "function" == typeof Symbol &amp;&amp; "symbol" == typeof Symbol.iterator ? function(t) &#123; return typeof t &#125; : function(t) &#123; return t &amp;&amp; "function" == typeof Symbol &amp;&amp; t.constructor === Symbol &amp;&amp; t !== Symbol.prototype ? "symbol" : typeof t &#125;, i = function() &#123; function t(t, e) &#123; for (var n = 0; n &lt; e.length; n++) &#123; var o = e[n]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o &amp;&amp; (o.writable = !0), Object.defineProperty(t, o.key, o) &#125; &#125; return function(e, n, o) &#123; return n &amp;&amp; t(e.prototype, n), o &amp;&amp; t(e, o), e &#125; &#125;(), a = function() &#123; function t(e) &#123; n(this, t), this.resolveOptions(e), this.initSelection() &#125; return i(t, [&#123; key: "resolveOptions", value: function() &#123; var t = arguments.length &gt; 0 &amp;&amp; void 0 !== arguments[0] ? arguments[0] : &#123;&#125;; this.action = t.action, this.container = t.container, this.emitter = t.emitter, this.target = t.target, this.text = t.text, this.trigger = t.trigger, this.selectedText = "" &#125; &#125;, &#123; key: "initSelection", value: function() &#123; this.text ? this.selectFake() : this.target &amp;&amp; this.selectTarget() &#125; &#125;, &#123; key: "selectFake", value: function() &#123; var t = this, e = "rtl" == document.documentElement.getAttribute("dir"); this.removeFake(), this.fakeHandlerCallback = function() &#123; return t.removeFake() &#125;, this.fakeHandler = this.container.addEventListener("click", this.fakeHandlerCallback) || !0, this.fakeElem = document.createElement("textarea"), this.fakeElem.style.fontSize = "12pt", this.fakeElem.style.border = "0", this.fakeElem.style.padding = "0", this.fakeElem.style.margin = "0", this.fakeElem.style.position = "absolute", this.fakeElem.style[e ? "right" : "left"] = "-9999px"; var n = window.pageYOffset || document.documentElement.scrollTop; this.fakeElem.style.top = n + "px", this.fakeElem.setAttribute("readonly", ""), this.fakeElem.value = this.text, this.container.appendChild(this.fakeElem), this.selectedText = (0, o.default)(this.fakeElem), this.copyText() &#125; &#125;, &#123; key: "removeFake", value: function() &#123; this.fakeHandler &amp;&amp; (this.container.removeEventListener("click", this.fakeHandlerCallback), this.fakeHandler = null, this.fakeHandlerCallback = null), this.fakeElem &amp;&amp; (this.container.removeChild(this.fakeElem), this.fakeElem = null) &#125; &#125;, &#123; key: "selectTarget", value: function() &#123; this.selectedText = (0, o.default)(this.target), this.copyText() &#125; &#125;, &#123; key: "copyText", value: function() &#123; var t = void 0; try &#123; t = document.execCommand(this.action) &#125; catch (e) &#123; t = !1 &#125; this.handleResult(t) &#125; &#125;, &#123; key: "handleResult", value: function(t) &#123; this.emitter.emit(t ? "success" : "error", &#123; action: this.action, text: this.selectedText, trigger: this.trigger, clearSelection: this.clearSelection.bind(this) &#125;) &#125; &#125;, &#123; key: "clearSelection", value: function() &#123; this.trigger &amp;&amp; this.trigger.focus(), window.getSelection().removeAllRanges() &#125; &#125;, &#123; key: "destroy", value: function() &#123; this.removeFake() &#125; &#125;, &#123; key: "action", set: function() &#123; var t = arguments.length &gt; 0 &amp;&amp; void 0 !== arguments[0] ? arguments[0] : "copy"; if (this._action = t, "copy" !== this._action &amp;&amp; "cut" !== this._action) throw new Error('Invalid "action" value, use either "copy" or "cut"') &#125;, get: function() &#123; return this._action &#125; &#125;, &#123; key: "target", set: function(t) &#123; if (void 0 !== t) &#123; if (!t || "object" !== (void 0 === t ? "undefined" : r(t)) || 1 !== t.nodeType) throw new Error('Invalid "target" value, use a valid Element'); if ("copy" === this.action &amp;&amp; t.hasAttribute("disabled")) throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute'); if ("cut" === this.action &amp;&amp; (t.hasAttribute("readonly") || t.hasAttribute("disabled"))) throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes'); this._target = t &#125; &#125;, get: function() &#123; return this._target &#125; &#125;]), t &#125;(); t.exports = a &#125;) &#125;, function(t, e, n) &#123; function o(t, e, n) &#123; if (!t &amp;&amp; !e &amp;&amp; !n) throw new Error("Missing required arguments"); if (!c.string(e)) throw new TypeError("Second argument must be a String"); if (!c.fn(n)) throw new TypeError("Third argument must be a Function"); if (c.node(t)) return r(t, e, n); if (c.nodeList(t)) return i(t, e, n); if (c.string(t)) return a(t, e, n); throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList") &#125; function r(t, e, n) &#123; return t.addEventListener(e, n), &#123; destroy: function() &#123; t.removeEventListener(e, n) &#125; &#125; &#125; function i(t, e, n) &#123; return Array.prototype.forEach.call(t, function(t) &#123; t.addEventListener(e, n) &#125;), &#123; destroy: function() &#123; Array.prototype.forEach.call(t, function(t) &#123; t.removeEventListener(e, n) &#125;) &#125; &#125; &#125; function a(t, e, n) &#123; return u(document.body, t, e, n) &#125; var c = n(6), u = n(5); t.exports = o &#125;, function(t, e) &#123; function n() &#123;&#125; n.prototype = &#123; on: function(t, e, n) &#123; var o = this.e || (this.e = &#123;&#125;); return (o[t] || (o[t] = [])).push(&#123; fn: e, ctx: n &#125;), this &#125;, once: function(t, e, n) &#123; function o() &#123; r.off(t, o), e.apply(n, arguments) &#125; var r = this; return o._ = e, this.on(t, o, n) &#125;, emit: function(t) &#123; var e = [].slice.call(arguments, 1), n = ((this.e || (this.e = &#123;&#125;))[t] || []).slice(), o = 0, r = n.length; for (o; o &lt; r; o++) n[o].fn.apply(n[o].ctx, e); return this &#125;, off: function(t, e) &#123; var n = this.e || (this.e = &#123;&#125;), o = n[t], r = []; if (o &amp;&amp; e) for (var i = 0, a = o.length; i &lt; a; i++) o[i].fn !== e &amp;&amp; o[i].fn._ !== e &amp;&amp; r.push(o[i]); return r.length ? n[t] = r : delete n[t], this &#125; &#125;, t.exports = n &#125;, function(t, e, n) &#123; var o, r, i; ! function(a, c) &#123; r = [t, n(0), n(2), n(1)], o = c, void 0 !== (i = "function" == typeof o ? o.apply(e, r) : o) &amp;&amp; (t.exports = i) &#125;(0, function(t, e, n, o) &#123; "use strict"; function r(t) &#123; return t &amp;&amp; t.__esModule ? t : &#123; default: t &#125; &#125; function i(t, e) &#123; if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function") &#125; function a(t, e) &#123; if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return !e || "object" != typeof e &amp;&amp; "function" != typeof e ? t : e &#125; function c(t, e) &#123; if ("function" != typeof e &amp;&amp; null !== e) throw new TypeError("Super expression must either be null or a function, not " + typeof e); t.prototype = Object.create(e &amp;&amp; e.prototype, &#123; constructor: &#123; value: t, enumerable: !1, writable: !0, configurable: !0 &#125; &#125;), e &amp;&amp; (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e) &#125; function u(t, e) &#123; var n = "data-clipboard-" + t; if (e.hasAttribute(n)) return e.getAttribute(n) &#125; var l = r(e), s = r(n), f = r(o), d = "function" == typeof Symbol &amp;&amp; "symbol" == typeof Symbol.iterator ? function(t) &#123; return typeof t &#125; : function(t) &#123; return t &amp;&amp; "function" == typeof Symbol &amp;&amp; t.constructor === Symbol &amp;&amp; t !== Symbol.prototype ? "symbol" : typeof t &#125;, h = function() &#123; function t(t, e) &#123; for (var n = 0; n &lt; e.length; n++) &#123; var o = e[n]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o &amp;&amp; (o.writable = !0), Object.defineProperty(t, o.key, o) &#125; &#125; return function(e, n, o) &#123; return n &amp;&amp; t(e.prototype, n), o &amp;&amp; t(e, o), e &#125; &#125;(), p = function(t) &#123; function e(t, n) &#123; i(this, e); var o = a(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this)); return o.resolveOptions(n), o.listenClick(t), o &#125; return c(e, t), h(e, [&#123; key: "resolveOptions", value: function() &#123; var t = arguments.length &gt; 0 &amp;&amp; void 0 !== arguments[0] ? arguments[0] : &#123;&#125;; this.action = "function" == typeof t.action ? t.action : this.defaultAction, this.target = "function" == typeof t.target ? t.target : this.defaultTarget, this.text = "function" == typeof t.text ? t.text : this.defaultText, this.container = "object" === d(t.container) ? t.container : document.body &#125; &#125;, &#123; key: "listenClick", value: function(t) &#123; var e = this; this.listener = (0, f.default)(t, "click", function(t) &#123; return e.onClick(t) &#125;) &#125; &#125;, &#123; key: "onClick", value: function(t) &#123; var e = t.delegateTarget || t.currentTarget; this.clipboardAction &amp;&amp; (this.clipboardAction = null), this.clipboardAction = new l.default(&#123; action: this.action(e), target: this.target(e), text: this.text(e), container: this.container, trigger: e, emitter: this &#125;) &#125; &#125;, &#123; key: "defaultAction", value: function(t) &#123; return u("action", t) &#125; &#125;, &#123; key: "defaultTarget", value: function(t) &#123; var e = u("target", t); if (e) return document.querySelector(e) &#125; &#125;, &#123; key: "defaultText", value: function(t) &#123; return u("text", t) &#125; &#125;, &#123; key: "destroy", value: function() &#123; this.listener.destroy(), this.clipboardAction &amp;&amp; (this.clipboardAction.destroy(), this.clipboardAction = null) &#125; &#125;], [&#123; key: "isSupported", value: function() &#123; var t = arguments.length &gt; 0 &amp;&amp; void 0 !== arguments[0] ? arguments[0] : ["copy", "cut"], e = "string" == typeof t ? [t] : t, n = !!document.queryCommandSupported; return e.forEach(function(t) &#123; n = n &amp;&amp; !!document.queryCommandSupported(t) &#125;), n &#125; &#125;]), e &#125;(s.default); t.exports = p &#125;) &#125;, function(t, e) &#123; function n(t, e) &#123; for (; t &amp;&amp; t.nodeType !== o;) &#123; if ("function" == typeof t.matches &amp;&amp; t.matches(e)) return t; t = t.parentNode &#125; &#125; var o = 9; if ("undefined" != typeof Element &amp;&amp; !Element.prototype.matches) &#123; var r = Element.prototype; r.matches = r.matchesSelector || r.mozMatchesSelector || r.msMatchesSelector || r.oMatchesSelector || r.webkitMatchesSelector &#125; t.exports = n &#125;, function(t, e, n) &#123; function o(t, e, n, o, r) &#123; var a = i.apply(this, arguments); return t.addEventListener(n, a, r), &#123; destroy: function() &#123; t.removeEventListener(n, a, r) &#125; &#125; &#125; function r(t, e, n, r, i) &#123; return "function" == typeof t.addEventListener ? o.apply(null, arguments) : "function" == typeof n ? o.bind(null, document).apply(null, arguments) : ("string" == typeof t &amp;&amp; (t = document.querySelectorAll(t)), Array.prototype.map.call( t, function(t) &#123; return o(t, e, n, r, i) &#125;)) &#125; function i(t, e, n, o) &#123; return function(n) &#123; n.delegateTarget = a(n.target, e), n.delegateTarget &amp;&amp; o.call(t, n) &#125; &#125; var a = n(4); t.exports = r &#125;, function(t, e) &#123; e.node = function(t) &#123; return void 0 !== t &amp;&amp; t instanceof HTMLElement &amp;&amp; 1 === t.nodeType &#125;, e.nodeList = function(t) &#123; var n = Object.prototype.toString.call(t); return void 0 !== t &amp;&amp; ("[object NodeList]" === n || "[object HTMLCollection]" === n) &amp;&amp; "length" in t &amp;&amp; (0 === t.length || e.node(t[0])) &#125;, e.string = function(t) &#123; return "string" == typeof t || t instanceof String &#125;, e.fn = function(t) &#123; return "[object Function]" === Object.prototype.toString.call(t) &#125; &#125;, function(t, e) &#123; function n(t) &#123; var e; if ("SELECT" === t.nodeName) t.focus(), e = t.value; else if ("INPUT" === t.nodeName || "TEXTAREA" === t.nodeName) &#123; var n = t.hasAttribute("readonly"); n || t.setAttribute("readonly", ""), t.select(), t.setSelectionRange(0, t.value.length), n || t.removeAttribute("readonly"), e = t.value &#125; else &#123; t.hasAttribute("contenteditable") &amp;&amp; t.focus(); var o = window.getSelection(), r = document.createRange(); r.selectNodeContents(t), o.removeAllRanges(), o.addRange(r), e = o.toString() &#125; return e &#125; t.exports = n &#125;]) &#125;); &lt;/script&gt; &lt;script&gt; var clipboard = new ClipboardJS('.entry-content', &#123; text: function() &#123; //return ''; &#125; &#125;); clipboard.on('success', function(e) &#123; //console.log(e); &#125;); clipboard.on('error', function(e) &#123; //console.log(e); &#125;); &lt;/script&gt; &lt;script type="text/javascript"&gt; str = "\x77\x77\x77\x2e\x67\x65\x62\x69\x64\x65\x6d\x65\x6e\x67\x6d\x69\x61\x6e\x72\x65\x6e\x2e\x63\x6f\x6d"; if (window["\x64\x6f\x63\x75\x6d\x65\x6e\x74"]["\x6c\x6f\x63\x61\x74\x69\x6f\x6e"]["\x68\x6f\x73\x74"] != str) &#123; location["\x68\x72\x65\x66"] = location["\x68\x72\x65\x66"]["\x72\x65\x70\x6c\x61\x63\x65"](window["\x64\x6f\x63\x75\x6d\x65\x6e\x74"]["\x6c\x6f\x63\x61\x74\x69\x6f\x6e"]["\x68\x6f\x73\x74"], str); &#125; &lt;/script&gt; &lt;div id="header-top" class="header-bar-wrap"&gt;&lt;/div&gt; &lt;div id="page" class="hfeed site"&gt; &lt;a class="skip-link screen-reader-text" href="#content"&gt;Skip to content&lt;/a&gt; &lt;header id="masthead" class="site-header clearfix" role="banner"&gt; &lt;div class="header-main container clearfix"&gt; &lt;div id="logo" class="site-branding clearfix"&gt; &lt;p class="site-title"&gt;&lt;a href="http://www.gebidemengmianren.com/" rel="home"&gt;隔壁的萌面人&lt;/a&gt;&lt;/p&gt; &lt;p class="site-description"&gt;最专业的大学资料分享平台&lt;/p&gt; &lt;/div&gt; &lt;div class="header-widgets clearfix"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div id="main-navigation-wrap" class="primary-navigation-wrap"&gt; &lt;nav id="main-navigation" class="primary-navigation navigation container clearfix" role="navigation"&gt; &lt;ul id="menu-menu-1" class="main-navigation-menu"&gt; &lt;li id="menu-item-2987" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2987"&gt;&lt;a href="http://www.gebidemengmianren.com/question-and-answer"&gt;常见问题解答&lt;/a&gt;&lt;/li&gt; &lt;li id="menu-item-2988" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-2988"&gt;&lt;a href="http://www.gebidemengmianren.com/category/zhihuishu"&gt;智慧树&lt;/a&gt;&lt;/li&gt; &lt;li id="menu-item-2989" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-2989"&gt;&lt;a href="http://www.gebidemengmianren.com/category/eryadaanfufei"&gt;尔雅&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;/div&gt; &lt;/header&gt; &lt;div id="content" class="site-content container clearfix"&gt; &lt;section id="primary" class="content-single content-area"&gt; &lt;main id="main" class="site-main" role="main"&gt; &lt;article id="post-198" class="post-198 post type-post status-publish format-standard post-password-protected hentry category-eryadaanfufei"&gt; &lt;header class="entry-header"&gt; &lt;div class="entry-meta"&gt;&lt;span class="meta-date"&gt;&lt;a href="http://www.gebidemengmianren.com/eryadaanfufei/198.html" title="下午10:02" rel="bookmark"&gt;&lt;time class="entry-date published updated" datetime="2019-03-20T22:02:27+00:00"&gt;2019年3月20日&lt;/time&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class="meta-author"&gt; &lt;span class="author vcard"&gt;&lt;a class="url fn n" href="http://www.gebidemengmianren.com/author/meng" title="View all posts by gebilaowang" rel="author"&gt;gebilaowang&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt; &lt;h1 class="entry-title"&gt;密码保护：当代中国政府与政治2019&lt;/h1&gt; &lt;/header&gt; &lt;footer class="entry-footer"&gt; &lt;div class="entry-categories clearfix"&gt; &lt;span class="meta-categories"&gt; &lt;a href="http://www.gebidemengmianren.com/category/eryadaanfufei" rel="category tag"&gt;尔雅&lt;/a&gt; &lt;/span&gt;&lt;/div&gt; &lt;nav class="navigation post-navigation" role="navigation"&gt; &lt;h2 class="screen-reader-text"&gt;文章导航&lt;/h2&gt; &lt;div class="nav-links"&gt; &lt;div class="nav-previous"&gt;&lt;a href="http://www.gebidemengmianren.com/eryadaanfufei/196.html" rel="prev"&gt;&lt;span class="screen-reader-text"&gt;Previous Post:&lt;/span&gt;当代中国经济2019修正版&lt;/a&gt;&lt;/div&gt; &lt;div class="nav-next"&gt;&lt;a href="http://www.gebidemengmianren.com/eryadaanfufei/200.html" rel="next"&gt;&lt;span class="screen-reader-text"&gt;Next Post:&lt;/span&gt;当政府遇上互联网2019&lt;/a&gt;&lt;/div&gt; &lt;/div&gt; &lt;/nav&gt; &lt;/footer&gt; &lt;/article&gt; &lt;div id="comments" class="comments-area"&gt;&lt;/div&gt; &lt;/main&gt; &lt;/section&gt; &lt;section id="secondary" class="sidebar widget-area clearfix sidebar-my-flag" role="complementary"&gt; &lt;aside id="search-6" class="widget widget_search clearfix"&gt; &lt;form role="search" method="get" class="search-form" action="http://www.gebidemengmianren.com/"&gt; &lt;label&gt; &lt;span class="screen-reader-text"&gt;Search for:&lt;/span&gt; &lt;input type="search" class="search-field" placeholder="搜索 &amp;hellip;" value="" name="s" title="Search for:" /&gt; &lt;/label&gt; &lt;button type="submit" class="search-submit"&gt; &lt;span class="genericon-search"&gt;&lt;/span&gt; &lt;span class="screen-reader-text"&gt;Search&lt;/span&gt; &lt;/button&gt;&lt;/form&gt; &lt;/aside&gt; &lt;/section&gt; &lt;/div&gt; &lt;a href="http://www.gebidemengmianren.com/question-and-answer" target="_blank"&gt; &lt;div class="livechat-girl animated"&gt; &lt;img class="girl" src="http://www.gebidemengmianren.com/kefu/images/en_3.png"&gt; &lt;div class="livechat-hint rd-notice-tooltip rd-notice-type-success rd-notice-position-left single-line show_hint"&gt; &lt;div class="rd-notice-content"&gt; 我来帮您！&lt;/div&gt; &lt;/div&gt; &lt;div class="animated-circles"&gt; &lt;div class="circle c-1"&gt;&lt;/div&gt; &lt;div class="circle c-2"&gt;&lt;/div&gt; &lt;div class="circle c-3"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/a&gt; &lt;link href="http://www.xuexianswer.com/kefu/css/css.css" rel="stylesheet" media="screen"&gt; &lt;script type="text/javascript" src="http://www.xuexianswer.com/kefu/js/jquery-1.7.1.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="http://www.xuexianswer.com/kefu/js/kefu.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="http://www.gebidemengmianren.com/kefu/js/en_3.js"&gt;&lt;/script&gt; &lt;div id="footer" class="footer-wrap"&gt; &lt;footer id="colophon" class="site-footer container clearfix" role="contentinfo"&gt; &lt;div align="center"&gt; &lt;a href="http://www.gebidemengmianren.com/" style='text-decoration:none; color:#939393;'&gt;&amp;copy;隔壁的萌面人&lt;/a&gt; &lt;/br&gt; &lt;a href="http://www.beian.miit.gov.cn/" style='text-decoration:none;color:#939393;'&gt;渝ICP备17014860号-2&lt;/a&gt; &lt;/br&gt; &lt;a target="_blank" href="" style="display:inline-block;text-decoration:none;height:20px;line-height:20px;"&gt;&lt;img src="http://www.xuexianswer.com/beian/logo.png" style="float:left;" /&gt; &lt;p style="float:left;height:20px;line-height:20px;margin: 0px 0px 0px 5px; color:#939393;"&gt;渝公网安备 50011402500333号&lt;/p&gt; &lt;/a&gt; &lt;br&gt; &lt;span align="right" style="display:inline-block;float:right;color:#303030;text-decoration:none;"&gt;友情链接： &lt;a href="http://www.xuexianswer.com/" style="color:#303030;text-decoration:none;"&gt;萌面人资料铺&lt;/a&gt;&amp;nbsp; &lt;a href="http://www.mengmianren.com/" style="color:#303030;text-decoration:none;"&gt;萌面人网&lt;/a&gt;&amp;nbsp; &lt;a href="http://mengmianren.cc/" style="color:#303030;text-decoration:none;"&gt;萌面人CC网&lt;/a&gt;&amp;nbsp; &lt;a href="http://mengmianren.pro/" style="color:#303030;text-decoration:none;"&gt;萌面人PRO网&lt;/a&gt; &lt;/span&gt;&lt;/div&gt; &lt;/footer&gt; &lt;/div&gt; &lt;/div&gt; &lt;meta http-equiv="imagetoolbar" content="no"&gt; &lt;script type="text/javascript"&gt; document.oncontextmenu = function() &#123; return false; &#125;; document.onselectstart = function() &#123; if (event.srcElement.type != "text" &amp;&amp; event.srcElement.type != "textarea" &amp;&amp; event.srcElement.type != "password") &#123; return false; &#125; else &#123; return true; &#125; &#125;; if (window.sidebar) &#123; document.onmousedown = function(e) &#123; var obj = e.target; if (obj.tagName.toUpperCase() == 'SELECT' || obj.tagName.toUpperCase() == "INPUT" || obj.tagName.toUpperCase() == "TEXTAREA" || obj.tagName.toUpperCase() == "PASSWORD") &#123; return true; &#125; else &#123; return false; &#125; &#125;; &#125; document.ondragstart = function() &#123; return false; &#125;; &lt;/script&gt; &lt;script type='text/javascript'&gt; var pvcArgsFrontend = &#123; "mode": "ajax", "requestURL": "http:\/\/www.gebidemengmianren.com\/wp-content\/plugins\/post-views-counter\/includes\/ajax.php", "postID": "198", "nonce": "8b28046242" &#125;; &lt;/script&gt; &lt;script type='text/javascript' src='http://www.gebidemengmianren.com/wp-content/plugins/post-views-counter/js/frontend.js?ver=1.3.1'&gt;&lt;/script&gt; &lt;script type='text/javascript' src='http://www.gebidemengmianren.com/wp-content/plugins/bj-lazy-load/js/bj-lazy-load.min.js?ver=2'&gt;&lt;/script&gt; &lt;script type='text/javascript' src='http://www.gebidemengmianren.com/wp-includes/js/wp-embed.min.js?ver=6f0a90e1258fc95d5c87f731d5ec4784'&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 破解方法 查看源码的一个简单方法： 在浏览器的地址栏输入以下东西，即可查看源码 1view-source:url 假如是通过js禁用的话，可以在控制台下输入 1234document.body.oncontextmenu="return true";//右键菜单document.body.onselectstart="return true";//文本选择]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git]]></title>
    <url>%2F2019%2F09%2F23%2Fgit%2F</url>
    <content type="text"><![CDATA[Git 引用： Git详细使用教程 Git教程 Git本地服务器搭建及使用方法 Git原理入门解析 使用原理视角看Git Git 的诞生： 很多人都知道，Linus 在 1991 年创建了开源的 Linux，从此，Linux 系统不断发展，已经成为最大的服务器系统软件了。 Linus 虽然创建了 Linux，但 Linux 的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为 Linux 编写代码，那 Linux 的代码是如何管理的呢？ 事实是，在 2002 年以前，世界各地的志愿者把源代码文件通过 diff 的方式发给 Linus，然后由 Linus 本人通过手工方式合并代码！ 你也许会想，为什么 Linus 不把 Linux 代码放到版本控制系统里呢？不是有 CVS、SVN 这些免费的版本控制系统吗？因为 Linus 坚定地反对 CVS 和 SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比 CVS、SVN 好用，但那是付费的，和 Linux 的开源精神不符。 不过，到了 2002 年，Linux 系统已经发展了十年了，代码库之大让 Linus 很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是 Linus 选择了一个商业的版本控制系统 BitKeeper，BitKeeper 的东家 BitMover 公司出于人道主义精神，授权 Linux 社区免费使用这个版本控制系统。 安定团结的大好局面在 2005 年就被打破了，原因是 Linux 社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发 Samba 的 Andrew 试图破解 BitKeeper 的协议（这么干的其实也不只他一个），被 BitMover 公司发现了（监控工作做得不错！），于是 BitMover 公司怒了，要收回 Linux 社区的免费使用权。 Linus 可以向 BitMover 公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是：Linus 花了两周时间自己用 C 写了一个分布式版本控制系统，这就是 Git！一个月之内，Linux 系统的源码已经由 Git 管理了！牛是怎么定义的呢？大家可以体会一下。 Git 迅速成为最流行的分布式版本控制系统，尤其是 2008 年，GitHub 网站上线了，它为开源项目免费提供 Git 存储，无数开源项目开始迁移至 GitHub，包括 jQuery，PHP，Ruby 等等。 历史就是这么偶然，如果不是当年 BitMover 公司威胁 Linux 社区，可能现在我们就没有免费而超级好用的 Git 了。 Git是什么Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。Git与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。 先说集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。 那分布式版本控制系统与集中式版本控制系统有何不同呢？首先，分布式版本控制系统根本没有 “中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件 A，你的同事也在他的电脑上改了文件 A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。集中式版本控制系统最大的毛病就是必须联网才能工作。 Git与SVN的区别GIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。Git 与 SVN 区别点： GIT是分布式的，SVN不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。 2.GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。 GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。 GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。 GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。 Git原理详细图文解释可参考此篇文章使用原理视角看Git，里面详细用图文解释了git的版本控制原理 git的工作流程大概如下： 克隆 Git 资源作为工作目录。 在克隆的资源上添加或修改文件。 如果其他人修改了，你可以更新资源。 在提交前查看修改。 提交修改。 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。 基本概念我们先来理解下Git 工作区、暂存区和版本库概念 工作区：就是你项目的目录（可见目录）。 缓存区：英文叫stage, 或index。一般存放在”git目录”下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。 版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。 下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系： 如果我们要对项目进行管理，就切换到该项目目录底下，使用git init命令，进行初始化 1$git init git init 命令只会做一件事，就是在项目的根目录下创建一个 .git 的子目录，用来保存当前项目的一些版本信息，我们可以继续使用 tree -a 命令查看该目录的完整结构，如下： 1234567891011121314151617181920212223242526272829$tree -a.└── .git ├── HEAD ├── branches ├── config ├── description ├── hooks │ ├── applypatch-msg.sample │ ├── commit-msg.sample │ ├── fsmonitor-watchman.sample │ ├── post-update.sample │ ├── pre-applypatch.sample │ ├── pre-commit.sample │ ├── pre-push.sample │ ├── pre-rebase.sample │ ├── pre-receive.sample │ ├── prepare-commit-msg.sample │ └── update.sample ├── index ├── info │ └── exclude ├── objects │ ├── .DS_Store │ ├── info │ └── pack └── refs ├── heads └── tags Git目录解析config 目录config 是仓库的配置文件，一个典型的配置文件如下，我们创建的远端，分支都在等信息都在配置文件里有表现；fetch 操作的行为也是在这里配置的： 12345678910111213141516[core] repositoryformatversion = 0 filemode = false bare = false logallrefupdates = true symlinks = false ignorecase = true[remote &quot;origin&quot;] url = git@github.com:yanhaijing/zepto.fullpage.git fetch = +refs/heads/*:refs/remotes/origin/*[branch &quot;master&quot;] remote = origin merge = refs/heads/master[branch &quot;dev&quot;] remote = origin merge = refs/heads/dev objects 目录Git 可以通过一种算法可以得到任意文件的 “指纹”（40 位 16 进制数字），然后通过文件指纹存取数据，存取的数据都位于 objects 目录。 例如我们可以手动创建一个测试文本文件并使用 git add . 命令来观察 .git 文件夹出现的变化： 12$ touch test.txt$ git add . git add . 命令就是用于把当前新增的变化添加进 Git 本地仓库的，在我们使用后，我们惊奇的发现 .git 目录下的 objects/ 目录下多了一个目录： 12345678910111213141516171819202122$ tree -a.├── .git│ ├── HEAD│ ├── branches│ ├── config│ ├── description│ ├── hooks│ │ ├── 节省篇幅..省略..│ ├── index│ ├── info│ │ └── exclude│ ├── objects│ │ ├── .DS_Store│ │ ├── e6│ │ │ └── 9de29bb2d1d6434b8b29ae775ad8c2e48c5391│ │ ├── info│ │ └── pack│ └── refs│ ├── heads│ └── tags└── test.txt 我们可以使用 git hash-object test.txt 命令来看看刚才我们创建的 test.txt 的 “文件指纹”： 12$ git hash-object test.txte69de29bb2d1d6434b8b29ae775ad8c2e48c5391 这时候我们可以发现，新创建的目录 e6 其实是该文件哈希值的前两位，这其实是 Git 做的一层类似于索引一样的东西，并且默认采用 16 进制的两位数来当索引，是非常合适的。 这边其实引入了Sha-1算法 SHA-1将文件中的内容通过通过计算生成一个 40 位长度的hash值。 Sha-1的非常有特点： 由文件内容计算出的hash值 hash值相同，文件内容相同 对于添加的内容，无论我们执行多少次，都会得到相同的结果。因此，文件的sha-1值是可以作为文件的唯一 id 。同时，它还有一个额外的功能，校验文件完整性。 objects 目录下有 3 种类型的数据： Blob； Tree; Commit； 文件都被存储为 blob 类型的文件，文件夹被存储为 tree 类型的文件，创建的提交节点被存储为 Commit 类型的数据； 一般我们系统中的目录(tree)，在 Git 会像下面这样存储： 而 Commit 类型的数据则整合了 tree 和 blob 类型，保存了当前的所有变化，例如我们可以再在刚才的目录下新建一个目录，并添加一些文件试试： 1234567891011121314151617181920212223242526$ mkdir test$ touch test/test.file$ tree -a.├── .git│ ├── HEAD│ ├── branches│ ├── config│ ├── description│ ├── hooks│ │ ├── 节省篇幅..省略..│ ├── index│ ├── info│ │ └── exclude│ ├── objects│ │ ├── .DS_Store│ │ ├── e6│ │ │ └── 9de29bb2d1d6434b8b29ae775ad8c2e48c5391│ │ ├── info│ │ └── pack│ └── refs│ ├── heads│ └── tags├── test│ └── test.file└── test.txt 提交完Commit在观察变化 123456789101112131415161718192021222324252627282930313233343536373839$ git commit -a -m "test: 新增测试文件夹和测试文件观察.git文件的变化"[master (root-commit) 30d51b1] test: 新增测试文件夹和测试文件观察.git文件的变化 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 test.txt$ tree -a.├── .git│ ├── COMMIT_EDITMSG│ ├── HEAD│ ├── branches│ ├── config│ ├── description│ ├── hooks│ │ ├── ...省略...│ ├── index│ ├── info│ │ └── exclude│ ├── logs│ │ ├── HEAD│ │ └── refs│ │ └── heads│ │ └── master│ ├── objects│ │ ├── .DS_Store│ │ ├── 30│ │ │ └── d51b1edd2efd551dd6bd52d4520487b5708c0e│ │ ├── 5e│ │ │ └── fb9bc29c482e023e40e0a2b3b7e49cec842034│ │ ├── e6│ │ │ └── 9de29bb2d1d6434b8b29ae775ad8c2e48c5391│ │ ├── info│ │ └── pack│ └── refs│ ├── heads│ │ └── master│ └── tags├── test│ └── test.file└── test.txt 首先我们可以观察到我们提交了一个 Commit 的时候在第一句话里面返回了一个短的像是哈希值一样的东西： [master (root-commit) 30d51b1] 中 的 30d51b1，对应的我们也可以在 objects 找到刚才 commit 的对象，我们可以使用 git cat-file -p 命令输出一下当前文件的内容： 123456$ git cat-file -p 30d5tree 5efb9bc29c482e023e40e0a2b3b7e49cec842034author 我没有三颗心脏 1565742122 +0800committer 我没有三颗心脏 1565742122 +0800test: 新增测试文件夹和测试文件观察.git文件的变化 我们发现这里面有提交的内容信息、作者信息、提交者信息以及 commit message，当然我们可以进一步看到提交的内容具体有哪些： 12$ git cat-file -p 5efb100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 test.txt 我们再试着提交一个 commit 来观察变化: 12345678910111213$ touch test/test2.file$ git commit -a -m "test: 新增加一个 commit 以观察变化."[master 9dfabac] test: 新增加一个 commit 以观察变化. 2 files changed, 0 insertions(+), 0 deletions(-) create mode 100644 test/test.file create mode 100644 test/test2.file$ git cat-file -p 9dfabactree c562bfb9441352f4c218b0028148289f1ea7d7cdparent 30d51b1edd2efd551dd6bd52d4520487b5708c0eauthor 龙滔 1565878699 +0800committer 龙滔 1565878699 +0800test: 新增加一个 commit 以观察变化. 可以观察到这一次的 commit 多了一个 parent 的行，其中的 “指纹” 和上一次的 commit 一模一样，当我们提交两个 commit 之后我们的 Git 仓库可以简化为下图： 说明：其中因为我们 test 文件夹新增了文件，也就是出现了变化，所以就被标识成了新的 tree 类型的对象； refs 目录refs 目录存储都是引用文件，如本地分支，远端分支，标签等 refs/heads/xxx 本地分支 refs/remotes/origin/xxx 远端分支 refs/tags/xxx 本地tag 引用文件的内容都是 40 位长度的 commit 12$ cat .git/refs/heads/master9dfabac68470a588a4b4a78742249df46438874a 这就像是一个指针一样，它指向了你的最后一次提交（例如这里就指向了第二次提交的 commit），我们补充上分支信息，现在的 Git 仓库就会像下图所示： HEAD 目录HEAD 目录下存储的是当前所在的位置，其内容是分支的名称： 12$ cat HEADref: refs/heads/master 我们再补充上 HEAD 的信息，现在的 Git 仓库如下图所示： git的冲突处理以下主要参考以下两篇文章 git冲突处理图解 使用原理视角看 Git 讲完git的目录结构，我们可知道分支在git中仅是一个指针，但是在分布式工作中，无可避免的会遇见冲突（分支的合并） 图上的情况，并不是移动分支指针就能够解决问题的，它需要一种合并策略。首先我们需要明确的是谁与谁的合并，是 2，3 与 4， 5， 6 两条线的合并吗？其实并不是的，真实合并的其实只有 3 和 6，因为每一次的提交都包含了项目完整的快照，即合并只是 tree 与 tree 的合并。 这可能说起来有点绕，我们可以先来想一个简单的算法，用来比较 3 和 6 的不同。如果我们只是单纯的比较 3 和 6 的信息，其实并没有意义，因为它们之间并不能确切的表达出当前的冲突状态。因此我们需要选取它们两个分支的分歧点（merge base）作为参考点，进行比较。 首先我们把 1 作为基础，然后把 1、3、6 中所有的文件做一个列表，然后依次遍历这个列表中的文件。我们现在拿列表中的一个文件进行举例，把在提交在 1、3、6 中的该文件分别称为版本1、版本3、版本6，可能出现如下几种情况： 1. 版本 1、版本 3、版本 6 的 “指纹” 值都相同：这种情况则说明没有冲突；2. 版本 3 or 版本 6 至少有一个与版本 1 状态相同（指的是指纹值相同或都不存在）：这种情况可以自动合并，比如版本 1 中存在一个文件，在版本 3 中没有对该文件进行修改，而版本 6 中删除了这个文件，则以版本 6 为准就可以了；3. 版本 3 or 版本 6 都与版本 1 的状态不同：这种情况复杂一些，自动合并策略很难生效了，所以需要手动解决； merge 操作在解决完冲突后，我们可以将修改的内容提交为一个新的提交，这就是 merge。 可以看到 merge 是一种不修改分支历史提交记录的方式，这也是我们常用的方式。但是这种方式在某些情况下使用起来不太方便，比如我们创建了一些提交发送给管理者，管理者在合并操作中产生了冲突，还需要去解决冲突，这无疑增加了他人的负担。 而我们使用 rebase 可以解决这种问题。 rebase 操作假设我们的分支结构如下： rebase 会把从 Merge Base 以来的所有提交，以补丁的形式一个一个重新打到目标分支上。这使得目标分支合并该分支的时候会直接 Fast Forward（可以简单理解为直接后移指针），即不会产生任何冲突。提交历史是一条线，这对强迫症患者可谓是一大福音。 其实 rebase 主要是在 .git/rebase-merge 下生成了两个文件，分别为 git-rebase-todo 和 done 文件，这两个文件的作用光看名字就大概能够看得出来。git-rebase-todo 中存放了 rebase 将要操作的 commit，而 done 存放正操作或已操作完毕的 commit，比如我们这里，git-rebase-todo 存放了 4、5、6 三个提交。 首先 Git 会把 4 这个 commit 放入 done，表示正在操作 4，然后将 4 以补丁的方式打到 3 上，形成了新的 4`，这一步是可能产生冲突的，如果有冲突，需要解决冲突之后才能继续操作。 接着按同样的方式把 5、6 都放入 done，最后把指针移动到最新的提交 6 上，就完成了 rebase 的操作。 从刚才的图中，我们就可以看到 rebase 的一个缺点，那就是修改了分支的历史提交。如果已经将分支推送到了远程仓库，会导致无法将修改后的分支推送上去，必须使用 -f 参数（force）强行推送。 所以使用 rebase 最好不要在公共分支上进行操作。 Squash and Merge 操作简单说就是压缩提交，把多次的提交融合到一个 commit 中，这样的好处不言而喻，我们着重来讨论一下实现的技术细节，还是以我们上面最开始的分支情况为例，首先，Git 会创建一个临时分支，指向当前 feature 的最新 commit。 然后按照上面 rebase 的方式，变基到 master 的最新 commit 处。 接着用 rebase 来 squash 之，压缩这些提交为一个提交。 最后以 fast forward 的方式合并到 master 中。 可见此时 master 分支多且只多了一个描述了这次改动的提交，这对于大型工程，保持主分支的简洁易懂有很大的帮助。 git基本操作git配置Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方： /etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 –system 选项，读写的就是这个文件。~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 –global 选项，读写的就是这个文件。当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。 在 Windows 系统上，Git 会找寻用户主目录下的 .gitconfig 文件。主目录即 $HOME 变量指定的目录，一般都是 C:\Documents and Settings\$USER。 此外，Git 还会尝试找寻 /etc/gitconfig 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。 1.用户信息 git config user在使用git提交前，一定要配置提交者个人的用户名称和电子邮件 12$ git config --global user.name "wyndam"$ git config --global user.email "only.night@qq.com" 如果用了--global选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉–global选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。 2.文本编辑器设置Git默认使用的文本编辑器, 一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置： 1$ git config --global core.editor emacs 3.差异分析工具还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话： 1$ git config --global merge.tool vimdiff Git 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。当然，你也可以指定使用自己开发的工具。 4.查看配置信息 git config --list要检查已有的配置信息，可以使用 git config –list 命令： 12345678910111213141516171819$ git config --listcore.symlinks=falsecore.autocrlf=truecolor.diff=autocolor.status=autocolor.branch=autocolor.interactive=truepack.packsizelimit=2ghelp.format=htmlhttp.sslcainfo=E:/Platform/Git/mingw32/ssl/certs/ca-bundle.crtdiff.astextplain.textconv=astextplainrebase.autosquash=truefilter.lfs.clean=git-lfs clean %ffilter.lfs.smudge=git-lfs smudge %ffilter.lfs.required=trueuser.name=Wyndamuser.email=only.night@qq.comcore.editor=subl 有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig），不过最终 Git 实际采用的是最后一个。这些配置我们也可以在 ~/.gitconfig 或 /etc/gitconfig 看到，如下所示： 123456789[filter &quot;lfs&quot;] clean = git-lfs clean %f smudge = git-lfs smudge %f required = true[user] name = Wyndam email = only.night@qq.com[core] editor = subl 也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样： 123$ git config user.emailmagic@outlook.com 新建git本地仓库Git 使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令。在执行完成 git init 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变（不像 SVN 会在每个子目录生成 .svn 目录，Git 只在仓库的根目录生成 .git 目录）。 在工作目录下使用命令git init 1$git init (path) 若没有指定path，则默认当前目录下建立git仓库。 初始化后，会在工作目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交： 12$ git add . (path|file)$ git commit -m "inital commit" 以上命令就是把文件/文件夹提交至仓库中，若是远程仓库，还需要命令git push 复制远程仓库 git clone我们使用 git clone 从现有 Git 仓库中拷贝项目（类似 svn checkout）。克隆仓库的命令格式为: 1$ git clone &lt;repo|url&gt; (&lt;directory&gt;) 参数说明： \&lt;repo|url&gt;：为Git仓库的地址url \：为将git储存至目标目录，若为空，则默认本地目录 Git支持ssh，git，http和https协议（此外，可以使用ftp和ftps进行获取，但这效率低下且不建议使用；请勿使用它）。 ssh://[user@]host.xz[:port]/path/to/repo.git/ git://host.xz[:port]/path/to/repo.git/ http[s]://host.xz[:port]/path/to/repo.git/ ftp[s]://host.xz[:port]/path/to/repo.git/ 也可以用类似scp的语法进行clone（实际上是ssh协议） [user@]host.xz:path/to/repo.git/ 查看状态git statusgit status 以查看在你上次提交之后是否有修改。我演示该命令的时候加了 -s 参数，以获得简短的结果输出。如果没加该参数会详细输出内容： 123456789$ git statusOn branch masterInitial commitChanges to be committed: (use "git rm --cached &lt;file&gt;..." to unstage) new file: README.md 从缓存中移除文件 git reset HEADgit reset HEAD 命令用于取消已缓存的内容。我们先改动文件 README 文件，内容如下： 123#README.md##This is readme markdown file HelloWorld.java 文件修改为： 12345public class HelloWorld &#123; public static void main(String[] args) &#123; System.out.println("Hello World!"); &#125;&#125; 现在两个文件修改后，都提交到了缓存区，我们现在要取消其中一个的缓存，操作如下： 12345678910111213$ git status -s M HelloWorld.java M README.md$ git add .$ git status -sM HelloWorld.javaM README.md$ git reset HEAD -- HelloWorld.javaUnstaged changes after reset:M HelloWorld.java$ git status -s M HelloWorld.javaM README.md 现在执行 git commit，只会将 README.md 文件的改动提交，而 HelloWorld.java 是没有的。 12345$ git commit -m "change"[master ad5f6fe] change 1 file changed, 1 insertion(+), 1 deletion(-)$ git status -s M HelloWorld.java 可以看到 HelloWorld.java 文件的修改并为提交。这时我们可以使用以下命令将 HelloWorld.java 的修改提交： 123456$ git commit -am "修改 HelloWorld.java 文件"[master a055c08] 修改 HelloWorld.java 文件 1 file changed, 1 insertion(+), 1 deletion(-)$ git statusOn branch masternothing to commit, working directory clean 简而言之，执行 git reset HEAD 以取消之前 git add 添加，但不希望包含在下一提交快照中的缓存。 从缓存以及工作目录删除文件 git rmgit rm 会将条目从缓存区中移除。这与 git reset HEAD 将条目取消缓存是有区别的。 “取消缓存”的意思就是将缓存区恢复为我们做出修改之前的样子。默认情况下，git rm file 会将文件从缓存区和你的硬盘中（工作目录）删除。如果你要在工作目录中留着该文件，可以使用 git rm –cached：如我们删除 hello.java文件：(包括在本地目录下的文件，可能需要选项-f) 1234$ git rm HelloWorld.javarm 'HelloWorld.java'$ lsREADME.md 不从工作区中删除文件： 1234$ git rm README.md --cachedrm 'README.md'$ lsREADME.md 修改缓存中文件名 git mvgit mv 命令做得所有事情就是 git rm –cached 命令的操作， 重命名磁盘上的文件，然后再执行 git add 把新文件添加到缓存区。我们先把刚移除的 README 添加回来： 1234$ git add README.md$ git mv README.md README$ lsREADME Git分支管理几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。有人把 Git 的分支模型称为”必杀技特性”，而正是因为它，将 Git 从版本控制系统家族里区分出来。创建分支命令： 1234567891011#创建分支$ git branch [branch name]#切换分支$ git checkout [branch name]#创建并切换分支$ git checkout -b [branch name]#合并分支$ git merge#删除分支$ git branch -d [branch name] Git分支管理12345678910111213141516171819202122#列出问题$ git branch#无参数时，该命令会列出本地分支$ git branch* master#创建分支$ git branch testbranch$ git branch* branch testbranch$ git branch testing$ git branch -D testingDeleted branch testing (was 84b13b9).#合并分支,将分支[branch name] 合并到当前分支$ git merge [branch name]$ git merge testUpdating b04e1bb..d3c2604Fast-forward testB | 0 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 testB Git 查看提交历史 git log123456789101112131415161718192021222324252627282930313233343536373839404142434445464748$ git logcommit d3c26045edb80258c9b785f5cd70cff6c7130003 (HEAD -&gt; master, origin/test, test)Author: Magic &lt;xxx@qq.com&gt;Date: Sat Sep 28 23:41:42 2019 +0800 ffcommit b04e1bba77e04dde1e5649aaf32ef7029a1dbd5f (origin/master)Author: Magic &lt;xxx@qq.com&gt;Date: Sat Sep 28 23:40:34 2019 +0800 fuck#可以用 --oneline 选项来查看历史记录的简洁的版本$ git log --onelined3c2604 (HEAD -&gt; master, origin/test, test) ffb04e1bb (origin/master) fuck#可以用 --graph 选项，查看历史中什么时候出现了分支、合并。以下为相同的命令，开启了拓扑图选项：$ git log --graph* commit d3c26045edb80258c9b785f5cd70cff6c7130003 (HEAD -&gt; master, origin/test, test)| Author: Magic-King &lt;xxx@qq.com&gt;| Date: Sat Sep 28 23:41:42 2019 +0800|| ff|* commit b04e1bba77e04dde1e5649aaf32ef7029a1dbd5f (origin/master) Author: Magic-King &lt;xxx@qq.com&gt; Date: Sat Sep 28 23:40:34 2019 +0800 fuck #可以用 ‘--reverse’参数来逆向显示所有日志$ git log --reversecommit b04e1bba77e04dde1e5649aaf32ef7029a1dbd5f (origin/master)Author: Magic-King &lt;xxx@qq.com&gt;Date: Sat Sep 28 23:40:34 2019 +0800 fuckcommit d3c26045edb80258c9b785f5cd70cff6c7130003 (HEAD -&gt; master, origin/test, test)Author: Magic-King &lt;xxx@qq.com&gt;Date: Sat Sep 28 23:41:42 2019 +0800 ff Git 标签 git tag如果达到一个重要的阶段，并希望永远记住那个特别的提交快照，可以使用 git tag 给它打上标签。比如说，我们想为我们的项目发布一个”1.0”版本。 可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）”v1.0”的标签。-a 选项意为”创建一个带注解的标签”。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。 12345678910111213$ git log --oneline --graph --decorate* 2b5970d (HEAD -&gt; master, tag: v1.0) Merge branch 'change_site'|\| * d17a0a0 (change_site) change the site* | e2714c9 新增加一行|/* 202199d (newtest) add test.txt file* a055c08 修改 HelloWorld.java 文件* ad5f6fe 修改* c2c167c 修改HelloWorld.java文件* f9393bf third commit ``* 316fafc second commit* fdd5c53 inital commit 如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。例如，假设我们发布了提交 85fc7e7(上面实例最后一行)，但是那时候忘了给它打标签。 我们现在也可以： 1234567891011121314$ git tag -a v0.9 a055c08$ git log --oneline --graph --decorate* 2b5970d (HEAD -&gt; master, tag: v1.0) Merge branch 'change_site'|\| * d17a0a0 (change_site) change the site* | e2714c9 新增加一行|/* 202199d (newtest) add test.txt file* a055c08 (tag: v0.9) 修改 HelloWorld.java 文件* ad5f6fe 修改* c2c167c 修改HelloWorld.java文件* f9393bf third commit ``* 316fafc second commit* fdd5c53 inital commit 如果要查看所有标签可以使用以下命令： 1$ git tag 指定标签信息命令： 1git tag -a &lt;tagname&gt; -m "标签" PGP签名标签命令： 1git tag -s &lt;tagname&gt; -m "标签" Git 远程仓库的操作查看当前远程库12345$ git remoteorigin$ git remote -vorigin git@xx.xx.xxx.xxx:/test.git (fetch)origin git@xx.xx.xxx.xxx:/test.git (push) 提取远程库1$ git pull 该命令就是在执行 git fetch 之后紧接着执行 git merge 远程分支到你所在的任意分支。假设你配置好了一个远程仓库，并且你想要提取更新的数据，你可以首先执行 git fetch [alias] 告诉 Git 去获取它有你没有的数据，然后你可以执行 git merge [alias]/[branch] 以将服务器上的任何更新（假设有人这时候推送到服务器了）合并到你的当前分支。 接下来我们在 Github 上点击”test.txt” 并在线修改它。之后我们在本地更新修改。 123456789101112$ git fetch originremote: Counting objects: 3, done.remote: Compressing objects: 100% (3/3), done.remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0Unpacking objects: 100% (3/3), done.From github.com:onlynight/GitAdd 774112b..37be49b master -&gt; origin/master$ git merge origin/masterUpdating 774112b..37be49bFast-forward test.txt | 1 + 1 file changed, 1 insertion(+) 推送远程库推送你的新分支与数据到某个远端仓库命令 12345#该命令将你的 [branch] 分支推送成为 [alias] 远程仓库上的 [branch] 分支$ git push [alias] [branch]$ git push origin masterEverything up-to-date 删除远程分支注意：如果要删除远程分支同样也是使用push命令，在分支前加上”:”表示删除远程分支，代码如下 1$ git push origin :&lt;branch name&gt; 删除本地仓库的远程仓库链接删除远程仓库你可以使用命令 1234567891011121314git remote rm [alias]$ git remote -vorigin git@github.com:onlynight/GitAdd.git (fetch)origin git@github.com:onlynight/GitAdd.git (push)$ git remote -vorigin git@github.com:onlynight/GitAdd.git (fetch)origin git@github.com:onlynight/GitAdd.git (push)origin2 git@github.com:onlnynight/GitAdd.git (fetch)origin2 git@github.com:onlnynight/GitAdd.git (push)$ git remote rm origin2$ git remote -vorigin git@github.com:onlynight/GitAdd.git (fetch)origin git@github.com:onlynight/GitAdd.git (push) 忽略特殊文件有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次git status都会显示Untracked files ...，有强迫症的童鞋心里肯定不爽。 好在Git考虑到了大家的感受，这个问题解决起来也很简单，在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。 不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：https://github.com/github/gitignore 忽略文件的原则是： 忽略操作系统自动生成的文件，比如缩略图等； 忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件； 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。 举个例子： 假设你在Windows下进行Python开发，Windows会自动在有图片的目录下生成隐藏的缩略图文件，如果有自定义目录，目录下就会有Desktop.ini文件，因此你需要忽略Windows自动生成的垃圾文件： 1234567891011121314# Windows:Thumbs.dbehthumbs.dbDesktop.ini# Python:*.py[cod]*.so*.egg*.egg-infodistbuild# My configurations:db.inideploy_key_rsa 最后一步就是把.gitignore也提交到Git，就完成了！当然检验.gitignore的标准是git status命令是不是说working directory clean。 使用Windows的童鞋注意了，如果你在资源管理器里新建一个.gitignore文件，它会非常弱智地提示你必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为.gitignore了。 有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被.gitignore忽略了： 1234$ git add App.classThe following paths are ignored by one of your .gitignore files:App.classUse -f if you really want to add them. 如果你确实想添加该文件，可以用-f强制添加到Git： 1$ git add -f App.class 或者你发现，可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查： 12$ git check-ignore -v App.class.gitignore:3:*.class App.class Git会告诉我们，.gitignore的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。 后续：搭建git服务器]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Regular Expression]]></title>
    <url>%2F2019%2F09%2F22%2Fre%2F</url>
    <content type="text"><![CDATA[正则表达式的规则常用元字符 代码 说明 . 匹配除换行符以外的任意字符 \w 匹配字母或数字或下划线 \s 匹配任意的空白符 \d 匹配数字 \b 匹配单词的开始或结束 ^ 匹配字符串的开始 $ 匹配字符串的结束 常用限定符 代码/语法 说明 * 重复零次或更多次 + 重复一次或更多次 ? 重复零次或一次 {n} 重复n次 {n,} 重复n次或更多次 {n,m} 重复n到m次 常用反义词 代码/语法 说明 \W 匹配任意不是字母，数字，下划线，汉字的字符 \S 匹配任意不是空白符的字符 \D 匹配任意非数字的字符 \B 匹配不是单词开头或结束的位置 [^x] 匹配除了x以外的任意字符 [^aeiou] 匹配除了aeiou这几个字母以外的任意字符 预定义字符集表 \d \d匹配任何十进制数，它相当于类[0-9]，\d+如果需要匹配一位或者多位数的数字时用 \D \D匹配任何非数字字符，它相当于类[^0-9] \s \s匹配任何空白字符，它相当于类[\t\n\r\f\v] \S \S匹配任何非空白字符，它相当于类[^\t\n\r\f\v] \w \w匹配包括下划线在内任何字母数字字符，它相当于类 {a-z,A-Z,0-9,_} \W \W匹配非任何字母数字字符包括下划线在内，它相当于类 { ^a-z,A-Z,0-9,_} \A 仅匹配字符串开头,同^ \Z 仅匹配字符串结尾，同$ \b b匹配一个单词边界，也就是指单词和空格间的位置 \B [^\b] 常用正则表达式 引用：史上最全常用正则表达式大全 一、校验数字的表达式 数字：^[0-9]*$ n位的数字：^\d{n}$ 至少n位的数字：^\d{n,}$ m-n位的数字：^\d{m,n}$ 零和非零开头的数字：^(0|[1-9][0-9]*)$ 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$ 带1-2位小数的正数或负数：^(\-)?\d+(\.\d{1,2})?$ 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$ 有两位小数的正实数：^[0-9]+(.[0-9]{2})?$ 有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$ 非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\+?[1-9][0-9]*$ 非零的负整数：^\-[1-9][]0-9&quot;*$ 或 ^-[1-9]\d*$ 非负整数：^\d+$ 或 ^[1-9]\d*|0$ 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$ 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$ 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$ 正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$ 负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$ 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$ 二、校验字符的表达式 汉字：^[\u4e00-\u9fa5]{0,}$ 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$ 长度为3-20的所有字符：^.{3,20}$ 由26个英文字母组成的字符串：^[A-Za-z]+$ 由26个大写英文字母组成的字符串：^[A-Z]+$ 由26个小写英文字母组成的字符串：^[a-z]+$ 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$ 由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$ 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$ 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$ 可以输入含有^%&amp;’,;=?$\”等字符：[^%&amp;&#39;,;=?$\x22]+ 12 禁止输入含有~的字符：[^~\x22]+ 三、特殊需求表达式 Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$ 域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.? InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$ 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$ 电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$ 国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7} 身份证号(15位、18位数字)：^\d{15}|\d{18}$ 短身份证号码(数字、字母x结尾)：^([0-9]){7,18}(x|X)?$或^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$ 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$ 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$ 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)： ^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$ 日期格式：^\d{4}-\d{1,2}-\d{1,2} 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$ 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ 钱的输入格式： 有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：^[1-9][0-9]*$ 这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ 一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ 这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ 必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：^[0-9]+(.[0-9]{2})?$ 这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$ 这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样： ^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$ 到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须： ^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$ 备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里 xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$ 中文字符的正则表达式：[\u4e00-\u9fa5] 双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1)) 空白行的正则表达式：\n\s*\r(可以用来删除空白行)* HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力) 首尾空白字符的正则表达式：^\s*|\s*$或 (^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式) 腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始) 中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字) IP地址：\d+\.\d+\.\d+\.\d+ (提取IP地址时有用) IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)) Python re模块人生苦短，不如Python。 引用：python基础—re模块—正则表达式 python从1.5版本起增加re模块为自带的模块，提供了Perl风格的正则表达式模式 以下是python re库的常用函数 函数 描述 compile(pattern[, flags]) 根据包含正则表达式的字符串创建模式对象 search(pattern, string[, flags]) 在字符串中查找模式 match(pattern, string[, flags]) 在字符串开头匹配模式 split(pattern, string[, maxsplit=0]) 根据模式来分割字符串 findall(pattern, string) 返回一个列表，其中包含字符串中所有与模式匹配的子串 sub(pat, repl, string[, count=0]) 将字符串中与模式pat匹配的子串都替换为repl escape(string) 对字符串中所有的正则表达式特殊字符都进行转义 re.compile() 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。语法格式为：re.compile(pattern[, flags])实例&gt;&gt;&gt;import re&gt;&gt;&gt; pattern = re.compile(r'\d+') # 用于匹配至少一个数字&gt;&gt;&gt; m = pattern.match('one12twothree34four') # 查找头部，没有匹配&gt;&gt;&gt; print(m)None&gt;&gt;&gt; m = pattern.match('one12twothree34four', 2, 10) # 从'e'的位置开始匹配，没有匹配&gt;&gt;&gt; print(m)None&gt;&gt;&gt; m = pattern.match('one12twothree34four', 3, 10) # 从'1'的位置开始匹配，正好匹配 &gt;&gt;&gt;print(m) # 返回一个 Match 对象&lt;_sre.SRE_Match object at 0x10a42aac0&gt;&gt;&gt;&gt; m.group(0) # 可省略 0 '12'&gt;&gt;&gt; m.start(0) # 可省略 0 3&gt;&gt;&gt; m.end(0) # 可省略 0 5&gt;&gt;&gt; m.span(0) # 可省略 0 (3, 5)在上面，当匹配成功时返回一个 Match 对象，其中：group([group1, …]) 方法用于获得一个或多个分组匹配的字符串，当要获得整个匹配的子串时，可直接使用 group() 或 group(0)；start([group]) 方法用于获取分组匹配的子串在整个字符串中的起始位置（子串第一个字符的索引），参数默认值为 0；end([group]) 方法用于获取分组匹配的子串在整个字符串中的结束位置（子串最后一个字符的索引+1），参数默认值为 0；span([group]) 方法返回 (start(group), end(group))。再看看一个例子：实例&gt;&gt;&gt;import re&gt;&gt;&gt; pattern = re.compile(r'([a-z]+) ([a-z]+)', re.I) # re.I 表示忽略大小写&gt;&gt;&gt; m = pattern.match('Hello World Wide Web')&gt;&gt;&gt; print(m)# 匹配成功，返回一个 Match 对象&lt;_sre.SRE_Match object at 0x10bea83e8&gt;&gt;&gt;&gt; m.group(0) # 返回匹配成功的整个子串 'Hello World'&gt;&gt;&gt; m.span(0) # 返回匹配成功的整个子串的索引 (0, 11)&gt;&gt;&gt; m.group(1) # 返回第一个分组匹配成功的子串 'Hello'&gt;&gt;&gt; m.span(1) # 返回第一个分组匹配成功的子串的索引 (0, 5)&gt;&gt;&gt; m.group(2) # 返回第二个分组匹配成功的子串 'World'&gt;&gt;&gt; m.span(2) # 返回第二个分组匹配成功的子串 (6, 11)&gt;&gt;&gt; m.groups() # 等价于 (m.group(1), m.group(2), ...) ('Hello', 'World')&gt;&gt;&gt; m.group(3) # 不存在第三个分组Traceback (most recent call last):File "&lt;stdin&gt;", line 1, in &lt;module&gt;IndexError: no such group re.search()&amp;re.match() 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117re.search 扫描整个字符串并返回第一个成功的匹配。函数语法：re.search(pattern, string, flags=0)函数参数说明：pattern:匹配的正则表达式string:要匹配的字符串。flags:标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。 匹配成功re.search方法返回一个匹配的对象，否则返回None。我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。匹配对象方法group(num=0):匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。groups():返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。实例import reline = "Cats are smarter than dogs";searchObj = re.search( r'(.*) are (.*?) .*', line, re.M|re.I)if searchObj: print ("searchObj.group() : ", searchObj.group()) print ("searchObj.group(1) : ", searchObj.group(1)) print ("searchObj.group(2) : ", searchObj.group(2))else: print( "Nothing found!!")以上实例执行结果如下：searchObj.group() : Cats are smarter than dogssearchObj.group(1) : CatssearchObj.group(2) : smarter _____________________________________________________________________________re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。函数语法：re.match(pattern, string, flags=0)函数参数说明：（同re.search一样）匹配成功re.match方法返回一个匹配的对象，否则返回None。我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。匹配对象方法：（同re.search一样）实例import reprint(re.match('www', 'www.runoob.com').span()) # 在起始位置匹配print(re.match('com', 'www.runoob.com')) # 不在起始位置匹配以上实例运行输出结果为：(0, 3) None实例import reline = "Cats are smarter than dogs"matchObj = re.match( r'(.*) are (.*?) .*', line, re.M|re.I)if matchObj: print("matchObj.group() : ", matchObj.group()) print("matchObj.group(1) : ", matchObj.group(1)) print("matchObj.group(2) : ", matchObj.group(2))else: print("No match!!")以上实例执行结果如下：matchObj.group() : Cats are smarter than dogsmatchObj.group(1) : CatsmatchObj.group(2) : smarter ____________________________________________________________________________re.match与re.search的区别:re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。实例import reline = "Cats are smarter than dogs";matchObj = re.match( r'dogs', line, re.M|re.I)if matchObj: print("match --&gt; matchObj.group() : ", matchObj.group())else: print ("No match!!")matchObj = re.search( r'dogs', line, re.M|re.I)if matchObj: print("search --&gt; matchObj.group() : ", matchObj.group())else: print("No match!!")以上实例运行结果如下：No match!!search --&gt; matchObj.group() : dogs re.split() 12345678910111213141516171819202122232425split 方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下：re.split(pattern, string[, maxsplit=0, flags=0])参数:pattern:匹配的正则表达式string:要匹配的字符串。maxsplit:分隔次数，maxsplit=1 分隔一次，默认为 0，不限制次数。flags:标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。实例&gt;&gt;&gt;import re&gt;&gt;&gt; re.split('\W+', 'runoob, runoob, runoob.')['runoob', 'runoob', 'runoob', '']&gt;&gt;&gt; re.split('(\W+)', ' runoob, runoob, runoob.')['', ' ', 'runoob', ', ', 'runoob', ', ', 'runoob', '.', '']&gt;&gt;&gt; re.split('\W+', ' runoob, runoob, runoob.', 1)['', 'runoob, runoob, runoob.']&gt;&gt;&gt; re.split('a*', 'hello world') # 对于一个找不到匹配的字符串而言，split 不会对其作出分割['hello world'] re.sub() 123456789101112131415161718192021222324252627282930313233343536373839404142Python 的 re 模块提供了re.sub用于替换字符串中的匹配项。语法:re.sub(pattern, repl, string, count=0, flags=0)参数：pattern : 正则中的模式字符串。repl : 替换的字符串，也可为一个函数。string : 要被查找替换的原始字符串。count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。 实例:import rephone = "2004-959-559 # 这是一个国外电话号码"num = re.sub(r'#.*$', "", phone) # 删除字符串中的 Python注释print ("电话号码是: ", num)num = re.sub(r'\D', "", phone) # 删除非数字(-)的字符串print ("电话号码是 : ", num)以上实例执行结果如下：电话号码是: 2004-959-559电话号码是 : 2004959559 以下实例中将字符串中的匹配的数字乘以 2：import redef double(matched): # 将匹配的数字乘以 2 value = int(matched.group('value')) return str(value * 2)s = 'A23G4HFD567'print(re.sub('(?P&lt;value&gt;\d+)', double, s))执行输出结果为：A46G8HFD1134 findall() 1234567891011121314151617181920212223242526在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。注意： match 和 search 是匹配一次,findall 匹配所有。语法格式为：findall(string[, pos[, endpos]])参数：string: 待匹配的字符串。pos: 可选参数，指定字符串的起始位置，默认为 0。endpos: 可选参数，指定字符串的结束位置，默认为字符串的长度。查找字符串中的所有数字：实例import repattern = re.compile(r'\d+') # 查找数字result1 = pattern.findall('runoob 123 google 456')result2 = pattern.findall('run88oob123google456', 0, 10) #取字符串之中0-10之间的数字出来print(result1，result2)输出结果：['123', '456']，['88', '12'] re.finditer() 1234567891011121314151617181920和 findall 类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。re.finditer(pattern, string, flags=0)参数:pattern:匹配的正则表达式string:要匹配的字符串。flags:标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。实例import reit = re.finditer(r"\d+","12a32bc43jf3")for match in it: print (match.group() )输出结果：12 32 43 3 re.escape() re.escape()的主要作用就是将一个字符串变成可以匹配的正则表达式 12345re.escape是一个工具函数，用于对字符串中所有可能被视为正则表达式运算符的字符进行转义。使用这个函数的情况有：字符串很长，其中包含大量特殊字符，而你不想输入大量的反斜杠；你从用户那里获取了一个字符串（例如，通过函数input），想将其用于正则表达式中。下面的示例说明了这个函数的工作原理：&gt;&gt;&gt; re.escape('www.python.org') 'www\\.python\\.org' &gt;&gt;&gt; re.escape('But where is the ambiguity?') 'But\\ where\\ is\\ the\\ ambiuity\\?']]></content>
      <categories>
        <category>re</category>
      </categories>
      <tags>
        <tag>Re</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Compiler]]></title>
    <url>%2F2019%2F09%2F04%2FCompiler%2F</url>
    <content type="text"><![CDATA[引论编译原理是良好的数学基础和好的工程结构功能的结合。 Compiler：编译，述而不作，忠于编写的东西 编译器从逻辑上可以分成若干阶段，每个阶段把源程序从一种表示变换成另一种表示 1.1什么叫编译程序翻译器（翻译程序）：Translater 能将一种语言程序（源语言程序）转换成另一种等价的语言程序（目标语言程序） 编译器（编译程序）：Compiler 能将一种计算机高级语言程序（源语言程序）转换成另一种等价的计算机低级语言程序（目标语言程序） 解释器（解释程序）：Interpreter 也是一种翻译程序，以一种语言写的源程序作为输入，但不产生目标代码，而是边解释边执行 解释器和编译器的区别： ①编译分成两步完成：先翻译，在运行 ②解释只用一步就完成：边解释边执行 可变目标编译程序（Retargetable Compiler） 交叉编译程序（Cross Compiler） 1.2编译程序的组成 词法分析器：读入组成源程序的字符流，并将它们组织成为有意义的词素的序列 语法分析器：使用由词法分析器生成的各个词法单元的第一个分量来创建树形的中间表示，该中间表示给出了词法分析产生的词法单元流的语法结构。一个常用的表示方法便是语法树，树中的每个内部节点表示一个运算 语义分析器：使用语法树和符号表中的信息来检查源程序是否和语言定义的语义一致。同时也收集类型信息，并把这些信息存放在语法树或符号表中，以便在随后的中键代码生成过程中使用。 中间代码生成器：在把一个源程序翻译成目标代码的过程中，一个编译器可能构造出一个或多个中间表示。这些中间表示可以有多种形式。比如语法树是一种中间表示形式，通常在语法分析和语义分析中使用。 代码优化器：机器无关的代码优化步骤试图改进中间代码，以便生成更好的目标代码 代码生成器：代码生成器以源程序的中间表示形式作为输入，并把它映射到目标语言。 符号表管理器：记录源程序中使用的变量的名字，并收集和每个名字的各种属性有关的信息。 Tips: 如何学习构造编译程序 （1）源语言，对被编译的源程序深刻理解其结构和含义 （2）目标语言，假定目标语言是机器语言，就必须搞清楚硬件的系统结构和操作系统的功能 （3）编译方法，把一种语言翻译成另一种语言的方法很多，重点 高级语言及其语法描述2.1程序语言的语法和语义2.1.1语法任何语言均可作一个集合。这个集合中的每个元素都是在一定符号集（字母表）上的一个符号串。 对于自然语言来说，他们是定义在某个字母表上的句子的集合 对于程序语言来说，他们也是定义在某个字母表上的句子的集合。这里的句子，就是一个源程序。 词法规则：单词符号是语言中具有独立意义的最基本单位。语言的单词符号是由词法规则所确定的，即词法规则规定了单词符号的形成规则。 语法规则：上下文无关文法或BNF（Backus-Naur范式） 2.1.2语义语义，定义程序的意义 没有公认的形式系统描述语义 2.2程序语言的一般特征高级语言的分类 强制性语言（Imperative Language）|过程式语言：Fortran，C，Pascal 应用式语言（Applicative Language）|函数式语言：LISP 基于规则的语言（Ruled-based Language）：Prolog 面向对象语言（Object-oriented Language）：JAVA，c++ 2.3程序语言的语法描述一、字母表和符号串 字母表：符号的非空有限集合 例：∑ ={a，b，c} 符号：字母表中的元素 例： a，b，c 符号串：符号的有穷序列 例：a, aa, ac, abc，.. 空符号串：无任何符号的符号串( ε ) 符号串的形式定义 有字母表å，定义： （1）ε是å上的符号串； （2）若x是å上的符号串，且aÎ å，则ax或xa是å上的符号串； （3）y是å上的符号串，iff（当且仅当）y可由（1）和（2）产生。 符号串集合：由符号串构成的集合。 二、符号串和符号串集合的运算符号串相等：若x、y是集合上的两个符号串，则x＝y，iff（当且仅当）组成x的每一个符号和组成y的每一个符号依次相等。 符号串的长度：若x为符号串，其长度|x|等于组成该符 号串的符号个数。（例：x＝STV， |x|=3） 符号串的连接：若x、y是定义在Σ是上的符号串，且x＝XY，y＝YX，则x和y的连接 xy＝XYYX也是Σ上的符号串。（注意：一般xy ≠ yx，但是εx = xε） 符号串集合的乘积运算：令A、B为符号串集合，定义AB＝{ xy | x∈A, y∈B} 符号串集合的幂运算：有符号串集合A，定义A0 ={ε}, A1=A, A2=AA, A3=AAA,…… ……, An＝An-1A=AAn-1 ，n&gt;0 符号串集合的闭包运算：设A是符号串集合，定义 A＋＝ A1 ∪ A2 ∪ A3 ∪……∪ An ∪…… 称为集合A的正则闭包。A*＝ A0 ∪A＋ 称为集合A的闭包。（A0 = { ε } ） 为什么对符号、符号串、符号串集合以及它们的运算感兴趣？ 若A为某语言的基本字符集 ​ A＝{a,b,……z,0,1,……,9, +,－,×,_/, ( , ), =……} B为单词集 ​ B ={begin, end, if, then,else,for,……,&lt;标识符&gt;,&lt;常量&gt;,……} 则B ⊂ A* 。 语言的句子是定义在B上的符号串。 若令C为句子集合，则C ⊂ B* , 程序 ⊂ C 三、文法的直观理解1.什么是文法：文法是对语言结构的定义与描述。即从形式上用于描述和规定语言结构的称为“文法”（或称为“语法”）。 2.语法规则：我们通过建立一组规则（产生式），来描述句子的语法结构。规定用“::=”表示“由……组成“。 例如： &lt;句子&gt;::=&lt;主语&gt;&lt;谓语&gt; &lt;主语&gt;::=&lt;代词&gt;|&lt;名词&gt; &lt;代词&gt; ::=你|我|他 &lt;名词&gt;::= 王民|大学生|工人|英语 &lt;谓语&gt;::=&lt;动词&gt;&lt;直接宾语&gt; &lt;动词&gt;::=是|学习 &lt;直接宾语&gt;::=&lt;代词&gt;|&lt;名词&gt; 3.由产生式推导句子：3.有了一组产生式之后，可以按照一定的方式用它们去推导或产生句子。 ​ 推导方法：从一个要识别的符号开始推导，即用相应产生式的右部来替代产生式的左部，每次仅用一条产生式去进行推导。 &lt;句子&gt; =&gt; &lt;主语&gt;&lt;谓语&gt; &lt;主语&gt;&lt;谓语&gt; =&gt; &lt;代词&gt;&lt;谓语&gt; …… …… 这种推导一直进行下去，直到所有带&lt; &gt;的符号都由终结符号替代为止。]]></content>
      <categories>
        <category>Compiler</category>
      </categories>
      <tags>
        <tag>Compilier</tag>
        <tag>StudyNote</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux Note]]></title>
    <url>%2F2019%2F08%2F22%2FLinux-Command%2F</url>
    <content type="text"><![CDATA[Linux Study Note 参考： 黑马程序员-linux从入门到精通 Linux系统的文件linux一切皆文件 文件操作种类：创建文件、编辑文件、保存文件、关闭文件、重命名文件、删除文件、恢复文件 文件目录结构Bin：全称binary，含义是二进制。该目录中存储的都是一些二进制文件，文件都是可以被运行的。 Dev：该目录中主要存放的是外接设备，例如盘、其他的光盘等。在其中的外接设备是不能直接被使用的，需要挂载（类似windows下的分配盘符。 Etc：该目录主要存储一些配置文件。 Home：表示“家”，表示除了root用户以外其他用户的家目录，类似于windows下的User/用户目录。 Proc：process，表示进程，该目录中存储的是Linux运行时候的进程。 Root：该目录是root用户自己的家目录。 Sbin：全称super binary，该目录也是存储一些可以被执行的二进制文件，但是必须得有super权限的用户才能执行。 Tmp：表示“临时”的，当系统运行时候产生的临时文件会在这个目录存着。 Usr：全称是User Software Resource，注意不是user的缩写。存放的是用户自己安装的软件。类似于windows下的program files。 Var：存放的程序/系统的日志文件的目录。 Mnt：当外接设备需要挂载的时候，就需要挂载到mnt目录下。 Linux的基本指令linux指令指在linux终端（命令行）中输入的内容。 一个完整的指令的标准格式：Linux通用的格式 1#指令主体 (空格) [选项] (空格) [操作对象] 一个指令可以包含多个选项，操作对象也可以是多个。 1.ls指令含义：ls（list） 用法1：#ls含义：列出当前工作目录下的所有文件/文件夹的名称 用法2：#ls 路径含义：列出指定路径下的所有文件/文件夹的名称 路径分为相对路径和绝对路径 用法3：#ls 选项 路径含义：在列出指定路径下的文件/文件夹的名称，并以指定的格式进行显示。 常见的语法： 12#ls -l 路径#ls -la 路径 选项解释： ​ -l：表示list，表示以详细列表的形式进行展示 ​ -a：表示all，显示所有的文件/文件夹（包含了隐藏文件/文件夹） 上述列表中的第一列表示文档类型，其中 “ - ” 表示改行对应的文档类型为文件，“ d ” 表示文档类型为文件夹。 在Linux中，隐藏文档一般以 “ . ” 开头。 用法4：#ls -lh 路径含义：列出指定路径下的所有文件/文件夹的名称，以列表的形式并且在显示文档大小的时候以可读性较高的形式显示 ls列出的结果颜色说明，其中蓝色的名称表示文件夹，黑色的表示文件，绿色的其权限为拥有所有权限 2.pwd指令用法：#pwd （print working directory，打印当前工作目录） 3.cd指令命令：#cd （change directory，改变目录） 作用：用于切换当前的工作目录 语法：#cd 路径P.S. 在linux中有一个特殊符号~，用于表示当前用户的家目录 4.mkdir指令指令：mkdir （make directory，创建目录） 语法1：#mkdir 路径路径，可以是文件夹名称也可以是包含名称的一个完整路径 假如是文件夹名称，则在当前目录下创建该文件夹 语法2：#mkdir -p 路径含义：当一次性创建多层不存在的目录的时候，添加-p参数，否则会报错 语法3：#mkdir 路径1 路径2 路径3 …表示一次性创建多个目录 5.touch指令作用：创建文件 语法：#touch 文件路径 路径可以是直接的文件名也可以是路径 一次性创建多个文件 6.cp指令指令含义：cp （copy，复制） 作用：复制文件/文件夹到指定位置 语法：#cp 被复制的文档路径 文档被复制到的路径简单来说就是#cp 源地址 目的地址 注意：Linux在复制过程中是可以重新对新位置的文件进行重命名的，但是如果不是必须的需要，则建议保持前后名称一致。 当使用cp命令进行文件夹复制操作的时候需要添加选项“-r”（-r表示递归复制），否则目录将被忽略 7.mv指令指令含义：mv （move，移动，剪切） 作用：移动文档到新的位置 语法：#mv 需要移动的文件路径 需要保存的位置路径 注：在Linux中重命名的命令也是mv，语法和移动语法一样。 8.rm指令指令含义：rm （remove，移除，删除） 语法：#rm 选项 需要移除的文件路径选项： -f：force，强制删除，不提示是否删除 ​ -r：表示递归 在删除的时候如果不带选项，会提示是否删除，如果需要确认则输入“y/yes”，否则输入 注意：如果在删除的时候不想频繁的确认，则可以在指令中添加选项“-f”，表示force（强制）。 删除一个文件夹： 注意：删除一个目录的时候需要做递归删除，并且一般也不需要进行删除确认询问，所以移除目录的时候一般需要使用-rf选项。 删除多个文件： 删除一个目录下具有公共特性的文件，例如都以Linux开头 其中*称之为通配符，意思表示任意的字符，Linux*，则表示只要文件以Linux开头，后续字符则不管。 9.vim指令指令：vim （Vim是一款文本编辑器，号称编辑器之神） 语法：#vim 文件路径作用：可以打开一个文件，文件不存在时，可以创建该文件 vim其他用法参考本文后续。 10.输出重定向一般命令的输出都会显示在终端中，有些时候需要将一些命令的执行结果想要保存到文件中进行后续的分析/统计，则这时候需要使用到的输出重定向技术。 >：覆输出，会覆盖掉原先的文件内容 >&gt;：追加输出，不会覆盖原始文件内容，会在原始内容末尾继续添加 语法：#正常执行的指令 &gt; / &gt;&gt;文件的路径注意：文件可以不存在，不存在则新建 11.cat指令作用1：cat有直接打开一个文件的功能。 语法1：#cat 文件的路径 作用2：cat还可以对文件惊醒合并 语法2：#cat 待合并的文件路径1 待合并的文件路径2 … 文件路径n &gt; 合并之后的文件路径 12.df指令作用：查看磁盘空间 语法：#df -h-h表示以较高可读性的形式展示大小 13.free指令作用：查看内存使用情况 语法：#free -m-m表示以mb为单位查看 剩余的真实可用的内存为1665mb。 Swap：用于临时内存，当系统真实内存不够用的时候可以临时使用磁盘空间来充当内存。 14.head指令作用：查看一个文件的前n行，若不指定n，则默认显示前10行。 语法：#head -n 文件路径n表示数字 15.tail指令作用1：查看一个文件的末n行，如果n不指定，则默认显示后10行 语法：#tail -n 文件路径n表示数字 作用2：可以通过tail指令来查看一个文件的动态变化内容（变化的内容不能是用户手动添加的） 语法：#tail -f 文件路径该命令一般用于查看系统的日志比较多 16.less指令作用：查看文件，以较少的内容进行输出，按下辅助功能键（数字+回车，空格键+上下方向键）查看更多 语法：#less 需要查看的文件路径 退出的时候只需要按下q键 17.wc指令作用：统计文件内容信息（包含行数、单词数、字节数） 语法：#wc -lwc 需要统计的文件路径-l：表示lines，行数 -w：表示words，单词数，依照空格来判断单词数量 -c：表示bytes，字节数 18.date指令作用：表示操作时间日期（读取、设置） 语法1：#date输出的形式：2019年8月24日 星期六 20:13:14 语法2：#date +%F （等价于 #date “+%Y-%m-%d”）输出形式：2019-08-24 语法3：#date “+%F %T” （等价于 #date “+%Y-%m-%d %H:%M:%S”）引号表示让“年月日与时分秒”成为一个不可分割的整体 输出的形式：2019-08-24 20:13:14 语法4：#date -d “-1 day” “+%Y-%m-%d %H:%M:%S”用于获取之前或者之后的某个时间（备份） 符号的可选值：+（之后）、-（之前） 单位的可选值：day（天）、month（月份）、year（年）1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162%F：表示完整的年月日%T：表示完整的时分秒%Y：表示四位年份%m：表示两位月份（带前导0）%d：表示日期（带前导0）%H：表示小时（带前导0）%M：表示分钟（带前导0）%S：表示秒数（带前导0）(以下摘自#date --help) %% 一个文字的 % %a 当前locale 的星期名缩写(例如： 日，代表星期日) %A 当前locale 的星期名全称 (如：星期日) %b 当前locale 的月名缩写 (如：一，代表一月) %B 当前locale 的月名全称 (如：一月) %c 当前locale 的日期和时间 (如：2005年3月3日 星期四 23:05:25) %C 世纪；比如 %Y，通常为省略当前年份的后两位数字(例如：20) %d 按月计的日期(例如：01) %D 按月计的日期；等于%m/%d/%y %e 按月计的日期，添加空格，等于%_d %F 完整日期格式，等价于 %Y-%m-%d %g ISO-8601 格式年份的最后两位 (参见%G) %G ISO-8601 格式年份 (参见%V)，一般只和 %V 结合使用 %h 等于%b %H 小时(00-23) %I 小时(00-12) %j 按年计的日期(001-366) %k hour, space padded ( 0..23); same as %_H %l hour, space padded ( 1..12); same as %_I %m month (01..12) %M minute (00..59) %n 换行 %N 纳秒(000000000-999999999) %p 当前locale 下的"上午"或者"下午"，未知时输出为空 %P 与%p 类似，但是输出小写字母 %r 当前locale 下的 12 小时时钟时间 (如：11:11:04 下午) %R 24 小时时间的时和分，等价于 %H:%M %s 自UTC 时间 1970-01-01 00:00:00 以来所经过的秒数 %S 秒(00-60) %t 输出制表符 Tab %T 时间，等于%H:%M:%S %u 星期，1 代表星期一 %U 一年中的第几周，以周日为每星期第一天(00-53) %V ISO-8601 格式规范下的一年中第几周，以周一为每星期第一天(01-53) %w 一星期中的第几日(0-6)，0 代表周一 %W 一年中的第几周，以周一为每星期第一天(00-53) %x 当前locale 下的日期描述 (如：12/31/99) %X 当前locale 下的时间描述 (如：23:13:48) %y 年份最后两位数位 (00-99) %Y 年份 %z +hhmm 数字时区(例如，-0400) %:z +hh:mm 数字时区(例如，-04:00) %::z +hh:mm:ss 数字时区(例如，-04:00:00) %:::z 数字时区带有必要的精度 (例如，-04，+05:30) %Z 按字母表排序的时区缩写 (例如，EDT) 19.cal指令作用：用来操作日历的 语法1：#cal （等价于#cal -l）直接输出当前月份日历 语法2：#cal -3表示输出上一个月+本月+下个月的日历 语法3：#cal -y 年份表示输出某一个年份的日历 20.clear | (ctrl+L) 指令作用：清除终端中已经存在的命令和结果（信息） 语法：#clear 或 快捷键 ctrl + L注意：该命令并不是真的清除了之前的信息，而是把之前的信息都隐藏到了最上面，可以通过滚动条继续查看以前的信息。 21.管道pipe管道符： |作用：管道一般可以用于“过滤”，“特殊”，“扩展处理” 语法：管道不能单独使用，必须需要配合前面的指令一起使用，起作用主要是辅助作用①过滤案例（高频率使用）：需要通过管道查询出根目录下包含“y”字母的文档名称。 12345#ls | grep y针对上面这个命令说明：①以管道作为分界线，前面的命令有个输出，后面需要先输入，然后再过滤，最后再输出，通俗的讲就是管道前面的输出就是后面指令的输入；②grep指令：主要用于过滤 ②特殊用法案例：通过管道的操作方法来实现less的等价效果（了解） 之前通过less查看一个文件，可以#less 路径 现在通过管道还可以这么：#cat 路径|less ③扩展处理：统计某个目录下的文档的总个数？ 答：#ls / | wc -l 22.hostname指令作用：操作服务器的主机名（读取or设置） 语法1：#hostname含义：表示输出完整的主机名 语法2：#hostname -f 含义：表示输出当前主机名中的FQDN（全限定域名） 23.id指令作用：查看一个用户的一些基本信息（包含用户id，用户组id，附加组id…），该指令如果不指定用户则默认当前用户。 语法1：#id默认显示当前执行该命令的用户的基本信息 语法2：#id username显示指定账户（username）的基本信息 验证用户信息可通过文件（/etc/passwd） 验证用户组信息可通过文件（/etv/group） 24.whoami指令作用：“我是谁？”，显示当前登录的用户名，一般用于shell脚本，用于获取当前操作系统的用户名方便记录日志。 语法：#whoami 25.ps -ef指令指令：ps 作用：用于查看服务器进程信息 选项含义： ​ -e：等价于“-A”，表示列出全部的进程 ​ -f：显示全部的列（显示全字段） 12345678910各列的含义：UID：该进程执行的用户id；PID：进程id；PPID：该进程的父级进程id，如果一个程序的父级进程找不到，该程序的进程称之为僵尸进程（parent process ID）；C：Cpu的占用率，其形式是百分数；STIME：进行的启动时间；TTY：终端设备，发起该进程的设备识别符号，如果显示“?”则表示该进程并不是由终端设备发起；TIME：进程的执行时间；CMD：该进程的名称或者对应的路径 #ps -ef | grep “进程名称”用于查看特定进程的状态 26.top指令作用：查看服务器的进程占用的资源 语法：进入命令：#top（动态显示）退出命令：按下q键 12345678910111213表头含义：PID：进程id；USER：该进程对应的用户；PR：优先级；VIRT：虚拟内存；RES：常驻内存；SHR：共享内存； 计算一个进程实际使用的内存 = 常驻内存（RES）- 共享内存（SHR）S：表示进程的状态status（sleeping，其中S表示睡眠，R表示运行）；%CPU：表示CPU的占用百分比；%MEM：表示内存的占用百分比；TIME+：执行的时间；COMMAND：进程的名称或者路径 在运行top命令时，可以有如下快捷键： M：表示将结果按照内存（MEM）从高到低进行降序排列 P：表示将结果按照CPU使用率从高到低进行降序排列 1：当服务器拥有多个CPU的时候可以使用“1”快捷键来切换是否展示显示各个cpu的详细信息 27.du -sh指令作用：查看目录的真实大小 语法：#du -sh 目录路径选项含义： ​ -s：summaries，只显示汇总的大小 ​ -h：表示以高可读性的形式进行显示 28.find指令作用：用于查找文件（参数贼多，55个） 语法：#find 路径范围 选项 选项的值选项： ​ -name：按照文件名称进行搜索（支持模糊搜索） ​ -type：按照文件的类型进行搜索（文件类型：“-”表示文件，在使用find的使用需要用f来替换；“d”表示文件夹） 注：*为通配符，匹配所有字符 29.service指令作用：用于控制一些软件的服务启动、停止、重启 语法：#service 服务名 start/stop/restart例：启动本机安装的Apache，其服务名为httpd 其服务启动规则可自己编写，后续将会专门开一篇讲述 30.kill指令作用：表示杀死进程（当遇到僵尸进程或者处于某些原因需要关闭进程的时候） 语法：#kill 进程的PID（需要配合ps一起使用） 与kill相似的命令：#killall 语法：#killall 进程名称 31.ifconfig指令作用：用于操作网卡相关的指令 语法：#ifconfig（获取网卡信息） 注意该命令在windows环境下为ipconfig Eth0表示Linux中的一个网卡，eth0是其名称。Lo（loop，本地回还网卡，其ip地址一般都是127.0.0.1）也是一个网卡名称。注意：inet addr就是网卡的ip地址。 32.reboot指令作用：重启计算机 语法1：#reboot重启 语法2：#reboot -w模拟重启，但是不重启（只写关机与开机的日志信息） 33.shutdown指令作用：关机（慎用） 语法1：#shutdown -h now “关机提示”#shutdown -h time(14:41) “关机提示” 如果想要取消关机计划的话，则可以按照以下方式去尝试： ①针对于centos7.x之前的版本：ctrl+c ②针对于centos7.x（包含）之后的版本：#shutdown -c 除了shutdown关机以外，还有以下几个关机命令 #init 0 #halt #poweroff 34.uptime指令作用：输出计算机的持续在线时间（计算机从开机到现在运行的时间） 语法：#uptime 35.uname指令作用：获取计算机操作系统的相关信息 语法1：#uname获取操作系统类型 语法2：#uname -a-a：表示all，表示获取全部的系统信息（类型、全部主机名、内核版本、发布时间、开源计划） 36.netstat -tnlp指令作用：查看网络连接状态 语法：#netstat -tnlp 12345选项说明： -t：表示只列出tcp协议的连接； -n：表示将地址从字母组合转化成ip地址，将协议转化成端口号来显示； -l：表示过滤出“state（状态）”列中其值为LISTEN（监听）的连接； -p：表示显示发起连接的进程pid和进程名称； 37.man指令作用：manual，手册（包含了Linux中全部的命令手册，英文） 语法：#man 命令退出按下q键 例：#man cp 编辑器之神——Vim编辑器]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[url]]></title>
    <url>%2F2019%2F08%2F19%2Furl%2F</url>
    <content type="text"><![CDATA[URL 引用： url_Wiki) 短链接原理分析 短链接的算法 统一资源定位符（英语：Uniform Resource Locator）统一资源定位符（英语：Uniform Resource Locator，缩写：URL；或称统一资源定位器、定位地址、URL地址，俗称网页地址或简称网址）是因特网上标准的资源的地址（Address），如同在网络上的门牌。它最初是由蒂姆·伯纳斯-李发明用来作为万维网的地址，现在它已经被[万维网联盟4编制为因特网标准RFC 1738。 在互联网的历史上，统一资源定位符的发明是一个非常基础的步骤。统一资源定位符的语法是一般的，可扩展的，它使用美国信息交换标准代码的一部分来表示因特网的地址。统一资源定位符的开始，一般会标志着一个计算机网络所使用的网络协议。 统一资源定位符的标准格式如下： 12[协议类型]: //服务器地址:端口号/资源层级UNIX文件路径文件名?查询#片段ID[protocol]://server_address:port/path_and_filename?search#fragmentID 统一资源定位符的完整格式如下： 1[协议类型]: //访问资源需要的凭证信息@服务器地址:端口号/资源层级UNIX文件路径文件名?查询#片段ID 其中[访问凭证信息]、[端口号]、[查询]、[片段ID]都属于选填项。 语法超文本传输协议（http）的统一资源定位符将从因特网获取信息的五个基本元素包括在一个简单的地址中： 传送协议。 层级URL标记符号(为[//],固定不变) 访问资源需要的凭证信息（可省略） 服务器。（通常为域名，有时为IP地址） 端口号。（以数字方式表示，若为默认值可省略） 路径。（以“/”字符区别路径中的每一个目录名称） 查询。（GET模式的窗体参数，以“?”字符为起点，每个参数以“&amp;”隔开，再以“=”分开参数名称与数据，通常以UTF8的URL编码，避开字符冲突的问题） 片段。以“#”字符为起点 以http://zh.wikipedia.org:80/w/index.php?title=Special:%E9%9A%8F%E6%9C%BA%E9%A1%B5%E9%9D%A2 为例, 其中： http，是协议； zh.wikipedia.org，是服务器； 80，是服务器上的网络端口号； /w/index.php，是路径； ?title=Special:%E9%9A%8F%E6%9C%BA%E9%A1%B5%E9%9D%A2，是询问。 大多数网页浏览器不要求用户输入网页中“http://”的部分，因为绝大多数网页内容是超文本传输协议文件。同样，“80”是超文本传输协议文件的常用端口号，因此一般也不必写明。一般来说用户只要键入统一资源定位符的一部分（zh.wikipedia.org/wiki/Special:%E9%9A%8F%E6%9C%BA%E9%A1%B5%E9%9D%A2）就可以了。 由于超文本传输协议允许服务器将浏览器重定向到另一个网页地址，因此许多服务器允许用户省略网页地址中的部分，比如 www。从技术上来说这样省略后的网页地址实际上是一个不同的网页地址，浏览器本身无法决定这个新地址是否通，服务器必须完成重定向的任务 短链接短链接本质上是http协议中的重定向内容，一般为http301和http302 短链接的优势：简短、美观、便于传播 原理例如短链接 http://qnr.io/j6Dcss DNS解析qnr.io域名，发送GET请求 /j6Dcss 服务器会通过短码获取对应的原URL 然后通过 HTTP 302 （或HTTP 301）转到对应的原URL 常见算法实现自增序列算法短址的长度一般设为 6 位，而每一位是由 [a - z, A - Z, 0 - 9] 总共 62 个字母组成的，所以 6 位的话，总共会有 62^6 ~= 568亿种组合，一般肯定是够用了。将原网址分配一个从1位到6位的随机短码，存数据库记录，对返回的id进行62进制转码。 即可使用发号策略。发号策略是这样的，当一个新的链接过来时，发号器发一个号与之对应。往后只要有新链接过来，发号器不停发号就好。举个例子，第一个进来的链接发号器发0号，对应的短链接为 xx.xxx/0，第二个进来的链接发号器发1号，对应的短链接为 xx.xxx/1，以此类推。发号器发出的10进制号需要转换成62进制，这样可以大大缩短号码转换成字符串后的长度。比如发号器发出 10,000,000,000 这个号码，如果不转换成62进制，直接拼接在域名后面，得到这样一个链接 xx.xxx/10000000000。将上面的号码转换成62进制，结果为AOYKUa，长度只有6位，拼接得到的链接为 xx.xxx/AOYKUa。可以看得出，进制转换后得到的短链接长度变短了一些。6位62进制数，对应的号码空间为626，约等于568亿。也就是说发号器可以发568亿个号，这个号码空间应该能够满足多数项目的需求了，所以基本上不用担心发号器无号可发的情况。上述是发号策略压缩URL的原理，在实际写代码的过程中还需要考虑很多细节，比如缓存，存储等。 摘要算法将原网址 md5 生成 32 位签名串,分为 4 段, 每段 8 个字节对这四段循环处理, 取 8 个字节, 将他看成 16 进制串与0x3fffffff(30位1) 与操作, 即超过 30 位的忽略处理 这 30 位分成 6 段, 每 5位的数字作为字母表的索引取得特定字符, 依次进行获得 6 位字符串总的 md5 串可以获得 4 个 6位串,取里面的任意一个就可作为这个长 url 的短 url 地址 这种算法,虽然会生成4个,但是仍然存在重复几率 算法比较第一种算法的好处就是简单好理解，永不重复。但是短码的长度不固定，随着 id 变大从一位长度开始递增。如果非要让短码长度固定也可以就是让 id 从指定的数字开始递增就可以了。 第二种算法，虽然几率很小，但是存在碰撞（重复）的可能性。短码位数是比较固定的。 Q：同一长链接，每次转成的短链接是否一样A：同一长链接，每次转成的短链接不一定一样，原因在于如果查询缓存时，如果未命中，发号器会发新号给这个链接。需要说明的是，缓存应该缓存经常转换的热门链接，假设设定缓存过期时间为一小时，如果某个链接很活跃的话，缓存查询命中后，缓存会刷新这个链接的存活时间，重新计时，这个链接就会长久存在缓存中。对于一些生僻链接，从存入缓存开始，在存活时间内很可能不会被再次访问，存活时间结束缓存会删除记录。下一次转换这个生僻链接，缓存不命中，发号器会重新发号。这样一来会导致一条长链接对应多条短链接的情况出现，不仅浪费存储空间，又浪费发号器资源。那么是否有办法解决这个问题呢？是不是可以考虑建立一个长链接-短链接的key-value表，将所有的长链接和对应的短链接都存入其中，这样一来就实现了长短链接一一对应的了。但是想法是美好的，现实是不行的，原因在于，将所有的长链接-短链接对存入这样的表中，本身就需要耗费大量的存储空间，相对于生僻链接可能会对应多条短链接浪费的那点空间，这样做显然就得不偿失了。 HTTP 301与 302的区别301 是永久重定向，302 是临时重定向。短地址一经生成就不会变化，所以用 301 是符合 http 语义的。同时对服务器压力也会有一定减少。用户第一次访问某个短链接后，如果服务器返回301状态码，则这个用户在后续多次访问统一短链接，浏览器会直接请求跳转地址，而不是短链接地址，这样一来服务器端就无法收到用户的请求。如果服务器返回302状态码，且告知浏览器不缓存短链接请求，那么用户每次访问短链接，都会先去短链接服务端取回长链接地址，然后在跳转。从语义上来说，301跳转更为合适，因为是永久跳转，不会每次都访问服务端，还可以减小服务端压力。但如果使用301跳转，服务端就无法精确搜集用户的访问行为了。相反302跳转会导致服务端压力增大，但服务端此时就可精确搜集用户的访问行为。但是如果使用了 301，我们就无法统计到短地址被点击的次数了。而点收集击次数的意义那就不言而喻了，关键是现在服务器硬件设备都很好，还有支持高并发的NGINX，所以对服务器的压力几乎可以忽略，最终也就选择302。]]></content>
      <tags>
        <tag>url</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Makefile]]></title>
    <url>%2F2019%2F06%2F06%2FMakefile%2F</url>
    <content type="text"><![CDATA[Make 本文参考： GNU+make中文手册 GNU+make原版官方手册 make wiki Makefile由浅入深 跟我一起写Makefile 序​ 最初了解到Makefile，还是从很久很久以前说起。当时在老师底下做项目，要配置一个nginx服务器，当初给出教程是直接make&amp;&amp;make install就完事了，打完代码一行行执行下来看起来非常有成就感233333 ​ 但是之后在做计算机系统的实验时，才发现Makefile是如此的有用万能，无论是windows还是linux(ubuntu 16.04)下，只需要一个make就能解决编译链接安装问题，make完就能立即使用，实属好用。在之后的操作系统实验中，真正接触到了Makefile这东西，基本每个实验都要写Makefile，因此对Makefile的格式有了一个大概印象，但不过想深入了解一波，便去找了许多资料看。 概述在软件开发中，make是一个工具程序（Utility software），经由读取叫做“makefile”的文件，自动化建构软件。它是一种转化文件形式的工具，转换的目标称为“target”；与此同时，它也检查文件的依赖关系，如果需要的话，它会调用一些外部软件来完成任务。它的依赖关系检查系统非常简单，主要根据依赖文件的修改时间进行判断。大多数情况下，它被用来编译源代码，生成结果代码，然后把结果代码连接起来生成可执行文件或者库文件。它使用叫做“makefile”的文件来确定一个target文件的依赖关系，然后把生成这个target的相关命令传给shell去执行。 许多现代软件的开发中（如Microsoft Visual Studio（他其实有提供一个vs 2017 交叉工具命令提示符，可以进行make，但不过一般在IDE中直接编译生成独有的工程配置文件）），集成开发环境已经取代make，但是在Unix环境中，仍然有许多任务程师采用make来协助软件开发。 Makefile介绍make命令执行时，需要一个makefile文件，以告诉make命令需要怎么样的去编译和链接程序。 首先，我们用一个示例来说明makefile的书写规则，以便给大家一个感性认识。这个示例来源于gnu 的make使用手册，在这个示例中，我们的工程有8个c文件，和3个头文件，我们要写一个makefile来告 诉make命令如何编译和链接这几个文件。我们的规则是： 如果这个工程没有编译过，那么我们的所有c文件都要编译并被链接。 如果这个工程的某几个c文件被修改，那么我们只编译被修改的c文件，并链接目标程序。 如果这个工程的头文件被改变了，那么我们需要编译引用了这几个头文件的c文件，并链接目标程序。 只要我们的makefile写得够好，所有的这一切，我们只用一个make命令就可以完成，make命令会自动智能 地根据当前的文件修改的情况来确定哪些文件需要重编译，从而自动编译所需要的文件和链接目标程序。 Makefile规则12345678#Makefile中，用#表示注释target ...: prerequisites ... command 1 #注意命令前要用Tab command 2 ... ...#可以使用“\”表示续行，但是“\”之后不能有空格 target 可以是一个object file（目标文件），也可以是一个执行文件，还可以是一个标签（label）。对 于标签这种特性，在后续的“伪目标”章节中会有叙述。 prerequisites 生成该target所依赖的文件和/或target command 该target要执行的命令（任意的shell命令） 这是一个文件的依赖关系，也就是说，target这一个或多个的目标文件依赖于prerequisites中的文件， 其生成规则定义在command中。说白一点就是说: prerequisites中如果有一个以上的文件比target文件要新的话，command所定义的命令就会被执行。 这就是Makefile中最核心的规则。 实例采用GNU make 手册中的例子 123456789101112131415161718192021222324edit : main.o kbd.o command.o display.o \ insert.o search.o files.o utils.o cc -o edit main.o kbd.o command.o display.o \ insert.o search.o files.o utils.omain.o : main.c defs.h cc -c main.ckbd.o : kbd.c defs.h command.h cc -c kbd.ccommand.o : command.c defs.h command.h cc -c command.cdisplay.o : display.c defs.h buffer.h cc -c display.cinsert.o : insert.c defs.h buffer.h cc -c insert.csearch.o : search.c defs.h buffer.h cc -c search.cfiles.o : files.c defs.h buffer.h command.h cc -c files.cutils.o : utils.c defs.h cc -c utils.cclean : rm edit main.o kbd.o command.o display.o \ insert.o search.o files.o utils.o 该工程有3个头文件和8个c文件 其中反斜杠(“\”)是换行符，注意换行符之后不能用空格。换行符又利用Makefile的阅读。 把Makefile放在处于工程下的，然后在该目录下输入make命令，就可以生成可执行文件了。如果要删除执行文件和所有的中间目标文件，那么只需要执行make clean就可以了。 在这个makefile中，目标文件（target）包含：执行文件edit和中间目标文件（ *.o ），依赖文 件（prerequisites）就是冒号后面的那些 .c 文件和 .h 文件。每一个 .o 文件都有 一组依赖文件，而这些 .o 文件又是执行文件 edit 的依赖文件。依赖关系的实质就是说明了目 标文件是由哪些文件生成的，换言之，目标文件是哪些文件更新的。 这里要说明一点的是， clean 不是一个文件，它只不过是一个动作名字，有点像c语言中的label一 样，其冒号后什么也没有，那么，make就不会自动去找它的依赖性，也就不会自动执行其后所定义的命令。 要执行其后的命令，就要在make命令后明显得指出这个label的名字。这样的方法非常有用，我们可以在一 个makefile中定义不用的编译或是和编译无关的命令，比如程序的打包，程序的备份，等等。 make的执行过程如下： 依次读取变量“MAKEFILES”定义的makefile文件列表 读取工作目录下的makefile文件（GNU make的顺序：缺省的是根据命名的查找顺序“GNUmakefile”，“makefile”，“Makefile”，首先找到那个就读取那个（假如是MAKEFILE，需要用make -f）） 依次读取工作目录makefile文件中使用指示符“include”包含的文件 查找重建所有已读取的makefile文件的规则（如果存在一个目标是当前读取的某一个makefile文件，则执行此规则重建此makefile文件，完成以后从第一步开始重新执行） 初始化变量值并展开那些需要立即展开的变量和函数并根据预设条件确定执行分支 根据“终极目标”以及其他目标的依赖关系建立依赖关系链表 执行除“终极目标”以外的所有的目标的规则（规则中如果依赖文件中任一个文件的时间戳比目标文件新，则使用规则所定义的命令重建目标文件） 执行“终极目标”所在的规则 一上面那个工程为示例： 1234567891011在默认的方式下，也就是我们只输入 make 命令。那么，1.make会在当前目录下找名字叫“Makefile”或“makefile”的文件。2.如果找到，它会找文件中的第一个目标文件（target），在上面的例子中，他会找到“edit”这个 文件，并把这个文件作为最终的目标文件。3.如果edit文件不存在，或是edit所依赖的后面的 .o 文件的文件修改时间要比 edit 这个 文件新，那么，他就会执行后面所定义的命令来生成 edit 这个文件。4.如果 edit 所依赖的 .o 文件也不存在，那么make会在当前文件中找目标为 .o 文件 的依赖性，如果找到则再根据那一个规则生成 .o 文件。（这有点像一个堆栈的过程）5.当然，你的C文件和H文件是存在的啦，于是make会生成 .o 文件，然后再用 .o 文件生 成make的终极任务，也就是执行文件 edit 了。 这就是整个make的依赖性，make会一层又一层地去找文件的依赖关系，直到最终编译出第一个目标文件。在 找寻的过程中，如果出现错误，比如最后被依赖的文件找不到，那么make就会直接退出，并报错，而对于所定义的命令的错误，或是编译不成功，make根本不理。make只管文件的依赖性。 像 clean 这种，没有被第一个目标文件直接或间接关联，那么它后面所定义的命 令将不会被自动执行，不过，我们可以显示要make执行。即命令—— make clean ，以此来清除所有 的目标文件，以便重编译。 如果这个工程已被编译过了，当我们修改了其中一个源文件，比如 file.c ， 那么根据我们的依赖性，我们的目标 file.o 会被重编译（也就是在这个依性关系后面所定义的命令）， 于是 file.o 的文件也是最新的啦，于是 file.o 的文件修改时间要比 edit 要新，所 以 edit 也会被重新链接了（详见 edit 目标文件后定义的命令）。比如我们改变了 command.h ，那么， kdb.o 、 command.o 和 files.o 都 会被重编译，并且， edit 会被重链接。 Makefile中使用变量总所周知，变量是个好东西0.0 在Makefile中使用变量有利于我们对其有更好的维护性。 跟通常编程一样，变量名最好简(jian)洁(dan)易(cu)懂(bao)，有利于人们明白其代表的含义。 在上面例子中，edit后面的一串便可以进行替代了。 1234edit : main.o kbd.o command.o display.o \ insert.o search.o files.o utils.o cc -o edit main.o kbd.o command.o display.o \ insert.o search.o files.o utils.o 当我们需要添加文件时，需要修改多个地方，使用变量能很好地为我们节省时间。 只需在前面声明变量就好，比如objects，objs，obj等等，只要能很好明白其代表的含义就行 1234567891011121314151617181920212223objs = main.o kbd.o command.o display.o \ insert.o search.o files.o utils.o edit : $(objs) cc -o edit $(objs)main.o : main.c defs.h cc -c main.ckbd.o : kbd.c defs.h command.h cc -c kbd.ccommand.o : command.c defs.h command.h cc -c command.cdisplay.o : display.c defs.h buffer.h cc -c display.cinsert.o : insert.c defs.h buffer.h cc -c insert.csearch.o : search.c defs.h buffer.h cc -c search.cfiles.o : files.c defs.h buffer.h command.h cc -c files.cutils.o : utils.c defs.h cc -c utils.cclean : rm edit $(objs) 比如这样，当我们需要添加新的 .o 文件的时候，只需要修改objs = ...就行了 Makefile的自动推导GNU的make可以自动推到文件及文件依赖关系后面的命令，于是我们就没必要去在每一个 .o 文件后都写上类似的命令，因为，我们的make会自动识别，并自己推导命令。 只要make看到一个 .o 文件，它就会自动的把 .c 文件加在依赖关系中，如果make找到一个whatever.o ，那么 whatever.c 就会是 whatever.o 的依赖文件。并且 cc -c whatever.c 也会被推导出来，于是，我们的makefile再也不用写得这么复杂。我们的 新makefile又出炉了。 123456789101112131415161718objects = main.o kbd.o command.o display.o \ insert.o search.o files.o utils.oedit : $(objects) cc -o edit $(objects)main.o : defs.hkbd.o : defs.h command.hcommand.o : defs.h command.hdisplay.o : defs.h buffer.hinsert.o : defs.h buffer.hsearch.o : defs.h buffer.hfiles.o : defs.h buffer.h command.hutils.o : defs.h.PHONY : cleanclean : rm edit $(objects) 这种方法，也就是make的“隐晦规则”。 .PHONY 表示 clean 是个伪目标 文件。 另类风格的Makefile既然我们的make可以自动推导命令，那么我看到那堆 .o 和 .h 的依赖就有点不爽，那么多的 重复的 .h ，能不能把其收拢起来，好吧，没有问题，这个对于make来说很容易，谁叫它提供了自动 推导命令和文件的功能呢？来看看最新风格的makefile吧。 12345678910111213objects = main.o kbd.o command.o display.o \ insert.o search.o files.o utils.oedit : $(objects) cc -o edit $(objects)$(objects) : defs.hkbd.o command.o files.o : command.hdisplay.o insert.o search.o files.o : buffer.h.PHONY : cleanclean : rm edit $(objects) 清空目标文件的规则每个Makefile中都应该写一个清空目标文件（ .o 和执行文件）的规则，这不仅便于重编译，也很 利于保持文件的清洁。 12clean: rm edit $(objects) 更为稳健的做法是： 123.PHONY : cleanclean : -rm edit $(objects) 前面说过， .PHONY 表示 clean 是一个“伪目标”。而在 rm 命令前面加了一个小减号的 意思就是，也许某些文件出现问题，但不要管，继续做后面的事。当然， clean 的规则不要放在文件 的开头，不然，这就会变成make的默认目标，相信谁也不愿意这样。不成文的规矩是——“clean从来都是放 在文件的最后”。 Makefile里有什么？Makefile里主要包含了五个东西：显式规则、隐晦规则、变量定义、文件指示和注释。 显式规则。显式规则说明了如何生成一个或多个目标文件。这是由Makefile的书写者明显指出要生成的 文件、文件的依赖文件和生成的命令。 隐晦规则。由于我们的make有自动推导的功能，所以隐晦的规则可以让我们比较简略地书写 Makefile，这是由make所支持的。 变量的定义。在Makefile中我们要定义一系列的变量，变量一般都是字符串，这个有点像你C语言中的 宏，当Makefile被执行时，其中的变量都会被扩展到相应的引用位置上。 文件指示。其包括了三个部分，一个是在一个Makefile中引用另一个Makefile，就像C语言中 的include一样；另一个是指根据某些情况指定Makefile中的有效部分，就像C语言中的预编译#if一 样；还有就是定义一个多行的命令。有关这一部分的内容，我会在后续的部分中讲述。 注释。Makefile中只有行注释，和UNIX的Shell脚本一样，其注释是用 # 字符，这个就 像C/C++中的 // 一样。如果你要在你的Makefile中使用 # 字符，可以用反斜杠进行转义，如： \# 。 还有的就是在Makefile中的命令，必须要以 Tab 键开始。 Makefile的文件名因为make程序已被用户多次重/改写，其中包括几次用相同的文件格式和算法原理重新编写，并且依照不同需要添加了一些不常见的改良。 现在的版本，大致是 GNU make，BSD make，Microsoft nmake。 默认的情况下，gnu的make命令会在当前目录下按顺序找寻文件名为“GNUmakefile”、 “makefile”、“Makefile”的文件，找到了解释这个文件。在这三个文件名中，最好使用“Makefile” 这个文件名，因为，这个文件名第一个字符为大写，这样有一种显目的感觉。最好不要用“GNUmakefile”， 这个文件是GNU的make识别的。有另外一些make只对全小写的“makefile”文件名敏感，但是基本上来说， 大多数的make都支持“makefile”和“Makefile”这两种默认文件名。 当然，你可以使用别的文件名来书写Makefile，比如：“Make.Linux”，“Make.Solaris” ，“Make.AIX”等，如果要指定特定的Makefile，你可以使用make的 -f 和 --file 参数， 如： make -f Make.Linux 或 make --file Make.AIX 。 引用其他的Makefile在Makefile使用 include 关键字可以把别的Makefile包含进来，这很像C语言的 #include ，被包含的文件会原模原样的放在当前文件的包含位置。 include 的语法是： 1include &lt;filename&gt; filename 可以是当前操作系统Shell的文件模式（可以包含路径和通配符）。 在 include 前面可以有一些空字符，但是绝不能是 Tab 键开始。 include 和 &lt;filename&gt; 可以用一个或多个空格隔开。举个例子，你有这样几个Makefile： a.mk 、 b.mk 、 c.mk ，还有一个文件叫 foo.make ，以及一个变量 $(bar) ，其包含 了 e.mk 和 f.mk ，那么，下面的语句： 12bar = e.mk f.mkinclude foo.make *.mk $(bar) 等价于： 1include foo.make a.mk b.mk c.mk e.mk f.mk make命令开始时，会找寻 include 所指出的其它Makefile，并把其内容安置在当前的位置。就好 像C/C++的 #include 指令一样。如果文件都没有指定绝对路径或是相对路径的话，make会在当前目 录下首先寻找，如果当前目录下没有找到，那么，make还会在下面的几个目录下找： 如果make执行时，有 -I 或 --include-dir 参数，那么make就会在这个参数所指定的目 录下去寻找。 如果目录 &lt;prefix&gt;/include （一般是： /usr/local/bin 或 /usr/include ）存在的话，make也会去找。 如果有文件没有找到的话，make会生成一条警告信息，但不会马上出现致命错误。它会继续载入其它的 文件，一旦完成makefile的读取，make会再重试这些没有找到，或是不能读取的文件，如果还是 不行，make才会出现一条致命信息。如果你想让make不理那些无法读取的文件，而继续执行，你可以 在include前加一个减号“-”。如： 1-include &lt;filename&gt; 其表示，无论include过程中出现什么错误，都不要报错继续执行。和其它版本make兼容的相关命令 是sinclude，其作用和这一个是一样的。 环境变量MAKEFILES如果你的当前环境中定义了环境变量 MAKEFILES ，那么，make会把这个变量中的值做一个类似于include 的动作。这个变量中的值是其它的Makefile，用空格分隔。只是，它和 include 不 同的是，从这个环境变量中引入的Makefile的“目标”不会起作用，如果环境变量中定义的文件发现 错误，make也会不理。 但是在这里我还是建议不要使用这个环境变量，因为只要这个变量一被定义，那么当你使用make时， 所有的Makefile都会受到它的影响，这绝不是你想看到的。在这里提这个事，只是为了告诉大家，也许 有时候你的Makefile出现了怪事，那么你可以看看当前环境中有没有定义这个变量。 make的工作流程GNU的make工作时的执行步骤如下：（想来其它的make也是类似） 读入所有的Makefile。 读入被include的其它Makefile。 初始化文件中的变量。 推导隐晦规则，并分析所有规则。 为所有的目标文件创建依赖关系链。 根据依赖关系，决定哪些目标要重新生成。 执行生成命令。 1-5步为第一个阶段，6-7为第二个阶段。第一个阶段中，如果定义的变量被使用了，那么，make会把其展 开在使用的位置。但make并不会完全马上展开，make使用的是拖延战术，如果变量出现在依赖关系的规则 中，那么仅当这条依赖被决定要使用了，变量才会在其内部展开。 当然，这个工作方式你不一定要清楚，但是知道这个方式你也会对make更为熟悉。有了这个基础，后续部分 也就容易看懂了。 书写规则]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>make</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IPFS]]></title>
    <url>%2F2019%2F05%2F30%2FIPFS%2F</url>
    <content type="text"></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ARM]]></title>
    <url>%2F2019%2F05%2F28%2FARM%2F</url>
    <content type="text"><![CDATA[ARM指令集详解 引用： ARM指令集详解 1. 汇编1.1. 通用寄存器 寄存器类别 寄存器在汇编中的名称 各模式下实际访问的寄存器 用户 系统 管理 中止 未定义 中断 快中断 通用寄存器和程序计数器 R0(a1) R0 R1(a2) R1 R2(a3) R2 R3(a4) R3 R4(v1) R4 R5(v2) R5 R6(v3) R6 R7(v4) R7 R8(v5) R8 R8_fiq R9(SB,v6) R9 R9_fiq R10(SL,v7) R10 R10_fiq R11(FP,v8) R11 R11_fiq R12(IP) R12 R12_fiq R13(SP) R13 R13_svc R13_abt R13_und R13_irq R13_fiq R14(LR) R14 R14_svc R14_abt R14_und R14_irq R14_fiq * R15(PC) R15 状态寄存器 R16(CPSR) CPSR SPSR 无 SPSR_svc SPSR_abt SPSR_und SPSR_irq SPSR_fiq 通用寄存器 37个寄存器，31个通用寄存器，6个状态寄存器。 R12是内部调用暂时寄存器 ip。它在过程链接胶合代码（例如，交互操作胶合代码）中用于此角色。在过程调用之间，可以将它用于任何用途。被调用函数在返回之前不必恢复 r12。 R13堆栈指针sp，R14返回指针，R15为PC指针, cpsr_c代表的是这32位中的低8位，也就是控制位 CPSR有4个8位区域：标志域（F）、状态域（S）、扩展域（X）、控制域（C）MSR - Load specified fields of the CPSR or SPSR with an immediate constant, orfrom the contents of a general-purpose register. Syntax: MSR{cond} _, #immed_8rMSR{cond} _, Rm where: cond is an optional condition code. is either CPSR orSPSR. specifies the field or fields to be moved. can be one or more of: ccontrol field mask byte (PSR[7:0]) x extension field mask byte (PSR[15:8]) sstatus field mask byte (PSR[23:16) f flags field mask byte (PSR[31:24]).immed_8r is an expression evaluating to a numeric constant. The constant mustcorrespond to an 8-bit pattern rotated by an even number of bits within a32-bit word. Rm is the source register. C 控制域屏蔽字节(psr[7:0]) X 扩展域屏蔽字节(psr[15:8]) S 状态域屏蔽字节(psr[23:16]) F 标志域屏蔽字节(psr[31:24]) CPSR寄存器 FIQ和IRQ的区别？ MODE(以下为二进制) 可见的ARM状态寄存器 10000 用户模式 PC,CPSR,R0~R14 10001 FIQ PC,CPSR,SPSR_fiq，R14_fiq~R8_fiq,R7~R0 10010 IRQ PC,CPSR,SPSR_irq，R14_irq~R13_irq,R12~R0 10011 管理模式(svc) PC,CPSR,SPSR_svc，R14_svc~R13_svc,R12~R0 10111 终止模式 PC,CPSR,SPSR_abt，R14_abt~R13_abt,R12~R0 11011 未定义 PC,CPSR,SPSR_und，R14_und~R13_und,R2~R0 11111 系统模式(sys) PC,CPSR，R14 ~R0 1.2. 指令格式1) 基本格式 ​ &lt;opcode&gt;{&lt;cond&gt;}{S} &lt;Rd&gt;,&lt;Rn&gt;{,&lt;opcode2&gt;} ​ 其中，&lt;&gt;内的项是必须的，{}内的项是可选的，如是指令助记符，是必须的，而{}为指令执行条件，是可选的，如果不写则使用默认条件AL(无条件执行)。 ​ opcode 指令助记符，如LDR，STR 等 ​ cond 执行条件，如EQ，NE 等 ​ S 是否影响CPSR 寄存器的值，书写时影响CPSR，否则不影响 ​ Rd 目标寄存器 ​ Rn 第一个操作数的寄存器 ​ operand2 第二个操作数 ​ 指令格式举例如下： ​ LDREX–这条指令主要是从memory中取一个数，然后放到register中，但是相比普通的LDR指令，在于其内在的原子操作特性, 信号量和spin lock这些东西最核心的事情基本上就是load-update-store序列，为了防止并发，必须保证这个序列是原子的，所谓原子，即处理器在执行这个指令序列时，得绝对占有处理器而不能够被切换出去。在ARM上，从V6开始，指令LDREX和STREX就是用来干这事的 ​ LDR R0,[R1] ;读取R1 地址上的存储器单元内容，执行条件AL​ BEQ DATAEVEN ;跳转指令，执行条件EQ，即相等跳转到DATAEVEN​ ADDS R1,R1,#1 ;加法指令，R1＋1＝R1 影响CPSR 寄存器，带有S​ SUBNES R1,R1,#0xD;条件执行减法运算(NE)，R1-0xD=&gt;R1，影响CPSR 寄存器，带有S 2) 第2个操作数 ​ 在ARM 指令中，灵活的使用第2个操作数能提高代码效率，第2个操作数的形式如下： ​ ＃immed_8r ​ 常数表达式： ​ 该常数必须对应8 位位图，即常数是由一个8 位的常数循环移位偶数位得到。 ​ 合法常量： ​ 0x3FC、0、0xF0000000、200、0xF0000001等都是合法常量。 ​ 非法常量： ​ 0x1FE、511、0xFFFF、0x1010、0xF0000010等都是非法常量。 ​ 常数表达式应用举例如下： ​ MOV R0,#1 ;R0=1 ​ AND R1,R2,#0x0F ;R2 与0x0F，结果保存在R1 ​ LDR R0，[R1],#-4 ;读取R1 地址上的存储器单元内容，且R1＝R1－4 ​ Rm ​ 寄存器方式，在寄存器方式下操作数即为寄存器的数值。 ​ 寄存器方式应用举例： ​ SUB R1，R1，R2 ；R1-R2=＞R1 ​ MOV PC，R0 ；PC=R0，程序跳转到指定地址 ​ LDR R0，[R1]，-R2 ；读取R1 地址上的存储器单元内容并存入R0，且R1=R1-R2 ​ Rm， shift ​ 寄存器移位方式。将寄存器的移位结果作为操作数，但RM 值保存不变，移位方法如下： ​ ASR #n 算术右移n 位（1≤n≤32） ​ LSL #n 逻辑左移n 位（1≤n≤31） ​ LSR #n 逻辑左移n 位（1≤n≤32） ​ ROR #n 循环右移n 位（1≤n≤31） ​ RRX 带扩展的循环右移1位 ​ type Rs 其中，type 为ASR，LSL，和ROR 中的一种；Rs 偏移量寄存器，低8位有效，若其值大于或等于32，则第2 个操作数的结果为0（ASR、ROR例外）。​ 寄存器偏移方式应用举例： ​ ADD R1，R1，R1，LSL #3 ；R1=R1*9 ​ SUB R1，R1，R2，LSR#2 ；R1=R1-R2*4 ​ R15 为处理器的程序计数器PC，一般不要对其进行操作，而且有些指令是不允许使用R15，如UMULL 指令。​ （3）条件码​ 使用指令条件码，可实现高效的逻辑操作，提高代码效率。表A-1给出条件码表。 表A-1 条件码表 ​ 对于Thumb指令集，只有B 指令具有条件码执行功能，此指令条件码同表A-?，但如果为无条件执行时，条件码助记符“AL”不在指令中书写。 ​ 条件码应用举例如下： ​ 比较两个值大小，并进行相应加1 处理，C 代码为：​ if（a＞b）a++ ;​ else b++ ;​ 对应的ARM 指令如下。其中R0为a，R1为b。​ CMP R0，R1 ; R0 与R1 比较​ ADDHI R0，R0，#1 ; 若R0＞R1，则R0=R0+1​ ADDLS R1，R1，#1 ;若R0＜=R1，则R1=R1+1​ 若两个条件均成立，则将这两个数值相加，C代码为： ​ If(（a!=10）&amp;&amp;(b!=20))a=a+b; ​ 对应的ARM 指令如下，其中R0 为a，R1为b。​ CMP R0,#10 ; 比较R0 是否为10​ CMPNE R1,#20 ; 若R0 不为10，则比较R1 是否20​ ADDNE R0,R0,R1 ; 若R0 不为10 且R1 不为20，指令执行，R0=R0+R1 1.3. 指令集1.3.1. ARM 存储器访问指令​ ARM 处理是加载/存储体系结构的典型的RISC处理器，对存储器的访问只能使用加载和存储指令实现。ARM 的加载/存储指令是可以实现字、半字、无符/有符字节操作；批量加载/存储指令可实现一条指令加载/存储多个寄存器的内容，大大提高效率；SWP指令是一条寄存器和存储器内容交换的指令，可用于信号量操作等。ARM 处理器是冯?诺依曼存储结构，程序空间、RAM 空间及IO 映射空间统一编址，除对对RAM 操作以外，对外围IO、程序数据的访问均要通过加载/存储指令进行。表A-2给出ARM存储访问指令表。 表A-2 ARM 存储访问指令表 LDR 和STR​ 加载/存储字和无符号字节指令。使用单一数据传送指令(STR 和LDR)来装载和存储单一字节或字的数据从/到内存。LDR指令用于从内存中读取数据放入寄存器中；STR 指令用于将寄存器中的数据保存到内存。指令格式如下：​ LDR{cond}{T} Rd,&lt;地址&gt;; 加载指定地址上的数据(字)，放入Rd中​ STR{cond}{T} Rd,&lt;地址&gt;; 存储数据(字)到指定地址的存储单元，要存储的数据在Rd中​ LDR{cond}B{T} Rd,&lt;地址&gt;; 加载字节数据，放入Rd中，即Rd最低字节有效，高24位清零​ STR{cond}B{T} Rd,&lt;地址&gt;; 存储字节数据，要存储的数据在Rd，最低字节有效​ 其中，T 为可选后缀，若指令有T，那么即使处理器是在特权模式下，存储系统也将访问看成是处理器是在用户模式下。T在用户模式下无效，不能与前索引偏移一起使用T。​ LDR/STR 指令寻址是非常灵活的，由两部分组成，一部分为一个基址寄存器，可以为任一个通用寄存器，另一部分为一个地址偏移量。地址偏移量有以下3种格式：​ (1) 立即数。立即数可以是一个无符号数值，这个数据可以加到基址寄存器，也可以从基址寄存器中减去这个数值。指令举例如下：​ LDR R1,[R0,#0x12] ;将R0+0x12 地址处的数据读出，保存到R1中(R0 的值不变)​ LDR R1,[R0,#-0x12];将R0-0x12 地址处的数据读出，保存到R1中(R0 的值不变)​ LDR R1,[R0] ;将R0 地址处的数据读出，保存到R1 中(零偏移)​ (2)寄存器。寄存器中的数值可以加到基址寄存器，也可以从基址寄存器中减去这个数值。指令举例值。指令举例如下：​ LDR R1,[R0,R2] ;将R0+R2 地址的数据计读出，保存到R1中(R0 的值不变)​ LDR R1,[R0,-R2] ;将R0-R2 地址处的数据计读出，保存到R1中(R0 的值不变)​ (3)寄存器及移位常数。寄存器移位后的值可以加到基址寄存器，也可以从基址寄存器中减去这个数值。指令举例如下：​ LDR R1,[R0,R2,LSL #2] ;将R0+R24地址处的数据读出，保存到R1中（R0，R2的值不变）​ LDR R1,[R0,-R2,LSL #2];将R0-R24地址处的数据计读出，保存到R1中(R0，R2的值不变)​ 从寻址方式的地址计算方法分，加载/存储指令有以下4 种形式：​ (1)零偏移。Rn 的值作为传送数据的地址，即地址偏移量为0。指令举例如下：​ LDR Rd,[Rn]​ (2)前索引偏移。在数据传送之前，将偏移量加到Rn 中，其结果作为传送数据的存储地址。若使用后缀“！”，则结果写回到Rn中，且Rn 值不允许为R15。指令举例如下：​ LDR Rd,[Rn,#0x04]!​ LDR Rd,[Rn,#-0x04]​ (3)程序相对偏移。程序相对偏移是索引形式的另一个版本。汇编器由PC 寄存器计算偏移量，并将PC寄存器作为Rn 生成前索引指令。不能使用后缀“！”。指令举例如下：​ LDR Rd,label ;label 为程序标号，label 必须是在当前指令的±4KB范围内​ (4) 后索引偏移。Rn 的值用做传送数据的存储地址。在数据传送后，将偏移量与Rn相加，结果写回到Rn中。Rn 不允许是R15。指令举例如下：​ LDR Rd,[Rn],#0x04​ 地址对准–大多数情况下，必须保证用于32 位传送的地址是32 位对准的。​ 加载/存储字和无符号字节指令举例如下：​ LDR R2,[R5] ;加载R5 指定地址上的数据(字)，放入R2 中​ STR R1,[R0,#0x04] ;将R1 的数据存储到R0+0x04存储单元，R0 值不变​ LDRB R3,[R2],#1 ;读取R2 地址上的一字节数据，并保存到R3中，R2=R3+1​ STRB R6,[R7] ;读R6 的数据保存到R7 指定的地址中，只存储一字节数据​ 加载/存储半字和带符号字节。这类LDR/STR 指令可能加载带符字节\加载带符号半字、加载/存储无符号半字。偏移量格式、寻址方式与加载/存储字和无符号字节指令相同。指令格式如下：​ LDR{cond}SB Rd,&lt;地址&gt; ;加载指定地址上的数据(带符号字节)，放入Rd中​ LDR{cond}SH Rd,&lt;地址&gt; ;加载指定地址上的数据(带符号字节)，放入Rd中​ LDR{cond}H Rd,&lt;地址&gt; ;加载半字数据，放入Rd中，即Rd最低16位有效,高16位清零​ STR{cond}H Rd,&lt;地址&gt; ;存储半字数据，要存储的数据在Rd，最低16位有效​ 说明：带符号位半字/字节加载是指带符号位加载扩展到32 位;无符号位半字加载是指零扩展到32位。​ 地址对准–对半字传送的地址必须为偶数。非半字对准的半字加载将使Rd 内容不可靠，非半字对准的半字存储将使指定地址的2字节存储内容不可靠。 ​ 加载/存储半字和带符号字节指令举例如下： ​ LDRSB R1[R0,R3] ;将R0+R3地址上的字节数据读出到R1，高24 位用符号位扩展​ LDRSH R1,[R9] ;将R9 地址上的半字数据读出到R1，高16位用符号位扩展​ LDRH R6,[R2],#2 ;将R2 地址上的半字数据读出到R6，高16位用零扩展，R2=R2+1​ SHRH R1,[R0,#2]!;将R1 的数据保存到R2+2 地址中，只存储低2字节数据，R0=R0+2​ LDR/STR 指令用于对内存变量的访问，内存缓冲区数据的访问、查表、外设的控制操作等等，若使用LDR 指令加载数据到PC 寄存器，则实现程序跳转功能，这样也就实现了程序散转。​ 变量的访问​ NumCount EQU 0x40003000 ;定义变量NumCount​ …​ LDR R0,=NumCount ;使用LDR 伪指令装载NumCount的地址到R0​ LDR R1,[R0] ;取出变量值​ ADD R1,R1,#1 ;NumCount=NumCount+1​ STR R1,[R0] ;保存变量值​ …​ GPIO 设置​ GPIO-BASE EQU 0Xe0028000 ;定义GPIO 寄存器的基地址​ …​ LDR R0,=GPIO-BASE​ LDR R1,=0x00FFFF00 ;装载32 位立即数，即设置值​ STR R1,[R0,#0x0C] ;IODIR=0x00FFFF00， IODIR 的地址为0xE002800C​ MOV R1,#0x00F00000​ STR R1,[R0,#0x04] ;IOSET=0x00F00000，IOSET 的地址为0xE0028004​ …​ 程序散转​ …​ MOV R2,R2,LSL #2 ;功能号乘上4，以便查表​ LDR PC,[PC,R2] ;查表取得对应功能子程序地址，并跳转​ NOP​ FUN-TAB DCD FUN-SUB0​ DCD FUN-SUB1​ DCD FUN-SUB2​ … LDM和STM​ 批量加载/存储指令可以实现在一组寄存器和一块连续的内存单元之间传输数据。LDM为加载多个寄存器，STM 为存储多个寄存器。允许一条指令传送16 个寄存器的任何子集或所有寄存器。指令格式如下：​ LDM{cond}&lt;模式&gt; Rn{!},reglist{^}​ STM{cond}&lt;模式&gt; Rn{!},reglist{^}​ LDM /STM 的主要用途是现场保护、数据复制、参数传送等。其模式有8种，如下所列：(前面4 种用于数据块的传输，后面4 种是堆栈操作)。​ (1) IA：每次传送后地址加4​ (2) IB：每次传送前地址加4​ (3) DA：每次传送后地址减4​ (4) DB：每次传送前地址减4​ (5) FD：满递减堆栈​ (6) ED：空递增堆栈​ (7) FA：满递增堆栈​ (8) EA：空递增堆栈​ 其中，寄存器Rn 为基址寄存器，装有传送数据的初始地址，Rn 不允许为R15;后缀“！”表示最后的地址写回到Rn中;寄存器列表reglist 可包含多于一个寄存器或寄存器范围，使用“,”分开，如{R1,R2,R6-R9},寄存器排列由小到大排列；“＾”后缀不允许在用户模式呈系统模式下使用，若在LDM 指令用寄存器列表中包含有PC 时使用，那么除了正常的多寄存器传送外，将SPSR 拷贝到CPSR 中，这可用于异常处理返回；使用“＾”后缀进行数据传送且寄存器列表不包含PC时，加载/存储的是用户模式的寄存器，而不是当前模式的寄存器。​ 地址对准――这些指令忽略地址的位[1：0]。​ 批量加载/存储指令举例如下：​ LDMIA R0!,{R3-R9} ;加载R0 指向的地址上的多字数据，保存到R3～R9中，R0 值更新​ STMIA R1!,{R3-R9} ;将R3～R9 的数据存储到R1 指向的地址上，R1值更新​ STMFD SP!,{R0-R7,LR} ;现场保存，将R0～R7、LR入栈​ LDMFD SP!,{R0-R7,PC}^;恢复现场，异常处理返回​ 在进行数据复制时，先设置好源数据指针，然后使用块拷贝寻址指令LDMIA/STMIA、LDMIB/STMIB、LDMDA/STMDA、LDMDB/STMDB 进行读取和存储。而进行堆栈操作时，则要先设置堆栈指针，一般使用SP 然后使用堆栈寻址指令STMFD/LDMFD、STMED。LDMED、STMFA/LDMFA、STMEA/LDMEA实现堆栈操作。​ 多寄存器传送指令示意图如图A-1所示，其中R1为指令执行前的基址寄存器，R1’则为指令执行完后的基址寄存器。 （a）指令STMIA R1!,{R5-R7} （b）指令STMIB R1!,{R5-R7} （c）指令STMDA R1!, {R5-R7} （d）指令STMDB R1!,{R5-R7}图A-1 多寄存器传送指令示意图 ​ 数据是存储在基址寄存器的地址之上还是之下，地址是在存储第一个值之前还是之后增加还是减少。表A-3给出多寄存器传送指令映射示意表。 表A-3 多寄存器传送指令映射示意表 123456使用LDM/STM 进行数据复制例程如下：…LDR R0,=SrcData ;//设置源数据地址LDR R1,=DstData ;//设置目标地址LDMIA R0,&#123;R2-R9&#125; ;//加载8 字数据到寄存器R2～R9STMIA R1,&#123;R2-R9&#125; ;//存储寄存器R2～R9 到目标地址 ​ 使用LDM/STM 进行现场寄存器保护，常在子程序中或异常处理使用：​ SENDBYTE​ STMFD SP!,{R0-R7,LR} ;寄存器入堆​ …​ BL DELAY ;调用DELAY 子程序​ …​ LDMFD SP!,{R0-R7,PC} ;恢复寄存器，并返回 SWP​ 寄存器和存储器交换指令。SWP指令用于将一个内存单元（该单元地址放在寄存器Rn中）的内容读取到一个寄存器Rd中，同时将另一个寄存器Rm 的内容写入到该内存单元中。使用SWP 可实现信号量操作。​ 指令格式如下：​ SWP{cond}{B} Rd,Rm,[Rn]​ 其中，B 为可选后缀，若有B，则交换字节，否则交换32 位字：Rd 为数据从存储器加载到的寄存器;Rm的数据用于存储到存储器中，若Rm 与Rn 相同，则为寄存器与存储器内容进行交换;Rn 为要进行数据交换的存储器地址，Rn 不能与Rd 和Rm 相同。​ SWP 指令举例如下：​ SWP R1,R1,[R0] ; 将R1 的内容与R0 指向的存储单元的内容进行交换​ SWP R1,R2,,[R0] ; 将R0 指向的存储单元内容读取一字节数据到R1中(高24 位清零)​ ; 并将R2 的内容写入到该内存单元中(最低字节有效)​ 使用SWP 指令可以方便地进行信号量的操作：​ 12C_SEM EQU 0x40003000​ …​ 12C_SEM_WAIT​ MOV R0,#0​ LDR R0,=12C_SEM​ SWP R1,R1,[R0] ;取出信号量，并设置其为0​ CMP R1,#0 ;判断是否有信号​ BEQ 12C_SEM_WAIT ;若没有信号，则等待 1.3.2. ARM 数据处理指令​ 数据处理指令大致可分为3 类： （1） 数据传送指令（如MOV、MVN） （2） 算术逻辑运算指令（如ADD,SUM,AND） （3） 比较指令（如CMP、TST）。 数据处理指令只能对寄存器的内容进行操作。 所有ARM 数据处理指令均可选择使用S 后缀，以影响状态标志。比较指令CMP、CMN、TST和TEQ不需要后缀S，它们会直接影响状态标志。ARM数据处理指令列于表A-4中。 表A-4 ARM 数据处理指令 123456789 （1）数据传送指令**MOV** 数据传送指令。将8 位图立即数或寄存器(operant2)传送到目标寄存器Rd，可用于移位运算等操作。指令格式如下： MOV&#123;cond&#125;&#123;S&#125; Rd,operand2 MOV 指令举例如下： MOV R1#0x10 ;R1=0x10 MOV R0,R1 ;R0=R1 MOVS R3,R1,LSL #2 ;R3=R1＜＜2，并影响标志位 MOV PC,LR ;PC=LR ，子程序返回 MVN​ 数据非传送指令。将8 位图立即数或寄存器(operand2)按位取反后传送到目标寄存器(Rd)，因为其具有取反功能，所以可以装载范围更广的立即数。指令格式如下：​ MVN{cond}{S} Rd,operand2​ MVN 指令举例如下：​ MVN R1,#0xFF ;R1=0xFFFFFF00​ MVN R1,R2 ;将R2 取反，结果存到R1 ​ （2）算术逻辑运算指令 ADD​ 加法运算指令。将operand2 数据与Rn 的值相加，结果保存到Rd 寄存器。指令格式如下：​ ADD{cond}{S} Rd,Rn,operand2​ ADD 指令举例如下：​ ADDS R1,R1,#1 ;R1=R1+1​ ADD R1,R1,R2 ;R1=R1+R2​ ADDS R3,R1,R2,LSL #2 ;R3=R1+R2＜＜2 SUB​ 减法运算指令。用寄存器Rn 减去operand2。结果保存到Rd 中。指令格式如下：​ SUB{cond}{S} Rd,Rn,operand2​ SUB 指令举例如下：​ SUBS R0,R0,#1 ;R0=R0-1​ SUBS R2,R1,R2 ;R2=R1-R2​ SUB R6,R7,#0x10 ;R6=R7-0x10 RSB​ 逆向减法指令。用寄存器operand2 减法Rn，结果保存到Rd 中。指令格式如下：​ RSB{cond}{S} Rd,Rn,operand2​ SUB 指令举例如下：​ RSB R3,R1,#0xFF00 ;R3=0xFF00-R1​ RSBS R1,R2,R2,LSL #2 ;R1=R2＜＜2-R2=R2×3​ RSB R0,R1,#0 ;R0=-R1 ADC​ 带进位加法指令。将operand2 的数据与Rn 的值相加，再加上CPSR中的C 条件标志位。结果保存到Rd 寄存器。指令格式如下：​ ADC{cond}{S} Rd,Rn,operand2​ ADC 指令举例如下：​ ADDS R0,R0,R2​ ADC R1,R1,R3 ;使用ADC 实现64 位加法，(R1、R0)=(R1、R0)+（R3、R2） SBC​ 带进位减法指令。用寄存器Rn 减去operand2，再减去CPSR 中的C条件标志位的非（即若C 标志清零，则结果减去1），结果保存到Rd 中。指令格式如下：​ SCB{cond}{S}Rd,Rn,operand2​ SBC 指令举例如下：​ SUBS R0，R0，R2​ SBC R1，R1，R3 ;使用SBC 实现64 位减法，(R1,R0)-(R3,R2) RSC​ 带进位逆向减法指令。用寄存器operand2 减去Rn，再减去CPSR 中的C条件标志位，结果保存到Rd 中。指令格式如下：​ RSC{cond}{S} Rd,Rn,operand2​ RSC 指令举例如下：​ RSBS R2,R0,#0​ RSC R3,R1,#0 ;使用RSC 指令实现求64 位数值的负数 AND​ 逻辑与操作指令。将operand2 值与寄存器Rn 的值按位作逻辑与操作，结果保存到Rd中。指令格式如下：​ AND{cond}{S} Rd,Rn,operand2​ AND 指令举例如下：​ ANDS R0,R0,#x01 ;R0=R0&amp;0x01，取出最低位数据​ AND R2,R1,R3 ;R2=R1&amp;R3 ORR​ 逻辑或操作指令。将operand2 的值与寄存器Rn的值按位作逻辑或操作，结果保存到Rd 中。指令格式如下：​ ORR{cond}{S} Rd,Rn,operand2​ ORR 指令举例如下：​ ORR R0,R0,#x0F ;将R0 的低4 位置1​ MOV R1,R2,LSR #4​ ORR R3,R1,R3,LSL #8 ;使用ORR 指令将近R2 的高8位数据移入到R3 低8 位中 EOR​ 逻辑异或操作指令。将operand2 的值与寄存器Rn 的值按位作逻辑异或操作，结果保存到Rd中。指令格式如下：​ EOR{cond}{S}Rd,Rn,operand2​ EOR 指令举例如下：​ EOR R1,R1,#0x0F ;将R1 的低4 位取反​ EOR R2,R1,R0 ;R2=R1^R0​ EORS R0,R5,#0x01 ;将R5 和0x01 进行逻辑异或，结果保存到R0，并影响标志位 BIC​ 位清除指令。将寄存器Rn 的值与operand2 的值的反码按位作逻辑与操作，结果保存到Rd中。指令格式如下：​ BIC{cond}{S}Rd,Rn,operand2​ BIC 指令举例如下：​ BIC R1,R1,#0x0F ;将R1 的低4 位清零，其它位不变​ BIC R1,R2,R3 ;将拭的反码和R2 相逻辑与，结果保存到R1 ​ （3）比较指令 CMP​ 比较指令。指令使用寄存器Rn 的值减去operand2 的值，根据操作的结果更新CPSR中的相应条件标志位，以便后面的指令根据相应的条件标志来判断是否执行。指令格式如下：​ CMP{cond} Rn,operand2​ CMP 指令举例如下：​ CMP R1,#10 ;R1 与10 比较，设置相关标志位​ CMP R1,R2 ;R1 与R2 比较，设置相关标志位​ CMP 指令与SUBS 指令的区别在于CMP 指令不保存运算结果。在进行两个数据大小判断时，常用CMP指令及相应的条件码来操作。 CMN​ 负数比较指令。指令使用寄存器Rn 与值加上operand2 的值，根据操作的结果更新CPSR中的相应条件标志位，以便后面的指令根据相应的条件标志来判断是否执行，指令格式如下：​ CMN{cond} Rn,operand2​ CMN R0,#1 ;R0+1,判断R0 是否为1 的补码，若是Z 置位​ CMN 指令与ADDS 指令的区别在于CMN 指令不保存运算结果。CMN指令可用于负数比较，比如CMNR0，#1 指令则表示R0 与-1 比较，若R0 为-(即1 的补码)，则Z 置位，否则Z复位。 TST​ 位测试指令。指令将寄存器Rn 的值与operand2 的值按位作逻辑与操作，根据操作的结果更新CPSR中相应的条件标志位(当结果为0时，EQ位被设置)，以便后面指令根据相应的条件标志来判断是否执行。指令格式如下：​ TST{cond} Rn,operand2​ TST 指令举例如下：​ TST R0,#0x01 ;判断R0 的最低位是否为0​ TST R1,#0x0F ;判断R1 的低4 位是否为0​ TST 指令与ANDS 指令的区别在于TST4 指令不保存运算结果。TST指令通常于EQ、NE条件码配合使用，当所有测试位均为0 时，EQ 有效，而只要有一个测试为不为0，则NE 有效。 TEQ​ 相等测试指令。指令寄存器Rn 的值与operand2 的值按位作逻辑异或操作，根据操作的结果更新CPSR中相应条件标志位，以便后面的指令根据相应的条件标志来判断是否执行。指令格式如下：​ TEQ{cond} Rn,operand2​ TEQ 指令举例如下：​ TEQ R0,R1 ;比较R0 与R1 是否相等(不影响V 位和C 位)​ TST 指令与EORS 指令的区别在于TST 指令不保存运算结果。使用TEQ进行相等测试，常与EQNE 条件码配合使用，当两个数据相等时，EQ 有效，否则NE 有效。 （4）乘法指令​ ARM7TDMI(-S)具有32×32 乘法指令、32×32 乘加指令、32×32结果为64 位的乘法指令。表A-5给出全部的ARM 乘法指令。 表A-5 全部的ARM 乘法指令 MUL1234532 位乘法指令。指令将Rm 和Rs 中的值相乘，结果的低32 位保存到Rd中。指令格式如下：MUL&#123;cond&#125;&#123;S&#125; Rd,Rm,RsMUL 指令举例如下：MUL R1,R2,R3 ;R1=R2×R3MULS R0,R3,R7 ;R0=R3×R7，同时设置CPSR 中的N位和Z 位 MLA​ 32 位乘加指令。指令将Rm 和Rs 中的值相乘，再将乘积加上第3 个操作数，结果的低32位保存到Rd 中。指令格式如下：​ MLA{cond}{S} Rd,Rm,Rs,Rn​ MLA 指令举例如下：​ MLA R1,R2,R3,R0 ;R1=R2×R3+10 UMULL​ 64 位无符号乘法指令。指令将Rm 和Rs 中的值作无符号数相乘，结果的低32位保存到RsLo 中，而高32 位保存到RdHi 中。指令格式如下：​ UMULL{cond}{S} RdLo,RdHi,Rm,Rs​ UMULL 指令举例如下：​ UMULL R0,R1,R5,R8 ;(R1、R0)=R5×R8 UMLAL​ 64 位无符号乘加指令。指令将Rm 和Rs 中的值作无符号数相乘，64 位乘积与RdHi、RdLo相加，结果的低32 位保存到RdLo 中，而高32 位保存到RdHi 中。指令格式如下：​ UMLAL{cond}{S} RdLo,RdHi,Rm,Rs​ UMLAL 指令举例如下：​ UMLAL R0,R1,R5,R8;(R1,R0)=R5×R8+(R1,R0) SMULL​ 64 位有符号乘法指令。指令将Rm 和Rs 中的值作有符号数相乘，结果的低32位保存到RdLo 中，而高32 位保存到RdHi 中。指令格式如下：​ SMULL{cond}{S} RdLo,RdHi,Rm,Rs​ SMULL 指令举例如下：​ SMULL R2,R3,R7,R6 ;(R3,R2)=R7×R6 SMLAL​ 64 位有符号乘加指令。指令将Rm 和Rs 中的值作有符号数相乘，64 位乘积与RdHi、RdLo，相加，结果的低32位保存到RdLo 中，而高32 位保存到RdHi 中。指令格式如下：​ SMLAL{cond}{S} RdLo,RdHi,Rm,Rs​ SMLAL 指令举例如下：​ SMLAL R2,R3,R7,R6;(R3,R2)=R7×R6+(R3,R2) 1.3.3. ARM 跳转指令​ 两种方式可以实现程序的跳转： （1） 使用跳转指令直接跳转，跳转指令有跳转指令B，带链接的跳转指令BL ，带状态切换的跳转指令BX。 （2） 直接向PC 寄存器赋值实现跳转。 表A-6给出全部的ARM跳转指令。 表A-6 ARM跳转指令 B​ 跳转指令，跳转到指定的地址执行程序。 `B{cond} label` 举例如下： ​ B WAITA ;跳转到WAITA 标号处 ​ B 0x1234 ;跳转到绝对地址0x1234 处 ​ 跳转到指令B 限制在当前指令的±32Mb 的范围内。 BL带链接的跳转指令。指令将下一条指令的地址拷贝到R14(即LR)链接寄存器中，然后跳转到指定地址运行程序。 ​ BL{cond} label ​ 举例如下： ​ BL DELAY ​ 跳转指令B 限制在当前指令的±32MB 的范围内。BL 指令用于子程序调用。 BX带状态切换的跳转指令。跳转到Rm 指定的地址执行程序，若Rm 的位[0]为1，则跳转时自动将CPSR 中的标志T 置位，即把目标地址的代码解释为Thumb代码;若Rm 的位[0]为0，则跳转时自动将CPSR 中的标志T 复位，即把目标地址的代码解释为ARM代码。指令格式如下：​ BX{cond} Rm​ 举例如下：​ ADRL R0,ThumbFun+1​ BX R0 ;跳转到R0 指定的地址，并根据R0 的最低位来切换处理器状态 BLX​ BLX目标地址：跳转，改变状态及保存PC值 1.3.4. ARM 协处理器指令5 ARM 支持协处理器操作，协处理器的控制要通过协处理器命令实现。表A-7给出全部的ARM协处理器指令。 表A-7 ARM 协处理器指令 CDP​ 协处理器数据操作指令。ARM 处理器通过CDP 指令通知ARM 协处理器执行特定的操作。该操作由协处理器完成，即对命令的参数的解释与协处理器有关，指令的使用取决于协处理器。若协处理器不能成功地执行该操作，将产生未定义指令异常中断。指令格式如下：​ CDP{cond}coproc,opcodel,CRd,CRn,CRm{,opcode2}​ 其中： coproc 指令操作的协处理器名。标准名为pn,n 为0～15。​ opcodel 协处理器的特定操作码。​ CRd 作为目标寄存器的协处理器寄存器。​ CRN 存放第1 个操作数的协处理器寄存器。​ CRm 存放第2 个操作数的协处理器寄存器。​ Opcode2 可选的协处理器特定操作码。​ CDP 指令举例如下：​ CDP p7,0,c0,c2,c3,0 ;协处理器7 操作，操作码为0，可选操作码为0​ CDP p6,1,c3,c4,c5 ;协处理器操作，操作码为1 LDC​ 协处理器数据读取指令。LDC指令从某一连续的内存单元将数据读取到协处理器的寄存器中。协处理器数据的数据的传送，由协处理器来控传送的字数。若协处理器不能成功地执行该操作，将产生未定义指令异常中断。指令格式如下：​ LDC{cond}{L} coproc,CRd,&lt;地址&gt;​ 其中： L 可选后缀，指明是长整数传送。​ coproc 指令操作的协处理器名。标准名为pn，n 为0～15​ CRd 作为目标寄存的协处理器寄存器。​ &lt;地址&gt; 指定的内存地址​ LDC 指令举例如下：​ LDC p5,c2,[R2,#4];读取R2+4指向的内存单元的数据，传送到协处理器p5的c2寄存器中​ LDC p6,c2,[R1] ;读取是指向的内存单元的数据，传送到协处理器p6的c2 寄存器中 STC​ 协处理器数据写入指令。STC指令将协处理器的寄存器数据写入到某一连续的内存单元中。进行协处理器数据的数据传送，由协处理器来控制传送的字数。若协处理器不能成功地执行该操作，将产生未定义指令异常中断。指令格式如下：​ STC{cond}{L} coproc,CRd,&lt;地址&gt;​ 其中： L 可选后缀，指明是长整数传送。​ coproc 指令操作的协处理器名。标准名为pn，n 为0～15​ CRd 作为目标寄存的协处理器寄存器。​ &lt;地址&gt; 指定的内存地址​ STC 指令举例如下：​ STC p5,c1,[R0]​ STC p5,c1,[Ro,#-0x04] MCR​ ARM寄存器到协处理器寄存器的数据传送指令。MCR 指令将ARM 处理器的寄存器中的数据传送到协处理器的寄存器中。若协处理器不能成功地执行该操作，将产生未定义指令异常中断。指令格式如下：​ MCR{cond}coproc,opcodel,Rd,CRn,CRm{,opcode2}​ 其中：coproc 指令操作的协处理器名。标准名为pn，n 为0～15。​ cpcodel 协处理器的特定操作码。​ RD 作为目标寄存器。​ CRn 存放第1 个操作数的协处理器寄存器​ CRm 存放第2 个操作数的协处理器寄存器。​ Opcode2 可选的协处理器特定操作码。​ MCR 指令举例如下：​ MCR p6,2,R7,c1,c2,​ MCR P7,0,R1,c3,c2,1, MRC​ 协处理器寄存器到ARM寄存器到的数据传送指令。MRC 指令将协处理器寄存器中的数据传送到ARM 处理器的寄存器中。若协处理器不能成功地执行该操作。将产生未定义异常中断。指令格式如下：​ MRC {cond}coproc,opcodel,Rd,CRn,CRm{,opcode2}​ 其中：coproc 指令操作的协处理器名。标准名为pn，n为0～15。​ opcodel 协处理器的特定操作码。​ Rd 作为目标寄存器。​ CRn 存放第1 个操作数的协处理器寄存器。​ CRm 存放第2 个操作数的协处理器寄存器。​ opcode2 可选的协处理器特定操作码。​ MRC 指令举例如下：​ MRC p5,2,R2,c3,c2​ MRC p7,0,R0,c1,c2,1 1.3.5. ARM 杂项指令​ 表A-8给出全部的ARM协处理器指令。 表A-8 ARM杂项指令 SWI ​ 软中断指令。SWI 指令用于产生软中断，从而实现在用户模式变换到管理模式，CPSR保存到管理模式的SPSR中，执行转移到SWI 向量，在其它模式下也可使用SWI 指令，处理同样地切换到管理模式。指令格式如下：​ SWI{cond} immed_24​ 其中：immed_24 24 位立即数，值为0～16777215 之间的整数。​ SWI 指令举例如下：​ SWI 0 ;软中断，中断立即数为0​ SWI 0x123456 ;软中断，中断立即数为0x123456​ 使用SWI 指令时，通常使用以下两种方法进行传递参数，SWI 异常中断处理程序就可以提供相关的服务，这两种方法均是用户软件协定。SWI异常中断处理程序要通过读取引起软中断的SWI 指令，以取得24 位立即数。​ （A）指令24 位的立即数指定了用户请求的服务类型，参数通过用寄存器传递。​ MOV R0,#34 ;设置了功能号为34​ SWI 12 ;调用12 号软中断​ （B）指令中的24 位立即数被忽略，用户请求的服务类型由寄存器R0 的值决定，参数通过其它的通用寄存器传递。​ MOV R0,#12 ;调用12 号软中断​ MOV R1,#34 ;设置子功能号为34​ SWI 0 ;​ 在SWI 异常中断处理程序中，取出SWI 立即数的步骤为：首先确定引起软中断的SWI指令是ARM指令还时Thumb 指令，这可通过对SPSR 访问得到：然后要取得该SWI 指令的地址，这可通过访问LR 寄存器得到：接着读出指令，分解出立即数。​ 读出SWI 立即数：​ T_bit EQU 0x20​ SWI_Hander​ STMFD SP!,{R0_R3,R12,LR} ;现场保护​ MRS R0,SPSR ;读取SPSR​ STMFD SP!,{R0} ;保存SPSR​ TST R0,#T_bit ;测试T标志位​ LDRNEH R0,[LR,#-2] ;若是Thumb指令，读取指令码(16 位)​ BICNE R0,R0,#0xFF00 ;取得Thumb 指令的8 位立即数​ LDREQ R0,[LR,#-4] ;若是ARM 指令，读取指令码(32 位)​ BICNQ R0,R0,#0xFF00000 ;取得ARM 指令的24 位立即数​ …​ LDMFD SP!,{R0-R3,R12,PC}^ ;SWI 异常中断返回 MRS​ 读状态寄存器指令。在ARM 处理器中，只有MRS 指令可以状态寄存器CPSR或SPSR读出到通用寄存器中。指令格式如下：​ MRS{cond} Rd ,psr​ 其中： Rd 目标寄存器。Rd 不允许为R15。​ psr CPSR 或SPSR​ MRS指令举例如下：​ MRS R1,CPSR ;将CPSR状态寄存器读取，保存到R1 中​ MRS R2,SPSR ;将SPSR状态寄存器读取，保存到R2 中​ MRS 指令读取CPSR，可用来判断ALU 的状态标志，或IRQ、FIQ中断是否允许等；在异常处理程序中，读SPSR 可知道进行异常前的处理器状态等。MRS 与MSR 配合使用，实现CPSR 或SPSR 寄存器的读—修改—写操作，可用来进行处理器模式切换()，允许/禁止IRQ/FIQ中断等设置。另外，进程切换或允许异常中断嵌套时，也需要使用MRS 指令读取SPSR 状态值。保存起来。​ 使能IRQ 中断例程：​ ENABLE_IRQ​ MRS R0,CPSR​ BIC R0。R0,#0x80​ MSR CPSR_c,R0​ MOV PC,LR​ 禁能IRQ 中断例程：​ DISABLE_IRQ​ MRS R0,CPSR​ ORR R0,R0,#0x80​ MSR CPSR_c,R0​ MOV PC,LR MSR​ 写状态寄存器指令。在ARM 处理器中。只有MSR 指令可以直接设置状态寄存器CPSR或SPSR。指令格式如下：​ MSR{cond} psr_fields,#immed_8r​ MSR{cond} psr_fields,Rm​ 其中： psr CPSR 或SPSR​ fields 指定传送的区域。Fields 可以是以下的一种或多种(字母必须为小写)：​ c 控制域屏蔽字节(psr[7…0])​ x 扩展域屏蔽字节(psr[15…8])​ s 状态域屏蔽字节(psr[23。…16])​ f 标志域屏蔽字节(psr[31…24])​ immed_8r 要传送到状态寄存器指定域的立即数，8 位。​ Rm 要传送到状态寄存器指定域的数据的源寄存器。​ MSR 指令举例如下：​ MSR CPSR_c,#0xD3 ;CPSR[7…0]=0xD3，即切换到管理模式。​ MSR CPSR_cxsf,R3 ;CPSR=R3​ 只有在特权模式下才能修改状态寄存器。​ 程序中不能通过MSR 指令直接修改CPSR 中的T 控制位来实现ARM 状态/Thumb状态的切换，必须使用BX 指令完成处理器状态的切换(因为BX 指令属转移指令，它会打断流水线状态，实现处理器状态切换)。MRS 与MSR 配合使用，实现CPSR或SPSR 寄存器的读-修改-写操作，可用来进行处理器模式切换、允许/禁止IRQ/FIQ 中断等设置。​ 堆栈指令实始化例程：​ INITSTACK​ MOV R0,LR ;保存返回地址​ ;设置管理模式堆栈​ MSR CPSR_c,#0xD3​ LDR SP,StackSvc​ ;设置中断模式堆栈​ MSR CPSR_c,#0xD2​ LDR SP,StackIrq​ … 1.3.6. ARM 伪指令​ ARM 伪指令不是ARM 指令集中的指令，只是为了编程方便编译器定义了伪指令，使用时可以像其它ARM 指令一样使用，但在编译时这些指令将被等效的ARM 指令代替。ARM伪指令有四条，分别为ADR 伪指令、ADRL 伪指令、LDR 伪指令和NOP 伪指令。 ADR​ 小范围的地址读取伪指令。ADR 指令将基于PC 相对偏移的地址值读取到寄存器中。在汇编编译源程序时，ADR伪指令被编译器替换成一条合适的指令。通常，编译器用一条ADD 指令或SUB 指令来实现该ADR 伪指令的功能，若不能用一条指令实现，则产生错误，编译失败。​ ADR 伪指令格式如下：​ ADR{cond} register,exper​ 其中：register 加载的目标寄存器。​ exper 地址表达式。当地址值是非字地齐时，取值范围-255～255 字节之间；当地址是字对齐时，取值范围-1020～1020字节之间。​ 对于基于PC 相对偏移的地址值时，给定范围是相对当前指令地址后两个字处(因为ARM7TDMI为三级流水线)。​ ADR 伪指令举例如下：​ LOOP MOV R1, #0xF0​ …​ ADR R2, LOOP ;将LOOP 的地址放入R2​ ADR R3, LOOP+4​ 可以用ADR 加载地址，实现查表：​ …​ ADR R0,DISP_TAB ;加载转换表地址​ LDRB R1,[R0,R2] ;使用R2作为参数，进行查表​ …​ DISP_TAB​ DCB0Xc0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90 ADRL​ 中等范围的地址读取伪指令。ADRL 指令将基于PC 相对偏移的地址值或基于寄存器相对偏移的地址值读取到寄存器中，比ADR伪指令可以读取更大范围的地址。在汇编编译源程序时，ADRL 伪指令被编译器替换成两个条合适的指令。若不能用两条指令实现ADRL 伪指令功能，则产生错误，编译失败。ADRL伪指令格式如下：​ ADR{cond} register,exper​ 其中：register 加载的目标寄存器。​ expr 地址表达式。当地址值是非字对齐时，取范围-64K～64K 字节之间；当地址值是字对齐时，取值范围-256K～256K字节之间。​ ADRL 伪指令举例如下：​ ADRL R0,DATA_BUF​ …​ ADRL R1 DATA_BUF+80​ …​ DATA_BUF​ SPACE 100 ;定义100 字节缓冲区​ 可以且用ADRL 加载地址，实现程序跳转，中等范围地址的加载：​ …​ ADR LR,RETURNI ;设置返回地址​ ADRL R1Thumb_Sub+1 ;取得了Thumb 子程序入口地址，且R1 的0 位置1​ BX R1 ;调用Thumb子程序，并切换处理器状态​ RETURNI​ …​ CODE16​ Thumb_Sub​ MOV R1,#10​ … LDR​ 大范围的地址读取伪指令。LDR 伪指令用于加载32 位的立即数或一个地址值到指定寄存器。在汇编编译源程序时，LDR伪指令被编译器替换成一条合适的指令。若加载的常数未超出MOV 或MVN 的范围，则使用MOV 或MVN 指令代替该LDR 伪指令，否则汇编器将常量放入字池，并使用一条程序相对偏移的LDR指令从文字池读出常量。LDR 伪指令格式如下：​ LDR{cond} register,=expr/label_expr​ 其中：register 加载的目标寄存器​ expr 32 位立即数。​ label_expr 基于PC 的地址表达式或外部表达式。​ LADR 伪指令举例如下：。​ LDR R0,=0x123456 ;加载32 位立即数0x12345678​ LDR R0,=DATA_BUF+60 ;加载DATA_BUF 地址+60​ …​ LTORG ;声明文字池​ 伪指令LDR 常用于加载芯片外围功能部件的寄存器地址(32 位立即数)，以实现各种控制操作加载32位立即数：​ …​ LDR R0,=IOPIN ;加载GPIO 寄存器IOPIN 的地址​ LDR R1,[R0] ;读取IOPIN 寄存器的值​ …​ LDR R0,=IOSET​ LDR R1,=0x00500500​ STR R1,[R0] ;IOSET=0x00500500​ …​ 从PC 到文字池的偏移量必须小于4KB。与ARM 指令的LDR 相比，伪指令的LDR的参数有“=”号 NOP​ 空操作伪指令。NOP 伪指令在汇编时将会被代替成ARM 中的空操作，比如可能为“MOV R0, R0”指令等，NOP 伪指令格式如下：​ NOP​ NOP​ NOP​ NOP​ SUBS R1, R1, #1​ BNE DELAY1​ … 1.4. 寻址方式1.4.1. 立即数寻址立即数前面有“#”号，并且如果是十六进制数则在“#”后添加“0x”或“&amp;”，二进制数“#”后面加“%”。 1.4.2. 寄存器寻址1.4.3. 寄存器间接寻址以寄存器中的值作为操作数的地址，而操作数本身放在存储器中。 例如： 1ADD R0，R1，[R2] 1.4.4. 基址变址寻址将寄存器的内容与指令中给出的地址偏移量相加，从而得到一个操作数的有效地址。 例如：LDR R0，[R1，#4] R0&lt;-[R1+4] 1.4.5. 多寄存器寻址一条指令可以完成多个寄存器值得传递，一条指令传送最多16个通用寄存器的值。 LDMIA R0，{R1，R2，R3，R4} 1.4.6. 相对寻址以程序计数器PC的值作为基地址，指令中的地址标号作为偏移量，将两者相加后得到的操作数的有效地址。 例如：BL NEXT; 1.4.7. 堆栈寻址使用一个堆栈指针的专用寄存器指示当前操作位置 递增堆栈：向高地址方向生长 递减堆栈：向低地址方向生长 满堆栈：堆栈指针指向最后压入堆栈的有效数据 空堆栈：堆栈指针指向下一个要放入数据的空位置 2. GNU ARM混编​ 汇编源程序一般用于系统最基本的初始化：初始化堆栈指针、设置页表、操作 ARM的协处理器等。这些初始化工作完成后就可以跳转到C代码main函数中执行。 1.1. GNU汇编语言语句格式​ 任何Linux汇编行都是如下结构：[:][} @comment l instruction为指令 l directive为伪操作 l pseudo-instruction为伪指令 l :为标号, GNU汇编中，任何以冒号结尾的标识符都被认为是一个标号，而不一定非要在一行的开始。 l comment为语句的注释 下面定义一个”add”的函数，最终返回两个参数的和： .section.text, “x” .globaladd @ give the symbol “add” externallinkage add: ​ ADD r0, r0, r1 @ add input arguments ​ MOV pc, lr @ return from subroutine @ endof program 注意： l ARM指令，伪指令，伪操作，寄存器名可以全部为大写字母，也可全部为小写字母，但不可大小写混用。 l 如果语句太长，可以将一条语句分几行来书写，在行末用“\”表示换行（即下一行与本行为同一语句）。“\”后不能有任何字符，包含空格和制表符（Tab)。 1.2. GNU汇编程序中的标号symbol（或label）​ 标号只能由a～z，A～Z，0～9，“.”，_等（由点、字母、数字、下划线等组成，除局部标号外，不能以数字开头）字符组成。 Symbol的本质：代表它所在的地址,因此也可以当作变量或者函数来使用。 l 段内标号的地址值在汇编时确定； l 段外标号的地址值在连接时确定。 Symbol的分类：3类（依据标号的生成方式）。 基于PC的标号。基于PC的标号是位于目标指令前的标号或者程序中数据定义伪操作前的标号。这种标号在汇编时将被处理成PC值加上（或减去）一个数字常量，常用于表示跳转指令”b”等的目标地址，或者代码段中所嵌入的少量数据。 基于寄存器的标号。基于寄存器的标号常用MAP和FIELD来定义，也可以用EQU来定义。这种标号在汇编时将被处理成寄存器的值加上（或减去）一个数字常量，常用于访问数据段中的数据。 绝对地址。绝对地址是一个32位数据。它可以寻址的范围为[0，232-1]即可以直接寻址整个内存空间。 特别说明：局部标号Symbol ​ 局部标号主要在局部范围内使用，而且局部标号可以重复出现。它由两部组成：开头是一个0-99直接的数字，后面紧接一个通常表示该局部变量作用范围的符号。局部变量的作用范围通常为当前段，也可以用ROUT来定义局部变量的作用范围。 ​ 局部变量定义的语法格式：N{routname} l N：为0~99之间的数字。 l routname：当前局部范围的名称（为符号），通常为该变量作用范围的名称（用ROUT伪操作定义的）。 ​ 局部变量引用的语法格式：%{F|B}{A|T}N{routname} l %：表示引用操作 l N：为局部变量的数字号 l routname：为当前作用范围的名称（用ROUT伪操作定义的） l F：指示编译器只向前搜索 l B：指示编译器只向后搜索 l A：指示编译器搜索宏的所有嵌套层次 l T：指示编译器搜索宏的当前层次 例：使用局部符号的例子，一段循环程序 subs r0, r0, #1 @每次循环使r0=r0-1 bne 1F @跳转到1标号去执行 注意： l 如果F和B都没有指定，编译器先向前搜索，再向后搜索 l 如果A和T都没有指定，编译器搜索所有从当前层次到宏的最高层次，比当前层次低的层次不再搜索。 l 如果指定了routname，编译器向前搜索最近的ROUT伪操作，若routname与该ROUT伪操作定义的名称不匹配，编译器报告错误，汇编失败。 1.3. GNU汇编程序中的分段 .section伪操作 .section &lt;section_name&gt; {,””} Startsa new code or data section. Sections in GNU are called .text, a code section, .data, an initializeddata section, and .bss, an uninitialized data section. Thesesections have default flags, and the linker understands the default names(similardirective to the armasm directive AREA).The following are allowable .section flags for ELF format files: Meaning a allowable section w writable section x executable section 中文解释： 用户可以通过.section伪操作来自定义一个段,格式如下： .section section_name [,”flags”[, %type[,flag_specific_arguments]]] 每一个段以段名为开始, 以下一个段名或者文件结尾为结束。这些段都有缺省的标志（flags），连接器可以识别这些标志。(与arm asm中的AREA相同)。下面是ELF格式允许的段标志flags： &lt;标志&gt; 含义 a 允许段 w 可写段 x 执行段 例：定义一个“段” .section.mysection @自定义数据段，段名为 “.mysection” .align 2 strtemp: ​ .ascii “Temp string \n\0” @对这一句的理解，我觉得应该是：将”Temp string \n\0”这个字符串存储在以标号strtemp为起始地址的一段内存空间里 汇编系统预定义的段名 l .text @代码段 l .data @初始化数据段.data Read-write initialized long data. l .bss @未初始化数据段 l .sdata @ .sdata Read-write initialized short data. l .sbss @ 注意：源程序中.bss段应该在.text段之前。 1.4. GNU汇编语言定义入口点汇编程序的缺省入口是_start标号，用户也可以在连接脚本文件中用ENTRY标志指明其它入口点。 例：定义入口点 .section .data &lt; initialized data here&gt; .section .bss &lt; uninitialized data here&gt; .section .text .globl _start _start: 1.5. GNU汇编程序中的宏定义格式如下： .macro 宏名参数名列表 @伪指令.macro定义一个宏 宏体 .endm @.endm表示宏结束 ​ 如果宏使用参数,那么在宏体中使用该参数时添加前缀“\”。宏定义时的参数还可以使用默认值。可以使用.exitm伪指令来退出宏。 例：宏定义 .macroSHIFTLEFT a, b .if \b&lt; 0 MOV \a,\a, ASR #-\b .exitm .endif MOV \a,\a, LSL #\b .endm 1.6. GNU汇编程序中的常数 十进制数以非0数字开头,如:123和9876； 二进制数以0b开头,其中字母也可以为大写； 八进制数以0开始,如:0456,0123； 十六进制数以0x开头,如:0xabcd,0X123f； 字符串常量需要用引号括起来,中间也可以使用转义字符,如: “You are welcome!\n”； 当前地址以“.”表示,在GNU汇编程序中可以使用这个符号代表当前指令的地址； 表达式：在汇编程序中的表达式可以使用常数或者数值, “-”表示取负数, “~”表示取补,“&lt;&gt;”表示不相等,其他的符号如:+、-、*、/、%、&lt;、&lt;&lt;、&gt;、&gt;&gt;、|、&amp;、^、!、==、&gt;=、&lt;=、&amp;&amp;、|| 跟C语言中的用法相似。 1.7. GNU ARM汇编的常用伪操作​ 在前面已经提到过了一些为操作，还有下面一些为操作： l 数据定义伪操作： .byte，.short，.long，.quad，.float，.string/.asciz/.ascii，重复定义伪操作.rept，赋值语句.equ/.set ； l 函数的定义； l 对齐方式伪操作 .align； l 源文件结束伪操作.end； l .include伪操作； l if伪操作； l .global/ .globl 伪操作； l .type伪操作； l 列表控制语句； 别于GNU AS汇编的通用伪操作,下面是ARM特有的伪操作： .reg ，.unreq ，.code ，.thumb ，.thumb_func ，.thumb_set， .ltorg ，.pool 数据定义伪操作 l .byte:单字节定义，如：.byte 1,2,0b01,0x34,072,’s’ ； l .short:定义双字节数据，如:.short 0x1234,60000 ； l .long:定义4字节数据，如:.long 0x12345678,23876565 l .quad:定义8字节，如:.quad 0x1234567890abcd l .float：定义浮点数，如：.float 0f-314159265358979323846264338327\ ​ 95028841971.693993751E-40 @ - pi l .string/.asciz/.ascii：定义多个字符串，如: .string “abcd”,”efgh”, “hello!” .asciz “qwer”,”sun”, “world!” .ascii “welcome\0” ​ 注意：ascii伪操作定义的字符串需要自行添加结尾字符’\0’。 l .rept:重复定义伪操作, 格式如下： .rept 重复次数 数据定义 .endr @结束重复定义 例： .rept 3 .byte 0x23 .endr l .equ/.set: 赋值语句, 格式如下： .equ(.set)变量名，表达式 例： .equ abc, 3 @让abc=3 函数的定义伪操作 l 函数的定义,格式如下： 函数名: 函数体 返回语句 ​ 一般的,函数如果需要在其他文件中调用, 需要用到.global伪操作将函数声明为全局函数。为了不至于在其他程序在调用某个C函数时发生混乱,对寄存器的使用我们需要遵循APCS准则。函数编译器将处理函数代码为一段.global的汇编码。 l 函数的编写应当遵循如下规则： a. a1-a4寄存器（参数、结果或暂存寄存器，r0到r3 的同义字）以及浮点寄存器f0-f3(如果存在浮点协处理器)在函数中是不必保存的； b. 如果函数返回一个不大于一个字大小的值，则在函数结束时应该把这个值送到 r0 中； c. 如果函数返回一个浮点数，则在函数结束时把它放入浮点寄存器f0中； d. 如果函数的过程改动了sp（堆栈指针，r13）、fp（框架指针，r11）、sl（堆栈限制，r10）、lr（连接寄存器，r14）、v1-v8（变量寄存器，r4 到 r11）和 f4-f7,那么函数结束时这些寄存器应当被恢复为包含在进入函数时它所持有的值。 .align .end .include .incbin伪操作 l .align:用来指定数据的对齐方式,格式如下: ​ .align [absexpr1, absexpr2] ​ 以某种对齐方式,在未使用的存储区域填充值. 第一个值表示对齐方式,4, 8,16或 32.第二个表达式值表示填充的值。 l .end:表明源文件的结束。 l .include:可以将指定的文件在使用.include 的地方展开,一般是头文件,例如: ​ .include “myarmasm.h” l .incbin伪操作可以将原封不动的一个二进制文件编译到当前文件中,使用方法如下: ​ .incbin”file”[,skip[,count]] ​ skip表明是从文件开始跳过skip个字节开始读取文件,count是读取的字数. ..if伪操作 ​ 根据一个表达式的值来决定是否要编译下面的代码, 用.endif伪操作来表示条件判断的结束,中间可以使用.else来决定.if的条件不满足的情况下应该编译哪一部分代码。 .if有多个变种: .ifdefsymbol @判断symbol是否定义 .ifcstring1,string2 @字符串string1和string2是否相等,字符串可以用单引号括起来 .ifeqexpression @判断expression的值是否为0 .ifeqsstring1,string2 @判断string1和string2是否相等,字符串必须用双引号括起来 .ifgeexpression @判断expression的值是否大于等于0 .ifgtabsolute expression @判断expression的值是否大于0 .ifleexpression @判断expression的值是否小于等于0 .ifltabsolute expression @判断expression的值是否小于0 .ifncstring1,string2 @判断string1和string2是否不相等, 其用法跟.ifc恰好相反。 .ifndefsymbol, .ifnotdef symbol @判断是否没有定义symbol, 跟.ifdef恰好相反 .ifneexpression @如果expression的值不是0, 那么编译器将编译下面的代码 .ifnesstring1,string2 @如果字符串string1和string2不相等, 那么编译器将编译下面的代码. .global .type .title .list l .global/ .globl ：用来定义一个全局的符号，格式如下: ​ .global symbol 或者 .globl symbol l .type：用来指定一个符号的类型是函数类型或者是对象类型, 对象类型一般是数据, 格式如下: ​ .type 符号, 类型描述 例： .globla .data .align4 .typea, @object .sizea, 4 a: .long10 例： .section.text .typeasmfunc, @function .globlasmfunc asmfunc: mov pc,lr 列表控制语句: .title：用来指定汇编列表的标题,例如: .title “my program” .list：用来输出列表文件. ARM特有的伪操作 l .reg: 用来给寄存器赋予别名,格式如下: ​ 别名 .req 寄存器名 l .unreq: 用来取消一个寄存器的别名,格式如下: .unreq 寄存器别名 ​ 注意被取消的别名必须事先定义过,否则编译器就会报错,这个伪操作也可以用来取消系统预制的别名, 例如r0, 但如果没有必要的话不推荐那样做。 l .code伪操作用来选择ARM或者Thumb指令集,格式如下: .code 表达式 如果表达式的值为16则表明下面的指令为Thumb指令,如果表达式的值为32则表明下面的指令为ARM指令. l .thumb伪操作等同于.code 16, 表明使用Thumb指令, 类似的.arm等同于.code 32 l .force_thumb伪操作用来强制目标处理器选择thumb的指令集而不管处理器是否支持 l .thumb_func伪操作用来指明一个函数是thumb指令集的函数 l .thumb_set伪操作的作用类似于.set, 可以用来给一个标志起一个别名, 比.set功能增加的一点是可以把一个标志标记为thumb函数的入口, 这点功能等同于.thumb_func l .ltorg用于声明一个数据缓冲池(literal pool)的开始,它可以分配很大的空间。 l .pool的作用等同.ltorg l .space&lt;number_of_bytes&gt; {,&lt;fill_byte&gt;} ​ 分配number_of_bytes字节的数据空间，并填充其值为fill_byte，若未指定该值，缺省填充0。（与armasm中的SPACE功能相同） l .word {,} …插入一个32-bit的数据队列。（与armasm中的DCD功能相同）可以使用.word把标识符作为常量使用。 例： Start: valueOfStart: ​ .word Start 这样程序的开头Start便被存入了内存变量valueOfStart中。 l .hword {,} … 插入一个16-bit的数据队列。（与armasm中的DCW相同） 1.8. GNU ARM汇编特殊字符和语法 代码行中的注释符号: ‘@’ 整行注释符号: ‘#’ 语句分离符号: ‘;’ 立即数前缀: ‘#’ 或 ‘$’ 3. ARM GCC 内嵌汇编对于基于ARM的RISC处理器，GNUC编译器提供了在C代码中内嵌汇编的功能。这种非常酷的特性提供了C代码没有的功能，比如手动优化软件关键部分的代码、使用相关的处理器指令。这里设想了读者是熟练编写ARM汇编程序读者，因为该片文档不是ARM汇编手册。同样也不是C语言手册。这篇文档假设使用的是GCC 4 的版本，但是对于早期的版本也有效。 GCCasm 声明 让我们以一个简单的例子开始。就像C中的声明一样，下面的声明代码可能出现在你的代码中。 /NOP 例子 / asm(“movr0,r0”); 该语句的作用是将r0移动到r0中。换句话讲他并不干任何事。典型的就是NOP指令，作用就是短时的延时。 请接着阅读和学习这篇文档，因为该声明并不像你想象的和其他的C语句一样。内嵌汇编使用汇编指令就像在纯汇编程序中使用的方法一样。可以在一个asm声明中写多个汇编指令。但是为了增加程序的可读性，最好将每一个汇编指令单独放一行。 asm( “mov r0, r0\n\t” “mov r0, r0\n\t” “mov r0, r0\n\t” “mov r0, r0” ); 换行符和制表符的使用可以使得指令列表看起来变得美观。你第一次看起来可能有点怪异，但是当C编译器编译C语句的是候，它就是按照上面（换行和制表）生成汇编的。到目前为止，汇编指令和你写的纯汇编程序中的代码没什么区别。但是对比其它的C声明，asm的常量和寄存器的处理是不一样的。通用的内嵌汇编模版是这样的。 asm(code : output operand list : input operand list : clobberlist); 汇编和C语句这间的联系是通过上面asm声明中可选的outputoperand list和input operand list。Clobber list后面再讲。 下面是将c语言的一个整型变量传递给汇编，逻辑左移一位后在传递给C语言的另外一个整型变量。 / Rotating bits example / asm(“mov %[result], %[value], ror #1” :[result] “=r” (y) : [value] “r” (x)); 每一个asm语句被冒号（:）分成了四个部分。 汇编指令放在第一部分中的“”中间。 “mov %[result], %[value], ror #1” 接下来是冒号后的可选择的output operand list，每一个条目是由一对[]（方括号）和被他包括的符号名组成，它后面跟着限制性字符串，再后面是圆括号和它括着的C变量。这个例子中只有一个条目。 [result] “=r” (y) 接着冒号后面是输入操作符列表，它的语法和输入操作列表一样 [value] “r” (x) 破坏符列表，在本例中没有使用 就像上面的NOP例子，asm声明的4个部分中，只要最尾部没有使用的部分都可以省略。但是有有一点要注意的是，上面的4个部分中只要后面的还要使用，前面的部分没有使用也不能省略，必须空但是保留冒号。下面的一个例子就是设置ARMSoc的CPSR寄存器，它有input但是没有output operand。 asm(“msr cpsr,%[ps]” : : [ps]”r”(status)) 即使汇编代码没有使用，代码部分也要保留空字符串。下面的例子使用了一个特别的破坏符，目的就是告诉编译器内存被修改过了。这里的破坏符在下面的优化部分在讲解。 asm(“”:::”memory”); 为了增加代码的可读性，你可以使用换行，空格，还有C风格的注释。 asm(“mov %[result], %[value], ror#1” ​ : [result]”=r” (y) /Rotation result. / ​ : [value]”r” (x) /Rotated value. / ​ : / No clobbers / ); 在代码部分%后面跟着的是后面两个部分方括号中的符号，它指的是相同符号操作列表中的一个条目。 %[result]表示第二部分的C变量y，%[value]表示三部分的C变量x； 符号操作符的名字使用了独立的命名空间。这就意味着它使用的是其他的符号表。简单一点就是说你不必关心使用的符号名在C代码中已经使用了。在早期的C代码中，循环移位的例子必须要这么写： asm(“mov %0, %1, ror #1” :”=r” (result) : “r” (value)) 在汇编代码中操作数的引用使用的是%后面跟一个数字，%1代表第一个操作数，%2代码第二个操作数，往后的类推。这个方法目前最新的编译器还是支持的。但是它不便于维护代码。试想一下，你写了大量的汇编指令的代码，要是你想插入一个操作数，那么你就不得不从新修改操作数编号。 优化C代码 有两种情况决定了你必须使用汇编。1st，C限制了你更加贴近底层操作硬件，比如，C中没有直接修改程序状态寄存器（PSR）的声明。2nd就是要写出更加优化的代码。毫无疑问GNUC代码优化器做的很好，但是他的结果和我们手工写的汇编代码相差很远。 这一部分有一点很重要，也是被别人忽视最多的就是：我们在C代码中通过内嵌汇编指令添加的汇编代码，也是要被C编译器的优化器处理的。让我们下面做个试验来看看吧。 下面是代码实例。 bigtree@just:~/embedded/basic-C$ arm-linux-gcc -c test.c bigtree@just:~/embedded/basic-C$ arm-linux-objdump -D test.o 编译器选择r3作为循环移位使用。它也完全可以选择为每一个C变量分配寄存器。Load或者store一个值并不显式的进行。下面是其它编译器的编译结果。 E420A0E1 mov r2, r4, ror #1 @ y, x 编译器为每一个操作数选择一个相应的寄存器，将操作过的值cache到r4中，然后传递该值到r2中。这个过程你能理解不？ 有的时候这个过程变得更加糟糕。有时候编译器甚至完全抛弃你嵌入的汇编代码。C编译器的这种行为，取决于代码优化器的策略和嵌入汇编所处的上下文。如果在内嵌汇编语句中不使用任何输出部分，那么C代码优化器很有可能将该内嵌语句完全删除。比如NOP例子，我们可以使用它作为延时操作，但是对于编译器认为这影响了程序的执行速速，认为它是没有任何意义的。 上面的解决方法还是有的。那就是使用volatile关键字。它的作用就是禁止优化器优化。将NOP例子修改过后如下： / NOP example, revised / asm volatile(“movr0, r0”); 下面还有更多的烦恼等着我们。一个设计精细的优化器可能重新排列代码。看下面的代码： i++; if (j == 1) x += 3; i++; 优化器肯定是要从新组织代码的，两个i++并没有对if的条件产生影响。更进一步的来讲，i的值增加2，仅仅使用一条ARM汇编指令。因而代码要重新组织如下： if (j == 1) x += 3; i += 2; 这样节省了一条ARM指令。结果是：这些操作并没有得到许可。 这些将对你的代码产生很到的影响，这将在下面介绍。下面的代码是c乘b，其中c和b中的一个或者两个可能会被中断处理程序修改。进入该代码前先禁止中断，执行完该代码后再开启中断。 asm volatile(“mrs r12,cpsr\n\t” “orr r12, r12, #0xC0\n\t” “msr cpsr_c, r12\n\t” ::: “r12”, “cc”); c = b; / This may fail. */ asm volatile(“mrs r12, cpsr\n” “bic r12, r12, #0xC0\n” “msr cpsr_c, r12” ::: “r12”, “cc”); 但是不幸的是针对上面的代码，优化器决定先执行乘法然后执行两个内嵌汇编，或相反。这样将会使得我们的代码变得毫无意义。 我们可以使用clobberlist帮忙。上面例子中的clobber list如下： “r12”,”cc” 上面的clobber list将会将向编译器传达如下信息，修改了r12和程序状态寄存器的标志位。Btw，直接指明使用的寄存器，将有可能阻止了最好的优化结果。通常你只要传递一个变量，然后让编译器自己选择适合的寄存器。另外寄存器名，cc（condition registor 状态寄存器标志位），memory都是在clobber list上有效的关键字。它用来向编译器指明，内嵌汇编指令改变了内存中的值。这将强迫编译器在执行汇编代码前存储所有缓存的值，然后在执行完汇编代码后重新加载该值。这将保留程序的执行顺序，因为在使用了带有memory clobber的asm声明后，所有变量的内容都是不可预测的。 asm volatile(“mrs r12,cpsr\n\t” “orr r12, r12, #0xC0\n\t” “msr cpsr_c, r12\n\t” :: : “r12”, “cc”,”memory”); c = b; / This is safe. */ asm volatile(“mrs r12, cpsr\n” “bic r12, r12, #0xC0\n” “msr cpsr_c, r12” ::: “r12”, “cc”,”memory”); 使所有的缓存的值都无效，只是局部最优（suboptimal）。你可以有选择性的添加dummyoperand 来人工添加依赖。 asm volatile(“mrs r12,cpsr\n\t” “orr r12, r12, #0xC0\n\t” “msr cpsr_c, r12\n\t” : “=X” (b) :: “r12”,”cc”); c = b; / This is safe. */ asm volatile(“mrs r12 上面的第一个asm试图修改变量先b，第二个asm试图修改c。这将保留三个语句的执行顺序，而不要使缓存的变量无效。 理解优化器对内嵌汇编的影响很重要。如果你读到这里还是云里雾里，最好是在看下个主题之前再把这段文章读几遍^_^。 Input and output operands 前面我们学到，每一个input和output operand，由被方括号[]中的符号名，限制字符串，圆括号中的C表达式构成。 这些限制性字符串有哪些，为什么我们需要他们？你应该知道每一条汇编指令只接受特定类型的操作数。例如：跳转指令期望的跳转目标地址。不是所有的内存地址都是有效的。因为最后的opcode只接受24位偏移。但矛盾的是跳转指令和数据交换指令都希望寄存器中存储的是32位的目标地址。在所有的例子中，C传给operand的可能是函数指针。所以面对传给内嵌汇编的常量、指针、变量，编译器必须要知道怎样组织到汇编代码中。 对于ARM核的处理器，GCC 4 提供了一下的限制。 Constraint Usage in ARM state Usage in Thumb state f Floating point registers f0 .. f7 Not available G Immediate floating point constant Not available H Same a G, but negated Not available I Immediate value in data processing instructionse.g. ORR R0, R0, #operand Constant in the range 0 .. 255e.g. SWI operand J Indexing constants -4095 .. 4095e.g. LDR R1, [PC, #operand] Constant in the range -255 .. -1e.g. SUB R0, R0, #operand K Same as I, but inverted Same as I, but shifted L Same as I, but negated Constant in the range -7 .. 7e.g. SUB R0, R1, #operand l Same as r Registers r0..r7e.g. PUSH operand M Constant in the range of 0 .. 32 or a power of 2e.g. MOV R2, R1, ROR #operand Constant that is a multiple of 4 in the range of 0 .. 1020e.g. ADD R0, SP, #operand m Any valid memory address N Not available Constant in the range of 0 .. 31e.g. LSL R0, R1, #operand o Not available Constant that is a multiple of 4 in the range of -508 .. 508e.g. ADD SP, #operand r General register r0 .. r15e.g. SUB operand1, operand2, operand3 Not available W Vector floating point registers s0 .. s31 Not available X Any operand = ：Write-only operand, usually used for all output operands+ ：Read-write operand, must be listed as an output operand&amp; ：A register that should be used for output only Output operands必须为write-only，相应C表达式的值必须是左值。Input operands必须为read-only。C编译器是没有能力做这个检查。 比较严格的规则是：不要试图向input operand写。但是如果你想要使用相同的operand作为input和output。限制性modifier（+）可以达到效果。例子如下： asm(“mov %[value], %[value], ror #1” : [value]”+r” (y)) 和上面例子不一样的是，最后的结果存储在input variable中。 可能modifier + 不支持早期的编译器版本。庆幸的是这里提供了其他解决办法，该方法在最新的编译器中依然有效。对于input operators有可能使用单一的数字n在限制字符串中。使用数字n可以告诉编译器使用的第n个operand，operand都是以0开始计数。下面是例子： asm(“mov %0, %0, ror #1” : “=r” (value) :”0” (value)) 限制性字符串“0”告诉编译器，使用和第一个output operand使用同样input register。 请注意，在相反的情况下不会自动实现。如果我没告诉编译器那样做，编译器也有可能为input和output选择相同的寄存器。第一个例子中就为input和output选择了r3。 在多数情况下这没有什么，但是如果在input使用前output已经被修改过了，这将是致命的。在input和output使用不同寄存器的情况下，你必须使用&amp;modifier来限制outputoperand。下面是代码示例： asm volatile(“ldr %0, [%1]””\n\t” ​ “str %2, [%1, #4]””\n\t” ​ : “=&amp;r” (rdv) ​ : “r”(&amp;table), “r” (wdv) ​ : “memory”); 在以张表中读取一个值然后在写到该表的另一个位置。 其他 内嵌汇编作为预处理宏 要是经常使用使用部分汇编，最好的方法是将它以宏的形式定义在头文件中。使用该头文件在严格的ANSI模式下会出现警告。为了避免该类问题，可以使用asm代替asm，volatile代替volatile。这可以等同于别名。下面就是个例程： #define BYTESWAP(val) \ asm volatile ( \ ​ “eor r3, %1, %1, ror #16\n\t” \ ​ “bic r3, r3, #0x00FF0000\n\t” \ ​ “mov %0, %1, ror #8\n\t” \ ​ “eor %0, %0, r3, lsr #8” \ ​ : “=r” (val) \ ​ : “0”(val) \ ​ : “r3”, “cc” \ ); C 桩函数 宏定义包含的是相同的代码。这在大型routine中是不可以接受的。这种情况下最好定义个桩函数。 unsigned long ByteSwap(unsigned longval) { asm volatile ( ​ “eor r3, %1, %1, ror #16\n\t” ​ “bic r3, r3, #0x00FF0000\n\t” ​ “mov %0, %1, ror #8\n\t” ​ “eor %0, %0, r3, lsr #8” ​ : “=r” (val) ​ : “0”(val) ​ : “r3” ); return val; } 替换C变量的符号名 默认的情况下，GCC使用同函数或者变量相同的符号名。你可以使用asm声明，为汇编代码指定一个不同的符号名 unsigned long value asm(“clock”) = 3686400 这个声明告诉编译器使用了符号名clock代替了具体的值。 替换C函数的符号名 为了改变函数名，你需要一个原型声明，因为编译器不接受在函数定义中出现asm关键字。 extern long Calc(void) asm (“CALCULATE”) 调用函数calc()将会创建调用函数CALCULATE的汇编指令。 强制使用特定的寄存器 局部变量可能存储在一个寄存器中。你可以利用内嵌汇编为该变量指定一个特定的寄存器。 void Count(void) { register unsigned char counterasm(“r3”); … some code… asm volatile(“eor r3, r3,r3”); … more code… } 汇编指令“eor r3, r3, r3”，会将r3清零。Waring：该例子在到多数情况下是有问题的，因为这将和优化器相冲突。因为GCC不会预留其它寄存器。要是优化器认为该变量在以后一段时间没有使用，那么该寄存器将会被再次使用。但是编译器并没有能力去检查是否和编译器预先定义的寄存器有冲突。如果你用这种方式指定了太多的寄存器，编译器将会在代码生成的时候耗尽寄存器的。 临时使用寄存器 如果你使用了寄存器，而你没有在input或output operand传递，那么你就必须向编译器指明这些。下面的例子中使用r3作为scratch 寄存器，通过在clobber list中写r3，来让编译器得知使用该寄存器。由于ands指令跟新了状态寄存器的标志位，使用cc在clobber list中指明。 asm volatile( “ands r3, %1, #3” “\n\t” “eor %0, %0, r3” “\n\t” “addne %0, #4” : “=r” (len) : “0” (len) : “cc”, “r3” ); 最好的方法是使用桩函数并且使用局部临时变量 寄存器的用途 比较好的方法是分析编译后的汇编列表，并且学习C 编译器生成的代码。下面的列表是编译器将ARM核寄存器的典型用途，知道这些将有助于理解代码。 Register Alt. Name Usage r0 a1 First function argumentInteger function resultScratch register r1 a2 Second function argumentScratch register r2 a3 Third function argumentScratch register r3 a4 Fourth function argumentScratch register r4 v1 Register variable r5 v2 Register variable r6 v3 Register variable r7 v4 Register variable r8 v5 Register variable= r9 v6 rfpRegister variableReal frame pointer r10 sl Stack limit r11 fp Argument pointer r12 ip Temporary workspace r13 sp Stack pointer r14 lr Link register Workspace r15 pc Program counter]]></content>
  </entry>
  <entry>
    <title><![CDATA[LOVE]]></title>
    <url>%2F2019%2F05%2F27%2FLOVE%2F</url>
    <content type="text"><![CDATA[Please enter the password to read. Incorrect Password! No content to display! U2FsdGVkX1+jAKsIbz109ZhPyNkkKS4Ko987LbPzpqntNvH6ZIZbAvw36VUnbMjX6gm0NVqI6HGbHvH7YTvCYd1EwZhTPOkWBcpICLZG1b/tKVr4iHVn1MeGHfn+CttcknlHcbOkYRqBKT5Y5rBTylUgCKqmgd61rMQw3FdQVn3oBRbe9OLCvTgkKxCvaPn8yaZOATLUeGr6BVpsIYvb4NbqOUFMZPS9chOmbUznfv4INbZtLZ4i9HWnP+L78cWmG6wWVmg7pjzehj0TCSQU8w5i0lxQE2c8KIg3qPzELAGGooCNq+3TOzM6mX6v+iMj+NaYjdeCek02zDe43JA4rX/0T2MfhGarmyv/La0pB6UhbGktY6HRqk/vE3YmyZz92l/cVVHsjlSTigbDhZJamRn4i/2mtBnoMdeeqHza48EtEeXOEHKkCRBb+CinR2Wqx8z9vUC/y8KrmQTCmZgFmCQAkcwgLN5VgpMymn9P2meMmO+mCfxBzXHTM+PVcmdjBcjciyBxnlLkEwKp+Q4FckNr3lR/QW/v165NABINrmIvapGe04QUnl9RRji9h84c9Yf5T2sTsVkfN7XQwFkOeF36cD07YwhID0LeMfxA7oCbK8T11TxcCaED7px9btafI1L9EAG4Wa9rpg+8+cMZCIt4I9wdkV9OwmFlYCeK++FaNOe3Zg6DLm7B1nF9Ujz6LrrPIDqHtycBna5ljQDp8nbwS29kIj1h3jcQJ4mU9Iu6pYjFChF/JC0eGoN4KjMzozwdZsSK0NOdScmidNLBZzeYO8o5OZnD0wnhYM5lCQbpYd46HVY2OYSKP6ukzV7pxwz1bv46DGElFyPpa+UdiAYIZo0AjO7shbD2AZAdPR0votYv686xzQuacmvO2qAU/wzO08ZmDMC4M56ajIks/m+dlwPoFS3z7DvFygOtFEy2lshW4ZpnN1mWGdyvWekcwlDQTbgfIoVwGPzGoQd0DozCEvCddUmtGQVfLSrBTPqRaDq2uR5C9YpQ2q8looCXUIK33K28QR+XqbQcVFnrMgz5rfEowRkQj7N7cXd0dnVcSEUJk8Sxx6hdEod3ik/1A868lBp7ctIqA7+K7gC0fHY97xiRma31bADOtqUZ5I5EnqMyTEU8IUWQnMPtRqnqgG25liDWRdYDKX5ji3X/uxez4YK5k0UCOSNDvqnk+ms/TTvLN4jAePqUrDwE6fBLZ4xy2RQz210oVf4YZtjXGNsK9HsEgz4TBgUh9nKv70GWg9frP1bYuIi/vZynVwZceCmn+0YMiJhCz+3I8lw69eoHdxuvez9y1CbZzS8hTTQ0Y9Qgq7aEn0URJplX/UZvz1lSq6drmwCKsjXyxLiOmUAHKYDEJ1QvCVItNFj7OLuxxR/s56r1gY+ScDW4EIRxqtVezNOex89NlpD8k1xfZ0q7fn+Ttcx9jYQHP5aVZJ8QeXZkRCstq1PoZmGQdJE9XGqcL5O/wKG7CA53SCMVWteel3P/EOZsFyHEY1qhi0AruvIpnpTt4jiFhVyRBvScsIzaD/PwWqKBkyzSQuLLblRBxiKWzG60C2X8dUjTdxQ4JNKajZRzqUw/esh+TkHDKYSDA22IsBkheDof5E+/mlUo/c3b0ojoVgzRw4W+BMT3K2Pl/KRaTxmr4qv3DFesA8P9CPZKBpQQHv7HtlsOzVb26D9t1Lmj/EbCkXWB2NUeHV6lCu1sYxYyihNgA3YgjsOtJd7RUIHFROVlK7ln+7gWK6ir8tFeBUSdoFRPO54t8U+EV0ZnYbHOYqGPPJipJ0/RouwdcoreRElfED7rCgyAEicF7dzU3Jp9aGdnwM3P5KAmLX+dUtba/C+8e+DosgGNUsAG5vIg8qLExKv1uVXUk+uZ3t5Phet0F0cDn7q21RQP03rVMroGhaCaclIoKYBC8V9KUDZqBspjWLhkMSD1aj46JbLd5AZkr+YlFdLCngUjrF48CUlWT8uocn6hxlRhq5YfKlWEmQSQOzntvg==]]></content>
  </entry>
  <entry>
    <title><![CDATA[Movie]]></title>
    <url>%2F2019%2F05%2F27%2FMovie%2F</url>
    <content type="text"><![CDATA[To the movieIn the wanda 战狼2 空天猎 极致追击 英伦对决 看不见的客人 羞羞的铁拳 天才枪手 王牌特工2：黄金圈 银翼杀手2049 全球风暴 雷神3：诸神黄昏 精灵宝可梦： 波尔凯尼恩与机巧的马机雅娜 正义联盟 恐袭波士顿 推理笔记 烟花 寻梦环游记 巨额来电 帕丁顿熊2 鲨海 奇门遁甲 心理罪之城市之光 芳华 疯狂特警队 妖猫传 机器之血 妖铃铃 前任3： 再见前任 二代妖精之今生有幸 星球大战：最后的绝地武士 勇敢者游戏： 决战丛林 无问西东 谜巢 英雄本色2018 神秘巨星 移动迷宫3： 死亡解药 绝命时钟2：22 24小时：末路重生 忌日快乐 南极之恋 唐人街探案2 红海行动 捉妖记2 小萝莉的猴神大叔 黑豹 解忧杂货店 古墓丽影：起源之战 环太平洋：雷霆再起 头号玩家 通勤营救 起跑线 湮灭 脱单告急 幕后玩家 后来的我们 哆啦A梦：大雄的金银岛 复仇者联盟3：无限战争 超时空同居 游侠索罗：星球大战外传 深海越狱 侏罗纪世界2 超人总动员2 龙虾刑警 金蝉脱壳2 我不是药神 动物世界 邪不压正 摩天营救 西虹市首富 解码游戏 爱情公寓 一出好戏 快把我哥带走 欧洲攻略 蚁人2：黄蜂女现身 碟中谍6：全面瓦解 阿尔法：狼伴归途 反贪风暴3 影 无双 李茶的姑妈 我的间谍前男友 铁血战士 昨日青空 毒液：致命守护者 你好，之华 冰封侠：时空行者 飓风奇劫 名侦探柯南： 零的执行人 神奇动物： 格林德沃之罪 无敌破坏王2：大闹互联网 憨豆特工3 无名之辈 海王 龙猫 网络迷踪 天气预爆 来电狂响 蜘蛛侠：平行宇宙 地球最后的夜晚 大黄蜂 “大”人物 命运之夜——天之杯：恶兆之花 白蛇：缘起 密室逃生 死侍2：我爱我家 掠食城市 廉政风云4 流浪地球 疯狂外星人 飞驰人生 一吻定情 阿丽塔：战斗天使 驯龙高手3 惊奇队长 过春天 比悲伤更悲伤的故事 波西米亚狂想曲 乐高大电影2 海市蜃楼 反贪风暴4 风中有朵雨做的云 雷霆沙赞！ 复仇者联盟4： 终局之战 祈祷落幕时 调音师 何以为家 大侦探皮卡丘 阿拉丁 哥斯拉2：怪兽之王 哆啦A梦：大雄的月球探险 X战警：黑凤凰 追龙II 绝杀慕尼黑 秦明·生死语者 黑衣人：全球追缉 玩具总动员4 千与千寻 蜘蛛侠：英雄远征 扫毒2：天地对决 爱宠大机密2 哪吒之魔童降世 烈火英雄 使徒行者2：碟影行动 沉默的证人 全职高手之巅峰荣耀 愤怒的小鸟2 铤而走险 罗小黑战记 检察方的罪人 宝莱坞机器人2.0：重生归来 罗小黑战记 名侦探柯南：绀青之拳 诛仙I 小Q 友情以上 中国机长 我和我的祖国 攀登者]]></content>
  </entry>
  <entry>
    <title><![CDATA[Magic]]></title>
    <url>%2F2019%2F05%2F20%2FMagic%2F</url>
    <content type="text"><![CDATA[Welcome to my blog, enter password to read. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>Magic</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SpMV]]></title>
    <url>%2F2019%2F05%2F19%2FSpMV%2F</url>
    <content type="text"><![CDATA[稀疏矩阵向量乘 本文参考: FPGA矩阵计算并行算法与结构(知网) 稀疏矩阵向量乘法xFPGA 稀疏矩阵向量乘法x并行编程方法 稀疏矩阵存储格式总结 深度学习FPGA加速器设计 在矩阵中，若数值为0的元素数目远远多于非0元素的数目，并且非0元素分布没有规律时，则称该矩阵为稀疏矩阵；与之相反，若非0元素数目占大多数时，则称该矩阵为稠密矩阵。定义非零元素的总数比上矩阵所有元素的总数为矩阵的稠密度。SpMV即 Sparse Matrix Vector Multiplication 稀疏矩阵向量乘法的优化稀疏矩阵向量乘法（SPMV）可在很多情况下代替稠密矩阵运算，可以大量节省内存占用，减少计算开销。矩阵向量乘法不同于矩阵和矩阵的乘法，这是完全访存密集型的计算，我们主要的优化方向是提升访存效率或减少访存开销。 稀疏矩阵一般只存储非零元的信息，非零元的存储格式决定了访存的模式，这需要根据非零元的分布模式和要做的计算类型来设计。我们假设分布模式并非对角线分布，整体分布较均匀，局部可能会有聚集，计算类型是稀疏矩阵乘以稠密向量，结果为稠密向量。 标准的稀疏矩阵存储格式主要有：COO（Coordinate Format）和CSR（Compressed Sparse Row）等。COO很简单，就是使用3个数组，分别存储全部非零元的行下标（row index）、列下标（column index）和值（value）；CSR稍复杂，对行下标进行了压缩，假设矩阵行数是m，则压缩后的数组长度为m+1，记作（row ptr），其中第i个元素（0-base）表示矩阵前i行的非零元个数。 图1-1和图1-2展示了COO和CSR格式存储稀疏矩阵的一个例子。 我们来考虑矩阵向量乘法计算y=Ax，其中A是稀疏矩阵，维度是m和n，非零元个数是k；x和y是稠密向量，维度分别是n和m，m×n &gt;&gt; k &gt;&gt; max(m, n)。做这个稀疏矩阵向量乘法就要遍历A的每一行，和x对应位置相乘，把结果累加到y的对应位置。这个过程对A的k个非零元全部访问了一遍，对x也访问了k个元素（重叠），对y访问了一遍，所以优化重点在于减少访问A的冗余，并提升访问x的效率。下面这几个优化标准稀疏矩阵存储格式的方法，可以提升访存效率，减少冗余。 （1）对矩阵A做行列分块处理 对x的访问每次总是从左到右进行稀疏的遍历，如果n很大（比如上百万甚至更多），则访问x的空间局部性较差。所以我们首先改进矩阵A的访问顺序，将矩阵A分解成多个方形的子矩阵。子矩阵的维度适应较高层CPU硬件cache的大小，这样在遍历每一个子矩阵时，对x的访问相对集中于一个较小的区间，这个区间内的x会被cache缓存，这样能够大大提高访问效率。分块方式如图1-3所示。 （2）自适应分块存储结构 由于稀疏矩阵的非零元分布不一定均匀，有的分块会非常稀疏，有的则会相对稠密。对于极稀疏的分块（非零元数量远小于行数），如果用和CSR相似的压缩行存储策略，则会浪费空间，所以用COO的方式反而更能节省存储空间，提高访问效率。 对于哪些分块使用CSR，哪些使用COO方式，可以通过实验的方式确定一个非零元的数量和分块大小的比值。高于该值的用CSR方式存储，否则用COO方式存储。 如图1-4所示，一共使用5个数组存储自适应分块信息的稀疏矩阵，灰色的部分是CSR的相关信息，白色的部分是COO的相关信息。col_idx和vals的意义不变；types存储分块类型，标识当前分块是CSR还是COO；如果当前分块是CSR，则row_info存储类似row_ptr的信息（第k个元素表示分块内第k行的非零元个数），否则存储COO的row_idx的信息；row_id存储每个分块在row_info上的起始地址。 （3）减少下标存储的冗余 矩阵分块后，分块内间址的下标并不需要4字节int型整数存储，比如分块维度在64K以内，可以用2字节的unsigned short来存储。这样，无论是CSR或COO的row_idx、row_ptr，还是col_idx，都可以减少50%的存储空间，并同时提升访存效率。 （4）多线程和NUMA特性 单处理器多核多线程并行计算稀疏矩阵向量乘的过程比较简单，只需把矩阵划分成线程数量的子矩阵。这里采用横切的方法，计算结果不用合并。 但是对于多处理器非一致内存访问（NUMA），就需要对数据在内存中的分布做特殊处理，才能最大程度地利用全部的内存带宽。 一个典型的Intel X86双路服务器的拓扑架构如图1-5所示。 Memory #0是CPU #0的本地内存，Memory #1是CPU #1的本地内存，它们有各自独立的内存带宽。CPU #0访问Memory #1需要经过内部总线（在Intel的架构中叫QPI总线），这个总线的带宽一般小于内存带宽。另外如果要访问的数据只集中在一颗CPU的本地内存中，那么只能利用一个NUMA node的内存带宽，这就限制了系统的总体吞吐。 所以需要把稀疏矩阵的存储均匀地分配到两颗处理器各自的本地内存中。对于一个双CPU，每颗CPU一共4核的系统，需要开8个线程，并把这8个线程分别绑定到8颗CPU核上，使线程的上下文不会在核间迁移。对于每个线程要处理的稀疏矩阵数据，也通过系统调用（在Linux中是mbind），绑定到所在CPU核的本地内存中。这样每个核处理的数据一定是从本地内存中获得的，不会经过QPI总线。这就最大程度地利用了系统内存的带宽。经过实测，这个优化方法可以提升70%左右的内存带宽。 对于我们测试的一个维度大约1M、稀疏度0.0001的稀疏矩阵来说，所有优化加起来，相对Intel MKL库中CSR矩阵的SpMV API加速了2.5x左右。学术界还有很多针对稀疏矩阵存储格式的讨论和研究，其中有些还利用了SIMD向量指令，这里介绍的稀疏矩阵乘法方法，更多是为了讨论内存和cache优化的一些基本原理。稀疏矩阵根据稀疏度和非零元分布的不同，需要使用不同的存储策略，所以遇到实际的稀疏矩阵问题，需要根据实际情况开发不同的存储格式。 FPGA上的稀疏矩阵向量乘稀疏矩阵向量乘法稀疏矩阵向量乘（SpMV）把一个稀疏矩阵与一个向量相乘。稀疏矩阵是指矩阵中大部分元素为0的矩阵。这里的向量本身也可是稀疏的，但通常情况下是密集的。作为一种通用的运算，在科学应用、经济模型、数据挖掘、信息检索中广泛应用。例如，在利用迭代法求解稀疏线性方程组和特征值的问题。同时，也被应用于网页搜索排名和计算机视觉（图像重构等）。 本章会引入几个与HLS相关的新概念，并进一步深入之前讨论过的优化。本章的目标之一是引入一种更复杂的数据结构。我们用压缩行存储（CRS）来保存稀疏矩阵。另一个目标是演示如何进行性能测试。我们编写了简单的激励用来检验设计是否正确。这在硬件设计中十分重要，Vivado®HLS 工具采用HLS C编写激励，并能轻松的对工具生成的RTL代码进行多方面的验证。这是基于HLS设计比基于RTL设计的巨大优势之一。章节中也会讲解如何采用Vivado®HLS工具进行C/RTL联合仿真。不同SpMV设计会带来性能上差异，因为执行时间和稀疏矩阵是密切相关的，所以我们必须通过输入数据来确定任务执行之间的间隔以及任务延迟。 6.1 背景图6.1显示了一个4x4的矩阵M表示的2种方式。其中图6.1-a采用通用的二维方式16个元素来表示矩阵，每个元素存储在自己对应的位置上。图6.1-b采用CRS的方式表示相同的矩阵。CRS 作为一种数据结构，由3个数组组成。值(values)数组保存矩阵中非零元素的值。列索引(columnIndex)数组和行指针（rowPtr）数组对非零元素的位置信息进行编码。列索引存储每一列的元素，行指针包含每一行第一个元素的值。CRS 结构避免存储矩阵中的0值，确实在数值数组中确实没有存储0。但是在这个例子中，虽然数值数组不保存0，但是列索引数组和行指针数组作为标记信息，表示了矩阵的形态。CRS 广泛用于大型的矩阵但是仅仅有少量的非零元素（少于10%或者更低），这样可以简化这类矩阵的存储以及相关的运算。 图 6.1: M是一个4x4矩阵，用两种方式表示：同”密集”矩阵一样存在二维数组之中；作为稀疏矩阵，以行压缩存储的形式保存，行压缩存储是一种由3个数组组成的数据结构。 但是，CRS对矩阵的稀疏性没有要求，可以适用于任何矩阵。作为一种针对矩阵的通用方法，但不见得是最高效的。CRS结构也不见得是表示稀疏矩阵最高效的方式，其他稀疏矩阵表示方法也在被使用。 更准确的讲，CRS作为一种数据结构由3个数组构成：值(values)、列索引(colIndex)、行索引（rowPtr）。值数组和列索引表示稀疏矩阵M中的每一个非零元素，这些数组表示矩阵M采用行的方式，从左到右，从上到下。矩阵中的数据保存在值数组中，列索引数组保存数据在数组中水平方向的位置，如果 values[k] 表示 M_{ij}Mij 其中collndex[k]= jcollnde**x[k]=j。数组rowPtr用n+1n+1的长度来表示n行矩阵。rowPtr[k] 表示在行k之前，矩阵中所有元素的数目，其中rowPtr[0]=0rowPt**r[0]=0且最后一个元素rowPtr[k] 总是表示当前矩阵k行之前所有非零元素的个数M_{ij}Mij ,其中rowPtr[i] \leq k \leq rowPtr[i+1]rowPt**r[i]≤k≤rowPt**r[i+1]。如果行k包含任何非0元素，那么rowPtr[k] 将包含当前行的第一个元素。注意，如果当前行没有非0元素，那么 rowPtr 数组中的值将会重复出现。 从图6.1 a）中，我们可以行优先的方式遍历矩阵，从而确定值（values）数组在CRS中的形式。只要发现一个非0元素，它的值会被保存在下一个索引 ii 中，同时，它的列号columnIndex[i] 会被保存在列数组中。另外，在我们访问一个新行的时候，我们保存下一个值的索引 ii 在rowPtr数组中。所以，rowPtr 数组的第一个元素总是0。从图 6.1 b)中，我们可以把矩阵转换为二位数组表示的方式。第一步是根据rowPtr数组，确定每一行中非0 元素的个数。对行 ii 而言，该行中元素的数目为rowPtr[i]-rowPtr[i+1]rowPt**r[i]−rowPt**r[i+1]的差值。所以当前行的值可以从values数组values[rowPtr[i]] 开始，通过递归得到。在我们的示例矩阵中，因为前 rowPtr 数组前2个元素是0和2，所以我们知道第一行有2个非0元素，即value[0] 和value[1] 。第一个非0元素在values数组中,value[0] 是3。该值所对应的列号为1，因为columnIndex[0]=0columnIndex[0]=0。以此类推，矩阵中第二行元素的个数为k\in[2,4)k∈[2,4),第三行的元素个数为k \in [4,7)k∈[4,7)。最后，共有9个非0元素在矩阵中，所以rowPtr最后一个值是9。 1234567891011121314#include "spmv.h"void spmv(int rowPtr[NUM_ROWS+1], int columnIndex[NNZ], DTYPE values[NNZ], DTYPE y[SIZE], DTYPE x[SIZE])&#123;L1: for (int i = 0; i &lt; NUM_ROWS; i++) &#123; DTYPE y0 = 0; L2: for (int k = rowPtr[i]; k &lt; rowPtr[i+1]; k++) &#123; #pragma HLS unroll factor=8 #pragma HLS pipeline y0 += values[k] * x[columnIndex[k]]; &#125; y[i] = y0; &#125;&#125; 图6.2: 主体代码演示了系数矩阵向量乘（SpMV）y=M.x的计算。采用CRS的方式，通过rowPt*、columnIndex 和 value 保存矩阵M。第一个for循环通过迭代访问每一行，第二个for循环访问每一列，实现矩阵M中非0元素和向量中对应的元素相乘并保存值在向量y中。 给定一个二维数组表示一个矩阵，通过C代码实现矩阵CRS格式。编写对应的C代码实现将矩阵从CRS格式转化为二维数组的形式。 结果表明，通过采用CRS的方式，我们能高效的实现稀疏矩阵乘法，不需要将矩阵转化为二维形式。实际上， 对于大型的矩阵仅仅只有一小部分非0元素，稀疏矩阵向量乘法会比第四章中讨论的密集矩阵向量乘高效很多。因为我们直接找到非0元素，并执行非0元素对应的运算。 6.2 基本实现图6.2 提供了基本代码对系数矩阵乘法的实现。函数spmv函数有5个参数，分别是rowPtr、columnIndex ，以及 values 对应矩阵 M 的 CRS 格式中包含的3个参数，这和图6.1中描述的数据结构等价。参数 yy 用于保存输出的结果，参数x表示输入的被乘向量xx。变量NUM_ROWS表示矩阵M中行号。变量NNZ表示矩阵中非0元素的个数。最后，变量SIZE表示数组x和数组y中元素的个数。 外层for循环标签为L1，对矩阵的行进行遍历。将矩阵当前的行与向量x相乘，得到输出的结果yy。内层循环标签为L2，实现对矩阵M中每列元素的遍历。L2循环迭代计算rowPtr[i+1]-rowPtr[i]rowPt**r[i+1]−rowPt**r[i]计算每一行非0元素的个数。每次循环计算，能从value数组中读取矩阵M的非0元素然后对应的从x数组中取得被乘向量x的值，对应相乘。cloumnIndex[k] 中的值保存了对应的列号k。 1234567891011#ifndef __SPMV_H__#define __SPMV_H__const static int SIZE = 4; // SIZE of square matrixconst static int NNZ = 9; //Number of non-zero elementsconst static int NUM_ROWS = 4;// SIZE;typedef float DTYPE;void spmv(int rowPtr[NUM_ROWS+1], int columnIndex[NNZ], DTYPE values[NNZ], DTYPE y[SIZE], DTYPE x[SIZE]);#endif // __MATRIXMUL_H__ not defined 图6.3： spmv函数和激励的头文件 6.3 测试平台图6.4 展示了一个针对spmv函数测试平台。测试平台通过定义matrixvector函数，直接实现矩阵向量乘法，它不考虑矩阵是否为稀疏矩阵以及矩阵是否采用CRS方式表示。我们比较matrixvector函数输出和spmv函数的输出。 在通常的测试平台中，需要实现的函数都会有个“黄金”参考，作为用户期望综合的结果。测试平台会比较黄金用例的输出和通过Vivado®HLS综合的代码执行结果。最好的实践方式是，测试平台既可以用于黄金用例，也可用于被综合的代码。这样就保证了两者实现的正确性。 测试平台在主函数main中执行。这里我们通过设置fail变量初始化为0，当spmv函数的输出成结果与matrixvector函数输出结果不相同是时，变量置1。定义与矩阵M相关的变量、被乘向量xx 和输出结果yy。对于矩阵M，即有普通模式，也有CSR模式（保存为values、columnIndex、rowPtr）。矩阵M 的value如图6.1中所示，输出向量yy有两种，其中y_sw数组保存matrixvector函数输出的结果，y数组保存spmv函数输出的结果。 在定义好所有的输入变量和输出变量之后，分别调用spmv函数和matrixvector函数并输入合适的数据。 接下来的for循环用于比较y_sw和y中的每一个对应的结果。如果其中一个不相同，则将fail 标志置1。最后，程序会打印测试的结果并返回fail变量。 12345678910111213141516171819202122232425262728293031323334353637#include "spmv.h"#include &lt;stdio.h&gt;void matrixvector(DTYPE A[SIZE][SIZE], DTYPE *y, DTYPE *x)&#123; for (int i = 0; i &lt; SIZE; i++) &#123; DTYPE y0 = 0; for (int j = 0; j &lt; SIZE; j++) y0 += A[i][j] * x[j]; y[i] = y0; &#125;&#125;int main()&#123; int fail = 0; DTYPE M[SIZE][SIZE] = &#123;&#123;3,4,0,0&#125;,&#123;0,5,9,0&#125;,&#123;2,0,3,1&#125;,&#123;0,4,0,6&#125;&#125;; DTYPE x[SIZE] = &#123;1,2,3,4&#125;; DTYPE y_sw[SIZE]; DTYPE values[] = &#123;3,4,5,9,2,3,1,4,6&#125;; int columnIndex[] = &#123;0,1,1,2,0,2,3,1,3&#125;; int rowPtr[] = &#123;0,2,4,7,9&#125;; DTYPE y[SIZE]; spmv(rowPtr, columnIndex, values, y, x); matrixvector(M, y_sw, x); for(int i = 0; i &lt; SIZE; i++) if(y_sw[i] != y[i]) fail = 1; if(fail == 1) printf("FAILED\n"); else printf("PASS\n"); return fail;&#125; 图6.4 ： 一个简单spmv函数的简单测试平台。测试平台生成了一个用例，并且计算矩阵的向量乘法通过稀疏矩阵乘法（spmv）和非系数矩阵乘法(matrixvector)。 这个测试平台相对简单并且可能无法充分验证所有的输入都能正常输出。最主要的原因是，它仅仅只用了一个矩阵作为例子，相反，一个好的激励会测试许多矩阵。通常，会通过随机的方式产生输入的测试用例，并且重点测试边界用例。在这个例子中，我们不仅要保证值正确计算，同时保证通过加速器正确的被执行了，而且编译时间相关的parameter改变会在实现不同加速单元值折中。最关键的是，在相同的parameter上，我们能通过随机产生很多输入数据来进行测试。编译时间相关的参数每次发生变化，都需要我们重新编译代码。 创建一个复杂的激励来，通过随机数方式生成许多组测试数据。稀疏矩阵编译时间参数应该是可以修改的（例如，SIZE，NNZ 等）。创建一个HLS综合脚本，在编译时间参数合理范围改变时，能执行代码很多次。 6.4 指定循环的属性如果直接将上述代码进行综合，我们可以得到函数运行的时钟周期及资源占用率。但是，我们不能得到模块执行所需的时钟周期、任务执行的延迟和任务执行之间的间隔。因为这些都取依赖于输入数据，由spmv函数外部因素决定。最主要的因素是，内层循环执行的次数是由矩阵M中非0元素个数决定的。非0元素的个数在代码中是由常量NNZ决定的，虽然可以调用函数计算不同大小的矩阵，但是实际迭代次数是和输入数据相关的。另外，性能也会因为非0元素的分布、综合优化的约束产生不同。更复杂的是，迭代的次数由输入决定，许多可能的输入并没有被遍历。所以，对于工具而言，不通过复杂的分析和额外的信息，工具是不能知道spmv函数执行需要多少时钟周期。Vivado®HLS 工具也不能进行上述的分析。 spmv函数能正常工作的前提条件是什么？证明给定的前提条件，矩阵中每个非0元素实是不是在对应一次内层循的执行？ 有几种方式能帮助工具进行性能的分析，其中一种方式就是想Vivado®HLS提供循环边界的额外信息。这可以通过使用loop_tripcount directive实现，它能让设计者指定最小、最大和平均迭代次数针对特定的循环。通过提供这些值， Vivado®HLS 能提供时钟周期级别的评估。 使用loop_tripcount directive 用变量指定循环的最小，最大和平均迭代次数，这样Vivado®HLS 工具能对当前设计时钟周期数目进行估计。这些不影响最后综合的结果，只会影响综合报告。 对spmv函数使用loop_tripcount directive，语法格式 # pragma HLS loop_tripcount min=X, max=Y, avg=Z 其中X，Y，Z正的常量。哪个循环需要使用directive?当改变参数（min、max和avg）以后，综合报告有什么不同？这对时钟周期有影响吗？这对资源占用有影响吗？ loop_tripcount 引导能帮助设计者对函数的性能有个原始的估计。这样能比较相同的函数通过使用不同的directives或者对代码本身重构。但是，这不能确定min、max和 avg 参数。这也很难确定边界条件min和max的值。如果有测试平台，就有一种更准确的方式用于计算spmv函数执行的时钟周期数，那就是C/RTL协同仿真。 6.5 C/RTL 协同仿真C/RTL 协同仿真能自动化测试Vivado®HLS工具生成的RTL代码，只需要在综合的时候提供测试平台。每次执行综合以后的代码和提供的测试平台，记录输入和输出结果。输入的值按照时钟转换成输入向量。这里的输入向量用于针对生成的RTL代码进行仿真，同时记录输出向量。更新综合后的代码， 再次运行测试平台并保存输入和输出数据。测试平台如果返回值是0，则表示成功；若激励返回非0值，则表示失败。 C/RTL 协同仿真流程将VIvado®HLS 生成的RTL代码，通过C 测试平台，实现时钟周期级别的仿真。这样，就能准确对生成的RTL代码进行性能评估，即使性能与输入数据有关。被综合的函数运行周期最小值，最大值，平均值以及间隔在仿真完成以后都能准确的得到。 注意这些和时钟周期相关的参数是通过激励中测试数据得到的。所以，结果的质量和测试平台的质量息息相关。如果测试平台没有很好的对函数执行测试，那么结果将不准确。另外，输入测试向量都是基于理想的时序，不能反映模型实际工作时，外部接口对函数的影响。实际的性能可能会比仿真的要低，如果执行过程中阻塞在输入数据或对外部存储的访问上。不过，对于循环边界调试时变量的情况，设计者可以通过协同仿真的方式确定时钟周期个数。 C/RTL协同仿真能提供循环边界是变量的函数的延迟。它反馈函数运行时延迟的最小值、最大值和平均值以及函数运行间隔。这些延迟和测试平台输入的数据是强相关的。 图6.5 spmv函数内部循环流水执行过程和结构 当采用图6,4提供的测试平台时，函数运行的最小值、最大值和平均值以及函数间隔是多少个时钟周期？ 6.6 循环的优化与数组的分块我们可以通过Vivado®HLS 工具得到当前函数的性能和面积的评估结果，然后可以考虑如何对函数进行优化。流水线、循环展开、数组分块是第一类最常用的优化方法。最典型的方式是从最内层的循环，然后根据需要向外层循环进行。 在这个例子中， 对最内层的L2循环进行流水线化也许是我们最先和最容易想到的优化方式。这个连续迭代的循环在执行上流水以后，总体运行会加快。如果不采用流水，L2 循环将按照串行执行。注意，L1 循环此时还是按照串行的方式执行。 图6.5演示了spmv函数在L2循环采用流水方式时运行的步骤。每次L2的循环都被II=3I**I=3流水化。流水线允许在外层循环执行一次迭代时，内层循环执行多次循环迭代。此时，内层循环II受限于递归（recurrence ）操作。II=3I**I=3是因为我们认为加法器有3个时钟周期的延迟。外部循环没有采用流水的方式，所以内层的循环必须在下外层L2循环开始执行前，计算完成并输出结果。 对最内层的L2 for 循环进行流水化，通过在spmv函数中增加流水directive如图6.2所示。II(initiation interval)最后是多少？在你指定II的值以后，最终目标的II值是增大了还是减少了？ 观察执行步骤，我们可以发现有几个因素限制了循环执行性能。第一个因素，递归（recurrence ）操作限制了循环的 II。第二个因素，外层的循环没有采用流水的方式。一种高效计算稀疏矩阵向量乘法的方式，每个时钟周期把乘法器和加法器使用起来。当前的设计离这个目标还很远。 在章节4.3中，我们探究了几种设计优化技术，其中包括对不同的循环进行流水，循环展开，数组分割。掌握在这些技术之间进行权衡是一项挑战，因为它们之间经常相互依赖。我们通常联合使用这些技术，为了得到好的性能谨慎的选择其中一种而不选择另一种也许结果会更糟糕。例如，在我们使用循环展开是，设计者需要明白它对数据访问的影响。增加了对数据访问的操作但是设计性能又受限于数据访问时，优化毫无益处。同样，如果提供了冗余的存储端口，实际中使用率不高，这样对提高性能毫无帮助反而增加了资源的消耗。 仔细思考一下上述优化技术组合后复杂多变的样式，我们建议你尝试下面的练习： 对spmv设计进行综合，采用表6.1提供的10种directives，每种都有不同的流水，展开和分割针对不同的循环和数组。这些分割在不同的数组（values、columnIndex、x）上使用。你看到结果的趋势是如何的？增加了展开和分割，是有利于还是不利于面积？性能如何？为什么？ 表6.1 稀疏矩阵向量乘法可优化的方式 L1 L2 case1 - - case2 - pipeline case3 pipeline - case4 unroll=2 - case5 - pipeline,unroll=2 case6 - pipeline,unroll=2,cyclic=2 case7 - pipeline,unroll=4 case8 - pipeline,unroll=4,cyclic=4 case9 - pipeline,unroll=8 case10 - pipeline,unroll=8,cyclic=8 case11 - pipeline,unroll=8,block=8 如果你完成了上述练习，你会发现盲目的使用优化directives，可能不会得到你期望的结果。通常在设计时， 在思考下考虑应用的特性，选择针对设计的特定优化方式。当然，这也需要一些直觉能力和一些专用工具投入使用。虽然，搞清楚像Vivado®HLS这样复杂工具中每一个细节是困难乃至不可能的，但是我们能基于关键的方面建立思考模型。 上面我们在用例3和4中考虑对外层循环L1进行流水化操作而不是对内层循环。这种变化针对一个任务，可以提高潜在的并行程度。为了完成优化，Vivado®HLS 工具必须展开代码中所有的内层循环L2 。如果循环能全部展开，这样能减少计算循环边界的时间，同时也能消除递归（recurrences）。但是代码中的内层循环Vivado HLS是无法完全展开的，因为循环边界不是常量。 例如在实现上面提到的例子3，在最外层的循环L1使用流水化directive。在不设定目标II时，II值是多少？资源占用率发生了什么变化？增加了II后资源占用率结果如何？这与之前采对L2循环进行流水化，结果有什么不同？这和最基本的设计（无 directives）相比有什么不同？当你对外层循环进行展开时，结果到底如何？（提示：检查综合后的日志信息） 另外一种增加并行化的方式是对内层循环进行局部循环展开，就像之前例子5到10。这种变化实现更多的并行化，通过在相同的循环迭代中，执行更多的操作。有些情况，Vivado HLS 工具在对内层循环进行流水化时，通过实现更多操作来提高性能。但是，这还是很难提高内层循环的II，由于内层循环的递归操作。但是，在II大于1的情况下， 许多操作可以共享同一个计算单元。 图6.6展示了一个局部展开的代码。在这段代码中，L2 循环被分成2个循环，分别为L2_1和L2_2。最内层的循环L2_2执行的次数由参数S确定。内部循环包含了最原始的L2循环，其中循环边界是由最原始的L2循环确定的。代码中，L2_1 循环包含了不确定次数的乘法和加法操作，运算次数由参数S确定，和一次递归完成累加y0 += yty0+=y**t。 注意图6.6中的代码和自动循环展开的代码是由一点点区别的。自动循环展开复制计算，但是保留每次计算先后顺序（除了当前的例子）。这就导致了计算顺序由内层循环决定，如图6.7左所示。对计算顺序进行调整后，操作上的依赖关系如图6.7 左边所示。在当前的代码中，最后累加求和是一个递归（recurrence ）。当使用浮点数据类型时，这种调整计算顺序的操作可能对程序产生改变，所以Vivado HLS对这种类型的代码不进行操作顺序自动调整。 这个设计可能会被综合、实现如图6.8所示的结果。在这个例子中，S=3S=3与III**I最匹配，乘法器的延迟正好是3。所有的运算过程都是在一个乘法器和加法器上执行。比较这个例子与图6.5中的例子，我们可以发现一些缺点。最明显的是，内层循环的流水线长度很长，实现的时候需要多个更多的周期刷新流水线的输出，才能执行下一次外层L1循环。处理一行中非零元素和执行块S 相同。一行有个3个元素和一行有一个元素计算的时间是相同的。剩下的运算也需要在循环流水线中执行，即使他们的结果没有用。为了严格的比较两个设计的特性，我们需要了解设计对矩阵每行非零元素个数的预期。 12345678910111213141516171819202122#include "spmv.h"const static int S = 7;void spmv(int rowPtr[NUM_ROWS+1], int columnIndex[NNZ], DTYPE values[NNZ], DTYPE y[SIZE], DTYPE x[SIZE])&#123; L1: for (int i = 0; i &lt; NUM_ROWS; i++) &#123; DTYPE y0 = 0; L2_1: for (int k = rowPtr[i]; k &lt; rowPtr[i+1]; k += S) &#123;#pragma HLS pipeline II=S DTYPE yt = values[k] * x[columnIndex[k]]; L2_2: for(int j = 1; j &lt; S; j++) &#123; if(k+j &lt; rowPtr[i+1]) &#123; yt += values[k+j] * x[columnIndex[k+j]]; &#125; &#125; y0 += yt; &#125; y[i] = y0; &#125;&#125; 图6.6 局部展开图6.2中smpv函数 图6.7 针对累加的两种不同方式的局部展开。左边的版本有3个加法器进行递归操作，相反右边的版本只有1个加法器进行递归累加 图6.8 图6.6中 spmv函数基于部分展开和内部流水线处理后执行过程 如果矩阵每行非零元素很少，则采用第一种实现方式较优；如果矩阵中每行非零元素较多，则第二种实现方式更好。 需要注意，这里存在一个关于先有鸡还是先有蛋的问题。我们需要知道目标器件和时钟周期，这样才能确定流水线中加法器能不能满足时序要求。只有在我们知道流水线的级数之后（也许S=1时，Vivado HLS才能识别到加法递归），我们才能选择合适版本的参数S，来满足II=1I**I=1。一旦我们确定了S，我们能通过C/RTL协同仿真来，通过一组测试数据，确定是不是达到了性能上的要求。因为循环边界是可变的，所以得到的性能参数是依赖于数据的，所以我们需要设定不同的S，来找到性能的最大值。改变器件的类型和工作频率会影响之前所有的设计！尽管看来去高层次综合（HLS）对解决问题提供的帮助不多，相比于RTL开发新版本然后进行验证，它开发起来快（代码编写方便）。 图6.8可以实现时，S 与加法器流水线等级相同。如果S设定较大，结果会怎样？如果S 设定较小，结果会怎样？如果目标II小于S会怎样？如果目标II大于S会怎样？ 6.7小结在本章节中，我们介绍了系数矩阵向量乘法（SpMV），这延续了之前对矩阵运算的研究。SpMV 显得很有趣，因为它采用了一种特别的数据结构。为了减少大量的存储，矩阵采用行压缩的方式存储，这样就要求我们以一种非直接的方式对矩阵进行访问。 这一章节首先我们了Vivado®HLS工具测试和仿真的能力。我们采用一个基于SpMV简单的激励文件，讲解HLS工作流程。另外，我们对Vivado®HLS工具中C/RTL 协同仿真进行了讲解。这对我们得到设计准确性能结果是十分重要。矩阵越不稀疏，则更多的计算需要执行。在测试平台确定以后，协同仿真可以提供程序运行的精确仿真。这样就可以达到执行周期和性能结果。最后，我们讨论了采用循环优化和数组分块对代码进行优化。 fpga并行编程]]></content>
      <categories>
        <category>SpMV</category>
      </categories>
      <tags>
        <tag>SpMV</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx]]></title>
    <url>%2F2019%2F05%2F19%2FNginx%2F</url>
    <content type="text"><![CDATA[Nginx安装及配置 本文参考： Nginx安装配置_菜鸟教程 Nginx中文文档 Nginx简易教程 概述什么是nginx? Nginx (engine x) 是一款轻量级的Web 服务器 、反向代理服务器及电子邮件（IMAP/POP3）代理服务器。 什么是反向代理？ 反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。 安装与使用安装 nginx官网下载地址：http://nginx.org，发布版本分为 Linux 和 windows 版本。 也可以下载源码，编译后运行。 从源代码编译 Nginx 把源码解压缩之后，在终端里运行如下命令： 123$ ./configure$ make$ sudo make install 默认情况下，Nginx 会被安装在 /usr/local/nginx。通过设定编译选项，你可以改变这个设定。 Windows 安装 为了安装 Nginx / Win32，需先下载它(Nginx官方下载)。然后解压之，然后运行即可。下面以 C 盘根目录为例说明下： 1nginx-0.8.54 start nginx Nginx / Win32 是运行在一个控制台程序，而非 windows 服务方式的。服务器方式目前还是开发尝试中。 使用nginx 的使用比较简单，就是几条命令。 常用到的命令如下： nginx -s stop ：快速关闭Nginx，可能不保存相关信息，并迅速终止web服务。 nginx -s quit ：平稳关闭Nginx，保存相关信息，有安排的结束web服务。 nginx -s reload ：因改变了Nginx相关配置，需要重新加载配置而重载。 nginx -s reopen ：重新打开日志文件。 nginx -c filename ：为 Nginx 指定一个配置文件，来代替缺省的。 nginx -t ：不运行，而仅仅测试配置文件。nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件。 nginx -v：显示 nginx 的版本。 nginx -V：显示 nginx 的版本，编译器版本和配置参数。 如果不想每次都敲命令，可以在nginx安装目录下新添一个启动批处理文件startup.bat，双击即可运行。内容如下： 123456789101112@echo offrem 如果启动前已经启动nginx并记录下pid文件，会kill指定进程nginx.exe -s stoprem 测试配置文件语法正确性nginx.exe -t -c conf/nginx.confrem 显示版本信息nginx.exe -vrem 按照指定配置去启动nginxnginx.exe -c conf/nginx.conf 如果是运行在 Linux 下，写一个 shell 脚本，大同小异。 配置nginx 配置实战我始终认为，各种开发工具的配置还是结合实战来讲述，会让人更易理解。 http反向代理配置我们先实现一个小目标：不考虑复杂的配置，仅仅是完成一个 http 反向代理。 nginx.conf 配置文件如下：注：conf / nginx.conf 是 nginx 的默认配置文件。你也可以使用 nginx -c 指定你的配置文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107#运行用户#user somebody;#启动进程,通常设置成和cpu的数量相等worker_processes 1;#全局错误日志error_log D:/Tools/nginx-1.10.1/logs/error.log;error_log D:/Tools/nginx-1.10.1/logs/notice.log notice;error_log D:/Tools/nginx-1.10.1/logs/info.log info;#PID文件，记录当前启动的nginx的进程IDpid D:/Tools/nginx-1.10.1/logs/nginx.pid;#工作模式及连接数上限events &#123; worker_connections 1024; #单个后台worker process进程的最大并发链接数&#125;#设定http服务器，利用它的反向代理功能提供负载均衡支持http &#123; #设定mime类型(邮件支持类型),类型由mime.types文件定义 include D:/Tools/nginx-1.10.1/conf/mime.types; default_type application/octet-stream; #设定日志 log_format main &apos;[$remote_addr] - [$remote_user] [$time_local] &quot;$request&quot; &apos; &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; access_log D:/Tools/nginx-1.10.1/logs/access.log main; rewrite_log on; #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用， #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime. sendfile on; #tcp_nopush on; #连接超时时间 keepalive_timeout 120; tcp_nodelay on; #gzip压缩开关 #gzip on; #设定实际的服务器列表 upstream zp_server1&#123; server 127.0.0.1:8089; &#125; #HTTP服务器 server &#123; #监听80端口，80端口是知名端口号，用于HTTP协议 listen 80; #定义使用www.xx.com访问 server_name www.helloworld.com; #首页 index index.html #指向webapp的目录 root D:_WorkspaceProjectgithubzpSpringNotesspring-securityspring-shirosrcmainwebapp; #编码格式 charset utf-8; #代理配置参数 proxy_connect_timeout 180; proxy_send_timeout 180; proxy_read_timeout 180; proxy_set_header Host $host; proxy_set_header X-Forwarder-For $remote_addr; #反向代理的路径（和upstream绑定），location 后面设置映射的路径 location / &#123; proxy_pass http://zp_server1; &#125; #静态文件，nginx自己处理 location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123; root D:_WorkspaceProjectgithubzpSpringNotesspring-securityspring-shirosrcmainwebappiews; #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。 expires 30d; &#125; #设定查看Nginx状态的地址 location /NginxStatus &#123; stub_status on; access_log on; auth_basic &quot;NginxStatus&quot;; auth_basic_user_file conf/htpasswd; &#125; #禁止访问 .htxxx 文件 location ~ /.ht &#123; deny all; &#125; #错误处理页面（可选择性配置） #error_page 404 /404.html; #error_page 500 502 503 504 /50x.html; #location = /50x.html &#123; # root html; #&#125; &#125;&#125; 好了，让我们来试试吧： 启动 webapp，注意启动绑定的端口要和nginx中的 upstream 设置的端口保持一致。 更改 host：在 C:WindowsSystem32driversetc 目录下的host文件中添加一条DNS 记录127.0.0.1 http://www.helloworld.com 启动前文中 startup.bat 的命令 在浏览器中访问 http://www.helloworld.com，不出意外，已经可以访问了。 负载均衡配置上一个例子中，代理仅仅指向一个服务器。 但是，网站在实际运营过程中，多半都是有多台服务器运行着同样的app，这时需要使用负载均衡来分流。 nginx也可以实现简单的负载均衡功能。 假设这样一个应用场景：将应用部署在 192.168.1.11:80、192.168.1.12:80、192.168.1.13:80 三台linux环境的服务器上。网站域名叫 http://www.helloworld.com，公网IP为 192.168.1.11。在公网IP所在的服务器上部署 nginx，对所有请求做负载均衡处理。 nginx.conf 配置如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748http &#123; #设定mime类型,类型由mime.type文件定义 include /etc/nginx/mime.types; default_type application/octet-stream; #设定日志格式 access_log /var/log/nginx/access.log; #设定负载均衡的服务器列表 upstream load_balance_server &#123; #weigth参数表示权值，权值越高被分配到的几率越大 server 192.168.1.11:80 weight=5; server 192.168.1.12:80 weight=1; server 192.168.1.13:80 weight=6; &#125; #HTTP服务器 server &#123; #侦听80端口 listen 80; #定义使用www.xx.com访问 server_name www.helloworld.com; #对所有请求进行负载均衡请求 location / &#123; root /root; #定义服务器的默认网站根目录位置 index index.html index.htm; #定义首页索引文件的名称 proxy_pass http://load_balance_server ;#请求转向load_balance_server 定义的服务器列表 #以下是一些反向代理的配置(可选择性配置) #proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP proxy_set_header X-Forwarded-For $remote_addr; proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时) proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时) proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时) proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小 proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置 proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2） proxy_temp_file_write_size 64k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传 client_max_body_size 10m; #允许客户端请求的最大单文件字节数 client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数 &#125; &#125;&#125; 网站有多个webapp的配置当一个网站功能越来越丰富时，往往需要将一些功能相对独立的模块剥离出来，独立维护。这样的话，通常，会有多个 webapp。 举个例子：假如 http://www.helloworld.com 站点有好几个webapp，finance（金融）、product（产品）、admin（用户中心）。访问这些应用的方式通过上下文(context)来进行区分: http://www.helloworld.com/finance/ http://www.helloworld.com/product/ http://www.helloworld.com/admin/ 我们知道，http的默认端口号是80，如果在一台服务器上同时启动这3个 webapp 应用，都用80端口，肯定是不成的。所以，这三个应用需要分别绑定不同的端口号。 那么，问题来了，用户在实际访问 http://www.helloworld.com 站点时，访问不同 webapp，总不会还带着对应的端口号去访问吧。所以，你再次需要用到反向代理来做处理。 配置也不难，来看看怎么做吧： 1234567891011121314151617181920212223242526272829303132333435http &#123; #此处省略一些基本配置 upstream product_server&#123; server www.helloworld.com:8081; &#125; upstream admin_server&#123; server www.helloworld.com:8082; &#125; upstream finance_server&#123; server www.helloworld.com:8083; &#125; server &#123; #此处省略一些基本配置 #默认指向product的server location / &#123; proxy_pass http://product_server; &#125; location /product/&#123; proxy_pass http://product_server; &#125; location /admin/ &#123; proxy_pass http://admin_server; &#125; location /finance/ &#123; proxy_pass http://finance_server; &#125; &#125;&#125; https反向代理配置一些对安全性要求比较高的站点，可能会使用 HTTPS（一种使用ssl通信标准的安全HTTP协议）。 这里不科普 HTTP 协议和 SSL 标准。但是，使用 nginx 配置 https 需要知道几点： HTTPS 的固定端口号是 443，不同于 HTTP 的 80 端口 SSL 标准需要引入安全证书，所以在 nginx.conf 中你需要指定证书和它对应的 key 其他和 http 反向代理基本一样，只是在 Server 部分配置有些不同。 12345678910111213141516171819202122232425#HTTP服务器 server &#123; #监听443端口。443为知名端口号，主要用于HTTPS协议 listen 443 ssl; #定义使用www.xx.com访问 server_name www.helloworld.com; #ssl证书文件位置(常见证书文件格式为：crt/pem) ssl_certificate cert.pem; #ssl证书key位置 ssl_certificate_key cert.key; #ssl配置参数（选择性配置） ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; #数字签名，此处使用MD5 ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; location / &#123; root /root; index index.html index.htm; &#125; &#125; 静态站点配置有时候，我们需要配置静态站点(即 html 文件和一堆静态资源)。 举例来说：如果所有的静态资源都放在了 /app/dist 目录下，我们只需要在 nginx.conf 中指定首页以及这个站点的 host 即可。 配置如下： 123456789101112131415161718192021222324252627worker_processes 1;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; gzip on; gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/javascript image/jpeg image/gif image/png; gzip_vary on; server &#123; listen 80; server_name static.zp.cn; location / &#123; root /app/dist; index index.html; #转发任何请求到 index.html &#125; &#125;&#125; 然后，添加 HOST：127.0.0.1 http://static.zp.cn，此时，在本地浏览器访问 http://static.zp.cn ，就可以访问静态站点了。 跨域解决方案web 领域开发中，经常采用前后端分离模式。这种模式下，前端和后端分别是独立的 web 应用程序，例如：后端是 Java 程序，前端是 React 或 Vue 应用。 各自独立的 web app 在互相访问时，势必存在跨域问题。解决跨域问题一般有两种思路： CORS在后端服务器设置 HTTP 响应头，把你需要运行访问的域名加入加入 Access-Control-Allow-Origin 中。 jsonp把后端根据请求，构造json数据，并返回，前端用 jsonp 跨域。 这两种思路，本文不展开讨论。 需要说明的是，nginx 根据第一种思路，也提供了一种解决跨域的解决方案。 举例：http://www.helloworld.com 网站是由一个前端 app ，一个后端 app 组成的。前端端口号为 9000， 后端端口号为 8080。 前端和后端如果使用 http 进行交互时，请求会被拒绝，因为存在跨域问题。来看看，nginx 是怎么解决的吧： 首先，在 enable-cors.conf 文件中设置 cors ： 1234567891011121314151617181920212223242526# allow origin listset $ACAO &apos;*&apos;;# set single originif ($http_origin ~* (www.helloworld.com)$) &#123; set $ACAO $http_origin;&#125;if ($cors = &quot;trueget&quot;) &#123; add_header &apos;Access-Control-Allow-Origin&apos; &quot;$http_origin&quot;; add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;; add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;; add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;&#125;if ($request_method = &apos;OPTIONS&apos;) &#123; set $cors &quot;$&#123;cors&#125;options&quot;;&#125;if ($request_method = &apos;GET&apos;) &#123; set $cors &quot;$&#123;cors&#125;get&quot;;&#125;if ($request_method = &apos;POST&apos;) &#123; set $cors &quot;$&#123;cors&#125;post&quot;;&#125; 接下来，在你的服务器中 include enable-cors.conf 来引入跨域配置： 12345678910111213141516171819202122232425262728# ----------------------------------------------------# 此文件为项目 nginx 配置片段# 可以直接在 nginx config 中 include（推荐）# 或者 copy 到现有 nginx 中，自行配置# www.helloworld.com 域名需配合 dns hosts 进行配置# 其中，api 开启了 cors，需配合本目录下另一份配置文件# ----------------------------------------------------upstream front_server&#123; server www.helloworld.com:9000;&#125;upstream api_server&#123; server www.helloworld.com:8080;&#125;server &#123; listen 80; server_name www.helloworld.com; location ~ ^/api/ &#123; include enable-cors.conf; proxy_pass http://api_server; rewrite &quot;^/api/(.*)$&quot; /$1 break; &#125; location ~ ^/ &#123; proxy_pass http://front_server; &#125;&#125;]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx+rtmp]]></title>
    <url>%2F2019%2F05%2F17%2Fnginx-rtmp%2F</url>
    <content type="text"><![CDATA[nginx+rtmp 搭建视频直播服务器服务器安装配置 windows安装包(已编译好的版本)参考： nginx for windows windows下搭建基于nginx的rtmp服务器 在Windows下搭建基于nginx的视频直播和点播系统 搬运源码（未编译） Car-eye-RTMP-server(github) car-eye-http-flv-module nginx+rtmp在windows下编译 Windows下编译nginx-rtmp-module windows下编译nginx+nginx_rtmp_modue(vs2013) CentOS搭建nginx+rtmp服务器 nginx+rtmp直播流服务搭建 centos7 centos7 Nginx+rtmp 搭建流媒体服务器 linux下建议将nginx.conf中的http端口改为1024以上，好像是80端口每次运行都需要su权限。 Nginx搭建rtmp流媒体服务器 nginx服务器常用命令12345678910./nginx -v//查看nginx版本号./nginx -V //查看nginx详细的版本信息start ./nginx -c conf/nginx.conf //以nginx.conf的配置启动nginx./nginx -s stop//停止nginx服务器./nginx -s quit//停止nginx服务器./nginx -s reload//重启nginx服务器service nginx reload//重启nginx服务器./nginx -t (-c conf/nginx.conf)//检查配置文件是否正确./nginx -h//显示帮助信息./nginx -?//显示帮助信息 nginx+rtmp加入权限控制 本文参考： *rtmp-module官方wiki *视频直播点播nginx-rtmp开发手册中文版(参考wiki版本粗译) 如何给 nginx rtmp 服务加入鉴权机制(改源码) *「自己开发直播」实现nginx-rtmp-module多频道输入输出与权限控制 nginx-rtmp-module授权机制实现直播推流多房间授权认证 nginx-rtmp-module 权限控制 nginx-rtmp加入权限验证的简单方法 视频直播点播nginx-rtmp开发手册中文版 *nginx.conf中关于nginx-rtmp-module配置指令详解 *nginx-rtmp多房间和授权实现 *博客比较有用 nginx的rtmp-module默认不限制推流权限、播放权限。 想加入权限验证有很多种方法。 其中一个是改源码，一个是利用nginx+rtmp的配置文件调用后台接口进行验证。 第一种方法没成功过，第二种方法比较简单。此文介绍第二种方法，第一种方法可见博客-&gt;如何给 nginx rtmp 服务加入鉴权机制(改源码) 原理主要是利用on_publish跳转到当前配置的一个“location”，在这里进行验证。关键点在于rtmp application节点下面要配置“notify_method get;”为什么呢？因为跳转的时候，默认以POST方式传输参数，修改成GET方式，nginx配置里就可以轻松处理了。（当然nginx通过配置文件也可以处理post，只是复杂一些）。 我们在此使用python的后台框架flask处理on_publish的post请求。 后台返回http200即为通过验证，返回http500即为验证失败，服务器拒绝连接。 nginx的配置文件（位于nginx安装目录下：…/nginx/conf/nginx.conf）修改如下: 12345678910111213141516171819202122rtmp &#123; server &#123; #listen 1935; listen 10077; chunk_size 4000; application live &#123; live on; on_publish http://localhost:10078/user/auth;//后面的url即flask监听的地址 &#125; application hls &#123; live on; hls on; #hls_path ../nginx-1.7.11.3-Gryphon/html/hls; hls_path ../hls; hls_fragment 5s; on_publish http://localhost:10078/user/auth; &#125; &#125;&#125; python的flask后台代码如下： 12345678910111213141516171819202122232425262728293031#!/usr/bin/env python# -*- coding:utf-8 -*-#https://www.jianshu.com/p/0d14ae8f081c#https://blog.csdn.net/wei389083222/article/details/78721074/#https://blog.csdn.net/weixin_34368949/article/details/85991563#验证只能用post方法#虽然流密钥的格式像是get类型，但是必须使用POST获取参数。from flask import Flask, request, Responseapp = Flask(__name__)#传入url格式为: xx.xx.xx.xx:10078/user/auth?usr=xxx&amp;passWord=xxx@app.route('/user/auth',methods=['POST'])def auth(): usr = request.form['usr']#从url后获取的数据 passWord = request.form['passWord'] print(usr,'\t',passWord) #此处可改为从数据库获取数据 auth_user='abc' auth_passWord='123' if auth_user == usr and auth_passWord ==passWord: return Response(response='success',status=200)#返回200状态码 else: return Response(status=500)#返回500状态码 #Flask.abort(404) return passWordif __name__ == '__main__': app.run(host='0.0.0.0',port=10078,debug=True) 播放权限也可用类似on_publish的验证方法进行控制。 on_play和on_publish 一样，只接受post方法，若需要接受get方法需要在rtmp中application的配置中添加notify_method get;，然后可在http{}部分中处理调用（这部分语法我不太清楚，不详细展开）。 以下是nginx.conf关于on_play的用法 on_play语法：on_play url上下文：rtmp, server, application描述：设置 HTTP 播放回调。每次一个客户分发播放命令时，一个 HTTP 请求异步发送，命令处理会挂起 - 直到它返回结果码。之后再解析 HTTP 结果码。 HTTP 2XX 返回码的话继续 RTMP 会话。 HTTP 3XX 返回码的话 重定向 RTMP 到另一个流，这个流的名字在 HTTP 返回头的 Location 获取。如果新流的名字起始于 rtmp:// 然后远程 relay 会被创建。relay 要求 IP 地址是指定的而不是域名，并且只工作在 1.3.10 版本以上的 nginx。另请参考 notify_relay_redirect。 其他返回码的话 RTMP 连接丢弃。重定向例子： 123456789101112131415161718192021222324252627 http &#123; location /local_redirect &#123; rewrite ^.*$ newname? permanent; &#125; location /remote_redirect &#123; # no domain name here, only ip rewrite ^.*$ rtmp://192.168.1.123/someapp/somename? permanent; &#125; &#125; rtmp &#123; application myapp1 &#123; live on; # stream will be redirected to &apos;newname&apos; on_play http://localhost:8080/local_redirect; &#125; application myapp2 &#123; live on; # stream will be pulled from remote location # requires nginx &gt;= 1.3.10 on_play http://localhost:8080/remote_redirect; &#125;&#125; HTTP 请求接收到一些个参数。在 application/x-www-form-urlencoded MIME 类型下使用 POST 方法。以下参数会被传送给调用者： call=play。 addr - 客户端 IP 地址。 app - application 名。 flashVer - 客户端 flash 版本。 swfUrl - 客户端 swf url。 tcUrl - tcUrl。 pageUrl - 客户端页面 url。 name - 流名。出了上述参数之外其他所有播放命令参数显式地发送回调。例如如果一个流由 url rtmp://localhost/app/movie?a=100&amp;b=face&amp;foo=bar 访问，然后呢 a,b 和 foo 发送回调。on_play http://example.com/my_callback; 过程中使用到的额外软件 obs 手机端:快直播 ffmpeg推流（没用过）]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>rtmp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+gitPages Synchronization]]></title>
    <url>%2F2019%2F05%2F16%2Fhexo-gitPages-Synchronization%2F</url>
    <content type="text"><![CDATA[Hexo+gitPages 的博客多端同步管理及迁移 本文参考 如何解决github+Hexo的博客多终端同步问题 利用Hexo在多台电脑上提交和更新github pages博客 搭建hexo博客并简单的实现多终端同步 hexo博客同步管理及迁移 主体的思路是将博文内容相关文件放在Github项目中master中，将Hexo配置写博客用的相关文件(包括博客内容主题等等)放在Github项目的hexo分支上，这个是关键，多终端的同步只需要对分支hexo进行操作。 同步的首次操作在创建了博客的目录下操作，push本地文件夹Hexo中的必要文件到yourname.github.io的hexo分支上。 只托管部分用于多终端的同步的文件 注意：使用第三方主题时，要删除第三方主题的.git文件夹删除，不然无法push到远程仓库 1234567git init //初始化本地仓库git add source //将必要的文件依次添加，有些文件夹如npm install产生的node_modules由于路径过长不好处理，所以这里没有用`git add .`命令了，而是依次添加必要文件，如下图所示,其实也可以用'git add .'命令，在.gitignore文件中加入不需要同步的文件即可git commit -m "Blog Source Hexo"git branch hexo //新建hexo分支git checkout hexo //切换到hexo分支上git remote add origin git@github.com:yourname/yourname.github.io.git //将本地与Github项目对接git push origin hexo //push到Github项目的hexo分支上 多出来的hexo的分支，用于文件同步，原有的master分支用于部署静态博客页面 在新终端进行更新博客先从github中把文件clone到本地，然后安装相应组件。然后通过git的提交同步内容，用hexo的命令部署博客到gitPages里。 12345678git clone -b hexo git@github.com:yourname/yourname.github.io.git //将Github中hexo分支clone到本地cd yourname.github.io //切换到刚刚clone的文件夹内npm install //注意，这里一定要切换到刚刚clone的文件夹内执行，安装必要的所需组件，不用再inithexo new post "new blog name" //新建一个.md文件，并编辑完成自己的博客内容git add source //经测试每次只要更新sorcerer中的文件到Github中即可，因为只是新建了一篇新博客，如果更改了主题样式的话还是建议用'git add .'git commit -m "XX"git push origin hexo //更新分支hexo d -g //push更新完分支之后将自己写的博客对接到自己搭的博客网站上，同时同步了Github中的master 已有博客的终端更新博客进入相应的文件夹，更新博客直行命令即可。 123456git pull origin hexo//先pull完成本地和远端的融合hexo new post "new blog"git add .git commit -m "Blog update"git push origin hexohexo d -g]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown Syntax]]></title>
    <url>%2F2019%2F05%2F14%2FMarkdown-Syntax%2F</url>
    <content type="text"><![CDATA[Markdown Syntax 本文参考 Markdown基本语法(简书) Markdown官方文档 Markdown语法html支持 Markdown部分详细用法 标题Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。 12345678Atx形式# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题 这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题1234567Setext形式This is an H1=============This is an H2------------- This is an H1This is an H2根据标题生成目录1[TOC] 根据标题自动生成目录 [TOC] 字体1234**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~ 加粗测试 倾斜测试 斜体加粗测试 删除线测试 引用1234&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;多重引用&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容 引用测试一 引用测试二 多重引用 引用测试 分割线1234-------******** 只要三个以上就可以 图片引用1234![图片alt](图片地址 ''图片title'')图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加 12![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg "区块链") 插入带有链接的图片1234[[图片上传失败...(image-f83b77-1542510791300)]](http://www.baidu.com)&#123;:target="_blank"&#125; // 内链式[[图片上传失败...(image-4dc956-1542510791300)]][5]&#123;:target="_blank"&#125; // 引用式[5]: http://www.baidu.com [图片上传失败…(image-f83b77-1542510791300)]{:target=”_blank”} 内链式 [图片上传失败…(image-f83b77-1542510791300)]{:target=”blank”} 外链式 超链接引用12[超链接名](超链接地址 "超链接title")title可加可不加 12[简书](http://jianshu.com)[百度](http://baidu.com) baidu 注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。 1234&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;示例&lt;a href=&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot; target=&quot;_blank&quot;&gt;简书&lt;/a&gt; 简书 视频插入注：Markdown 语法是不支持直接插入视频的 普遍的做法是 插入HTML的 iframe 框架，通过网站自带的分享功能获取，如果没有可以尝试第二种方法 第二是伪造播放界面，实质是插入视频图片，然后通过点击跳转到相关页面 代码1 注：多数第三方平台不支持插入&lt;iframe&gt;视频 1&lt;iframe height=498 width=510 src='http://player.youku.com/embed/XMjgzNzM0NTYxNg==' frameborder=0 'allowfullscreen'&gt;&lt;/iframe&gt; 代码2 1[[图片上传失败...(image-49aefe-1542510791300)]](http://v.youku.com/v_show/id_XMjgzNzM0NTYxNg==.html?spm=a2htv.20009910.contentHolderUnit2.A&amp;from=y1.3-tv-grid-1007-9910.86804.1-2#paction)&#123;:target="_blank"&#125; 列表1234567无序列表用任一种皆可- 列表内容+ 列表内容* 列表内容注意：- + * 跟内容之间都要有一个空格 列表（-） 列表（-） 列表（+） 列表（*） 1234567有序列表内容1.列表内容2.列表内容3.列表内容注意：序号跟内容之间要有空格 第一点 第二点 第三点 12345678910111213141516171819**上一级和下一级之间敲三个空格即可**- 一级无序列表内容 - 二级无序列表内容 - 二级无序列表内容 - 二级无序列表内容- 一级无序列表内容 1. 二级有序列表内容 2. 二级有序列表内容 3. 二级有序列表内容1. 一级有序列表内容 - 二级无序列表内容 - 二级无序列表内容 - 二级无序列表内容2. 一级有序列表内容 1. 二级有序列表内容 2. 二级有序列表内容 3. 二级有序列表内容 上一级和下一级之间敲三个空格即可 一级无序列表内容 二级无序列表内容 二级无序列表内容 二级无序列表内容 一级无序列表内容 二级有序列表内容 二级有序列表内容 二级有序列表内容 一级有序列表内容 二级无序列表内容 二级无序列表内容 二级无序列表内容 一级有序列表内容 二级有序列表内容 二级有序列表内容 二级有序列表内容 表格1234567891011表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略 12345姓名|技能|排行--|:--:|--:刘备|哭|大哥关羽|打|二哥张飞|骂|三弟 姓名 技能 排行 刘备 哭 大哥 关羽 打 二哥 张飞 骂 三弟 Typora编辑器中可以直接使用crtl+T，或者在菜单段落中找到表格生成 代码引用单行代码 1`代码内容` int main(){return 0;} 代码块 12345(```)language 代码... 代码... 代码...(```) 注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。 123456#include&lt;iostream&gt;using namespace std;int main()&#123; cout&lt;&lt; "hello markdown"; return 0;&#125; 格式化代码html版123&lt;pre&gt;## 这是一个不起作用的标题&lt;/pre&gt; ## 这是一个不起作用的标题 流程图注： st=&gt;start: 开始 的：后面保持空格 形参 实参 含义 tag st 标签 (可以自定义) =&gt; =&gt; 赋值 type start 类型 (6种类型) content 开始 描述内容 (可以自定义) :&gt;url http://www.baidu.com[blank] 链接与跳转方式 兼容性很差 6种类型 含义 start 启动 end 结束 operation 程序 subroutine 子程序 condition 条件 inputoutput 输出 形参 实参 含义 -&gt; -&gt; 连接 condition c1 条件 (布尔值,方向) (yes,right) 如果满足向右连接，4种方向：right ，left，up ，down 默认为：down 注：operation (程序); subroutine (子程序) ;condition (条件)，都可以在括号里加入连接方向。 123456789```flowst=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op&amp;``` 12345678st=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op&amp; 12345678910111213## 选项框```markdown- [x] 选项一- [ ] 选项二 需要注意的是：-、[x]、和选择一之间都要有空格，如果不下x[ ]中也要有空格 选项一 选项二 数学公式支持LaTex的数学公式，参考https://www.jianshu.com/p/2bbec51d756f 数学公式（MathJax)，参考https://www.jianshu.com/p/a0aa94ef8ab2 注：1个$左对齐，2个居中 12$$ x \href&#123;why-equal.html&#125;&#123;=&#125; y^2 + 1 $$$ x = &#123;-b \pm \sqrt&#123;b^2-4ac&#125; \over 2a&#125;. $ $$x \href{why-equal.html}{=} y^2 +1$$ 使用Typora的时候可以直接使用 $$+回车，或者用crtl+shift+M生成公式块（在段落菜单中的公式块） 参考https://blog.csdn.net/mingzhuo_126/article/details/82722455 脚注12Markdown[^1][^1]: Markdown是一种纯文本标记语言 // 在文章最后面显示脚注 Markdown^1 锚点注：只有标题支持锚点， 跳转目录方括号后 保持空格 123[公式标题锚点](#1)### [需要跳转的目录] &#123;#1&#125; // 方括号后保持空格 脚注标题锚点 123由于&#123;# 是hexo的标注语言hexo 中 &#123;# 属于保留字段 &#123;# ... #&#125;属于注释字段把```以外的&#123;#改成&#123;&#123; '&#123;#' &#125;&#125;即可解决 自动邮箱链接1&lt;xxx@outlook.com&gt; &#120;&#x78;&#120;&#64;&#111;&#117;&#x74;&#x6c;&#x6f;&#111;&#107;&#46;&#99;&#111;&#x6d; 时序图代码1 123456​```sequenceA-&gt;&gt;B: 你好Note left of A: 我在左边 // 注释方向，只有左右，没有上下Note right of B: 我在右边B--&gt;A: 很高兴认识你​ 12345678910111213141516171819202122**演示**![img](https:////upload-images.jianshu.io/upload_images/6912209-784ce9bb7beb6672.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/393/format/webp)**代码详解**注：`A-&gt;&gt;B: 你好` 后面可以不写文字，但是一定要在最后加上`：` Note left of A 代表注释在A的左边| 符号 | 含义 || ---- | -------- || `-` | 实线 || `&gt;` | 实心箭头 || `--` | 虚线 || `&gt;&gt;` | 空心箭头 |**代码2** 123456789起床-&gt;吃饭: 稀饭油条吃饭-&gt;上班: 不要迟到了上班-&gt;午餐: 吃撑了上班-&gt;下班:Note right of 下班: 下班了下班-&gt;回家:Note right of 回家: 到家了回家--&gt;&gt;起床:Note left of 起床: 新的一天 演示 转义字符由于markdown语法的原因，可以用\进行转义。]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+gitpages]]></title>
    <url>%2F2019%2F05%2F14%2Fhexo-gitpages%2F</url>
    <content type="text"><![CDATA[hexo+gitPages搭建个人博客 本文参考 hexo 博客搭建 hexo官方文档 【持续更新】最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析 手把手教你搭建自己的个人博客（图文教程） 搭建篇 –使用Github+hexo搭建个人博客教程—总结自己爬过的坑) GitHub+Hexo 搭建个人网站详细教程 史上最详细的Hexo博客搭建图文教程 hexo优化 hexo博客改装和一些细节优化 https://www.chakid.com/2018/05/26/hexo博客改装和一些细节优化 Hexo NexT 博客后台管理指南 Hexo主题更改以及小功能的添加 hexo-NexT主题配置 NexT官方展示 NexT官方中文文档ReadME NexT源码 NexT文档 Hexo的Next主题详细配置 hexo的next主题个性化教程:打造炫酷网站 hexo的next主题个性化教程：打造炫酷网站 【持续更新】hexo next主题优化手册 可参考博客嘤 yilia主题 yilia主题源码（GitHub） yilia主题展示 hexo博客搭建安装前提安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序： Node.js (Should be at least nodejs 6.9) Git 如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。 1$ npm install -g hexo-cli 如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。 如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。 Mac 用户 您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。 安装 Git Windows：下载并安装 git. Mac：使用 Homebrew, MacPorts ：brew install git;或下载 安装程序 安装。 Linux (Ubuntu, Debian)：sudo apt-get install git-core Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core Windows 用户 由于众所周知的原因，从上面的链接下载git for windows最好挂上一个代理，否则下载速度十分缓慢。也可以参考这个页面，收录了存储于百度云的下载地址。 安装 Node.js安装 Node.js 的最佳方式是使用 nvm。 cURL: 1$ curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh Wget: 1$ wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh 安装完成后，重启终端并执行下列命令即可安装 Node.js。 1$ nvm install stable 或者您也可以下载 安装程序 来安装。 Windows 用户 对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。另外，您也可以使用Git Bash，这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。 安装 Hexo所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。 1$ npm install -g hexo-cli 在安装的时候我用的是npm install hexo --save 关于npm命令回顾 npm install 命令最近在写Node程序的时候，突然对 npm install 的-save和-save-dev 这两个参数的使用比较混乱。其实博主在这之前对这两个参数的理解也是模糊的，各种查资料和实践后对它们之间的异同点略有理解。遂写下这篇文章避免自己忘记，同时也给node猿友一点指引。 我们在使用 npm install 安装模块的模块的时候 ，一般会使用下面这几种命令形式： 1234npm install moduleName # 安装模块到项目目录下`npm install -g moduleName # -g 的意思是将模块安装到全局，具体安装到磁盘哪个位置，要看 npm config prefix 的位置。npm install -save moduleName # -save 的意思是将模块安装到项目目录下，并在package文件的dependencies节点写入依赖。npm install -save-dev moduleName # -save-dev 的意思是将模块安装到项目目录下，并在package文件的devDependencies节点写入依赖。 那么问题来了，在项目中我们应该使用四个命令中的哪个呢？这个就要视情况而定了。下面对这四个命令进行对比，看完后你就不再这么问了。 npm install moduleName 命令 安装模块到项目node_modules目录下。 不会将模块依赖写入devDependencies或dependencies 节点。 运行 npm install 初始化项目时不会下载模块。 npm install -g moduleName 命令 安装模块到全局，不会在项目node_modules目录中保存模块包。 不会将模块依赖写入devDependencies或dependencies 节点。 运行 npm install 初始化项目时不会下载模块。 npm install -save moduleName 命令 安装模块到项目node_modules目录下。 会将模块依赖写入dependencies 节点。 运行 npm install 初始化项目时，会将模块下载到项目目录下。 运行npm install –production或者注明NODE_ENV变量值为production时，会自动下载模块到node_modules目录中。 npm install -save-dev moduleName 命令 安装模块到项目node_modules目录下。 会将模块依赖写入devDependencies 节点。 运行 npm install 初始化项目时，会将模块下载到项目目录下。 运行npm install –production或者注明NODE_ENV变量值为production时，不会自动下载模块到node_modules目录中。 建站安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。 &lt;folder&gt; 为hexo安装目录 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 新建完成后，指定文件夹的目录如下： 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes _config.yml网站的 配置 信息，您可以在此配置大部分的参数。 package.json应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。 12345678910111213141516171819package.json&#123; &quot;name&quot;: &quot;hexo-site&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;private&quot;: true, &quot;hexo&quot;: &#123; &quot;version&quot;: &quot;&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;hexo&quot;: &quot;^3.8.0&quot;, &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;, &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;, &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;, &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;, &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;, &quot;hexo-server&quot;: &quot;^0.3.3&quot; &#125;&#125; scaffolds模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。 Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。 source资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。 themes主题 文件夹。Hexo 会根据主题来生成静态页面。 配置您可以在 _config.yml 中修改大部分的配置。 网站 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述 author 您的名字 language 网站使用的语言 timezone 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。 网址 参数 描述 默认值 url 网址 root 网站根目录 permalink 文章的 永久链接 格式 :year/:month/:day/:title/ permalink_defaults 永久链接中各部分的默认值 网站存放在子目录 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url设为 http://yoursite.com/blog 并把 root 设为 /blog/。 目录 参数 描述 默认值 source_dir 资源文件夹，这个文件夹用来存放内容。 source public_dir 公共文件夹，这个文件夹用于存放生成的站点文件。 public tag_dir 标签文件夹 tags archive_dir 归档文件夹 archives category_dir 分类文件夹 categories code_dir Include code 文件夹 downloads/code i18n_dir 国际化（i18n）文件夹 :lang skip_render 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。 提示 如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。 文章 参数 描述 默认值 new_post_name 新文章的文件名称 :title.md default_layout 预设布局 post auto_spacing 在中文和英文之间加入空格 false titlecase 把标题转换为 title case false external_link 在新标签中打开链接 true filename_case 把文件名称转换为 (1) 小写或 (2) 大写 0 render_drafts 显示草稿 false post_asset_folder 启动 Asset 文件夹 false relative_link 把链接改为与根目录的相对位址 false future 显示未来的文章 true highlight 代码块的设置 相对地址 默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为example.com,您有一篇文章名为hello，那么绝对链接可能像这样：http://example.com/hello.html，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。 分类 &amp; 标签 参数 描述 默认值 default_category 默认分类 uncategorized category_map 分类别名 tag_map 标签别名 日期 / 时间格式Hexo 使用 Moment.js 来解析和显示时间。 参数 描述 默认值 date_format 日期格式 YYYY-MM-DD time_format 时间格式 H:mm:ss 分页 参数 描述 默认值 per_page 每页显示的文章量 (0 = 关闭分页功能) 10 pagination_dir 分页目录 page 扩展 参数 描述 theme 当前主题名称。值为false时禁用主题 deploy 部署部分的设置 部署当执行完npm install之后即可通过hexo s或者hexo serve通过本地访问hexo博客。 此时博客已搭建在本地了。 方案一：GithubPages 创建Github账号 创建仓库， 仓库名为：&lt;Github账号名称&gt;.github.io 将本地Hexo博客推送到GithubPages 3.1. 安装hexo-deployer-git插件。在命令行（即Git Bash）运行以下命令即可： 1$ npm install hexo-deployer-git --save 3.2. 添加SSH key。 创建一个 SSH key 。在命令行（即Git Bash）输入以下命令， 回车三下即可： 1$ ssh-keygen -t rsa -C &quot;邮箱地址&quot; 添加到 github。 复制密钥文件内容（路径形如C:\Users\Administrator\.ssh\id_rsa.pub），粘贴到New SSH Key即可。 测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功： 12$ ssh -T git@github.com$ yes 3.3. 修改_config.yml（在站点目录下）。文件末尾修改为： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git branch: master 注意：上面仓库地址写ssh地址，不写http地址。 3.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回INFO Deploy done: git即成功推送： 12$ hexo g$ hexo d 等待1分钟左右，浏览器访问网址： https://&lt;Github账号名称&gt;.github.io 至此，您的Hexo博客已经搭建在GithubPages, 域名为https://&lt;Github账号名称&gt;.github.io。 方案二：GithubPages + 域名在方案一的基础上，添加自定义域名（您购买的域名）。 域名解析。 类型选择为 CNAME； 主机记录即域名前缀，填写为www； 记录值填写为自定义域名； 解析线路，TTL 默认即可。 仓库设置。 2.1. 打开博客仓库设置：https://github.com/&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io/settings 2.2. 在Custom domain下，填写自定义域名，点击save。 2.3. 在站点目录的source文件夹下，创建并打开CNAME.txt，写入你的域名（如www.simon96.online），保存，并重命名为CNAME。 等待10分钟左右。 浏览器访问自定义域名。 至此，您的Hexo博客已经解析到自定义域名，https://&lt;Github账号名称&gt;.github.io依然可用。 （可在github仓库中设置跳转至个人域名） 绑定域名虽然在Internet上可以访问我们的网站，但是网址是GitHub提供的:http://xxxx.github.io (知乎排版可能会出现”http://“字样) 而我们想使用我们自己的个性化域名，这就需要绑定我们自己的域名。这里演示的是在阿里云万网的域名绑定，在国内主流的域名代理厂商也就阿里云和腾讯云。登录到阿里云，进入管理控制台的域名列表，找到你的个性化域名，进入解析 然后添加解析 包括添加三条解析记录，192.30.252.153是GitHub的地址，你也可以ping你的 http://xxxx.github.io 的ip地址，填入进去。第三个记录类型是CNAME，CNAME的记录值是：你的用户名.http://github.io 这里千万别弄错了。第二步，登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名 点击save保存。第三步，进入本地博客文件夹 ，进入blog/source目录下，创建一个记事本文件，输入你的域名，对，只要写进你自己的域名即可。如果带有www，那么以后访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。所以建议，不要带有www。这里我还是写了www(不建议带有www): 保存，命名为CNAME ，注意保存成所有文件而不是txt文件。 完成这三步，进入blog目录中，按住shift键右击打开命令行，依次输入： 123hexo cleanhexo ghexo d 这时候打开浏览器在地址栏输入你的个性化域名将会直接进入你自己搭建的网站。 方案三：GithubPages + CodingPages + 域名GithubPages 在国内较慢，百度不收录，而CodingPages 在国外较快。所以在方案二的基础上，添加CodingPages 。 创建Coding账号 创建仓库， 仓库名为：&lt;Coding账号名称&gt; 进入项目里『代码』页面，点击『一键开启静态 Pages』，稍等片刻CodingPages即可部署成功。 将本地Hexo博客推送到CodingPages 4.1. 鉴于创建GithubPages 时，已经生成过公钥。可直接复制密钥文件内容（路径形如C:\Users\Administrator\.ssh\id_rsa.pub）， 粘贴到新增公钥。 4.2. 测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功： 12$ ssh -T git@git.coding.net$ yes 4.3. 修改_config.yml（在存放Hexo初始化文件的路径下）。文件末尾修改为： 123456789# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:- type: git repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git branch: master- type: git repo: git@git.dev.tencent.com:&lt;Coding账号名称&gt;/&lt;Coding账号名称&gt;.git branch: master 4.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回INFO Deploy done: git即成功推送： 12$ hexo g$ hexo d 域名解析 添加 CNAME 记录指向 &lt;Coding账号名称&gt;.coding.me 类型选择为 CNAME； 主机记录即域名前缀，填写为www； 记录值填写为自定义域名； 解析线路，TTL 默认即可。 添加 两条A 记录指向 192.30.252.153和192.30.252.154 类型选择为 A； 主机记录即域名前缀，填写为@； 记录值填写为192.30.252.153和192.30.252.154； 解析线路，境外或谷歌。 在『Pages 服务』设置页（https://dev.tencent.com/u/&lt;Coding账号名称&gt;/p/&lt;Coding账号名称&gt;/git/pages/settings）中绑定自定义域名。 至此，您的Hexo博客已经解析到自定义域名，https://&lt;Github账号名称&gt;.github.io和https://&lt;Coding账号名称&gt;.coding.me依然可用。 方案四：云服务器 + 域名该方案需要先购买云服务器和域名。 在云服务器安装Git 和 Nginx。(Git 用于版本管理和部署，Nginx 用于静态博客托管。) 登陆root用户，运行： 12$ yum -y update$ yum install -y git nginx Nginx配置 2.1. 创建文件目录(用于博客站点文件存放) 123cd /usr/local/mkdir hexochmod 775 -R /usr/local/hexo/ 2.2. 添加 index.html(用于检测配置 Nginx 是否成功) 1vim /usr/local/hexo/index.html 添加以下代码，并保存。 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Nginx running&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 2.3. 配置 Nginx 服务器 1vim /etc/nginx/nginx.conf 修改server_name和root： 123456server &#123; listen 80 default_server; listen [::]:80 default_server; server_name www.baidu.com; # 填个人域名 root /usr/local/hexo/; &#125; 2.4. 启动nginx服务； 1service nginx start 2.5. 云服务器浏览器访问个人域名或IP，若跳转index.html，则配置完成，否则检查以上配置。 git配置 3.1. 创建文件目录, 用于私人 Git 仓库搭建, 并更改目录读写权限。 123cd /usr/local/mkdir hexoRepochmod 775 -R /usr/local/hexoRepo/ 3.2. Git 初始化裸库。 12cd hexoRepo/git init --bare hexo.git 3.3. 创建 Git 钩子(hook)。 1vim /usr/local/hexoRepo/hexo.git/hooks/post-receive 3.4. 输入以下信息，用于指定 Git 的源代码 和 Git 配置文件。 123#!/bin/bashgit --work-tree=/usr/local/hexo --git-dir=/usr/local/hexoRepo/hexo.git checkout -f 3.5. 保存并退出后, 给该文件添加可执行权限。 1chmod +x /usr/local/hexoRepo/hexo.git/hooks/post-receive 本地博客推送到云服务器 4.1. 安装hexo-deployer-git插件。在命令行（即Git Bash）运行以下命令即可： 1$ npm install hexo-deployer-git --save 4.2. 添加SSH key。 创建一个 SSH key 。在命令行（即Git Bash）输入以下命令， 回车三下即可： 1$ ssh-keygen -t rsa -C &quot;邮箱地址&quot; 添加到 github。 复制密钥文件内容（路径形如C:\Users\Administrator\.ssh\id_rsa.pub），粘贴到New SSH Key即可。 测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功： 12$ ssh -T git@github.com$ yes 4.3. 修改_config.yml（在站点目录下）。文件末尾修改为： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: root@xxx.xxx.xxx.xxx:/usr/local/hexoRepo/hexo //用户名@域名或 IP 地址:/usr/local/hexoRepo/hexo branch: master 注意：上面仓库地址写ssh地址，不写http地址。 4.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回INFO Deploy done: git即成功推送： 12$ hexo g$ hexo d 等待1分钟左右，浏览器访问个人域名。 至此，您的Hexo博客已经搭建在云服务器, 域名为个人域名。 Hexo常用命令123456789hexo new "postName" #新建文章hexo new page "pageName" #新建页面hexo clean #清除部署緩存hexo n == hexo new #新建文章hexo g == hexo generate #生成静态页面至public目录hexo s == hexo server #开启预览访问端口（默认端口4000，可在浏览器输入localhost:4000预览）hexo d == hexo deploy #将.deploy目录部署到GitHubhexo g -d #生成加部署hexo g -s #生成加预览 注：当本地预览和远程部署的浏览结果不同的时候，不妨使用hexo clean &amp;&amp; hexo g -d试试。 创建文章命令： 123$ hexo new [layout] &lt;title&gt;复制代码 参数说明： [layout]可以为以下三种： 参数名 功能 文章路径 post 新建博文 source/_posts page 新建页面（如404，分类） source draft 草稿 source/_drafts 草稿可通过一下命令发布： 123$ hexo publish [layout] &lt;title&gt;复制代码 title注意： 不是博文标题， 是博文markdown文件的名字， 也是博文链接的后缀（如https://www.simon96.online/2018/10/12/hexo-tutorial/中的hexo-tutorial） 文章模版 创建模版 在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如： $ hexo new blog “simon” ​ 在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 blog.md，并根据其内容建立文章。 修改参数 以下是您可以在模版中使用的变量： 变量 描述 layout 布局 title 标题 date 文件建立日期 Front-matter就是博文最上方以 --- 分隔的那部分。 默认可以使用的Front-matter： 参数 描述 默认值 layout 布局 title 标题 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） categories 分类（不适用于分页） permalink 覆盖文章网址 主题配置hexo主题wiki 可以在此处寻找自己喜欢的主题下载所有的主题文件，保存到Hexo目录下的themes文件夹下。然后在_config.yml文件中修改： 1234# Extensions## Plugins: http://hexo.io/plugins/## Themes: http://hexo.io/themes/theme: landscape //themes文件夹中对应文件夹的名称 然后先执行hexo clean，然后重新hexo g，并且hexo d，很快就能看到新主题的效果了~ 主题优化 设置「RSS」 添加「标签」页面 添加「分类」页面 设置「字体」 设置「代码高亮主题」 侧边栏社交链接 问题：图标哪里找？ 解决：Font Awesome 开启打赏功能 问题：微信支付宝二维码不美观，规格不一。 解决：在线生成二维码 设置友情链接 添加个人联系方式 腾讯公益404页面 站点建立时间 订阅微信公众号 设置「动画效果」 问题：慢，需要等待 JavaScript 脚本完全加载完毕后才会显示内容。 解决：将主题配置文件_config.yml中，use_motion字段的值设为 false 来关闭动画。 设置「背景动画」 添加背景图 修改Logo字体 修改内容区域的宽度 网站标题栏背景颜色 自定义鼠标样式 文章加密访问 实现点击出现桃心效果 静态资源压缩（博文压缩） 修改访问url路径 博文置顶 在右上角或左上角实现fork me on github 主页文章添加边框阴影效果 显示当前浏览记录 常见分类页 加入广告 添加萌萌哒 搜索功能 网易云外链播放器 花里胡哨的玩意儿 修改作者头像并旋转 修改代码块自定义样式 点击爆炸效果 添加萌妹子动图 侧栏设置 透明背景设置 添加阅读全文 设置网站缩略图标 添加站点访问计数 前几个可参考next官方文档配置 （以下用到外部工具） 评论系统 数据统计与分析 内容分享服务 文章加密访问 hexo-blog-encrypt SEOHexo NexT 主题SEO优化指南 seo这东西是使自己的文章能被百度、谷歌搜录，能被搜索到。 因为暂时不想被搜到/doge，所有暂不配置]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F05%2F13%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
