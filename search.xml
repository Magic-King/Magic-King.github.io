<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LOVE</title>
      <link href="/2019/05/27/LOVE/"/>
      <url>/2019/05/27/LOVE/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read." />    <label for="pass">Please enter the password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19vtq0Zw8BVhMX5lDVjcTm17InT2XVsqRUdW/yGK7qc0fFNCTZJusaU/lcCt4cicmncirlsB1YS+0EMocOEXl6QsRHh95xLPmfnRiQaHp2FK9iZ1Dee97z2f1HHld5ihCVnJkwRNnEks0dUZiFtHvIh7zpoPjf7mS+/fdtm57MbDpVz2Zc25gOytgfpRigrWqTebjl3lhdAYumsNfdnFniEPeUOw6UieeAB81juFqXzJjVEA2renh73xbYp7LQeuBqSkhoncQqBNFjKukrKMZ75n+BTEgR7Fh/0xQmyTMgk0dP7G2ZYFCM+SdSRxyg9coUWE5UGb0EujAcxAD/+hbXivO1qTlaf7iB/4tknoL5fLsCVSGRHv4EwYgxJQ3/gZj6Xq5HslJ6DQhs27e1FeutatZZRCVAssdkEbf848N8bsmkkJ3YCT1gHSVLDJqOaKq8ZivtAGsOeyJpJCQ3bt84NU0GMgXOIrIHCdDNQ5qwH7UTtDko66Cnrgwy3x1TKi++MGJFBe9NYYKnh04/HTspKhngi91uE4A1wbC88xcCzzKWAlT/dm4eKdJEE2ie9eCF1D86KYhnMPRQRh9FebflbSXVc+Kw4ODZI1jz66oL7RCEbXZ61mmWbu9+nP9lMGDFlwgAvubtPfB2HN3mz9Og7X6IIgZKsCcdNi3zbZ9FjrNo982rOi3cknt5PAA1am2kzTfbxC3HSB9M+K0nGVfDvOHiSpWbGK+50V5w5rIxf3o+Cc0E7bfjncp+vF2v57ibi/Ycjpu0P1vu8TswZHYj5Vwju0bAZZe7BWCy4o4D7xj2HvfqKgvcM5S4ifAaKdhV0ok0+TOJVS+67RUlnLrs2bf1DXsRWMihr4zoKyDOynnvSDcQJ8feS4CmJF7hpc2qtJZr1S8MpG+ODX3JkaZkjk/yFHldkrrQnToBcNM6wXR0YjXi4k1ns2+5c4vG8CWLs2TeDseV++YhuAXgwfkVSsewwycGVqPbakVFoCoLjMv5rS1Zi1Z/L9c6OqoVaoz5r7ent8vJID5QwiXsCGsfGui8qRaz77UZZ4xdcD34i+hLnAfBzV60w5jEJqS13m9KnflMmhxd+Zxh4hY1WcUsTEa/n8BxFWt3wRAlKPOVY745uK8pq9DmJrF4wy5mCtL4QX7FaSipabq9ww4NH/Yu3f45t+qDEu8ti4FpMfn9ZE9keVT4rDXD7lL+EH0QnLGgE9VVzOYywaNbkVrIMiLu9VSOSgdI4bhpEFG6tayx5z4oBkSLW7CHpIK0FfqdO6Jluoi0nno+bMC7L9GyQYYXq/bJiMY6tTbvqPNgJvi7TefcA+ySW4onqOEv02R0gQs3paSvvJrJi5IczRwX5H23KbwQnIDlJDacT3KqqzoF3zciMDSejI69bxMPCWMERvVvBHgTkuiLrmd30GrJ/+Z/BMGoq4yrAFT48xcfFS7bhIzBBEe8/cHsTHV114mte8/wRigJKrOMbLskarTEJxdmwqbMaHk1f4N8kHFYRUiUCass55bdcRJFusggvc55X9sE5u4ESX20XWsyhIyJFXcBhNLcWM5hs1N3ByU+hXgZqzpYYk1ADQ+AVJZrbOMpSzNDMaHBCfz1NtUVdvpU71jkE3mbj1XBX4Qw9QIw0rs+AXdsx9aEOW7s7+ksi3nR7zNpvyJ3usjqIVPlCWgV3B0HEJmnfMGmbtvEDgJMnOCMVRRHZUmIMt3d3Ulu+roWZI+RbEyx4Rm92tgjBHAharQkgJulDxQ4IAYA=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Movie</title>
      <link href="/2019/05/27/Movie/"/>
      <url>/2019/05/27/Movie/</url>
      
        <content type="html"><![CDATA[<h1 id="To-the-movie"><a href="#To-the-movie" class="headerlink" title="To the movie"></a>To the movie</h1><h2 id="In-the-wanda"><a href="#In-the-wanda" class="headerlink" title="In the wanda"></a>In the wanda</h2><ul><li><h3 id="战狼2"><a href="#战狼2" class="headerlink" title="战狼2"></a>战狼2</h3></li><li><h3 id="空天猎"><a href="#空天猎" class="headerlink" title="空天猎"></a>空天猎</h3></li><li><h3 id="极致追击"><a href="#极致追击" class="headerlink" title="极致追击"></a>极致追击</h3></li><li><h3 id="英伦对决"><a href="#英伦对决" class="headerlink" title="英伦对决"></a>英伦对决</h3></li><li><h3 id="看不见的客人"><a href="#看不见的客人" class="headerlink" title="看不见的客人"></a>看不见的客人</h3></li><li><h3 id="羞羞的铁拳"><a href="#羞羞的铁拳" class="headerlink" title="羞羞的铁拳"></a>羞羞的铁拳</h3></li><li><h3 id="天才枪手"><a href="#天才枪手" class="headerlink" title="天才枪手"></a>天才枪手</h3></li><li><h3 id="王牌特工2：黄金圈"><a href="#王牌特工2：黄金圈" class="headerlink" title="王牌特工2：黄金圈"></a>王牌特工2：黄金圈</h3></li><li><h3 id="银翼杀手2049"><a href="#银翼杀手2049" class="headerlink" title="银翼杀手2049"></a>银翼杀手2049</h3></li><li><h3 id="全球风暴"><a href="#全球风暴" class="headerlink" title="全球风暴"></a>全球风暴</h3></li><li><h3 id="雷神3：诸神黄昏"><a href="#雷神3：诸神黄昏" class="headerlink" title="雷神3：诸神黄昏"></a>雷神3：诸神黄昏</h3></li><li><h3 id="精灵宝可梦：-波尔凯尼恩与机巧的马机雅娜"><a href="#精灵宝可梦：-波尔凯尼恩与机巧的马机雅娜" class="headerlink" title="精灵宝可梦： 波尔凯尼恩与机巧的马机雅娜"></a>精灵宝可梦： 波尔凯尼恩与机巧的马机雅娜</h3></li><li><h3 id="正义联盟"><a href="#正义联盟" class="headerlink" title="正义联盟"></a>正义联盟</h3></li><li><h3 id="恐袭波士顿"><a href="#恐袭波士顿" class="headerlink" title="恐袭波士顿"></a>恐袭波士顿</h3></li><li><h3 id="推理笔记"><a href="#推理笔记" class="headerlink" title="推理笔记"></a>推理笔记</h3></li><li><h3 id="烟花"><a href="#烟花" class="headerlink" title="烟花"></a>烟花</h3></li><li><h3 id="寻梦环游记"><a href="#寻梦环游记" class="headerlink" title="寻梦环游记"></a>寻梦环游记</h3></li><li><h3 id="巨额来电"><a href="#巨额来电" class="headerlink" title="巨额来电"></a>巨额来电</h3></li><li><h3 id="帕丁顿熊2"><a href="#帕丁顿熊2" class="headerlink" title="帕丁顿熊2"></a>帕丁顿熊2</h3></li><li><h3 id="鲨海"><a href="#鲨海" class="headerlink" title="鲨海"></a>鲨海</h3></li><li><h3 id="奇门遁甲"><a href="#奇门遁甲" class="headerlink" title="奇门遁甲"></a>奇门遁甲</h3></li><li><h3 id="心理罪之城市之光"><a href="#心理罪之城市之光" class="headerlink" title="心理罪之城市之光"></a>心理罪之城市之光</h3></li><li><h3 id="芳华"><a href="#芳华" class="headerlink" title="芳华"></a>芳华</h3></li><li><h3 id="疯狂特警队"><a href="#疯狂特警队" class="headerlink" title="疯狂特警队"></a>疯狂特警队</h3></li><li><h3 id="妖猫传"><a href="#妖猫传" class="headerlink" title="妖猫传"></a>妖猫传</h3></li><li><h3 id="机器之血"><a href="#机器之血" class="headerlink" title="机器之血"></a>机器之血</h3></li><li><h3 id="妖铃铃"><a href="#妖铃铃" class="headerlink" title="妖铃铃"></a>妖铃铃</h3></li><li><h3 id="前任3：-再见前任"><a href="#前任3：-再见前任" class="headerlink" title="前任3： 再见前任"></a>前任3： 再见前任</h3></li><li><h3 id="二代妖精之今生有幸"><a href="#二代妖精之今生有幸" class="headerlink" title="二代妖精之今生有幸"></a>二代妖精之今生有幸</h3></li><li><h3 id="星球大战：最后的绝地武士"><a href="#星球大战：最后的绝地武士" class="headerlink" title="星球大战：最后的绝地武士"></a>星球大战：最后的绝地武士</h3></li><li><h3 id="勇敢者游戏：-决战丛林"><a href="#勇敢者游戏：-决战丛林" class="headerlink" title="勇敢者游戏： 决战丛林"></a>勇敢者游戏： 决战丛林</h3></li><li><h3 id="无问西东"><a href="#无问西东" class="headerlink" title="无问西东"></a>无问西东</h3></li><li><h3 id="谜巢"><a href="#谜巢" class="headerlink" title="谜巢"></a>谜巢</h3></li><li><h3 id="英雄本色2018"><a href="#英雄本色2018" class="headerlink" title="英雄本色2018"></a>英雄本色2018</h3></li><li><h3 id="神秘巨星"><a href="#神秘巨星" class="headerlink" title="神秘巨星"></a>神秘巨星</h3></li><li><h3 id="移动迷宫3：-死亡解药"><a href="#移动迷宫3：-死亡解药" class="headerlink" title="移动迷宫3： 死亡解药"></a>移动迷宫3： 死亡解药</h3></li><li><h3 id="24小时：末路重生"><a href="#24小时：末路重生" class="headerlink" title="24小时：末路重生"></a>24小时：末路重生</h3></li><li><h3 id="忌日快乐"><a href="#忌日快乐" class="headerlink" title="忌日快乐"></a>忌日快乐</h3></li><li><h3 id="南极之恋"><a href="#南极之恋" class="headerlink" title="南极之恋"></a>南极之恋</h3></li><li><h3 id="唐人街探案2"><a href="#唐人街探案2" class="headerlink" title="唐人街探案2"></a>唐人街探案2</h3></li><li><h3 id="红海行动"><a href="#红海行动" class="headerlink" title="红海行动"></a>红海行动</h3></li><li><h3 id="捉妖记2"><a href="#捉妖记2" class="headerlink" title="捉妖记2"></a>捉妖记2</h3></li><li><h3 id="小萝莉的猴神大叔"><a href="#小萝莉的猴神大叔" class="headerlink" title="小萝莉的猴神大叔"></a>小萝莉的猴神大叔</h3></li><li><h3 id="黑豹"><a href="#黑豹" class="headerlink" title="黑豹"></a>黑豹</h3></li><li><h3 id="湮灭"><a href="#湮灭" class="headerlink" title="湮灭"></a>湮灭</h3></li><li><h3 id="阿尔法：狼伴归途"><a href="#阿尔法：狼伴归途" class="headerlink" title="阿尔法：狼伴归途"></a>阿尔法：狼伴归途</h3></li><li><h3 id="古墓丽影：起源之战"><a href="#古墓丽影：起源之战" class="headerlink" title="古墓丽影：起源之战"></a>古墓丽影：起源之战</h3></li><li><h3 id="环太平洋：雷霆再起"><a href="#环太平洋：雷霆再起" class="headerlink" title="环太平洋：雷霆再起"></a>环太平洋：雷霆再起</h3></li><li></li><li><h3 id="头号玩家"><a href="#头号玩家" class="headerlink" title="头号玩家"></a>头号玩家</h3></li><li><h3 id="通勤营救"><a href="#通勤营救" class="headerlink" title="通勤营救"></a>通勤营救</h3></li><li><h3 id="复仇者联盟3：无限战争"><a href="#复仇者联盟3：无限战争" class="headerlink" title="复仇者联盟3：无限战争"></a>复仇者联盟3：无限战争</h3></li><li><h3 id="后来的我们"><a href="#后来的我们" class="headerlink" title="后来的我们"></a>后来的我们</h3></li><li><h3 id="超时空同居"><a href="#超时空同居" class="headerlink" title="超时空同居"></a>超时空同居</h3></li><li><h3 id="游侠索罗：星球大战外传"><a href="#游侠索罗：星球大战外传" class="headerlink" title="游侠索罗：星球大战外传"></a>游侠索罗：星球大战外传</h3></li><li><h3 id="哆啦A梦：大雄的金银岛"><a href="#哆啦A梦：大雄的金银岛" class="headerlink" title="哆啦A梦：大雄的金银岛"></a>哆啦A梦：大雄的金银岛</h3></li><li><h3 id="毒液：致命守护者"><a href="#毒液：致命守护者" class="headerlink" title="毒液：致命守护者"></a>毒液：致命守护者</h3></li><li><h3 id="名侦探柯南：-零的执行人"><a href="#名侦探柯南：-零的执行人" class="headerlink" title="名侦探柯南： 零的执行人"></a>名侦探柯南： 零的执行人</h3></li><li><h3 id="神奇动物：-格林德沃之罪"><a href="#神奇动物：-格林德沃之罪" class="headerlink" title="神奇动物： 格林德沃之罪"></a>神奇动物： 格林德沃之罪</h3></li><li><h3 id="蚁人2：黄蜂女现身"><a href="#蚁人2：黄蜂女现身" class="headerlink" title="蚁人2：黄蜂女现身"></a>蚁人2：黄蜂女现身</h3></li><li><h3 id="解码游戏"><a href="#解码游戏" class="headerlink" title="解码游戏"></a>解码游戏</h3></li><li><h3 id="动物世界"><a href="#动物世界" class="headerlink" title="动物世界"></a>动物世界</h3></li><li><h3 id="我不是药神"><a href="#我不是药神" class="headerlink" title="我不是药神"></a>我不是药神</h3></li><li><h3 id="你好，之华"><a href="#你好，之华" class="headerlink" title="你好，之华"></a>你好，之华</h3></li><li><h3 id="爱情公寓"><a href="#爱情公寓" class="headerlink" title="爱情公寓"></a>爱情公寓</h3></li><li><h3 id="摩天营救"><a href="#摩天营救" class="headerlink" title="摩天营救"></a>摩天营救</h3></li><li><h3 id="廉政风云4"><a href="#廉政风云4" class="headerlink" title="廉政风云4"></a>廉政风云4</h3></li><li><h3 id="碟中谍6"><a href="#碟中谍6" class="headerlink" title="碟中谍6"></a>碟中谍6</h3></li><li><h3 id="超人总动员2"><a href="#超人总动员2" class="headerlink" title="超人总动员2"></a>超人总动员2</h3></li><li><h3 id="大黄蜂"><a href="#大黄蜂" class="headerlink" title="大黄蜂"></a>大黄蜂</h3></li><li><h3 id="侏罗纪世界2"><a href="#侏罗纪世界2" class="headerlink" title="侏罗纪世界2"></a>侏罗纪世界2</h3></li><li><h3 id="无敌破坏王2：大闹互联网"><a href="#无敌破坏王2：大闹互联网" class="headerlink" title="无敌破坏王2：大闹互联网"></a>无敌破坏王2：大闹互联网</h3></li><li><h3 id="蜘蛛侠：平行宇宙"><a href="#蜘蛛侠：平行宇宙" class="headerlink" title="蜘蛛侠：平行宇宙"></a>蜘蛛侠：平行宇宙</h3></li><li><h3 id="白蛇：缘起"><a href="#白蛇：缘起" class="headerlink" title="白蛇：缘起"></a>白蛇：缘起</h3></li><li><h3 id="惊奇队长"><a href="#惊奇队长" class="headerlink" title="惊奇队长"></a>惊奇队长</h3></li><li><h3 id="死侍2：我爱我家"><a href="#死侍2：我爱我家" class="headerlink" title="死侍2：我爱我家"></a>死侍2：我爱我家</h3></li><li><h3 id="一吻定情"><a href="#一吻定情" class="headerlink" title="一吻定情"></a>一吻定情</h3></li><li><h3 id="命运之夜——天之杯：恶兆之花"><a href="#命运之夜——天之杯：恶兆之花" class="headerlink" title="命运之夜——天之杯：恶兆之花"></a>命运之夜——天之杯：恶兆之花</h3></li><li><h3 id="“大”人物"><a href="#“大”人物" class="headerlink" title="“大”人物"></a>“大”人物</h3></li><li><h3 id="阿丽塔：战斗天使"><a href="#阿丽塔：战斗天使" class="headerlink" title="阿丽塔：战斗天使"></a>阿丽塔：战斗天使</h3></li><li><h3 id="西虹市首富"><a href="#西虹市首富" class="headerlink" title="西虹市首富"></a>西虹市首富</h3></li><li><h3 id="邪不压正"><a href="#邪不压正" class="headerlink" title="邪不压正"></a>邪不压正</h3></li><li><h3 id="流浪地球"><a href="#流浪地球" class="headerlink" title="流浪地球"></a>流浪地球</h3></li><li><h3 id="疯狂外星人"><a href="#疯狂外星人" class="headerlink" title="疯狂外星人"></a>疯狂外星人</h3></li><li><h3 id="密室逃生"><a href="#密室逃生" class="headerlink" title="密室逃生"></a>密室逃生</h3></li><li><h3 id="驯龙高手3"><a href="#驯龙高手3" class="headerlink" title="驯龙高手3"></a>驯龙高手3</h3></li><li><h3 id="掠食城市"><a href="#掠食城市" class="headerlink" title="掠食城市"></a>掠食城市</h3></li><li><h3 id="来电狂响"><a href="#来电狂响" class="headerlink" title="来电狂响"></a>来电狂响</h3></li><li><h3 id="天气预爆"><a href="#天气预爆" class="headerlink" title="天气预爆"></a>天气预爆</h3></li><li><h3 id="网络迷踪"><a href="#网络迷踪" class="headerlink" title="网络迷踪"></a>网络迷踪</h3></li><li><h3 id="龙猫"><a href="#龙猫" class="headerlink" title="龙猫"></a>龙猫</h3></li><li><h3 id="大黄蜂-1"><a href="#大黄蜂-1" class="headerlink" title="大黄蜂"></a>大黄蜂</h3></li><li><h3 id="海王"><a href="#海王" class="headerlink" title="海王"></a>海王</h3></li><li><h3 id="飞驰人生"><a href="#飞驰人生" class="headerlink" title="飞驰人生"></a>飞驰人生</h3></li><li><h3 id="无名之辈"><a href="#无名之辈" class="headerlink" title="无名之辈"></a>无名之辈</h3></li><li><h3 id="憨豆特工3"><a href="#憨豆特工3" class="headerlink" title="憨豆特工3"></a>憨豆特工3</h3></li><li><h3 id="飓风奇劫"><a href="#飓风奇劫" class="headerlink" title="飓风奇劫"></a>飓风奇劫</h3></li><li><h3 id="冰封侠：时空行者"><a href="#冰封侠：时空行者" class="headerlink" title="冰封侠：时空行者"></a>冰封侠：时空行者</h3></li><li><h3 id="昨日青空"><a href="#昨日青空" class="headerlink" title="昨日青空"></a>昨日青空</h3></li><li><h3 id="铁血战士"><a href="#铁血战士" class="headerlink" title="铁血战士"></a>铁血战士</h3></li><li><h3 id="李茶的姑妈"><a href="#李茶的姑妈" class="headerlink" title="李茶的姑妈"></a>李茶的姑妈</h3></li><li><h3 id="无双"><a href="#无双" class="headerlink" title="无双"></a>无双</h3></li><li><h3 id="影"><a href="#影" class="headerlink" title="影"></a>影</h3></li><li><h3 id="快把我哥带走"><a href="#快把我哥带走" class="headerlink" title="快把我哥带走"></a>快把我哥带走</h3></li><li><h3 id="过春天"><a href="#过春天" class="headerlink" title="过春天"></a>过春天</h3></li><li><h3 id="比悲伤更悲伤的故事"><a href="#比悲伤更悲伤的故事" class="headerlink" title="比悲伤更悲伤的故事"></a>比悲伤更悲伤的故事</h3></li><li><h3 id="波西米亚狂想曲"><a href="#波西米亚狂想曲" class="headerlink" title="波西米亚狂想曲"></a>波西米亚狂想曲</h3></li><li><h3 id="乐高大电影2"><a href="#乐高大电影2" class="headerlink" title="乐高大电影2"></a>乐高大电影2</h3></li><li><h3 id="海市蜃楼"><a href="#海市蜃楼" class="headerlink" title="海市蜃楼"></a>海市蜃楼</h3></li><li><h3 id="雷霆沙赞！"><a href="#雷霆沙赞！" class="headerlink" title="雷霆沙赞！"></a>雷霆沙赞！</h3></li><li><h3 id="风中有朵雨做的云"><a href="#风中有朵雨做的云" class="headerlink" title="风中有朵雨做的云"></a>风中有朵雨做的云</h3></li><li><h3 id="复仇者联盟4：-终局之战"><a href="#复仇者联盟4：-终局之战" class="headerlink" title="复仇者联盟4： 终局之战"></a>复仇者联盟4： 终局之战</h3></li><li><h3 id="祈祷落幕时"><a href="#祈祷落幕时" class="headerlink" title="祈祷落幕时"></a>祈祷落幕时</h3></li><li><h3 id="何以为家"><a href="#何以为家" class="headerlink" title="何以为家"></a>何以为家</h3></li><li><h3 id="大侦探皮卡丘"><a href="#大侦探皮卡丘" class="headerlink" title="大侦探皮卡丘"></a>大侦探皮卡丘</h3></li><li><h3 id="阿拉丁"><a href="#阿拉丁" class="headerlink" title="阿拉丁"></a>阿拉丁</h3></li><li></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Magic</title>
      <link href="/2019/05/20/Magic/"/>
      <url>/2019/05/20/Magic/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Magic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpMV</title>
      <link href="/2019/05/19/SpMV/"/>
      <url>/2019/05/19/SpMV/</url>
      
        <content type="html"><![CDATA[<h1 id="稀疏矩阵向量乘"><a href="#稀疏矩阵向量乘" class="headerlink" title="稀疏矩阵向量乘"></a>稀疏矩阵向量乘</h1><blockquote><p>本文参考: </p><p><a href="http://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CDFD&amp;dbname=CDFD1214&amp;filename=1011303506.nh&amp;uid=WEEvREcwSlJHSldRa1FhdkJkVG1BSEZmNDlLQ1Bla1NraUFEc2lQeFp5cz0=$9A4hF_YAuvQ5obgVAqNKPCYcEjKensW4IQMovwHtwkF4VYPoHbKxJw!!&amp;v=MzIwNTk4ZVgxTHV4WVM3RGgxVDNxVHJXTTFGckNVUkxPZll1ZHBGeUhuVTd2TlZGMjZIN0M0SGRUTXFaRWJQSVI=" target="_blank" rel="noopener">FPGA矩阵计算并行算法与结构(知网)</a></p><p><a href="https://xupsh.github.io/pp4fpgas-cn/06-Sparse-Matrix-Vector-Multiplication.html" target="_blank" rel="noopener">稀疏矩阵向量乘法xFPGA</a></p><p><a href="http://book.51cto.com/art/201506/480986.htm" target="_blank" rel="noopener">稀疏矩阵向量乘法x并行编程方法</a></p><p><a href="https://www.cnblogs.com/xbinworld/p/4273506.html" target="_blank" rel="noopener">稀疏矩阵存储格式总结</a></p><p><a href="https://mp.weixin.qq.com/s/ZrQd2avGTRsHMxj4wRA3gw" target="_blank" rel="noopener">深度学习FPGA加速器设计</a></p></blockquote><p>在矩阵中，若数值为0的元素数目远远多于非0元素的数目，并且非0元素分布没有规律时，则称该矩阵为稀疏矩阵；与之相反，若非0元素数目占大多数时，则称该矩阵为稠密矩阵。定义非零元素的总数比上矩阵所有元素的总数为矩阵的稠密度。<br>SpMV即 Sparse Matrix Vector Multiplication</p><h2 id="稀疏矩阵向量乘法的优化"><a href="#稀疏矩阵向量乘法的优化" class="headerlink" title="稀疏矩阵向量乘法的优化"></a>稀疏矩阵向量乘法的优化</h2><p>稀疏矩阵向量乘法（SPMV）可在很多情况下代替稠密矩阵运算，可以大量节省内存占用，减少计算开销。矩阵向量乘法不同于矩阵和矩阵的乘法，这是完全访存密集型的计算，我们主要的优化方向是提升访存效率或减少访存开销。</p><p>稀疏矩阵一般只存储非零元的信息，非零元的存储格式决定了访存的模式，这需要根据非零元的分布模式和要做的计算类型来设计。我们假设分布模式并非对角线分布，整体分布较均匀，局部可能会有聚集，计算类型是稀疏矩阵乘以稠密向量，结果为稠密向量。</p><p>标准的稀疏矩阵存储格式主要有：COO（Coordinate Format）和CSR（Compressed Sparse Row）等。COO很简单，就是使用3个数组，分别存储全部非零元的行下标（row index）、列下标（column index）和值（value）；CSR稍复杂，对行下标进行了压缩，假设矩阵行数是m，则压缩后的数组长度为m+1，记作（row ptr），其中第i个元素（0-base）表示矩阵前i行的非零元个数。</p><p>图1-1和图1-2展示了COO和CSR格式存储稀疏矩阵的一个例子。</p><p><a href="http://s8.51cto.com/wyfs02/M02/6E/B9/wKioL1WD-rnzJXs6AAAoveikjls134.jpg" target="_blank" rel="noopener"><img src="http://s8.51cto.com/wyfs02/M02/6E/B9/wKioL1WD-rnzJXs6AAAoveikjls134.jpg" alt="img"></a></p><p>我们来考虑矩阵向量乘法计算y=Ax，其中A是稀疏矩阵，维度是m和n，非零元个数是k；x和y是稠密向量，维度分别是n和m，m×n &gt;&gt; k &gt;&gt; max(m, n)。做这个稀疏矩阵向量乘法就要遍历A的每一行，和x对应位置相乘，把结果累加到y的对应位置。这个过程对A的k个非零元全部访问了一遍，对x也访问了k个元素（重叠），对y访问了一遍，所以优化重点在于减少访问A的冗余，并提升访问x的效率。下面这几个优化标准稀疏矩阵存储格式的方法，可以提升访存效率，减少冗余。</p><p><a href="http://s2.51cto.com/wyfs02/M00/6E/B9/wKioL1WD-r7BqYmdAAB38WzGMbw735.jpg" target="_blank" rel="noopener"><img src="http://s2.51cto.com/wyfs02/M00/6E/B9/wKioL1WD-r7BqYmdAAB38WzGMbw735.jpg" alt="img"></a></p><p>（1）对矩阵A做行列分块处理</p><p>对x的访问每次总是从左到右进行稀疏的遍历，如果n很大（比如上百万甚至更多），则访问x的空间局部性较差。所以我们首先改进矩阵A的访问顺序，将矩阵A分解成多个方形的子矩阵。子矩阵的维度适应较高层CPU硬件cache的大小，这样在遍历每一个子矩阵时，对x的访问相对集中于一个较小的区间，这个区间内的x会被cache缓存，这样能够大大提高访问效率。分块方式如图1-3所示。</p><p><a href="http://s2.51cto.com/wyfs02/M00/6E/BD/wKiom1WD-RLR2LssAABQf6mXvLM286.jpg" target="_blank" rel="noopener"><img src="http://s2.51cto.com/wyfs02/M00/6E/BD/wKiom1WD-RLR2LssAABQf6mXvLM286.jpg" alt="img"></a></p><p>（2）自适应分块存储结构</p><p>由于稀疏矩阵的非零元分布不一定均匀，有的分块会非常稀疏，有的则会相对稠密。对于极稀疏的分块（非零元数量远小于行数），如果用和CSR相似的压缩行存储策略，则会浪费空间，所以用COO的方式反而更能节省存储空间，提高访问效率。</p><p>对于哪些分块使用CSR，哪些使用COO方式，可以通过实验的方式确定一个非零元的数量和分块大小的比值。高于该值的用CSR方式存储，否则用COO方式存储。</p><p>如图1-4所示，一共使用5个数组存储自适应分块信息的稀疏矩阵，灰色的部分是CSR的相关信息，白色的部分是COO的相关信息。col_idx和vals的意义不变；types存储分块类型，标识当前分块是CSR还是COO；如果当前分块是CSR，则row_info存储类似row_ptr的信息（第k个元素表示分块内第k行的非零元个数），否则存储COO的row_idx的信息；row_id存储每个分块在row_info上的起始地址。</p><p><a href="http://s5.51cto.com/wyfs02/M01/6E/B9/wKioL1WD-svwE_vyAABKDw_Pvok868.jpg" target="_blank" rel="noopener"><img src="http://s5.51cto.com/wyfs02/M01/6E/B9/wKioL1WD-svwE_vyAABKDw_Pvok868.jpg" alt="img"></a></p><p>（3）减少下标存储的冗余</p><p>矩阵分块后，分块内间址的下标并不需要4字节int型整数存储，比如分块维度在64K以内，可以用2字节的unsigned short来存储。这样，无论是CSR或COO的row_idx、row_ptr，还是col_idx，都可以减少50%的存储空间，并同时提升访存效率。</p><p>（4）多线程和NUMA特性</p><p>单处理器多核多线程并行计算稀疏矩阵向量乘的过程比较简单，只需把矩阵划分成线程数量的子矩阵。这里采用横切的方法，计算结果不用合并。</p><p>但是对于多处理器非一致内存访问（NUMA），就需要对数据在内存中的分布做特殊处理，才能最大程度地利用全部的内存带宽。</p><p>一个典型的Intel X86双路服务器的拓扑架构如图1-5所示。</p><p>Memory #0是CPU #0的本地内存，Memory #1是CPU #1的本地内存，它们有各自独立的内存带宽。CPU #0访问Memory #1需要经过内部总线（在Intel的架构中叫QPI总线），这个总线的带宽一般小于内存带宽。另外如果要访问的数据只集中在一颗CPU的本地内存中，那么只能利用一个NUMA node的内存带宽，这就限制了系统的总体吞吐。</p><p>所以需要把稀疏矩阵的存储均匀地分配到两颗处理器各自的本地内存中。对于一个双CPU，每颗CPU一共4核的系统，需要开8个线程，并把这8个线程分别绑定到8颗CPU核上，使线程的上下文不会在核间迁移。对于每个线程要处理的稀疏矩阵数据，也通过系统调用（在Linux中是mbind），绑定到所在CPU核的本地内存中。这样每个核处理的数据一定是从本地内存中获得的，不会经过QPI总线。这就最大程度地利用了系统内存的带宽。经过实测，这个优化方法可以提升70%左右的内存带宽。</p><p><a href="http://s6.51cto.com/wyfs02/M02/6E/B9/wKioL1WD-uDTARvAAAB3790aG0s198.jpg" target="_blank" rel="noopener"><img src="http://s6.51cto.com/wyfs02/M02/6E/B9/wKioL1WD-uDTARvAAAB3790aG0s198.jpg" alt="img"></a></p><p>对于我们测试的一个维度大约1M、稀疏度0.0001的稀疏矩阵来说，所有优化加起来，相对Intel MKL库中CSR矩阵的SpMV API加速了2.5x左右。学术界还有很多针对稀疏矩阵存储格式的讨论和研究，其中有些还利用了SIMD向量指令，这里介绍的稀疏矩阵乘法方法，更多是为了讨论内存和cache优化的一些基本原理。稀疏矩阵根据稀疏度和非零元分布的不同，需要使用不同的存储策略，所以遇到实际的稀疏矩阵问题，需要根据实际情况开发不同的存储格式。</p><h2 id="FPGA上的稀疏矩阵向量乘稀疏矩阵向量乘法"><a href="#FPGA上的稀疏矩阵向量乘稀疏矩阵向量乘法" class="headerlink" title="FPGA上的稀疏矩阵向量乘稀疏矩阵向量乘法"></a>FPGA上的稀疏矩阵向量乘稀疏矩阵向量乘法</h2><p>稀疏矩阵向量乘（<strong>SpMV</strong>）把一个稀疏矩阵与一个向量相乘。稀疏矩阵是指矩阵中大部分元素为0的矩阵。这里的向量本身也可是稀疏的，但通常情况下是密集的。作为一种通用的运算，在科学应用、经济模型、数据挖掘、信息检索中广泛应用。例如，在利用迭代法求解稀疏线性方程组和特征值的问题。同时，也被应用于网页搜索排名和计算机视觉（图像重构等）。</p><p>本章会引入几个与HLS相关的新概念，并进一步深入之前讨论过的优化。本章的目标之一是引入一种更复杂的数据结构。我们用压缩行存储（CRS）来保存稀疏矩阵。另一个目标是演示如何进行性能测试。我们编写了简单的激励用来检验设计是否正确。这在硬件设计中十分重要，<strong>Vivado®HLS</strong> 工具采用HLS C编写激励，并能轻松的对工具生成的RTL代码进行多方面的验证。这是基于HLS设计比基于RTL设计的巨大优势之一。章节中也会讲解如何采用Vivado®HLS工具进行C/RTL联合仿真。不同<strong>SpMV</strong>设计会带来性能上差异，因为执行时间和稀疏矩阵是密切相关的，所以我们必须通过输入数据来确定任务执行之间的间隔以及任务延迟。</p><h3 id="6-1-背景"><a href="#6-1-背景" class="headerlink" title="6.1 背景"></a>6.1 背景</h3><p>图6.1显示了一个4x4的矩阵M表示的2种方式。其中图6.1-a采用通用的二维方式16个元素来表示矩阵，每个元素存储在自己对应的位置上。图<strong>6.1</strong>-b采用<strong>CRS</strong>的方式表示相同的矩阵。<strong>CRS</strong> 作为一种数据结构，由3个数组组成。值(<strong>values</strong>)数组保存矩阵中非零元素的值。列索引(<strong>columnIndex</strong>)数组和行指针（<strong>rowPtr</strong>）数组对非零元素的位置信息进行编码。列索引存储每一列的元素，行指针包含每一行第一个元素的值。<strong>CRS</strong> 结构避免存储矩阵中的0值，确实在数值数组中确实没有存储0。但是在这个例子中，虽然数值数组不保存0，但是列索引数组和行指针数组作为标记信息，表示了矩阵的形态。<strong>CRS</strong> 广泛用于大型的矩阵但是仅仅有少量的非零元素（少于10%或者更低），这样可以简化这类矩阵的存储以及相关的运算。</p><p><img src="https://xupsh.github.io/pp4fpgas-cn/images/crs.jpg" alt="图 6.1: M是一个4x4矩阵，用两种方式表示：同&quot;密集&quot;矩阵一样存在二维数组之中；作为稀疏矩阵，以行压缩存储的形式保存，行压缩存储是一种由3个数组组成的数据结构。">图 6.1: M是一个4x4矩阵，用两种方式表示：同”密集”矩阵一样存在二维数组之中；作为稀疏矩阵，以行压缩存储的形式保存，行压缩存储是一种由3个数组组成的数据结构。</p><p>但是，CRS对矩阵的稀疏性没有要求，可以适用于任何矩阵。作为一种针对矩阵的通用方法，但不见得是最高效的。CRS结构也不见得是表示稀疏矩阵最高效的方式，其他稀疏矩阵表示方法也在被使用。</p><p>更准确的讲，CRS作为一种数据结构由3个数组构成：<strong>值</strong>(<strong>values</strong>)、<strong>列索引</strong>(<strong>colIndex</strong>)、<strong>行索引</strong>（<strong>rowPtr</strong>）。值数组和列索引表示稀疏矩阵<strong>M</strong>中的每一个非零元素，这些数组表示矩阵<strong>M</strong>采用行的方式，从左到右，从上到下。矩阵中的数据保存在值数组中，列索引数组保存数据在数组中水平方向的位置，如果 <strong>values[k]</strong> 表示 M_{ij}<em>M<strong>i</strong>j</em> 其中collndex[k]= j<em>c<strong>o</strong>l<strong>l</strong>n<strong>d</strong>e**x</em>[<em>k</em>]=<em>j</em>。数组<strong>rowPtr</strong>用n+1<em>n</em>+1的长度来表示n行矩阵。<strong>rowPtr[k]</strong> 表示在行k之前，矩阵中所有元素的数目，其中rowPtr[0]=0<em>r<strong>o</strong>w<strong>P</strong>t**r</em>[0]=0且最后一个元素<strong>rowPtr[k]</strong> 总是表示当前矩阵k行之前所有非零元素的个数M_{ij}<em>M<strong>i</strong>j</em> ,其中rowPtr[i] \leq k \leq rowPtr[i+1]<em>r<strong>o</strong>w<strong>P</strong>t**r</em>[<em>i</em>]≤<em>k</em>≤<em>r<strong>o</strong>w<strong>P</strong>t**r</em>[<em>i</em>+1]。如果行k包含任何非0元素，那么<strong>rowPtr[k]</strong> 将包含当前行的第一个元素。注意，如果当前行没有非0元素，那么 <strong>rowPtr</strong> 数组中的值将会重复出现。</p><p>从图<strong>6.1</strong> a）中，我们可以行优先的方式遍历矩阵，从而确定值（<strong>values</strong>）数组在<strong>CRS</strong>中的形式。只要发现一个非0元素，它的值会被保存在下一个索引 i<em>i</em> 中，同时，它的列号<strong>columnIndex[i]</strong> 会被保存在列数组中。另外，在我们访问一个新行的时候，我们保存下一个值的索引 i<em>i</em> 在<strong>rowPtr</strong>数组中。所以，<strong>rowPtr</strong> 数组的第一个元素总是0。从图 6.1 b)中，我们可以把矩阵转换为二位数组表示的方式。第一步是根据<strong>rowPtr</strong>数组，确定每一行中非0 元素的个数。对行 i<em>i</em> 而言，该行中元素的数目为rowPtr[i]-rowPtr[i+1]<em>r<strong>o</strong>w<strong>P</strong>t**r</em>[<em>i</em>]−<em>r<strong>o</strong>w<strong>P</strong>t**r</em>[<em>i</em>+1]的差值。所以当前行的值可以从<strong>values</strong>数组<strong>values[rowPtr[i]]</strong> 开始，通过递归得到。在我们的示例矩阵中，因为前 <strong>rowPtr</strong> 数组前2个元素是0和2，所以我们知道第一行有2个非0元素，即<strong>value[0]</strong> 和<strong>value[1]</strong> 。第一个非0元素在<strong>values</strong>数组中,<strong>value[0]</strong> 是3。该值所对应的列号为1，因为columnIndex[0]=0<em>c<strong>o</strong>l<strong>u</strong>m<strong>n</strong>I<strong>n</strong>d<strong>e</strong>x</em>[0]=0。以此类推，矩阵中第二行元素的个数为k\in[2,4)<em>k</em>∈[2,4),第三行的元素个数为k \in [4,7)<em>k</em>∈[4,7)。最后，共有9个非0元素在矩阵中，所以<strong>rowPtr</strong>最后一个值是9。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"spmv.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spmv</span><span class="params">(<span class="keyword">int</span> rowPtr[NUM_ROWS+<span class="number">1</span>], <span class="keyword">int</span> columnIndex[NNZ],</span></span></span><br><span class="line"><span class="function"><span class="params">        DTYPE values[NNZ], DTYPE y[SIZE], DTYPE x[SIZE])</span></span>&#123;</span><br><span class="line">L1: <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUM_ROWS; i++) &#123;</span><br><span class="line">        DTYPE y0 = <span class="number">0</span>;</span><br><span class="line">    L2: <span class="keyword">for</span> (<span class="keyword">int</span> k = rowPtr[i]; k &lt; rowPtr[i+<span class="number">1</span>]; k++) &#123;</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">pragma</span> HLS unroll factor=8</span></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">pragma</span> HLS pipeline</span></span><br><span class="line">            y0 += values[k] * x[columnIndex[k]];</span><br><span class="line">        &#125;</span><br><span class="line">        y[i] = y0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xupsh.github.io/pp4fpgas-cn/images/placeholder.png" alt="图6.2: 主体代码演示了系数矩阵向量乘（SpMV）y=M.x的计算。采用CRS的方式，通过rowPt*、columnIndex 和 value 保存矩阵M。第一个for循环通过迭代访问每一行，第二个for循环访问每一列，实现矩阵M中非0元素和向量中对应的元素相乘并保存值在向量y中。">图6.2: 主体代码演示了系数矩阵向量乘（SpMV）y=M.x的计算。采用CRS的方式，通过rowPt*、columnIndex 和 value 保存矩阵M。第一个for循环通过迭代访问每一行，第二个for循环访问每一列，实现矩阵M中非0元素和向量中对应的元素相乘并保存值在向量y中。</p><p>给定一个二维数组表示一个矩阵，通过C代码实现矩阵CRS格式。编写对应的C代码实现将矩阵从CRS格式转化为二维数组的形式。</p><p>结果表明，通过采用<strong>CRS</strong>的方式，我们能高效的实现稀疏矩阵乘法，不需要将矩阵转化为二维形式。实际上， 对于大型的矩阵仅仅只有一小部分非0元素，稀疏矩阵向量乘法会比第四章中讨论的密集矩阵向量乘高效很多。因为我们直接找到非0元素，并执行非0元素对应的运算。</p><h3 id="6-2-基本实现"><a href="#6-2-基本实现" class="headerlink" title="6.2 基本实现"></a>6.2 基本实现</h3><p>图6.2 提供了基本代码对系数矩阵乘法的实现。函数<strong>spmv</strong>函数有5个参数，分别是<strong>rowPtr</strong>、<strong>columnIndex</strong> ，以及 <strong>values</strong> 对应矩阵 <strong>M</strong> 的 <strong>CRS</strong> 格式中包含的3个参数，这和图6.1中描述的数据结构等价。参数 y<em>y</em> 用于保存输出的结果，参数x表示输入的被乘向量x<em>x</em>。变量<strong>NUM_ROWS</strong>表示矩阵<strong>M</strong>中行号。变量<strong>NNZ</strong>表示矩阵中非0元素的个数。最后，变量SIZE表示数组x和数组y中元素的个数。</p><p>外层<strong>for</strong>循环标签为<strong>L1</strong>，对矩阵的行进行遍历。将矩阵当前的行与向量x相乘，得到输出的结果y<em>y</em>。内层循环标签为<strong>L2</strong>，实现对矩阵<strong>M</strong>中每列元素的遍历。L2循环迭代计算rowPtr[i+1]-rowPtr[i]<em>r<strong>o</strong>w<strong>P</strong>t**r</em>[<em>i</em>+1]−<em>r<strong>o</strong>w<strong>P</strong>t**r</em>[<em>i</em>]计算每一行非0元素的个数。每次循环计算，能从<strong>value</strong>数组中读取矩阵M的非0元素然后对应的从x数组中取得被乘向量x的值，对应相乘。<strong>cloumnIndex[k]</strong> 中的值保存了对应的列号<strong>k</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __SPMV_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SPMV_H__</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> SIZE = <span class="number">4</span>; <span class="comment">// SIZE of square matrix</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> NNZ = <span class="number">9</span>; <span class="comment">//Number of non-zero elements</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM_ROWS = <span class="number">4</span>;<span class="comment">// SIZE;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> DTYPE;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spmv</span><span class="params">(<span class="keyword">int</span> rowPtr[NUM_ROWS+<span class="number">1</span>], <span class="keyword">int</span> columnIndex[NNZ],</span></span></span><br><span class="line"><span class="function"><span class="params">          DTYPE values[NNZ], DTYPE y[SIZE], DTYPE x[SIZE])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// __MATRIXMUL_H__ not defined</span></span></span><br></pre></td></tr></table></figure><p><img src="https://xupsh.github.io/pp4fpgas-cn/images/placeholder.png" alt="图6.3： spmv函数和激励的头文件">图6.3： spmv函数和激励的头文件</p><h3 id="6-3-测试平台"><a href="#6-3-测试平台" class="headerlink" title="6.3 测试平台"></a>6.3 测试平台</h3><p>图6.4 展示了一个针对<strong>spmv</strong>函数测试平台。测试平台通过定义<strong>matrixvector</strong>函数，直接实现矩阵向量乘法，它不考虑矩阵是否为稀疏矩阵以及矩阵是否采用<strong>CRS</strong>方式表示。我们比较<strong>matrixvector</strong>函数输出和<strong>spmv</strong>函数的输出。</p><p>在通常的测试平台中，需要实现的函数都会有个“黄金”参考，作为用户期望综合的结果。测试平台会比较黄金用例的输出和通过<strong>Vivado®HLS</strong>综合的代码执行结果。最好的实践方式是，测试平台既可以用于黄金用例，也可用于被综合的代码。这样就保证了两者实现的正确性。</p><p>测试平台在主函数<strong>main</strong>中执行。这里我们通过设置<strong>fail</strong>变量初始化为0，当<strong>spmv</strong>函数的输出成结果与<strong>matrixvector</strong>函数输出结果不相同是时，变量置1。定义与矩阵<strong>M</strong>相关的变量、被乘向量x<em>x</em> 和输出结果y<em>y</em>。对于矩阵<strong>M</strong>，即有普通模式，也有<strong>CSR</strong>模式（保存为<strong>values</strong>、<strong>columnIndex</strong>、<strong>rowPtr</strong>）。矩阵<strong>M</strong> 的<strong>value</strong>如图6.1中所示，输出向量y<em>y</em>有两种，其中y_sw数组保存<strong>matrixvector</strong>函数输出的结果，y数组保存<strong>spmv</strong>函数输出的结果。</p><p>在定义好所有的输入变量和输出变量之后，分别调用<strong>spmv</strong>函数和<strong>matrixvector</strong>函数并输入合适的数据。 接下来的<strong>for</strong>循环用于比较y_sw和y中的每一个对应的结果。如果其中一个不相同，则将<strong>fail</strong> 标志置1。最后，程序会打印测试的结果并返回<strong>fail</strong>变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"spmv.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">matrixvector</span><span class="params">(DTYPE A[SIZE][SIZE], DTYPE *y, DTYPE *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZE; i++) &#123;</span><br><span class="line">        DTYPE y0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; SIZE; j++)</span><br><span class="line">            y0 += A[i][j] * x[j];</span><br><span class="line">        y[i] = y0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fail = <span class="number">0</span>;</span><br><span class="line">    DTYPE M[SIZE][SIZE] = &#123;&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">0</span>&#125;,&#123;<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line">    DTYPE x[SIZE] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    DTYPE y_sw[SIZE];</span><br><span class="line">    DTYPE values[] = &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> columnIndex[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> rowPtr[] = &#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    DTYPE y[SIZE];</span><br><span class="line"></span><br><span class="line">    spmv(rowPtr, columnIndex, values, y, x);</span><br><span class="line">    matrixvector(M, y_sw, x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZE; i++)</span><br><span class="line">        <span class="keyword">if</span>(y_sw[i] != y[i])</span><br><span class="line">            fail = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(fail == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"FAILED\n"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"PASS\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xupsh.github.io/pp4fpgas-cn/images/placeholder.png" alt="图6.4 ： 一个简单spmv函数的简单测试平台。测试平台生成了一个用例，并且计算矩阵的向量乘法通过稀疏矩阵乘法（spmv）和非系数矩阵乘法(matrixvector)。">图6.4 ： 一个简单spmv函数的简单测试平台。测试平台生成了一个用例，并且计算矩阵的向量乘法通过稀疏矩阵乘法（spmv）和非系数矩阵乘法(matrixvector)。</p><p>这个测试平台相对简单并且可能无法充分验证所有的输入都能正常输出。最主要的原因是，它仅仅只用了一个矩阵作为例子，相反，一个好的激励会测试许多矩阵。通常，会通过随机的方式产生输入的测试用例，并且重点测试边界用例。在这个例子中，我们不仅要保证值正确计算，同时保证通过加速器正确的被执行了，而且编译时间相关的parameter改变会在实现不同加速单元值折中。最关键的是，在相同的parameter上，我们能通过随机产生很多输入数据来进行测试。编译时间相关的参数每次发生变化，都需要我们重新编译代码。</p><p>创建一个复杂的激励来，通过随机数方式生成许多组测试数据。稀疏矩阵编译时间参数应该是可以修改的（例如，<strong>SIZE</strong>，<strong>NNZ</strong> 等）。创建一个HLS综合脚本，在编译时间参数合理范围改变时，能执行代码很多次。</p><h3 id="6-4-指定循环的属性"><a href="#6-4-指定循环的属性" class="headerlink" title="6.4 指定循环的属性"></a>6.4 指定循环的属性</h3><p>如果直接将上述代码进行综合，我们可以得到函数运行的时钟周期及资源占用率。但是，我们不能得到模块执行所需的时钟周期、任务执行的延迟和任务执行之间的间隔。因为这些都取依赖于输入数据，由<strong>spmv</strong>函数外部因素决定。最主要的因素是，内层循环执行的次数是由矩阵<strong>M</strong>中非0元素个数决定的。非0元素的个数在代码中是由常量<strong>NNZ</strong>决定的，虽然可以调用函数计算不同大小的矩阵，但是实际迭代次数是和输入数据相关的。另外，性能也会因为非0元素的分布、综合优化的约束产生不同。更复杂的是，迭代的次数由输入决定，许多可能的输入并没有被遍历。所以，对于工具而言，不通过复杂的分析和额外的信息，工具是不能知道spmv函数执行需要多少时钟周期。<strong>Vivado®HLS</strong> 工具也不能进行上述的分析。</p><p>spmv函数能正常工作的前提条件是什么？证明给定的前提条件，矩阵中每个非0元素实是不是在对应一次内层循的执行？</p><p>有几种方式能帮助工具进行性能的分析，其中一种方式就是想<strong>Vivado®HLS</strong>提供循环边界的额外信息。这可以通过使用<strong>loop_tripcount</strong> directive实现，它能让设计者指定最小、最大和平均迭代次数针对特定的循环。通过提供这些值， <strong>Vivado®HLS</strong> 能提供时钟周期级别的评估。</p><p>使用<strong>loop_tripcount</strong> directive 用变量指定循环的最小，最大和平均迭代次数，这样<strong>Vivado</strong>®HLS 工具能对当前设计时钟周期数目进行估计。这些不影响最后综合的结果，只会影响综合报告。</p><p>对spmv函数使用<strong>loop_tripcount</strong> directive，语法格式 # pragma HLS loop_tripcount min=X, max=Y, avg=Z 其中X，Y，Z正的常量。哪个循环需要使用directive?当改变参数（min、max和avg）以后，综合报告有什么不同？这对时钟周期有影响吗？这对资源占用有影响吗？</p><p><strong>loop_tripcount</strong> 引导能帮助设计者对函数的性能有个原始的估计。这样能比较相同的函数通过使用不同的directives或者对代码本身重构。但是，这不能确定<strong>min</strong>、<strong>max</strong>和 <strong>avg</strong> 参数。这也很难确定边界条件min和max的值。如果有测试平台，就有一种更准确的方式用于计算<strong>spmv</strong>函数执行的时钟周期数，那就是<strong>C/RTL</strong>协同仿真。</p><h3 id="6-5-C-RTL-协同仿真"><a href="#6-5-C-RTL-协同仿真" class="headerlink" title="6.5 C/RTL 协同仿真"></a>6.5 C/RTL 协同仿真</h3><p><strong>C/RTL</strong> 协同仿真能自动化测试Vivado®HLS工具生成的RTL代码，只需要在综合的时候提供测试平台。每次执行综合以后的代码和提供的测试平台，记录输入和输出结果。输入的值按照时钟转换成<strong>输入向量</strong>。这里的输入向量用于针对生成的RTL代码进行仿真，同时记录<strong>输出向量</strong>。更新综合后的代码， 再次运行测试平台并保存输入和输出数据。测试平台如果返回值是0，则表示成功；若激励返回非0值，则表示失败。</p><p><strong>C/RTL</strong> 协同仿真流程将VIvado®HLS 生成的<strong>RTL</strong>代码，通过C 测试平台，实现时钟周期级别的仿真。这样，就能准确对生成的<strong>RTL</strong>代码进行性能评估，即使性能与输入数据有关。被综合的函数运行周期最小值，最大值，平均值以及间隔在仿真完成以后都能准确的得到。</p><p>注意这些和时钟周期相关的参数是通过激励中测试数据得到的。所以，结果的质量和测试平台的质量息息相关。如果测试平台没有很好的对函数执行测试，那么结果将不准确。另外，输入测试向量都是基于理想的时序，不能反映模型实际工作时，外部接口对函数的影响。实际的性能可能会比仿真的要低，如果执行过程中阻塞在输入数据或对外部存储的访问上。不过，对于循环边界调试时变量的情况，设计者可以通过协同仿真的方式确定时钟周期个数。</p><p>C/RTL协同仿真能提供循环边界是变量的函数的延迟。它反馈函数运行时延迟的最小值、最大值和平均值以及函数运行间隔。这些延迟和测试平台输入的数据是强相关的。</p><p><img src="https://xupsh.github.io/pp4fpgas-cn/images/spmv_behavior.jpg" alt="图6.5  spmv函数内部循环流水执行过程和结构">图6.5 spmv函数内部循环流水执行过程和结构</p><p>当采用图6,4提供的测试平台时，函数运行的最小值、最大值和平均值以及函数间隔是多少个时钟周期？</p><h3 id="6-6-循环的优化与数组的分块"><a href="#6-6-循环的优化与数组的分块" class="headerlink" title="6.6 循环的优化与数组的分块"></a>6.6 循环的优化与数组的分块</h3><p>我们可以通过<strong>Vivado®HLS</strong> 工具得到当前函数的性能和面积的评估结果，然后可以考虑如何对函数进行优化。流水线、循环展开、数组分块是第一类最常用的优化方法。最典型的方式是从最内层的循环，然后根据需要向外层循环进行。</p><p>在这个例子中， 对最内层的<strong>L2</strong>循环进行流水线化也许是我们最先和最容易想到的优化方式。这个连续迭代的循环在执行上流水以后，总体运行会加快。如果不采用流水，<strong>L2</strong> 循环将按照串行执行。注意，<strong>L1</strong> 循环此时还是按照串行的方式执行。</p><p>图6.5演示了<strong>spmv</strong>函数在<strong>L2</strong>循环采用流水方式时运行的步骤。每次<strong>L2</strong>的循环都被II=3<em>I**I</em>=3流水化。流水线允许在外层循环执行一次迭代时，内层循环执行多次循环迭代。此时，内层循环II受限于递归（recurrence ）操作。II=3<em>I**I</em>=3是因为我们认为加法器有3个时钟周期的延迟。外部循环没有采用流水的方式，所以内层的循环必须在下外层L2循环开始执行前，计算完成并输出结果。</p><p>对最内层的L2 <strong>for</strong> 循环进行流水化，通过在spmv函数中增加流水directive如图6.2所示。II(initiation interval)最后是多少？在你指定II的值以后，最终目标的II值是增大了还是减少了？</p><p>观察执行步骤，我们可以发现有几个因素限制了循环执行性能。第一个因素，递归（recurrence ）操作限制了循环的 <strong>II</strong>。第二个因素，外层的循环没有采用流水的方式。一种高效计算稀疏矩阵向量乘法的方式，每个时钟周期把乘法器和加法器使用起来。当前的设计离这个目标还很远。</p><p>在章节4.3中，我们探究了几种设计优化技术，其中包括对不同的循环进行流水，循环展开，数组分割。掌握在这些技术之间进行权衡是一项挑战，因为它们之间经常相互依赖。我们通常联合使用这些技术，为了得到好的性能谨慎的选择其中一种而不选择另一种也许结果会更糟糕。例如，在我们使用循环展开是，设计者需要明白它对数据访问的影响。增加了对数据访问的操作但是设计性能又受限于数据访问时，优化毫无益处。同样，如果提供了冗余的存储端口，实际中使用率不高，这样对提高性能毫无帮助反而增加了资源的消耗。</p><p>仔细思考一下上述优化技术组合后复杂多变的样式，我们建议你尝试下面的练习：</p><p>对spmv设计进行综合，采用表6.1提供的10种directives，每种都有不同的流水，展开和分割针对不同的循环和数组。这些分割在不同的数组（values、columnIndex、x）上使用。你看到结果的趋势是如何的？增加了展开和分割，是有利于还是不利于面积？性能如何？为什么？</p><p> 表6.1 稀疏矩阵向量乘法可优化的方式</p><table><thead><tr><th></th><th>L1</th><th>L2</th></tr></thead><tbody><tr><td>case1</td><td>-</td><td>-</td></tr><tr><td>case2</td><td>-</td><td>pipeline</td></tr><tr><td>case3</td><td>pipeline</td><td>-</td></tr><tr><td>case4</td><td>unroll=2</td><td>-</td></tr><tr><td>case5</td><td>-</td><td>pipeline,unroll=2</td></tr><tr><td>case6</td><td>-</td><td>pipeline,unroll=2,cyclic=2</td></tr><tr><td>case7</td><td>-</td><td>pipeline,unroll=4</td></tr><tr><td>case8</td><td>-</td><td>pipeline,unroll=4,cyclic=4</td></tr><tr><td>case9</td><td>-</td><td>pipeline,unroll=8</td></tr><tr><td>case10</td><td>-</td><td>pipeline,unroll=8,cyclic=8</td></tr><tr><td>case11</td><td>-</td><td>pipeline,unroll=8,block=8</td></tr></tbody></table><p>如果你完成了上述练习，你会发现盲目的使用优化directives，可能不会得到你期望的结果。通常在设计时， 在思考下考虑应用的特性，选择针对设计的特定优化方式。当然，这也需要一些直觉能力和一些专用工具投入使用。虽然，搞清楚像<strong>Vivado®HLS</strong>这样复杂工具中每一个细节是困难乃至不可能的，但是我们能基于关键的方面建立思考模型。</p><p>上面我们在用例3和4中考虑对外层循环<strong>L1</strong>进行流水化操作而不是对内层循环。这种变化针对一个任务，可以提高潜在的并行程度。为了完成优化，<strong>Vivado®HLS</strong> 工具必须展开代码中所有的内层循环<strong>L2</strong> 。如果循环能全部展开，这样能减少计算循环边界的时间，同时也能消除递归（recurrences）。但是代码中的内层循环Vivado HLS是无法完全展开的，因为循环边界不是常量。</p><p>例如在实现上面提到的例子3，在最外层的循环<strong>L1</strong>使用流水化directive。在不设定目标<strong>II</strong>时，<strong>II</strong>值是多少？资源占用率发生了什么变化？增加了<strong>II</strong>后资源占用率结果如何？这与之前采对L2循环进行流水化，结果有什么不同？这和最基本的设计（无 directives）相比有什么不同？当你对外层循环进行展开时，结果到底如何？（提示：检查综合后的日志信息）</p><p>另外一种增加并行化的方式是对内层循环进行局部循环展开，就像之前例子5到10。这种变化实现更多的并行化，通过在相同的循环迭代中，执行更多的操作。有些情况，Vivado HLS 工具在对内层循环进行流水化时，通过实现更多操作来提高性能。但是，这还是很难提高内层循环的II，由于内层循环的递归操作。但是，在II大于1的情况下， 许多操作可以共享同一个计算单元。</p><p>图6.6展示了一个局部展开的代码。在这段代码中，<strong>L2</strong> 循环被分成2个循环，分别为<strong>L2_1</strong>和<strong>L2_2</strong>。最内层的循环<strong>L2_2</strong>执行的次数由参数<strong>S</strong>确定。内部循环包含了最原始的<strong>L2</strong>循环，其中循环边界是由最原始的<strong>L2</strong>循环确定的。代码中，<strong>L2_1</strong> 循环包含了不确定次数的乘法和加法操作，运算次数由参数<strong>S</strong>确定，和一次递归完成累加y0 += yt<em>y</em>0+=<em>y**t</em>。</p><p>注意图<strong>6.6</strong>中的代码和自动循环展开的代码是由一点点区别的。自动循环展开复制计算，但是保留每次计算先后顺序（除了当前的例子）。这就导致了计算顺序由内层循环决定，如图6.7左所示。对计算顺序进行调整后，操作上的依赖关系如图6.7 左边所示。在当前的代码中，最后累加求和是一个递归（recurrence ）。当使用浮点数据类型时，这种调整计算顺序的操作可能对程序产生改变，所以Vivado HLS对这种类型的代码不进行操作顺序自动调整。</p><p>这个设计可能会被综合、实现如图<strong>6.8</strong>所示的结果。在这个例子中，S=3<em>S</em>=3与II<em>I**I</em>最匹配，乘法器的延迟正好是3。所有的运算过程都是在一个乘法器和加法器上执行。比较这个例子与图<strong>6.5</strong>中的例子，我们可以发现一些缺点。最明显的是，内层循环的流水线长度很长，实现的时候需要多个更多的周期刷新流水线的输出，才能执行下一次外层<strong>L1</strong>循环。处理一行中非零元素和执行块<strong>S</strong> 相同。一行有个3个元素和一行有一个元素计算的时间是相同的。剩下的运算也需要在循环流水线中执行，即使他们的结果没有用。为了严格的比较两个设计的特性，我们需要了解设计对矩阵每行非零元素个数的预期。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"spmv.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> S = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spmv</span><span class="params">(<span class="keyword">int</span> rowPtr[NUM_ROWS+<span class="number">1</span>], <span class="keyword">int</span> columnIndex[NNZ],</span></span></span><br><span class="line"><span class="function"><span class="params">          DTYPE values[NNZ], DTYPE y[SIZE], DTYPE x[SIZE])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  L1: <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUM_ROWS; i++) &#123;</span><br><span class="line">      DTYPE y0 = <span class="number">0</span>;</span><br><span class="line">    L2_1: <span class="keyword">for</span> (<span class="keyword">int</span> k = rowPtr[i]; k &lt; rowPtr[i+<span class="number">1</span>]; k += S) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> HLS pipeline II=S</span></span><br><span class="line">          DTYPE yt = values[k] * x[columnIndex[k]];</span><br><span class="line">      L2_2: <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; S; j++) &#123;</span><br><span class="line">              <span class="keyword">if</span>(k+j &lt; rowPtr[i+<span class="number">1</span>]) &#123;</span><br><span class="line">                  yt += values[k+j] * x[columnIndex[k+j]];</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          y0 += yt;</span><br><span class="line">      &#125;</span><br><span class="line">    y[i] = y0;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xupsh.github.io/pp4fpgas-cn/images/placeholder.png" alt="图6.6  局部展开图6.2中**smpv**函数">图6.6 局部展开图6.2中<strong>smpv</strong>函数</p><p><img src="https://xupsh.github.io/pp4fpgas-cn/images/spmv_partial_unroll.jpg" alt="图6.7 针对累加的两种不同方式的局部展开。左边的版本有3个加法器进行递归操作，相反右边的版本只有1个加法器进行递归累加">图6.7 针对累加的两种不同方式的局部展开。左边的版本有3个加法器进行递归操作，相反右边的版本只有1个加法器进行递归累加</p><p><img src="https://xupsh.github.io/pp4fpgas-cn/images/spmv_unrolled_behavior.jpg" alt="图6.8 图6.6中 spmv函数基于部分展开和内部流水线处理后执行过程">图6.8 图6.6中 spmv函数基于部分展开和内部流水线处理后执行过程</p><p>如果矩阵每行非零元素很少，则采用第一种实现方式较优；如果矩阵中每行非零元素较多，则第二种实现方式更好。</p><p>需要注意，这里存在一个关于先有鸡还是先有蛋的问题。我们需要知道目标器件和时钟周期，这样才能确定流水线中加法器能不能满足时序要求。只有在我们知道流水线的级数之后（也许S=1时，Vivado HLS才能识别到加法递归），我们才能选择合适版本的参数S，来满足II=1<em>I**I</em>=1。一旦我们确定了<strong>S</strong>，我们能通过<strong>C/RTL</strong>协同仿真来，通过一组测试数据，确定是不是达到了性能上的要求。因为循环边界是可变的，所以得到的性能参数是依赖于数据的，所以我们需要设定不同的<strong>S</strong>，来找到性能的最大值。改变器件的类型和工作频率会影响之前所有的设计！尽管看来去高层次综合（<strong>HLS</strong>）对解决问题提供的帮助不多，相比于RTL开发新版本然后进行验证，它开发起来快（代码编写方便）。</p><p>图6.8可以实现时，<strong>S</strong> 与加法器流水线等级相同。如果<strong>S</strong>设定较大，结果会怎样？如果<strong>S</strong> 设定较小，结果会怎样？如果目标<strong>II</strong>小于<strong>S</strong>会怎样？如果目标<strong>II</strong>大于<strong>S</strong>会怎样？</p><h3 id="6-7小结"><a href="#6-7小结" class="headerlink" title="6.7小结"></a>6.7小结</h3><p>在本章节中，我们介绍了系数矩阵向量乘法（SpMV），这延续了之前对矩阵运算的研究。SpMV 显得很有趣，因为它采用了一种特别的数据结构。为了减少大量的存储，矩阵采用行压缩的方式存储，这样就要求我们以一种非直接的方式对矩阵进行访问。</p><p>这一章节首先我们了<strong>Vivado®HLS</strong>工具测试和仿真的能力。我们采用一个基于SpMV简单的激励文件，讲解HLS工作流程。另外，我们对<strong>Vivado®HLS</strong>工具中<strong>C/RTL</strong> 协同仿真进行了讲解。这对我们得到设计准确性能结果是十分重要。矩阵越不稀疏，则更多的计算需要执行。在测试平台确定以后，协同仿真可以提供程序运行的精确仿真。这样就可以达到执行周期和性能结果。最后，我们讨论了采用循环优化和数组分块对代码进行优化。</p><blockquote><p><a href="https://xupsh.github.io/pp4fpgas-cn/" target="_blank" rel="noopener">fpga并行编程</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpMV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpMV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2019/05/19/Nginx/"/>
      <url>/2019/05/19/Nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx安装及配置"><a href="#Nginx安装及配置" class="headerlink" title="Nginx安装及配置"></a>Nginx安装及配置</h1><blockquote><p>本文参考：</p><p><a href="https://www.runoob.com/linux/nginx-install-setup.html" target="_blank" rel="noopener">Nginx安装配置_菜鸟教程</a></p><p><a href="http://www.nginx.cn/doc/" target="_blank" rel="noopener">Nginx中文文档</a></p><p><a href="https://www.cnblogs.com/jingmoxukong/p/5945200.html" target="_blank" rel="noopener">Nginx简易教程</a></p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>什么是nginx?</strong></p><p>Nginx (engine x) 是一款轻量级的Web 服务器 、反向代理服务器及电子邮件（IMAP/POP3）代理服务器。</p><p><strong>什么是反向代理？</strong></p><p>反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p><p><img src="https://pic2.zhimg.com/80/v2-ed1a226ae675b102b6eb7394b6db9235_hd.jpg" alt="img"></p><h2 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a><strong>安装与使用</strong></h2><p><strong>安装</strong></p><p>nginx官网下载地址：<a href="https://link.zhihu.com/?target=http%3A//nginx.org" target="_blank" rel="noopener">http://nginx.org</a>，发布版本分为 Linux 和 windows 版本。</p><p>也可以下载源码，编译后运行。</p><p><strong>从源代码编译 Nginx</strong></p><p>把源码解压缩之后，在终端里运行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><p>默认情况下，Nginx 会被安装在 /usr/local/nginx。通过设定编译选项，你可以改变这个设定。</p><p><strong>Windows 安装</strong></p><p>为了安装 Nginx / Win32，需先下载它(<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">Nginx官方下载</a>)。然后解压之，然后运行即可。下面以 C 盘根目录为例说明下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx-0.8.54   start nginx</span><br></pre></td></tr></table></figure><p>Nginx / Win32 是运行在一个控制台程序，而非 windows 服务方式的。服务器方式目前还是开发尝试中。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a><strong>使用</strong></h3><p>nginx 的使用比较简单，就是几条命令。</p><p><strong>常用到的命令如下：</strong></p><ul><li><strong>nginx -s stop ：</strong>快速关闭Nginx，可能不保存相关信息，并迅速终止web服务。</li><li><strong>nginx -s quit ：</strong>平稳关闭Nginx，保存相关信息，有安排的结束web服务。</li><li><strong>nginx -s reload ：</strong>因改变了Nginx相关配置，需要重新加载配置而重载。</li><li><strong>nginx -s reopen ：</strong>重新打开日志文件。</li><li><strong>nginx -c filename ：</strong>为 Nginx 指定一个配置文件，来代替缺省的。</li><li><strong>nginx -t ：</strong>不运行，而仅仅测试配置文件。nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件。</li><li><strong>nginx -v：</strong>显示 nginx 的版本。</li><li><strong>nginx -V：</strong>显示 nginx 的版本，编译器版本和配置参数。</li></ul><p>如果不想每次都敲命令，可以在nginx安装目录下新添一个启动批处理文件startup.bat，双击即可运行。内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">rem 如果启动前已经启动nginx并记录下pid文件，会kill指定进程</span><br><span class="line">nginx.exe -s stop</span><br><span class="line"></span><br><span class="line">rem 测试配置文件语法正确性</span><br><span class="line">nginx.exe -t -c conf/nginx.conf</span><br><span class="line"></span><br><span class="line">rem 显示版本信息</span><br><span class="line">nginx.exe -v</span><br><span class="line"></span><br><span class="line">rem 按照指定配置去启动nginx</span><br><span class="line">nginx.exe -c conf/nginx.conf</span><br></pre></td></tr></table></figure><p>如果是运行在 Linux 下，写一个 shell 脚本，大同小异。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="nginx-配置实战"><a href="#nginx-配置实战" class="headerlink" title="nginx 配置实战"></a><strong>nginx 配置实战</strong></h3><p>我始终认为，各种开发工具的配置还是结合实战来讲述，会让人更易理解。</p><h3 id="http反向代理配置"><a href="#http反向代理配置" class="headerlink" title="http反向代理配置"></a><strong>http反向代理配置</strong></h3><p>我们先实现一个小目标：不考虑复杂的配置，仅仅是完成一个 http 反向代理。</p><h3 id="nginx-conf-配置文件如下："><a href="#nginx-conf-配置文件如下：" class="headerlink" title="nginx.conf 配置文件如下："></a><strong>nginx.conf 配置文件如下：</strong></h3><p>注：conf / nginx.conf 是 nginx 的默认配置文件。你也可以使用 nginx -c 指定你的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">#运行用户</span><br><span class="line">#user somebody;</span><br><span class="line"></span><br><span class="line">#启动进程,通常设置成和cpu的数量相等</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#全局错误日志</span><br><span class="line">error_log  D:/Tools/nginx-1.10.1/logs/error.log;</span><br><span class="line">error_log  D:/Tools/nginx-1.10.1/logs/notice.log  notice;</span><br><span class="line">error_log  D:/Tools/nginx-1.10.1/logs/info.log  info;</span><br><span class="line"></span><br><span class="line">#PID文件，记录当前启动的nginx的进程ID</span><br><span class="line">pid        D:/Tools/nginx-1.10.1/logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">#工作模式及连接数上限</span><br><span class="line">events &#123;</span><br><span class="line">   worker_connections 1024;    #单个后台worker process进程的最大并发链接数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class="line">http &#123;</span><br><span class="line">   #设定mime类型(邮件支持类型),类型由mime.types文件定义</span><br><span class="line">   include       D:/Tools/nginx-1.10.1/conf/mime.types;</span><br><span class="line">   default_type  application/octet-stream;</span><br><span class="line">   </span><br><span class="line">   #设定日志</span><br><span class="line">   log_format  main  &apos;[$remote_addr] - [$remote_user] [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                     &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                     &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">                     </span><br><span class="line">   access_log    D:/Tools/nginx-1.10.1/logs/access.log main;</span><br><span class="line">   rewrite_log     on;</span><br><span class="line">   </span><br><span class="line">   #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，</span><br><span class="line">   #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.</span><br><span class="line">   sendfile        on;</span><br><span class="line">   #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">   #连接超时时间</span><br><span class="line">   keepalive_timeout  120;</span><br><span class="line">   tcp_nodelay        on;</span><br><span class="line">   </span><br><span class="line">   #gzip压缩开关</span><br><span class="line">   #gzip  on;</span><br><span class="line"></span><br><span class="line">   #设定实际的服务器列表 </span><br><span class="line">   upstream zp_server1&#123;</span><br><span class="line">       server 127.0.0.1:8089;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   #HTTP服务器</span><br><span class="line">   server &#123;</span><br><span class="line">       #监听80端口，80端口是知名端口号，用于HTTP协议</span><br><span class="line">       listen       80;</span><br><span class="line">       </span><br><span class="line">       #定义使用www.xx.com访问</span><br><span class="line">       server_name  www.helloworld.com;</span><br><span class="line">       </span><br><span class="line">       #首页</span><br><span class="line">       index index.html</span><br><span class="line">       </span><br><span class="line">       #指向webapp的目录</span><br><span class="line">       root D:_WorkspaceProjectgithubzpSpringNotesspring-securityspring-shirosrcmainwebapp;</span><br><span class="line">       </span><br><span class="line">       #编码格式</span><br><span class="line">       charset utf-8;</span><br><span class="line">       </span><br><span class="line">       #代理配置参数</span><br><span class="line">       proxy_connect_timeout 180;</span><br><span class="line">       proxy_send_timeout 180;</span><br><span class="line">       proxy_read_timeout 180;</span><br><span class="line">       proxy_set_header Host $host;</span><br><span class="line">       proxy_set_header X-Forwarder-For $remote_addr;</span><br><span class="line"></span><br><span class="line">       #反向代理的路径（和upstream绑定），location 后面设置映射的路径</span><br><span class="line">       location / &#123;</span><br><span class="line">           proxy_pass http://zp_server1;</span><br><span class="line">       &#125; </span><br><span class="line"></span><br><span class="line">       #静态文件，nginx自己处理</span><br><span class="line">       location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</span><br><span class="line">           root D:_WorkspaceProjectgithubzpSpringNotesspring-securityspring-shirosrcmainwebappiews;</span><br><span class="line">           #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。</span><br><span class="line">           expires 30d;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       #设定查看Nginx状态的地址</span><br><span class="line">       location /NginxStatus &#123;</span><br><span class="line">           stub_status           on;</span><br><span class="line">           access_log            on;</span><br><span class="line">           auth_basic            &quot;NginxStatus&quot;;</span><br><span class="line">           auth_basic_user_file  conf/htpasswd;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       #禁止访问 .htxxx 文件</span><br><span class="line">       location ~ /.ht &#123;</span><br><span class="line">           deny all;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       #错误处理页面（可选择性配置）</span><br><span class="line">       #error_page   404              /404.html;</span><br><span class="line">       #error_page   500 502 503 504  /50x.html;</span><br><span class="line">       #location = /50x.html &#123;</span><br><span class="line">       #    root   html;</span><br><span class="line">       #&#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，让我们来试试吧：</p><ol><li>启动 webapp，注意启动绑定的端口要和nginx中的 upstream 设置的端口保持一致。</li><li>更改 host：在 C:WindowsSystem32driversetc 目录下的host文件中添加一条DNS 记录127.0.0.1 <a href="https://link.zhihu.com/?target=http%3A//www.helloworld.com" target="_blank" rel="noopener">http://www.helloworld.com</a></li><li>启动前文中 startup.bat 的命令</li><li>在浏览器中访问 <a href="https://link.zhihu.com/?target=http%3A//www.helloworld.com" target="_blank" rel="noopener">http://www.helloworld.com</a>，不出意外，已经可以访问了。</li></ol><h3 id="负载均衡配置"><a href="#负载均衡配置" class="headerlink" title="负载均衡配置"></a><strong>负载均衡配置</strong></h3><p>上一个例子中，代理仅仅指向一个服务器。</p><p>但是，网站在实际运营过程中，多半都是有多台服务器运行着同样的app，这时需要使用负载均衡来分流。</p><p>nginx也可以实现简单的负载均衡功能。</p><p>假设这样一个应用场景：将应用部署在 192.168.1.11:80、192.168.1.12:80、192.168.1.13:80 三台linux环境的服务器上。网站域名叫 <a href="https://link.zhihu.com/?target=http%3A//www.helloworld.com" target="_blank" rel="noopener">http://www.helloworld.com</a>，公网IP为 192.168.1.11。在公网IP所在的服务器上部署 nginx，对所有请求做负载均衡处理。</p><p>nginx.conf 配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    #设定mime类型,类型由mime.type文件定义</span><br><span class="line">   include       /etc/nginx/mime.types;</span><br><span class="line">   default_type  application/octet-stream;</span><br><span class="line">   #设定日志格式</span><br><span class="line">   access_log    /var/log/nginx/access.log;</span><br><span class="line"></span><br><span class="line">   #设定负载均衡的服务器列表</span><br><span class="line">   upstream load_balance_server &#123;</span><br><span class="line">       #weigth参数表示权值，权值越高被分配到的几率越大</span><br><span class="line">       server 192.168.1.11:80   weight=5;</span><br><span class="line">       server 192.168.1.12:80   weight=1;</span><br><span class="line">       server 192.168.1.13:80   weight=6;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  #HTTP服务器</span><br><span class="line">  server &#123;</span><br><span class="line">       #侦听80端口</span><br><span class="line">       listen       80;</span><br><span class="line">       </span><br><span class="line">       #定义使用www.xx.com访问</span><br><span class="line">       server_name  www.helloworld.com;</span><br><span class="line"></span><br><span class="line">       #对所有请求进行负载均衡请求</span><br><span class="line">       location / &#123;</span><br><span class="line">           root        /root;                 #定义服务器的默认网站根目录位置</span><br><span class="line">           index       index.html index.htm;  #定义首页索引文件的名称</span><br><span class="line">           proxy_pass  http://load_balance_server ;#请求转向load_balance_server 定义的服务器列表</span><br><span class="line"></span><br><span class="line">           #以下是一些反向代理的配置(可选择性配置)</span><br><span class="line">           #proxy_redirect off;</span><br><span class="line">           proxy_set_header Host $host;</span><br><span class="line">           proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">           #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">           proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">           proxy_connect_timeout 90;          #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">           proxy_send_timeout 90;             #后端服务器数据回传时间(代理发送超时)</span><br><span class="line">           proxy_read_timeout 90;             #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">           proxy_buffer_size 4k;              #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">           proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span><br><span class="line">           proxy_busy_buffers_size 64k;       #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">           proxy_temp_file_write_size 64k;    #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line">           </span><br><span class="line">           client_max_body_size 10m;          #允许客户端请求的最大单文件字节数</span><br><span class="line">           client_body_buffer_size 128k;      #缓冲区代理缓冲用户端请求的最大字节数</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="网站有多个webapp的配置"><a href="#网站有多个webapp的配置" class="headerlink" title="网站有多个webapp的配置"></a><strong>网站有多个webapp的配置</strong></h3><p>当一个网站功能越来越丰富时，往往需要将一些功能相对独立的模块剥离出来，独立维护。这样的话，通常，会有多个 webapp。</p><p>举个例子：假如 <a href="https://link.zhihu.com/?target=http%3A//www.helloworld.com" target="_blank" rel="noopener">http://www.helloworld.com</a> 站点有好几个webapp，finance（金融）、product（产品）、admin（用户中心）。访问这些应用的方式通过上下文(context)来进行区分:</p><ul><li><a href="https://link.zhihu.com/?target=http%3A//www.helloworld.com/finance/" target="_blank" rel="noopener">http://www.helloworld.com/finance/</a></li><li><a href="https://link.zhihu.com/?target=http%3A//www.helloworld.com/product/" target="_blank" rel="noopener">http://www.helloworld.com/product/</a></li><li><a href="https://link.zhihu.com/?target=http%3A//www.helloworld.com/admin/" target="_blank" rel="noopener">http://www.helloworld.com/admin/</a></li></ul><p>我们知道，http的默认端口号是80，如果在一台服务器上同时启动这3个 webapp 应用，都用80端口，肯定是不成的。所以，这三个应用需要分别绑定不同的端口号。</p><p>那么，问题来了，用户在实际访问 <a href="https://link.zhihu.com/?target=http%3A//www.helloworld.com" target="_blank" rel="noopener">http://www.helloworld.com</a> 站点时，访问不同 webapp，总不会还带着对应的端口号去访问吧。所以，你再次需要用到反向代理来做处理。</p><p>配置也不难，来看看怎么做吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">   #此处省略一些基本配置</span><br><span class="line">   </span><br><span class="line">   upstream product_server&#123;</span><br><span class="line">       server www.helloworld.com:8081;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   upstream admin_server&#123;</span><br><span class="line">       server www.helloworld.com:8082;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   upstream finance_server&#123;</span><br><span class="line">       server www.helloworld.com:8083;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   server &#123;</span><br><span class="line">       #此处省略一些基本配置</span><br><span class="line">       #默认指向product的server</span><br><span class="line">       location / &#123;</span><br><span class="line">           proxy_pass http://product_server;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       location /product/&#123;</span><br><span class="line">           proxy_pass http://product_server;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       location /admin/ &#123;</span><br><span class="line">           proxy_pass http://admin_server;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       location /finance/ &#123;</span><br><span class="line">           proxy_pass http://finance_server;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="https反向代理配置"><a href="#https反向代理配置" class="headerlink" title="https反向代理配置"></a><strong>https反向代理配置</strong></h3><p>一些对安全性要求比较高的站点，可能会使用 HTTPS（一种使用ssl通信标准的安全HTTP协议）。</p><p>这里不科普 HTTP 协议和 SSL 标准。但是，使用 nginx 配置 https 需要知道几点：</p><ul><li>HTTPS 的固定端口号是 443，不同于 HTTP 的 80 端口</li><li>SSL 标准需要引入安全证书，所以在 nginx.conf 中你需要指定证书和它对应的 key</li></ul><p>其他和 http 反向代理基本一样，只是在 Server 部分配置有些不同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#HTTP服务器</span><br><span class="line"> server &#123;</span><br><span class="line">     #监听443端口。443为知名端口号，主要用于HTTPS协议</span><br><span class="line">     listen       443 ssl;</span><br><span class="line"></span><br><span class="line">     #定义使用www.xx.com访问</span><br><span class="line">     server_name  www.helloworld.com;</span><br><span class="line"></span><br><span class="line">     #ssl证书文件位置(常见证书文件格式为：crt/pem)</span><br><span class="line">     ssl_certificate      cert.pem;</span><br><span class="line">     #ssl证书key位置</span><br><span class="line">     ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">     #ssl配置参数（选择性配置）</span><br><span class="line">     ssl_session_cache    shared:SSL:1m;</span><br><span class="line">     ssl_session_timeout  5m;</span><br><span class="line">     #数字签名，此处使用MD5</span><br><span class="line">     ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">     ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">     location / &#123;</span><br><span class="line">         root   /root;</span><br><span class="line">         index  index.html index.htm;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="静态站点配置"><a href="#静态站点配置" class="headerlink" title="静态站点配置"></a><strong>静态站点配置</strong></h3><p>有时候，我们需要配置静态站点(即 html 文件和一堆静态资源)。</p><p>举例来说：如果所有的静态资源都放在了 /app/dist 目录下，我们只需要在 nginx.conf 中指定首页以及这个站点的 host 即可。</p><p>配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">   worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">   include       mime.types;</span><br><span class="line">   default_type  application/octet-stream;</span><br><span class="line">   sendfile        on;</span><br><span class="line">   keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">   gzip on;</span><br><span class="line">   gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/javascript image/jpeg image/gif image/png;</span><br><span class="line">   gzip_vary on;</span><br><span class="line"></span><br><span class="line">   server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  static.zp.cn;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">           root /app/dist;</span><br><span class="line">           index index.html;</span><br><span class="line">           #转发任何请求到 index.html</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，添加 HOST：127.0.0.1 <a href="https://link.zhihu.com/?target=http%3A//static.zp.cn" target="_blank" rel="noopener">http://static.zp.cn</a>，此时，在本地浏览器访问 <a href="https://link.zhihu.com/?target=http%3A//static.zp.cn" target="_blank" rel="noopener">http://static.zp.cn</a> ，就可以访问静态站点了。</p><h3 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a><strong>跨域解决方案</strong></h3><p>web 领域开发中，经常采用前后端分离模式。这种模式下，前端和后端分别是独立的 web 应用程序，例如：后端是 Java 程序，前端是 React 或 Vue 应用。</p><p>各自独立的 web app 在互相访问时，势必存在跨域问题。解决跨域问题一般有两种思路：</p><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a><strong>CORS</strong></h3><p>在后端服务器设置 HTTP 响应头，把你需要运行访问的域名加入加入 Access-Control-Allow-Origin 中。</p><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a><strong>jsonp</strong></h3><p>把后端根据请求，构造json数据，并返回，前端用 jsonp 跨域。</p><p>这两种思路，本文不展开讨论。</p><p>需要说明的是，nginx 根据第一种思路，也提供了一种解决跨域的解决方案。</p><p>举例：<a href="https://link.zhihu.com/?target=http%3A//www.helloworld.com" target="_blank" rel="noopener">http://www.helloworld.com</a> 网站是由一个前端 app ，一个后端 app 组成的。前端端口号为 9000， 后端端口号为 8080。</p><p>前端和后端如果使用 http 进行交互时，请求会被拒绝，因为存在跨域问题。来看看，nginx 是怎么解决的吧：</p><p>首先，在 enable-cors.conf 文件中设置 cors ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># allow origin list</span><br><span class="line">set $ACAO &apos;*&apos;;</span><br><span class="line"></span><br><span class="line"># set single origin</span><br><span class="line">if ($http_origin ~* (www.helloworld.com)$) &#123;</span><br><span class="line"> set $ACAO $http_origin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($cors = &quot;trueget&quot;) &#123;</span><br><span class="line">   add_header &apos;Access-Control-Allow-Origin&apos; &quot;$http_origin&quot;;</span><br><span class="line">   add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</span><br><span class="line">   add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</span><br><span class="line">   add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($request_method = &apos;OPTIONS&apos;) &#123;</span><br><span class="line"> set $cors &quot;$&#123;cors&#125;options&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($request_method = &apos;GET&apos;) &#123;</span><br><span class="line"> set $cors &quot;$&#123;cors&#125;get&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($request_method = &apos;POST&apos;) &#123;</span><br><span class="line"> set $cors &quot;$&#123;cors&#125;post&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，在你的服务器中 include enable-cors.conf 来引入跨域配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># ----------------------------------------------------</span><br><span class="line"># 此文件为项目 nginx 配置片段</span><br><span class="line"># 可以直接在 nginx config 中 include（推荐）</span><br><span class="line"># 或者 copy 到现有 nginx 中，自行配置</span><br><span class="line"># www.helloworld.com 域名需配合 dns hosts 进行配置</span><br><span class="line"># 其中，api 开启了 cors，需配合本目录下另一份配置文件</span><br><span class="line"># ----------------------------------------------------</span><br><span class="line">upstream front_server&#123;</span><br><span class="line"> server www.helloworld.com:9000;</span><br><span class="line">&#125;</span><br><span class="line">upstream api_server&#123;</span><br><span class="line"> server www.helloworld.com:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"> listen       80;</span><br><span class="line"> server_name  www.helloworld.com;</span><br><span class="line"></span><br><span class="line"> location ~ ^/api/ &#123;</span><br><span class="line">   include enable-cors.conf;</span><br><span class="line">   proxy_pass http://api_server;</span><br><span class="line">   rewrite &quot;^/api/(.*)$&quot; /$1 break;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> location ~ ^/ &#123;</span><br><span class="line">   proxy_pass http://front_server;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx+rtmp</title>
      <link href="/2019/05/17/nginx-rtmp/"/>
      <url>/2019/05/17/nginx-rtmp/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx-rtmp-搭建视频直播服务器"><a href="#nginx-rtmp-搭建视频直播服务器" class="headerlink" title="nginx+rtmp 搭建视频直播服务器"></a>nginx+rtmp 搭建视频直播服务器</h1><h2 id="服务器安装配置"><a href="#服务器安装配置" class="headerlink" title="服务器安装配置"></a>服务器安装配置</h2><blockquote><p><strong>windows安装包(已编译好的版本)参考：</strong></p><p><a href="http://nginx-win.ecsds.eu/" target="_blank" rel="noopener">nginx for windows</a></p><p><a href="http://blog.chinaunix.net/uid-26000296-id-5748243.html" target="_blank" rel="noopener">windows下搭建基于nginx的rtmp服务器</a></p><p><a href="https://my.oschina.net/gaga/blog/478480" target="_blank" rel="noopener">在Windows下搭建基于nginx的视频直播和点播系统</a></p></blockquote><blockquote><p><strong>搬运源码（未编译）</strong></p><p><a href="https://github.com/Car-eye-team/Car-eye-RTMP-server" target="_blank" rel="noopener">Car-eye-RTMP-server(github)</a></p><p><a href="https://github.com/Car-eye-team/car-eye-http-flv-module" target="_blank" rel="noopener">car-eye-http-flv-module</a></p></blockquote><blockquote><p><strong>nginx+rtmp在windows下编译</strong></p><p><a href="https://www.cnblogs.com/KendoCross/p/7585654.html" target="_blank" rel="noopener">Windows下编译nginx-rtmp-module</a></p><p><a href="https://blog.csdn.net/kenny25/article/details/39399689" target="_blank" rel="noopener">windows下编译nginx+nginx_rtmp_modue(vs2013)</a></p></blockquote><blockquote><p><strong>CentOS搭建nginx+rtmp服务器</strong></p><p><a href="https://www.jianshu.com/p/0a4a34d9eb8f" target="_blank" rel="noopener">nginx+rtmp直播流服务搭建 centos7</a></p><p><a href="https://blog.csdn.net/sz76211822/article/details/79225716" target="_blank" rel="noopener">centos7 Nginx+rtmp 搭建流媒体服务器</a></p></blockquote><p>linux下建议将nginx.conf中的http端口改为1024以上，好像是80端口每次运行都需要su权限。</p><p><a href="https://blog.csdn.net/shuanger_/article/details/48629163" target="_blank" rel="noopener">Nginx搭建rtmp流媒体服务器</a></p><h2 id="nginx服务器常用命令"><a href="#nginx服务器常用命令" class="headerlink" title="nginx服务器常用命令"></a>nginx服务器常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">./nginx -v//查看nginx版本号</span><br><span class="line">./nginx -V //查看nginx详细的版本信息</span><br><span class="line">start ./nginx -c conf/nginx.conf //以nginx.conf的配置启动nginx</span><br><span class="line">./nginx -s stop//停止nginx服务器</span><br><span class="line">./nginx -s quit//停止nginx服务器</span><br><span class="line">./nginx -s reload//重启nginx服务器</span><br><span class="line">service nginx reload//重启nginx服务器</span><br><span class="line">./nginx -t (-c conf/nginx.conf)//检查配置文件是否正确</span><br><span class="line">./nginx -h//显示帮助信息</span><br><span class="line">./nginx -?//显示帮助信息</span><br></pre></td></tr></table></figure><h2 id="nginx-rtmp加入权限控制"><a href="#nginx-rtmp加入权限控制" class="headerlink" title="nginx+rtmp加入权限控制"></a>nginx+rtmp加入权限控制</h2><blockquote><p>本文参考：</p><p>*<a href="https://github.com/arut/nginx-rtmp-module/wiki/Directives" target="_blank" rel="noopener">rtmp-module官方wiki</a></p><p>*<a href="http://www.cnblogs.com/zx-admin/p/5783523.html" target="_blank" rel="noopener">视频直播点播nginx-rtmp开发手册中文版(参考wiki版本粗译)</a></p><p><a href="https://blog.csdn.net/cui918/article/details/53540397#commentBox" target="_blank" rel="noopener">如何给 nginx rtmp 服务加入鉴权机制(改源码)</a></p><p>*<a href="https://blog.csdn.net/weixin_34368949/article/details/85991563" target="_blank" rel="noopener">「自己开发直播」实现nginx-rtmp-module多频道输入输出与权限控制</a></p><p><a href="https://blog.csdn.net/weixin_42579642/article/details/85263210" target="_blank" rel="noopener">nginx-rtmp-module授权机制实现直播推流多房间授权认证</a></p><p><a href="https://blog.csdn.net/iam_shuaidaile/article/details/50599943" target="_blank" rel="noopener">nginx-rtmp-module 权限控制</a></p><p><a href="https://blog.csdn.net/luoc83/article/details/79240774" target="_blank" rel="noopener">nginx-rtmp加入权限验证的简单方法</a></p><p><a href="https://blog.csdn.net/kevinw9/article/details/52984826" target="_blank" rel="noopener">视频直播点播nginx-rtmp开发手册中文版</a></p><p>*<a href="https://www.cnblogs.com/lidabo/p/7099501.html" target="_blank" rel="noopener">nginx.conf中关于nginx-rtmp-module配置指令详解</a></p><p>*<a href="https://blog.csdn.net/wei389083222/article/details/78721074/" target="_blank" rel="noopener">nginx-rtmp多房间和授权实现</a></p><blockquote><p>*博客比较有用</p></blockquote></blockquote><p>nginx的rtmp-module默认不限制推流权限、播放权限。</p><p>想加入权限验证有很多种方法。</p><p>其中一个是改源码，一个是利用nginx+rtmp的配置文件调用后台接口进行验证。</p><p>第一种方法没成功过，第二种方法比较简单。此文介绍第二种方法，第一种方法可见博客-&gt;<a href="https://blog.csdn.net/cui918/article/details/53540397#commentBox" target="_blank" rel="noopener">如何给 nginx rtmp 服务加入鉴权机制(改源码)</a></p><p>原理主要是利用on_publish跳转到当前配置的一个“location”，在这里进行验证。关键点在于rtmp application节点下面要配置“notify_method get;”为什么呢？因为跳转的时候，默认以POST方式传输参数，修改成GET方式，nginx配置里就可以轻松处理了。（当然nginx通过配置文件也可以处理post，只是复杂一些）。</p><p>我们在此使用python的后台框架flask处理on_publish的post请求。</p><p>后台返回http200即为通过验证，返回http500即为验证失败，服务器拒绝连接。</p><p>nginx的配置文件（位于nginx安装目录下：…/nginx/conf/nginx.conf）修改如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">rtmp &#123;</span><br><span class="line">server &#123;</span><br><span class="line">#listen 1935;</span><br><span class="line">listen 10077;</span><br><span class="line"></span><br><span class="line">chunk_size 4000;</span><br><span class="line">application live &#123;</span><br><span class="line">live on;</span><br><span class="line">on_publish http://localhost:10078/user/auth;//后面的url即flask监听的地址</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">application hls &#123;</span><br><span class="line">live on;</span><br><span class="line">hls on;</span><br><span class="line">#hls_path ../nginx-1.7.11.3-Gryphon/html/hls;</span><br><span class="line">hls_path ../hls;</span><br><span class="line">hls_fragment 5s;</span><br><span class="line">on_publish http://localhost:10078/user/auth;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python的flask后台代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#https://www.jianshu.com/p/0d14ae8f081c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#https://blog.csdn.net/wei389083222/article/details/78721074/</span></span><br><span class="line"><span class="comment">#https://blog.csdn.net/weixin_34368949/article/details/85991563</span></span><br><span class="line"><span class="comment">#验证只能用post方法</span></span><br><span class="line"><span class="comment">#虽然流密钥的格式像是get类型，但是必须使用POST获取参数。</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, Response</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#传入url格式为: xx.xx.xx.xx:10078/user/auth?usr=xxx&amp;passWord=xxx</span></span><br><span class="line"><span class="meta">@app.route('/user/auth',methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">()</span>:</span></span><br><span class="line">    usr = request.form[<span class="string">'usr'</span>]<span class="comment">#从url后获取的数据</span></span><br><span class="line">    passWord = request.form[<span class="string">'passWord'</span>]</span><br><span class="line">    print(usr,<span class="string">'\t'</span>,passWord)</span><br><span class="line">    <span class="comment">#此处可改为从数据库获取数据</span></span><br><span class="line">    auth_user=<span class="string">'abc'</span></span><br><span class="line">    auth_passWord=<span class="string">'123'</span></span><br><span class="line">    <span class="keyword">if</span> auth_user == usr <span class="keyword">and</span> auth_passWord ==passWord:</span><br><span class="line">        <span class="keyword">return</span> Response(response=<span class="string">'success'</span>,status=<span class="number">200</span>)<span class="comment">#返回200状态码</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Response(status=<span class="number">500</span>)<span class="comment">#返回500状态码</span></span><br><span class="line">        <span class="comment">#Flask.abort(404)</span></span><br><span class="line">    <span class="keyword">return</span> passWord</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">10078</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>播放权限也可用类似on_publish的验证方法进行控制。</p><p>on_play和on_publish 一样，只接受post方法，若需要接受get方法需要在rtmp中application的配置中添加<pre>notify_method get;</pre>，然后可在http{}部分中处理调用（这部分语法我不太清楚，不详细展开）。</p><p>以下是nginx.conf关于on_play的用法</p><p>on_play<br>语法：on_play url<br>上下文：rtmp, server, application<br>描述：设置 HTTP 播放回调。每次一个客户分发播放命令时，一个 HTTP 请求异步发送，命令处理会挂起 - 直到它返回结果码。之后再解析 HTTP 结果码。</p><ul><li><p>HTTP 2XX 返回码的话继续 RTMP 会话。</p></li><li><p>HTTP 3XX 返回码的话 重定向 RTMP 到另一个流，这个流的名字在 HTTP 返回头的 Location 获取。如果新流的名字起始于 rtmp:// 然后远程 relay 会被创建。relay 要求 IP 地址是指定的而不是域名，并且只工作在 1.3.10 版本以上的 nginx。另请参考 notify_relay_redirect。</p></li><li><p>其他返回码的话 RTMP 连接丢弃。<br>重定向例子：</p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> http &#123;</span><br><span class="line">  </span><br><span class="line">  location /local_redirect &#123;</span><br><span class="line">        rewrite ^.*$ newname? permanent;</span><br><span class="line">    &#125;</span><br><span class="line">    location /remote_redirect &#123;</span><br><span class="line">        # no domain name here, only ip</span><br><span class="line">        rewrite ^.*$ rtmp://192.168.1.123/someapp/somename? permanent;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  rtmp &#123;</span><br><span class="line">    application myapp1 &#123;</span><br><span class="line">        live on;</span><br><span class="line">        # stream will be redirected to &apos;newname&apos;</span><br><span class="line">        on_play http://localhost:8080/local_redirect;</span><br><span class="line">    &#125;</span><br><span class="line">    application myapp2 &#123;</span><br><span class="line">        live on;</span><br><span class="line">        # stream will be pulled from remote location</span><br><span class="line">        # requires nginx &gt;= 1.3.10</span><br><span class="line">        on_play http://localhost:8080/remote_redirect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTTP 请求接收到一些个参数。在 application/x-www-form-urlencoded MIME 类型下使用 POST 方法。以下参数会被传送给调用者：</p><ul><li>call=play。</li><li>addr - 客户端 IP 地址。</li><li>app - application 名。</li><li>flashVer - 客户端 flash 版本。</li><li>swfUrl - 客户端 swf url。</li><li>tcUrl - tcUrl。</li><li>pageUrl - 客户端页面 url。</li><li>name - 流名。<br>出了上述参数之外其他所有播放命令参数显式地发送回调。例如如果一个流由 url rtmp://localhost/app/movie?a=100&amp;b=face&amp;foo=bar 访问，然后呢 a,b 和 foo 发送回调。<br>on_play <a href="http://example.com/my_callback" target="_blank" rel="noopener">http://example.com/my_callback</a>;</li></ul><h2 id="过程中使用到的额外软件"><a href="#过程中使用到的额外软件" class="headerlink" title="过程中使用到的额外软件"></a>过程中使用到的额外软件</h2><ul><li>obs</li><li>手机端:快直播</li><li>ffmpeg推流（没用过）</li></ul>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> rtmp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+gitPages Synchronization</title>
      <link href="/2019/05/16/hexo-gitPages-Synchronization/"/>
      <url>/2019/05/16/hexo-gitPages-Synchronization/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-gitPages-的博客多端同步管理及迁移"><a href="#Hexo-gitPages-的博客多端同步管理及迁移" class="headerlink" title="Hexo+gitPages 的博客多端同步管理及迁移"></a>Hexo+gitPages 的博客多端同步管理及迁移</h1><blockquote><p>本文参考</p><p><a href="https://blog.csdn.net/Monkey_LZL/article/details/60870891" target="_blank" rel="noopener">如何解决github+Hexo的博客多终端同步问题</a></p><p><a href="https://www.jianshu.com/p/0b1fccce74e0" target="_blank" rel="noopener">利用Hexo在多台电脑上提交和更新github pages博客</a></p><p><a href="https://righere.github.io/2016/10/10/install-hexo/" target="_blank" rel="noopener">搭建hexo博客并简单的实现多终端同步</a></p><p><a href="https://www.jianshu.com/p/fceaf373d797" target="_blank" rel="noopener">hexo博客同步管理及迁移</a></p></blockquote><p>主体的思路是将博文内容相关文件放在Github项目中master中，将Hexo配置写博客用的相关文件(包括博客内容主题等等)放在Github项目的hexo分支上，这个是关键，多终端的同步只需要对分支hexo进行操作。</p><h3 id="同步的首次操作"><a href="#同步的首次操作" class="headerlink" title="同步的首次操作"></a>同步的首次操作</h3><p>在创建了博客的目录下操作，push本地文件夹Hexo中的必要文件到yourname.github.io的hexo分支上。</p><p>只托管部分用于多终端的同步的文件</p><p><strong>注意</strong>：使用第三方主题时，要删除第三方主题的.git文件夹删除，不然无法push到远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init  //初始化本地仓库</span><br><span class="line">git add source //将必要的文件依次添加，有些文件夹如npm install产生的node_modules由于路径过长不好处理，所以这里没有用`git add .`命令了，而是依次添加必要文件，如下图所示,其实也可以用'git add .'命令，在.gitignore文件中加入不需要同步的文件即可</span><br><span class="line">git commit -m "Blog Source Hexo"</span><br><span class="line">git branch hexo  //新建hexo分支</span><br><span class="line">git checkout hexo  //切换到hexo分支上</span><br><span class="line">git remote add origin git@github.com:yourname/yourname.github.io.git  //将本地与Github项目对接</span><br><span class="line">git push origin hexo  //push到Github项目的hexo分支上</span><br></pre></td></tr></table></figure><p>多出来的hexo的分支，用于文件同步，原有的master分支用于部署静态博客页面</p><h3 id="在新终端进行更新博客"><a href="#在新终端进行更新博客" class="headerlink" title="在新终端进行更新博客"></a>在新终端进行更新博客</h3><p>先从github中把文件clone到本地，然后安装相应组件。然后通过git的提交同步内容，用hexo的命令部署博客到gitPages里。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone -b hexo git@github.com:yourname/yourname.github.io.git  //将Github中hexo分支clone到本地</span><br><span class="line">cd  yourname.github.io  //切换到刚刚clone的文件夹内</span><br><span class="line">npm install    //注意，这里一定要切换到刚刚clone的文件夹内执行，安装必要的所需组件，不用再init</span><br><span class="line">hexo new post "new blog name"   //新建一个.md文件，并编辑完成自己的博客内容</span><br><span class="line">git add source  //经测试每次只要更新sorcerer中的文件到Github中即可，因为只是新建了一篇新博客，如果更改了主题样式的话还是建议用'git add .'</span><br><span class="line">git commit -m "XX"</span><br><span class="line">git push origin hexo  //更新分支</span><br><span class="line">hexo d -g   //push更新完分支之后将自己写的博客对接到自己搭的博客网站上，同时同步了Github中的master</span><br></pre></td></tr></table></figure><h3 id="已有博客的终端更新博客"><a href="#已有博客的终端更新博客" class="headerlink" title="已有博客的终端更新博客"></a>已有博客的终端更新博客</h3><p>进入相应的文件夹，更新博客直行命令即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git pull origin hexo//先pull完成本地和远端的融合</span><br><span class="line">hexo new post <span class="string">"new blog"</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"Blog update"</span></span><br><span class="line">git push origin hexo</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown Syntax</title>
      <link href="/2019/05/14/Markdown-Syntax/"/>
      <url>/2019/05/14/Markdown-Syntax/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown-Syntax"><a href="#Markdown-Syntax" class="headerlink" title="Markdown Syntax"></a><center>Markdown Syntax</center></h1><blockquote><p>本文参考</p><p><a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">Markdown基本语法(简书)</a></p><p><a href="www.markdown.cn">Markdown官方文档</a></p><p><a href="https://www.jianshu.com/p/b03a8d7b1719#fnref1" target="_blank" rel="noopener">Markdown语法html支持</a></p><p><a href="http://www.pianshen.com/article/2061138675/#_51" target="_blank" rel="noopener">Markdown部分详细用法</a></p></blockquote><hr><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Atx形式</span><br><span class="line"></span><br><span class="line"><span class="section"># 这是一级标题</span></span><br><span class="line"><span class="section">## 这是二级标题</span></span><br><span class="line"><span class="section">### 这是三级标题</span></span><br><span class="line"><span class="section">#### 这是四级标题</span></span><br><span class="line"><span class="section">##### 这是五级标题</span></span><br><span class="line"><span class="section">###### 这是六级标题</span></span><br></pre></td></tr></table></figure><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Setext形式</span><br><span class="line"></span><br><span class="line">This is an H1</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line">This is an H2</span><br><span class="line">-------------</span><br></pre></td></tr></table></figure><h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2><h2 id="根据标题生成目录"><a href="#根据标题生成目录" class="headerlink" title="根据标题生成目录"></a>根据标题生成目录</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[TOC]  根据标题自动生成目录</span><br></pre></td></tr></table></figure><p>[TOC]</p><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*`</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure><p><strong>加粗测试</strong></p><p><em>倾斜测试</em></p><p><strong><em>斜体加粗测试</em></strong></p><p><del>删除线测试</del></p><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;多重引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure><blockquote><p>引用测试一</p><blockquote><p>引用测试二</p><blockquote><p>多重引用</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>引用测试</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><hr><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>只要三个以上就可以</p><hr><hr><hr><hr><hr><h2 id="图片引用"><a href="#图片引用" class="headerlink" title="图片引用"></a>图片引用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片alt</span>](<span class="link">图片地址 ''图片title''</span>)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</span><br><span class="line">u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg "区块链")</span><br></pre></td></tr></table></figure><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg&quot;区块链&quot;" alt="blockchain"></p><h3 id="插入带有链接的图片"><a href="#插入带有链接的图片" class="headerlink" title="插入带有链接的图片"></a>插入带有链接的图片</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">[图片上传失败...(image-f83b77-1542510791300)</span>]](http://www.baidu.com)&#123;:target="_blank"&#125;       // 内链式</span><br><span class="line"></span><br><span class="line">[<span class="string">[图片上传失败...(image-4dc956-1542510791300)</span>]][5]&#123;:target="_blank"&#125;                      // 引用式</span><br><span class="line">[<span class="symbol">5</span>]: <span class="link">http://www.baidu.com</span></span><br></pre></td></tr></table></figure><p><a href="htttp://www.baidu.com" target="_blank" rel="noopener">[图片上传失败…(image-f83b77-1542510791300)]</a>{:target=”_blank”}</p><p>内链式</p><p><a href="http://www.baidu.com/" target="_blank" rel="noopener">[图片上传失败…(image-f83b77-1542510791300)]</a>{:target=”blank”}</p><p>外链式</p><hr><h2 id="超链接引用"><a href="#超链接引用" class="headerlink" title="超链接引用"></a>超链接引用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">超链接名</span>](<span class="link">超链接地址 "超链接title"</span>)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">简书</span>](<span class="link">http://jianshu.com</span>)</span><br><span class="line">[<span class="string">百度</span>](<span class="link">http://baidu.com</span>)</span><br></pre></td></tr></table></figure><p><a href="http://baidu.com" target="_blank" rel="noopener">baidu</a></p><p>注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">示例</span><br><span class="line">&lt;a href=&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot; target=&quot;_blank&quot;&gt;简书&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/u/1f5ac0cf6a8b" target="_blank">简书</a></p><hr><h2 id="视频插入"><a href="#视频插入" class="headerlink" title="视频插入"></a>视频插入</h2><p>注：Markdown 语法是不支持直接插入视频的<br> 普遍的做法是 插入HTML的 iframe 框架，通过网站自带的分享功能获取，如果没有可以尝试第二种方法<br> 第二是伪造播放界面，实质是插入视频图片，然后通过点击跳转到相关页面</p><p><strong>代码1</strong><br> 注：多数第三方平台不支持插入<code>&lt;iframe&gt;</code>视频</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">height</span>=<span class="string">498</span> <span class="attr">width</span>=<span class="string">510</span> <span class="attr">src</span>=<span class="string">'http://player.youku.com/embed/XMjgzNzM0NTYxNg=='</span> <span class="attr">frameborder</span>=<span class="string">0</span> '<span class="attr">allowfullscreen</span>'&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>代码2</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">[图片上传失败...(image-49aefe-1542510791300)</span>]](http://v.youku.com/v<span class="emphasis">_show/id_</span>XMjgzNzM0NTYxNg==.html?spm=a2htv.20009910.contentHolderUnit2.A&amp;from=y1.3-tv-grid-1007-9910.86804.1-2#paction)&#123;:target="_blank"&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">无序列表用任一种皆可</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>列表内容</span><br><span class="line"><span class="bullet">+ </span>列表内容</span><br><span class="line"><span class="bullet">* </span>列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure><ul><li>列表（-）</li><li>列表（-）</li></ul><ul><li>列表（+）</li></ul><ul><li>列表（*）</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">有序列表内容</span><br><span class="line"></span><br><span class="line">1.列表内容</span><br><span class="line">2.列表内容</span><br><span class="line">3.列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure><ol><li>第一点</li><li>第二点</li><li>第三点</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**上一级和下一级之间敲三个空格即可**</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>一级无序列表内容</span><br><span class="line">  - 二级无序列表内容</span><br><span class="line">  - 二级无序列表内容</span><br><span class="line">  - 二级无序列表内容</span><br><span class="line"><span class="bullet">- </span>一级无序列表内容</span><br><span class="line">  1. 二级有序列表内容</span><br><span class="line">  2. 二级有序列表内容</span><br><span class="line">  3. 二级有序列表内容</span><br><span class="line"></span><br><span class="line"><span class="bullet">1. </span>一级有序列表内容</span><br><span class="line">   - 二级无序列表内容</span><br><span class="line">   - 二级无序列表内容</span><br><span class="line">   - 二级无序列表内容</span><br><span class="line"><span class="bullet">2. </span>一级有序列表内容</span><br><span class="line">   1. 二级有序列表内容</span><br><span class="line">   2. 二级有序列表内容</span><br><span class="line">   3. 二级有序列表内容</span><br></pre></td></tr></table></figure><p><strong>上一级和下一级之间敲三个空格即可</strong></p><ul><li>一级无序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li>一级无序列表内容<ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ul><ol><li>一级有序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li>一级有序列表内容<ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ol><hr><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">姓名|技能|排行</span><br><span class="line">--|:--:|--:</span><br><span class="line">刘备|哭|大哥</span><br><span class="line">关羽|打|二哥</span><br><span class="line">张飞|骂|三弟</span><br></pre></td></tr></table></figure><table><thead><tr><th>姓名</th><th style="text-align:center">技能</th><th style="text-align:right">排行</th></tr></thead><tbody><tr><td>刘备</td><td style="text-align:center">哭</td><td style="text-align:right">大哥</td></tr><tr><td>关羽</td><td style="text-align:center">打</td><td style="text-align:right">二哥</td></tr><tr><td>张飞</td><td style="text-align:center">骂</td><td style="text-align:right">三弟</td></tr></tbody></table><p>Typora编辑器中可以直接使用crtl+T，或者在菜单段落中找到表格生成</p><hr><h2 id="代码引用"><a href="#代码引用" class="headerlink" title="代码引用"></a>代码引用</h2><p>单行代码</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`代码内容`</span></span><br></pre></td></tr></table></figure><p><code>int main(){return 0;}</code></p><p>代码块</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="code">```)language</span></span><br><span class="line"><span class="code">  代码...</span></span><br><span class="line"><span class="code">  代码...</span></span><br><span class="line"><span class="code">  代码...</span></span><br><span class="line"><span class="code">(```)</span></span><br></pre></td></tr></table></figure><blockquote><p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; <span class="string">"hello markdown"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="格式化代码html版"><a href="#格式化代码html版" class="headerlink" title="格式化代码html版"></a>格式化代码html版</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span></span><br><span class="line"><span class="section">## 这是一个不起作用的标题</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></span><br></pre></td></tr></table></figure><pre>## 这是一个不起作用的标题</pre><hr><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>注：<strong> <code>st=&gt;start: 开始</code> 的<code>：</code>后面保持空格</strong></p><table><thead><tr><th>形参</th><th>实参</th><th>含义</th></tr></thead><tbody><tr><td>tag</td><td>st</td><td>标签 (可以自定义)</td></tr><tr><td>=&gt;</td><td>=&gt;</td><td>赋值</td></tr><tr><td>type</td><td>start</td><td>类型  (6种类型)</td></tr><tr><td>content</td><td>开始</td><td>描述内容 (可以自定义)</td></tr><tr><td>:&gt;url</td><td><code>http://www.baidu.com[blank]</code></td><td>链接与跳转方式 <strong>兼容性很差</strong></td></tr></tbody></table><table><thead><tr><th>6种类型</th><th>含义</th></tr></thead><tbody><tr><td>start</td><td>启动</td></tr><tr><td>end</td><td>结束</td></tr><tr><td>operation</td><td>程序</td></tr><tr><td>subroutine</td><td>子程序</td></tr><tr><td>condition</td><td>条件</td></tr><tr><td>inputoutput</td><td>输出</td></tr></tbody></table><table><thead><tr><th>形参</th><th>实参</th><th>含义</th></tr></thead><tbody><tr><td>-&gt;</td><td>-&gt;</td><td>连接</td></tr><tr><td>condition</td><td>c1</td><td>条件</td></tr><tr><td>(布尔值,方向)</td><td>(yes,right)</td><td>如果满足向右连接，4种方向：right ，left，up ，down 默认为：down</td></tr></tbody></table><p>注：operation (程序); subroutine (子程序) ;condition (条件)，都可以在括号里加入连接方向。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```flow</span></span><br><span class="line"><span class="code">st=&gt;start: 开始</span></span><br><span class="line"><span class="code">op=&gt;operation: My Operation</span></span><br><span class="line"><span class="code">cond=&gt;condition: Yes or No?</span></span><br><span class="line"><span class="code">e=&gt;end</span></span><br><span class="line"><span class="code">st-&gt;op-&gt;cond</span></span><br><span class="line"><span class="code">cond(yes)-&gt;e</span></span><br><span class="line"><span class="code">cond(no)-&gt;op</span></span><br><span class="line"><span class="code">&amp;```</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 选项框</span><br><span class="line"></span><br><span class="line">```markdown</span><br><span class="line">- [x] 选项一</span><br><span class="line">- [ ] 选项二  </span><br><span class="line">需要注意的是：-、[x]、和选择一之间都要有空格，如果不下x[ ]中也要有空格</span><br></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox" checked> 选项一</li><li style="list-style: none"><input type="checkbox"> 选项二</li></ul><hr><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><p>支持LaTex的数学公式，参考<a href="https://www.jianshu.com/p/2bbec51d756f" target="_blank" rel="noopener"><a href="https://www.jianshu.com/p/2bbec51d756f" target="_blank" rel="noopener">https://www.jianshu.com/p/2bbec51d756f</a></a></p><p>数学公式（MathJax)，参考<a href="https://www.jianshu.com/p/a0aa94ef8ab2" target="_blank" rel="noopener"><a href="https://www.jianshu.com/p/a0aa94ef8ab2" target="_blank" rel="noopener">https://www.jianshu.com/p/a0aa94ef8ab2</a></a></p><p>注：1个$左对齐，2个居中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$$ x \href&#123;why-equal.html&#125;&#123;=&#125; y^2 + 1 $$</span><br><span class="line">$ x = &#123;-b \pm \sqrt&#123;b^2-4ac&#125; \over 2a&#125;. $</span><br></pre></td></tr></table></figure><p>$$<br>x \href{why-equal.html}{=} y^2 +1<br>$$</p><p>使用Typora的时候可以直接使用 $$+回车，或者用crtl+shift+M生成公式块（在段落菜单中的公式块）</p><p>参考<a href="https://blog.csdn.net/mingzhuo_126/article/details/82722455" target="_blank" rel="noopener"><a href="https://blog.csdn.net/mingzhuo_126/article/details/82722455" target="_blank" rel="noopener">https://blog.csdn.net/mingzhuo_126/article/details/82722455</a></a></p><hr><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Markdown[^1]</span><br><span class="line">[<span class="symbol">^1</span>]: <span class="link">Markdown是一种纯文本标记语言        // 在文章最后面显示脚注</span></span><br></pre></td></tr></table></figure><p>Markdown<a href="markdown是一种纯文本标记语言">^1</a></p><hr><h2 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h2><p>注：只有<strong>标题</strong>支持锚点， 跳转目录方括号后 保持空格</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">公式标题锚点</span>](<span class="link">#1</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">### [需要跳转的目录] &#123;#1&#125;    // 方括号后保持空格</span></span><br></pre></td></tr></table></figure><p><a href="#1">脚注标题锚点</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">由于&#123;# 是hexo的标注语言</span><br><span class="line">hexo 中 &#123;# 属于保留字段 &#123;# ... #&#125;属于注释字段</span><br><span class="line">把<span class="code">```以外的&#123;#改成&#123;&#123; '&#123;#' &#125;&#125;即可解决</span></span><br></pre></td></tr></table></figure><hr><h2 id="自动邮箱链接"><a href="#自动邮箱链接" class="headerlink" title="自动邮箱链接"></a>自动邮箱链接</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">xxx@outlook.com</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><a href="mailto:&#120;&#120;&#120;&#64;&#x6f;&#x75;&#x74;&#108;&#x6f;&#x6f;&#107;&#46;&#99;&#111;&#x6d;" target="_blank" rel="noopener">&#120;&#120;&#120;&#64;&#x6f;&#x75;&#x74;&#108;&#x6f;&#x6f;&#107;&#46;&#99;&#111;&#x6d;</a></p><hr><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p><strong>代码1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">​```sequence</span><br><span class="line">A-&gt;&gt;B: 你好</span><br><span class="line">Note left of A: 我在左边     // 注释方向，只有左右，没有上下</span><br><span class="line">Note right of B: 我在右边</span><br><span class="line">B--&gt;A: 很高兴认识你</span><br><span class="line">​</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**演示**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![img](https:////upload-images.jianshu.io/upload_images/6912209-784ce9bb7beb6672.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/393/format/webp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**代码详解**</span><br><span class="line"></span><br><span class="line">注：`A-&gt;&gt;B: 你好`   后面可以不写文字，但是一定要在最后加上`：`</span><br><span class="line"> Note left of A 代表注释在A的左边</span><br><span class="line"></span><br><span class="line">| 符号 | 含义     |</span><br><span class="line">| ---- | -------- |</span><br><span class="line">| `-`  | 实线     |</span><br><span class="line">| `&gt;`  | 实心箭头 |</span><br><span class="line">| `--` | 虚线     |</span><br><span class="line">| `&gt;&gt;` | 空心箭头 |</span><br><span class="line"></span><br><span class="line">**代码2**</span><br></pre></td></tr></table></figure><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">起床-&gt;吃饭: 稀饭油条</span><br><span class="line">吃饭-&gt;上班: 不要迟到了</span><br><span class="line">上班-&gt;午餐: 吃撑了</span><br><span class="line">上班-&gt;下班:</span><br><span class="line">Note right of 下班: 下班了</span><br><span class="line">下班-&gt;回家:</span><br><span class="line">Note right of 回家: 到家了</span><br><span class="line">回家--&gt;&gt;起床:</span><br><span class="line">Note left of 起床: 新的一天</span><br></pre></td></tr></table></figure></code></pre><p><strong>演示</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/6912209-f109a13fcf7e2ccb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/577/format/webp" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+gitpages</title>
      <link href="/2019/05/14/hexo-gitpages/"/>
      <url>/2019/05/14/hexo-gitpages/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-gitPages搭建个人博客"><a href="#hexo-gitPages搭建个人博客" class="headerlink" title="hexo+gitPages搭建个人博客"></a>hexo+gitPages搭建个人博客</h1><blockquote><p>本文参考</p><p><strong>hexo 博客搭建</strong></p><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官方文档</a></p><p><a href="https://juejin.im/post/5bebfe51e51d45332a456de0" target="_blank" rel="noopener">【持续更新】最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析</a></p><p><a href="https://blog.csdn.net/gsl9d1p04f6x2ts3c9/article/details/81024330" target="_blank" rel="noopener">手把手教你搭建自己的个人博客（图文教程）</a></p><p><a href="[https://www.chakid.com/2017/07/05/%E4%B8%80%E3%80%81%E6%90%AD%E5%BB%BA%E7%AF%87-%E4%BD%BF%E7%94%A8Github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%E2%80%94%E6%80%BB%E7%BB%93%E8%87%AA%E5%B7%B1%E7%88%AC%E8%BF%87%E7%9A%84%E5%9D%91/](https://www.chakid.com/2017/07/05/一、搭建篇-使用Github-hexo搭建个人博客教程—总结自己爬过的坑/">搭建篇 –使用Github+hexo搭建个人博客教程—总结自己爬过的坑</a>)</p><p><a href="https://zhuanlan.zhihu.com/p/26625249?utm_source=weibo&amp;utm_medium=social" target="_blank" rel="noopener">GitHub+Hexo 搭建个人网站详细教程</a></p><p><a href="https://xuanwo.io/2015/03/26/hexo-intor/" target="_blank" rel="noopener">史上最详细的Hexo博客搭建图文教程</a></p><p><strong>hexo优化</strong></p><p><a href="[https://www.chakid.com/2018/05/26/hexo%E5%8D%9A%E5%AE%A2%E6%94%B9%E8%A3%85%E5%92%8C%E4%B8%80%E4%BA%9B%E7%BB%86%E8%8A%82%E4%BC%98%E5%8C%96/](https://www.chakid.com/2018/05/26/hexo博客改装和一些细节优化/">hexo博客改装和一些细节优化</a>)</p><p><a href="https://www.cnblogs.com/xingyunblog/p/8681205.html" target="_blank" rel="noopener">Hexo NexT 博客后台管理指南</a></p><p><a href="https://blog.csdn.net/qq_36177977/article/details/83826453" target="_blank" rel="noopener">Hexo主题更改以及小功能的添加</a></p><p><strong>hexo-NexT主题配置</strong></p><p><a href="https://theme-next.org/archives/" target="_blank" rel="noopener">NexT官方展示</a></p><p><a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/README.md" target="_blank" rel="noopener">NexT官方中文文档ReadME</a></p><p><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">NexT源码</a></p><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT文档</a></p><p><a href="https://www.jianshu.com/p/3a05351a37dc" target="_blank" rel="noopener">Hexo的Next主题详细配置</a></p><p><a href="https://www.cnblogs.com/php-linux/p/8416122.html" target="_blank" rel="noopener">hexo的next主题个性化教程:打造炫酷网站</a></p><p><a href="https://blog.csdn.net/qq_33699981/article/details/72716951" target="_blank" rel="noopener">hexo的next主题个性化教程：打造炫酷网站</a></p><p><a href="https://inspurer.github.io/2018/11/11/hexo-next主题优化/" target="_blank" rel="noopener">【持续更新】hexo next主题优化手册</a></p><p><a href="https://inspurer.github.io/archives/" target="_blank" rel="noopener">可参考博客嘤</a></p><p><strong>yilia主题</strong></p><p><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia主题源码（GitHub）</a></p><p><a href="http://litten.me/" target="_blank" rel="noopener">yilia主题展示</a></p></blockquote><h2 id="hexo博客搭建"><a href="#hexo博客搭建" class="headerlink" title="hexo博客搭建"></a>hexo博客搭建</h2><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p><ul><li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a> (Should be at least nodejs 6.9)</li><li><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p><p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p><blockquote><p>Mac 用户</p><p>您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 <strong>Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install</strong> 安装命令行工具。</p></blockquote><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><ul><li>Windows：下载并安装 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a>.</li><li>Mac：使用 <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="noopener">Homebrew</a>, <a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> ：<code>brew install git</code>;或下载 <a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">安装程序</a> 安装。</li><li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li><li></li><li><p>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></p></li></ul><blockquote><p>Windows 用户</p><p>由于众所周知的原因，从上面的链接下载git for windows最好挂上一个代理，否则下载速度十分缓慢。也可以参考<a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">这个页面</a>，收录了存储于百度云的下载地址。</p></blockquote><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>安装 Node.js 的最佳方式是使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>。</p><p>cURL:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</span><br></pre></td></tr></table></figure><p>Wget:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</span><br></pre></td></tr></table></figure><p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvm install stable</span><br></pre></td></tr></table></figure><p>或者您也可以下载 <a href="http://nodejs.org/" target="_blank" rel="noopener">安装程序</a> 来安装。</p><blockquote><p>Windows 用户</p><p>对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选<strong>Add to PATH</strong>选项。<br>另外，您也可以使用<strong>Git Bash</strong>，这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用<strong>Git Bash</strong>来进行操作。</p></blockquote><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>在安装的时候我用的是<code>npm install hexo --save</code></p><h2 id="关于npm命令"><a href="#关于npm命令" class="headerlink" title="关于npm命令"></a>关于npm命令</h2><h3 id="回顾-npm-install-命令"><a href="#回顾-npm-install-命令" class="headerlink" title="回顾 npm install 命令"></a>回顾 npm install 命令</h3><p>最近在写Node程序的时候，突然对 npm install 的-save和-save-dev 这两个参数的使用比较混乱。其实博主在这之前对这两个参数的理解也是模糊的，各种查资料和实践后对它们之间的异同点略有理解。遂写下这篇文章避免自己忘记，同时也给node猿友一点指引。</p><p>我们在使用 npm install 安装模块的模块的时候 ，一般会使用下面这几种命令形式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install moduleName # 安装模块到项目目录下`</span><br><span class="line">npm install -g moduleName # -g 的意思是将模块安装到全局，具体安装到磁盘哪个位置，要看 npm config prefix 的位置。</span><br><span class="line">npm install -save moduleName # -save 的意思是将模块安装到项目目录下，并在package文件的dependencies节点写入依赖。</span><br><span class="line">npm install -save-dev moduleName # -save-dev 的意思是将模块安装到项目目录下，并在package文件的devDependencies节点写入依赖。</span><br></pre></td></tr></table></figure><p>那么问题来了，在项目中我们应该使用四个命令中的哪个呢？这个就要视情况而定了。下面对这四个命令进行对比，看完后你就不再这么问了。</p><h3 id="npm-install-moduleName-命令"><a href="#npm-install-moduleName-命令" class="headerlink" title="npm install moduleName 命令"></a>npm install moduleName 命令</h3><ol><li>安装模块到项目node_modules目录下。</li><li>不会将模块依赖写入devDependencies或dependencies 节点。</li><li>运行 npm install 初始化项目时不会下载模块。</li></ol><h3 id="npm-install-g-moduleName-命令"><a href="#npm-install-g-moduleName-命令" class="headerlink" title="npm install -g moduleName 命令"></a>npm install -g moduleName 命令</h3><ol><li>安装模块到全局，不会在项目node_modules目录中保存模块包。</li><li>不会将模块依赖写入devDependencies或dependencies 节点。</li><li>运行 npm install 初始化项目时不会下载模块。</li></ol><h3 id="npm-install-save-moduleName-命令"><a href="#npm-install-save-moduleName-命令" class="headerlink" title="npm install -save moduleName 命令"></a>npm install -save moduleName 命令</h3><ol><li>安装模块到项目node_modules目录下。</li><li>会将模块依赖写入dependencies 节点。</li><li>运行 npm install 初始化项目时，会将模块下载到项目目录下。</li><li>运行npm install –production或者注明NODE_ENV变量值为production时，<strong>会</strong>自动下载模块到node_modules目录中。</li></ol><h3 id="npm-install-save-dev-moduleName-命令"><a href="#npm-install-save-dev-moduleName-命令" class="headerlink" title="npm install -save-dev moduleName 命令"></a>npm install -save-dev moduleName 命令</h3><ol><li>安装模块到项目node_modules目录下。</li><li>会将模块依赖写入devDependencies 节点。</li><li>运行 npm install 初始化项目时，会将模块下载到项目目录下。</li><li>运行npm install –production或者注明NODE_ENV变量值为production时，<strong>不会</strong>自动下载模块到node_modules目录中。</li></ol><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><p>&lt;folder&gt; 为hexo安装目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">配置</a> 信息，您可以在此配置大部分的参数。</p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>应用程序的信息。<a href="https://ejs.co/" target="_blank" rel="noopener">EJS</a>, <a href="http://learnboost.github.io/stylus/" target="_blank" rel="noopener">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a> renderer 已默认安装，您可以自由移除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package.json&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;hexo&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;hexo&quot;: &quot;^3.8.0&quot;,</span><br><span class="line">    &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;,</span><br><span class="line">    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</span><br><span class="line">    &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;,</span><br><span class="line">    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;,</span><br><span class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;,</span><br><span class="line">    &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;,</span><br><span class="line">    &quot;hexo-server&quot;: &quot;^0.3.3&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h3><p><a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p><a href="https://hexo.io/zh-cn/docs/themes" target="_blank" rel="noopener">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>您可以在 <code>_config.yml</code> 中修改大部分的配置。</p><iframe src="https://www.youtube.com/embed/A0Enyn70jKU" frameborder="0" allowfullscreen style="box-sizing: inherit; margin: 1em 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 15px; vertical-align: baseline;"></iframe><h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>title</code></td><td style="text-align:left">网站标题</td></tr><tr><td style="text-align:left"><code>subtitle</code></td><td style="text-align:left">网站副标题</td></tr><tr><td style="text-align:left"><code>description</code></td><td style="text-align:left">网站描述</td></tr><tr><td style="text-align:left"><code>author</code></td><td style="text-align:left">您的名字</td></tr><tr><td style="text-align:left"><code>language</code></td><td style="text-align:left">网站使用的语言</td></tr><tr><td style="text-align:left"><code>timezone</code></td><td style="text-align:left">网站时区。Hexo 默认使用您电脑的时区。<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="noopener">时区列表</a>。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td></tr></tbody></table><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left"><code>url</code></td><td style="text-align:left">网址</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>root</code></td><td style="text-align:left">网站根目录</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>permalink</code></td><td style="text-align:left">文章的 <a href="https://hexo.io/zh-cn/docs/permalinks" target="_blank" rel="noopener">永久链接</a> 格式</td><td style="text-align:left"><code>:year/:month/:day/:title/</code></td></tr><tr><td style="text-align:left"><code>permalink_defaults</code></td><td style="text-align:left">永久链接中各部分的默认值</td></tr></tbody></table><blockquote><p>网站存放在子目录</p><p>如果您的网站存放在子目录中，例如 <code>http://yoursite.com/blog</code>，则请将您的 <code>url</code>设为 <code>http://yoursite.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p></blockquote><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left"><code>source_dir</code></td><td style="text-align:left">资源文件夹，这个文件夹用来存放内容。</td><td style="text-align:left"><code>source</code></td></tr><tr><td style="text-align:left"><code>public_dir</code></td><td style="text-align:left">公共文件夹，这个文件夹用于存放生成的站点文件。</td><td style="text-align:left"><code>public</code></td></tr><tr><td style="text-align:left"><code>tag_dir</code></td><td style="text-align:left">标签文件夹</td><td style="text-align:left"><code>tags</code></td></tr><tr><td style="text-align:left"><code>archive_dir</code></td><td style="text-align:left">归档文件夹</td><td style="text-align:left"><code>archives</code></td></tr><tr><td style="text-align:left"><code>category_dir</code></td><td style="text-align:left">分类文件夹</td><td style="text-align:left"><code>categories</code></td></tr><tr><td style="text-align:left"><code>code_dir</code></td><td style="text-align:left">Include code 文件夹</td><td style="text-align:left"><code>downloads/code</code></td></tr><tr><td style="text-align:left"><code>i18n_dir</code></td><td style="text-align:left">国际化（i18n）文件夹</td><td style="text-align:left"><code>:lang</code></td></tr><tr><td style="text-align:left"><code>skip_render</code></td><td style="text-align:left">跳过指定文件的渲染，您可使用 <a href="https://github.com/isaacs/node-glob" target="_blank" rel="noopener">glob 表达式</a>来匹配路径。</td></tr></tbody></table><blockquote><p>提示</p><p>如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。</p></blockquote><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left"><code>new_post_name</code></td><td style="text-align:left">新文章的文件名称</td><td style="text-align:left">:title.md</td></tr><tr><td style="text-align:left"><code>default_layout</code></td><td style="text-align:left">预设布局</td><td style="text-align:left">post</td></tr><tr><td style="text-align:left"><code>auto_spacing</code></td><td style="text-align:left">在中文和英文之间加入空格</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left"><code>titlecase</code></td><td style="text-align:left">把标题转换为 title case</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left"><code>external_link</code></td><td style="text-align:left">在新标签中打开链接</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left"><code>filename_case</code></td><td style="text-align:left">把文件名称转换为 (1) 小写或 (2) 大写</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left"><code>render_drafts</code></td><td style="text-align:left">显示草稿</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left"><code>post_asset_folder</code></td><td style="text-align:left">启动 <a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">Asset 文件夹</a></td><td style="text-align:left">false</td></tr><tr><td style="text-align:left"><code>relative_link</code></td><td style="text-align:left">把链接改为与根目录的相对位址</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left"><code>future</code></td><td style="text-align:left">显示未来的文章</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left"><code>highlight</code></td><td style="text-align:left">代码块的设置</td></tr></tbody></table><blockquote><p>相对地址</p><p>默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为<code>example.com</code>,您有一篇文章名为<code>hello</code>，那么绝对链接可能像这样：<code>http://example.com/hello.html</code>，它是<strong>绝对</strong>于域名的。相对链接像这样：<code>/hello.html</code>，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</p></blockquote><h3 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类 &amp; 标签"></a>分类 &amp; 标签</h3><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left"><code>default_category</code></td><td style="text-align:left">默认分类</td><td style="text-align:left"><code>uncategorized</code></td></tr><tr><td style="text-align:left"><code>category_map</code></td><td style="text-align:left">分类别名</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>tag_map</code></td><td style="text-align:left">标签别名</td></tr></tbody></table><h3 id="日期-时间格式"><a href="#日期-时间格式" class="headerlink" title="日期 / 时间格式"></a>日期 / 时间格式</h3><p>Hexo 使用 <a href="http://momentjs.com/" target="_blank" rel="noopener">Moment.js</a> 来解析和显示时间。</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left"><code>date_format</code></td><td style="text-align:left">日期格式</td><td style="text-align:left"><code>YYYY-MM-DD</code></td></tr><tr><td style="text-align:left"><code>time_format</code></td><td style="text-align:left">时间格式</td><td style="text-align:left"><code>H:mm:ss</code></td></tr></tbody></table><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left"><code>per_page</code></td><td style="text-align:left">每页显示的文章量 (0 = 关闭分页功能)</td><td style="text-align:left"><code>10</code></td></tr><tr><td style="text-align:left"><code>pagination_dir</code></td><td style="text-align:left">分页目录</td><td style="text-align:left"><code>page</code></td></tr></tbody></table><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>theme</code></td><td style="text-align:left">当前主题名称。值为<code>false</code>时禁用主题</td></tr><tr><td style="text-align:left"><code>deploy</code></td><td style="text-align:left">部署部分的设置</td></tr></tbody></table><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>当执行完<code>npm install</code>之后即可通过<code>hexo s</code>或者<code>hexo serve</code>通过本地访问hexo博客。</p><p>此时博客已搭建在本地了。</p><h5 id="方案一：GithubPages"><a href="#方案一：GithubPages" class="headerlink" title="方案一：GithubPages"></a>方案一：GithubPages</h5><ol><li><p>创建<a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com" target="_blank" rel="noopener">Github</a>账号</p></li><li><p>创建仓库， 仓库名为：&lt;Github账号名称&gt;.github.io</p></li><li><p>将本地Hexo博客推送到GithubPages</p><p>3.1. 安装<code>hexo-deployer-git</code>插件。在命令行（即Git Bash）运行以下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>3.2. 添加SSH key。</p><ul><li><p>创建一个 SSH key 。在命令行（即Git Bash）输入以下命令， 回车三下即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure></li><li><p>添加到 github。 复制密钥文件内容（路径形如<code>C:\Users\Administrator\.ssh\id_rsa.pub</code>），粘贴到<a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fsettings%2Fkeys" target="_blank" rel="noopener">New SSH Key</a>即可。</p></li><li><p>测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">$ yes</span><br></pre></td></tr></table></figure></li></ul><p>3.3. 修改<code>_config.yml</code>（在站点目录下）。文件末尾修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>注意：上面仓库地址写ssh地址，不写http地址。</p><p>3.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回<code>INFO Deploy done: git</code>即成功推送：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></li><li><p>等待1分钟左右，浏览器访问网址： <code>https://&lt;Github账号名称&gt;.github.io</code></p></li></ol><p>至此，您的Hexo博客已经搭建在GithubPages, 域名为<code>https://&lt;Github账号名称&gt;.github.io</code>。</p><h5 id="方案二：GithubPages-域名"><a href="#方案二：GithubPages-域名" class="headerlink" title="方案二：GithubPages + 域名"></a>方案二：GithubPages + 域名</h5><p>在方案一的基础上，添加自定义域名（您购买的域名）。</p><ol><li><p>域名解析。</p><p>类型选择为 CNAME；</p><p>主机记录即域名前缀，填写为www；</p><p>记录值填写为自定义域名；</p><p>解析线路，TTL 默认即可。</p></li><li><p>仓库设置。</p><p>2.1. 打开博客仓库设置：<code>https://github.com/&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io/settings</code></p><p>2.2. 在Custom domain下，填写自定义域名，点击<code>save</code>。</p><p>2.3. 在站点目录的<code>source</code>文件夹下，创建并打开<code>CNAME.txt</code>，写入你的域名（如<code>www.simon96.online</code>），保存，并重命名为<code>CNAME</code>。</p></li><li><p>等待10分钟左右。</p><p>浏览器访问自定义域名。</p><p>至此，您的Hexo博客已经解析到自定义域名，<code>https://&lt;Github账号名称&gt;.github.io</code>依然可用。</p><p>（可在github仓库中设置跳转至个人域名）</p></li></ol><h6 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a><strong>绑定域名</strong></h6><p>虽然在Internet上可以访问我们的网站，但是网址是GitHub提供的:<a href="https://link.zhihu.com/?target=http%3A//xxxx.github.io" target="_blank" rel="noopener">http://xxxx.github.io</a> (知乎排版可能会出现”http://“字样) 而我们想使用我们自己的个性化域名，这就需要绑定我们自己的域名。这里演示的是在阿里云万网的域名绑定，在国内主流的域名代理厂商也就阿里云和腾讯云。登录到阿里云，进入管理控制台的域名列表，找到你的个性化域名，进入解析</p><p><img src="https://pic3.zhimg.com/80/v2-47323ad4490e206aef93a3d68f0670b6_hd.jpg" alt="img"></p><p>然后添加解析</p><p><img src="https://pic3.zhimg.com/80/v2-40222b3a295bb692aac22829a8ec3be2_hd.jpg" alt="img"></p><p>包括添加三条解析记录，192.30.252.153是GitHub的地址，你也可以ping你的 <a href="https://link.zhihu.com/?target=http%3A//xxxx.github.io" target="_blank" rel="noopener">http://xxxx.github.io</a> 的ip地址，填入进去。第三个记录类型是CNAME，CNAME的记录值是：你的用户名.<a href="https://link.zhihu.com/?target=http%3A//github.io" target="_blank" rel="noopener">http://github.io</a> 这里千万别弄错了。第二步，登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名</p><p><img src="https://pic4.zhimg.com/80/v2-85ba6dda906f22dea4c03df2b47d994b_hd.jpg" alt="img"></p><p>点击save保存。第三步，进入本地博客文件夹 ，进入blog/source目录下，创建一个记事本文件，输入你的域名，对，只要写进你自己的域名即可。如果带有www，那么以后访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。所以建议，不要带有www。这里我还是写了www(不建议带有www):</p><p><img src="https://pic1.zhimg.com/80/v2-79abfff91af3f520e24cb91acf6aa994_hd.jpg" alt="img"></p><p>保存，命名为CNAME ，注意保存成<strong>所有文件</strong>而不是<strong>txt文件</strong>。</p><p>完成这三步，进入blog目录中，按住shift键右击打开命令行，依次输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这时候打开浏览器在地址栏输入你的个性化域名将会直接进入你自己搭建的网站。</p><h5 id="方案三：GithubPages-CodingPages-域名"><a href="#方案三：GithubPages-CodingPages-域名" class="headerlink" title="方案三：GithubPages + CodingPages + 域名"></a>方案三：GithubPages + CodingPages + 域名</h5><p>GithubPages 在国内较慢，百度不收录，而CodingPages 在国外较快。所以在方案二的基础上，添加CodingPages 。</p><ol><li><p>创建<a href="https://link.juejin.im?target=https%3A%2F%2Fcoding.net%2F" target="_blank" rel="noopener">Coding</a>账号</p></li><li><p>创建仓库， 仓库名为：&lt;Coding账号名称&gt;</p></li><li><p>进入项目里『代码』页面，点击『一键开启静态 Pages』，稍等片刻CodingPages即可部署成功。</p></li><li><p>将本地Hexo博客推送到CodingPages</p><p>4.1. 鉴于创建GithubPages 时，已经生成过公钥。可直接复制密钥文件内容（路径形如<code>C:\Users\Administrator\.ssh\id_rsa.pub</code>）， 粘贴到<a href="https://link.juejin.im?target=https%3A%2F%2Fdev.tencent.com%2Fuser%2Faccount%2Fsetting%2Fkeys" target="_blank" rel="noopener">新增公钥</a>。</p><p>4.2. 测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@git.coding.net</span><br><span class="line">$ yes</span><br></pre></td></tr></table></figure><p>4.3. 修改<code>_config.yml</code>（在存放Hexo初始化文件的路径下）。文件末尾修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">- type: git</span><br><span class="line">  repo: git@git.dev.tencent.com:&lt;Coding账号名称&gt;/&lt;Coding账号名称&gt;.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>4.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回<code>INFO Deploy done: git</code>即成功推送：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></li><li><p>域名解析</p><ol><li><p>添加 CNAME 记录指向 &lt;Coding账号名称&gt;.coding.me</p><p>类型选择为 CNAME；</p><p>主机记录即域名前缀，填写为www；</p><p>记录值填写为自定义域名；</p><p>解析线路，TTL 默认即可。</p></li><li><p>添加 两条A 记录指向 192.30.252.153和192.30.252.154</p><p>类型选择为 A；</p><p>主机记录即域名前缀，填写为@；</p><p>记录值填写为192.30.252.153和192.30.252.154；</p><p>解析线路，境外或谷歌。</p></li><li><p>在『Pages 服务』设置页（<code>https://dev.tencent.com/u/&lt;Coding账号名称&gt;/p/&lt;Coding账号名称&gt;/git/pages/settings</code>）中绑定自定义域名。</p></li></ol></li></ol><p>至此，您的Hexo博客已经解析到自定义域名，<code>https://&lt;Github账号名称&gt;.github.io</code>和<code>https://&lt;Coding账号名称&gt;.coding.me</code>依然可用。</p><h5 id="方案四：云服务器-域名"><a href="#方案四：云服务器-域名" class="headerlink" title="方案四：云服务器 + 域名"></a>方案四：云服务器 + 域名</h5><p>该方案需要先购买云服务器和域名。</p><ol><li><p>在云服务器安装Git 和 Nginx。(Git 用于版本管理和部署，Nginx 用于静态博客托管。)</p><p>登陆root用户，运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y update</span><br><span class="line">$ yum install -y git nginx</span><br></pre></td></tr></table></figure></li><li><p>Nginx配置</p><p>2.1. 创建文件目录(用于博客站点文件存放)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line">mkdir hexo</span><br><span class="line">chmod 775 -R /usr/local/hexo/</span><br></pre></td></tr></table></figure><p>2.2. 添加 index.html(用于检测配置 Nginx 是否成功)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/hexo/index.html</span><br></pre></td></tr></table></figure><p>添加以下代码，并保存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;p&gt;Nginx running&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>2.3. 配置 Nginx 服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>修改server_name和root：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">      listen       80 default_server;</span><br><span class="line">      listen       [::]:80 default_server;</span><br><span class="line">      server_name  www.baidu.com; # 填个人域名      </span><br><span class="line">      root         /usr/local/hexo/;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>2.4. 启动nginx服务；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx start</span><br></pre></td></tr></table></figure><p>2.5. 云服务器浏览器访问个人域名或IP，若跳转index.html，则配置完成，否则检查以上配置。</p></li><li><p>git配置</p><p>3.1. 创建文件目录, 用于私人 Git 仓库搭建, 并更改目录读写权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line">mkdir hexoRepo</span><br><span class="line">chmod 775 -R /usr/local/hexoRepo/</span><br></pre></td></tr></table></figure><p>3.2. Git 初始化裸库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd hexoRepo/</span><br><span class="line">git init --bare hexo.git</span><br></pre></td></tr></table></figure><p>3.3. 创建 Git 钩子(hook)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/hexoRepo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>3.4. 输入以下信息，用于指定 Git 的源代码 和 Git 配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">git --work-tree=/usr/local/hexo --git-dir=/usr/local/hexoRepo/hexo.git checkout -f</span><br></pre></td></tr></table></figure><p>3.5. 保存并退出后, 给该文件添加可执行权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /usr/local/hexoRepo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure></li><li><p>本地博客推送到云服务器</p><p>4.1. 安装<code>hexo-deployer-git</code>插件。在命令行（即Git Bash）运行以下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>4.2. 添加SSH key。</p><ul><li><p>创建一个 SSH key 。在命令行（即Git Bash）输入以下命令， 回车三下即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure></li><li><p>添加到 github。 复制密钥文件内容（路径形如<code>C:\Users\Administrator\.ssh\id_rsa.pub</code>），粘贴到<a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fsettings%2Fkeys" target="_blank" rel="noopener">New SSH Key</a>即可。</p></li><li><p>测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">$ yes</span><br></pre></td></tr></table></figure></li></ul><p>4.3. 修改<code>_config.yml</code>（在站点目录下）。文件末尾修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: root@xxx.xxx.xxx.xxx:/usr/local/hexoRepo/hexo  //用户名@域名或 IP 地址:/usr/local/hexoRepo/hexo</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>注意：上面仓库地址写ssh地址，不写http地址。</p><p>4.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回<code>INFO Deploy done: git</code>即成功推送：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></li><li><p>等待1分钟左右，浏览器访问个人域名。</p><p>至此，您的Hexo博客已经搭建在云服务器, 域名为个人域名。</p></li></ol><h2 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hexo new "postName" #新建文章</span><br><span class="line">hexo new page "pageName" #新建页面</span><br><span class="line">hexo clean #清除部署緩存</span><br><span class="line">hexo n == hexo new #新建文章</span><br><span class="line">hexo g == hexo generate #生成静态页面至public目录</span><br><span class="line">hexo s == hexo server #开启预览访问端口（默认端口4000，可在浏览器输入localhost:4000预览）</span><br><span class="line">hexo d == hexo deploy #将.deploy目录部署到GitHub</span><br><span class="line">hexo g -d #生成加部署</span><br><span class="line">hexo g -s #生成加预览</span><br></pre></td></tr></table></figure><p><strong>注：</strong>当本地预览和远程部署的浏览结果不同的时候，不妨使用<code>hexo clean &amp;&amp; hexo g -d</code>试试。</p><h4 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h4><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br><span class="line"></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>[layout]可以为以下三种：</li></ul><table><thead><tr><th>参数名</th><th>功能</th><th>文章路径</th></tr></thead><tbody><tr><td>post</td><td>新建博文</td><td>source/_posts</td></tr><tr><td>page</td><td>新建页面（如404，分类）</td><td>source</td></tr><tr><td>draft</td><td>草稿</td><td>source/_drafts</td></tr></tbody></table><p>草稿可通过一下命令发布：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;title&gt;</span><br><span class="line"></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li><p>title注意：</p><p>不是博文标题，</p><p>是博文markdown文件的名字，</p><p>也是博文链接的后缀（如<code>https://www.simon96.online/2018/10/12/hexo-tutorial/</code>中的hexo-tutorial）</p></li></ul><h4 id="文章模版"><a href="#文章模版" class="headerlink" title="文章模版"></a>文章模版</h4><ul><li><p>创建模版</p><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p></li></ul><blockquote><p>$ hexo new blog “simon”</p></blockquote><p>​    在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>blog.md</code>，并根据其内容建立文章。</p><ul><li><p>修改参数</p><p>以下是您可以在模版中使用的变量：</p></li></ul><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td>layout</td><td>布局</td></tr><tr><td>title</td><td>标题</td></tr><tr><td>date</td><td>文件建立日期</td></tr></tbody></table><h4 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h4><p>就是博文最上方以 <code>---</code> 分隔的那部分。</p><p>默认可以使用的Front-matter：</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td><td></td></tr><tr><td><code>title</code></td><td>标题</td><td></td></tr><tr><td><code>date</code></td><td>建立日期</td><td>文件建立日期</td></tr><tr><td><code>updated</code></td><td>更新日期</td><td>文件更新日期</td></tr><tr><td><code>comments</code></td><td>开启文章的评论功能</td><td>true</td></tr><tr><td><code>tags</code></td><td>标签（不适用于分页）</td><td></td></tr><tr><td><code>categories</code></td><td>分类（不适用于分页）</td><td></td></tr><tr><td><code>permalink</code></td><td>覆盖文章网址</td></tr></tbody></table><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p><a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">hexo主题wiki</a></p><p>可以在<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">此处</a>寻找自己喜欢的主题下载所有的主题文件，保存到Hexo目录下的<code>themes</code>文件夹下。然后在<code>_config.yml</code>文件中修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: http://hexo.io/plugins/</span><br><span class="line">## Themes: http://hexo.io/themes/</span><br><span class="line">theme: landscape //themes文件夹中对应文件夹的名称</span><br></pre></td></tr></table></figure><p>然后先执行<code>hexo clean</code>，然后重新<code>hexo g</code>，并且<code>hexo d</code>，很快就能看到新主题的效果了~</p><h2 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h2><ul><li><p><strong>设置「RSS」</strong></p></li><li><p><strong>添加「标签」页面</strong></p></li><li><p><strong>添加「分类」页面</strong></p></li><li><p><strong>设置「字体」</strong></p></li><li><p><strong>设置「代码高亮主题」</strong></p></li><li><p><strong>侧边栏社交链接</strong></p><p>问题：图标哪里找？</p><p>解决：<a href="https://link.juejin.im?target=https%3A%2F%2Ffontawesome.com%2Ficons%3Fd%3Dgallery" target="_blank" rel="noopener">Font Awesome</a></p></li><li><p><strong>开启打赏功能</strong></p><p>问题：微信支付宝二维码不美观，规格不一。</p><p>解决：<a href="https://link.juejin.im?target=https%3A%2F%2Fcli.im%2Fweixin" target="_blank" rel="noopener">在线生成二维码</a></p></li><li><p><strong>设置友情链接</strong></p></li><li><p><strong>添加个人联系方式</strong></p></li><li><p><strong>腾讯公益404页面</strong></p></li><li><p><strong>站点建立时间</strong></p></li><li><p><strong>订阅微信公众号</strong></p></li><li><p><strong>设置「动画效果」</strong></p><p>问题：慢，需要等待 JavaScript 脚本完全加载完毕后才会显示内容。 解决：将主题配置文件<code>_config.yml</code>中，use_motion字段的值设为 <code>false</code> 来关闭动画。</p></li><li><p><strong>设置「背景动画」</strong></p></li><li><p><strong>添加背景图</strong></p></li><li><p><strong>修改Logo字体</strong></p></li><li><p><strong>修改内容区域的宽度</strong></p></li><li><p><strong>网站标题栏背景颜色</strong></p></li><li><p><strong>自定义鼠标样式</strong></p></li><li><p><strong>文章加密访问</strong></p></li><li><p><strong>实现点击出现桃心效果</strong></p></li><li><p><strong>静态资源压缩（博文压缩）</strong></p></li><li><p><strong>修改访问url路径</strong></p></li><li><p><strong>博文置顶</strong></p></li><li><p><strong>在右上角或左上角实现fork me on github</strong></p></li><li><p><strong>主页文章添加边框阴影效果</strong></p></li><li><p><strong>显示当前浏览记录</strong></p></li><li><p><strong>常见分类页</strong></p></li><li><p><strong>加入广告</strong></p></li><li><p><strong>添加萌萌哒</strong></p></li><li><p><strong>搜索功能</strong></p></li><li><p><strong>网易云外链播放器</strong></p></li><li><p><strong><a href="http://www.iamlj.com/2016/08/add-special-effect-harlem-shake-for-hexo/" target="_blank" rel="noopener">花里胡哨的玩意儿</a></strong></p></li><li><p><strong>修改作者头像并旋转</strong></p></li><li><p><strong>修改<code></code>代码块自定义样式</strong></p></li><li><p><strong>点击爆炸效果</strong></p></li><li><p><strong>添加萌妹子动图</strong></p></li><li><p><strong>侧栏设置</strong></p></li><li><p><strong>透明背景设置</strong></p></li><li><p><strong>添加阅读全文</strong></p></li><li><p><strong>设置网站缩略图标</strong></p></li><li><p><strong>添加站点访问计数</strong></p></li></ul><p>前几个可参考<a href="http://theme-next.iissnan.com/theme-settings.html#use-bg-animation" target="_blank" rel="noopener">next官方文档配置</a></p><p>（以下用到外部工具）</p><p>评论系统</p><p>数据统计与分析</p><p>内容分享服务</p><p><a href="https://www.jianshu.com/p/44e211829447" target="_blank" rel="noopener">文章加密访问</a></p><p><a href="https://github.com/MikeCoder/hexo-blog-encrypt" target="_blank" rel="noopener">hexo-blog-encrypt</a></p><h2 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h2><p><a href="https://www.jianshu.com/p/0d54a590b81a" target="_blank" rel="noopener">Hexo NexT 主题SEO优化指南</a></p><p>seo这东西是使自己的文章能被百度、谷歌搜录，能被搜索到。</p><p>因为暂时不想被搜到/doge，所有暂不配置</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/05/13/hello-world/"/>
      <url>/2019/05/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
